/*
 * Generated by gdbus-codegen-glibmm 2.42.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#include "/home/parallels/clion/linux-build/generated/many-types_proxy.h"

#include <utility>

template<class T>
inline T specialGetter(Glib::Variant<T> variant)
{
    return variant.get();
}

template<>
inline std::string specialGetter(Glib::Variant<std::string> variant)
{
    // String is not guaranteed to be null-terminated, so don't use ::get()
    gsize n_elem;
    gsize elem_size = sizeof(char);
    char* data = (char*)g_variant_get_fixed_array(variant.gobj(), &n_elem, elem_size);

    return std::string(data, n_elem);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringVariantDict(
    const std::map<Glib::ustring,Glib::VariantBase> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringVariantDict_pack(
        arg_Param1);

    m_proxy->call("TestStringVariantDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringVariantDict_finish(
    std::map<Glib::ustring,Glib::VariantBase> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<Glib::ustring,Glib::VariantBase>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::map<Glib::ustring,Glib::VariantBase>
org::gdbus::codegen::glibmm::TestProxy::TestStringVariantDict_sync(
    const std::map<Glib::ustring,Glib::VariantBase> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringVariantDict_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStringVariantDict", cancellable, base, timeout_msec);

    std::map<Glib::ustring,Glib::VariantBase> out_Param2;
    Glib::Variant<std::map<Glib::ustring,Glib::VariantBase>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringStringDict(
    const std::map<Glib::ustring,Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringStringDict_pack(
        arg_Param1);

    m_proxy->call("TestStringStringDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringStringDict_finish(
    std::map<Glib::ustring,Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::map<Glib::ustring,Glib::ustring>
org::gdbus::codegen::glibmm::TestProxy::TestStringStringDict_sync(
    const std::map<Glib::ustring,Glib::ustring> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringStringDict_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStringStringDict", cancellable, base, timeout_msec);

    std::map<Glib::ustring,Glib::ustring> out_Param2;
    Glib::Variant<std::map<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestUintIntDict(
    const std::map<guint32,gint32> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUintIntDict_pack(
        arg_Param1);

    m_proxy->call("TestUintIntDict", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestUintIntDict_finish(
    std::map<guint32,gint32> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::map<guint32,gint32>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::map<guint32,gint32>
org::gdbus::codegen::glibmm::TestProxy::TestUintIntDict_sync(
    const std::map<guint32,gint32> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUintIntDict_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestUintIntDict", cancellable, base, timeout_msec);

    std::map<guint32,gint32> out_Param2;
    Glib::Variant<std::map<guint32,gint32>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestVariant(
    const Glib::VariantBase & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestVariant_pack(
        arg_Param1);

    m_proxy->call("TestVariant", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestVariant_finish(
    Glib::VariantBase &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 0, "v", &output);
    out_Param2 = Glib::VariantBase(output);
}

Glib::VariantBase
org::gdbus::codegen::glibmm::TestProxy::TestVariant_sync(
    const Glib::VariantBase & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestVariant_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestVariant", cancellable, base, timeout_msec);

    Glib::VariantBase out_Param2;
    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 0, "v", &output);
    out_Param2 = Glib::VariantBase(output);
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestVariant2(
    const Glib::ustring & arg_Param1,
    const Glib::VariantBase & arg_Param2,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestVariant2_pack(
        arg_Param1,
        arg_Param2);

    m_proxy->call("TestVariant2", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestVariant2_finish(
    Glib::ustring &out_Param3,
    Glib::VariantBase &out_Param4,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::ustring> out_Param3_v;
    wrapped.get_child(out_Param3_v, 0);
    out_Param3 = out_Param3_v.get();

    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 1, "v", &output);
    out_Param4 = Glib::VariantBase(output);
}

std::tuple<Glib::ustring, Glib::VariantBase>
org::gdbus::codegen::glibmm::TestProxy::TestVariant2_sync(
    const Glib::ustring & arg_Param1,
    const Glib::VariantBase & arg_Param2,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestVariant2_pack(
        arg_Param1,
        arg_Param2);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestVariant2", cancellable, base, timeout_msec);

    Glib::ustring out_Param3;
    Glib::Variant<Glib::ustring> out_Param3_v;
    wrapped.get_child(out_Param3_v, 0);
    out_Param3 = out_Param3_v.get();

    Glib::VariantBase out_Param4;
    GVariant *output;
    g_variant_get_child(wrapped.gobj(), 1, "v", &output);
    out_Param4 = Glib::VariantBase(output);

    return std::make_tuple(
        std::move(out_Param3),
        std::move(out_Param4)
    );
}

void org::gdbus::codegen::glibmm::TestProxy::TestByteStringArray(
    const std::vector<std::string> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteStringArray_pack(
        arg_Param1);

    m_proxy->call("TestByteStringArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestByteStringArray_finish(
    std::vector<std::string> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::string>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<std::string>
org::gdbus::codegen::glibmm::TestProxy::TestByteStringArray_sync(
    const std::vector<std::string> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteStringArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestByteStringArray", cancellable, base, timeout_msec);

    std::vector<std::string> out_Param2;
    Glib::Variant<std::vector<std::string>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestObjectPathArray(
    const std::vector<Glib::DBusObjectPathString> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPathArray_pack(
        arg_Param1);

    m_proxy->call("TestObjectPathArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestObjectPathArray_finish(
    std::vector<Glib::DBusObjectPathString> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<Glib::DBusObjectPathString>
org::gdbus::codegen::glibmm::TestProxy::TestObjectPathArray_sync(
    const std::vector<Glib::DBusObjectPathString> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPathArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestObjectPathArray", cancellable, base, timeout_msec);

    std::vector<Glib::DBusObjectPathString> out_Param2;
    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringArray(
    const std::vector<Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringArray_pack(
        arg_Param1);

    m_proxy->call("TestStringArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStringArray_finish(
    std::vector<Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<Glib::ustring>
org::gdbus::codegen::glibmm::TestProxy::TestStringArray_sync(
    const std::vector<Glib::ustring> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStringArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStringArray", cancellable, base, timeout_msec);

    std::vector<Glib::ustring> out_Param2;
    Glib::Variant<std::vector<Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestByteString(
    const std::string & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteString_pack(
        arg_Param1);

    m_proxy->call("TestByteString", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestByteString_finish(
    std::string &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::string> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::string
org::gdbus::codegen::glibmm::TestProxy::TestByteString_sync(
    const std::string & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestByteString_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestByteString", cancellable, base, timeout_msec);

    std::string out_Param2;
    Glib::Variant<std::string> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestStruct(
    const std::tuple<Glib::ustring,Glib::ustring> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStruct_pack(
        arg_Param1);

    m_proxy->call("TestStruct", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStruct_finish(
    std::tuple<Glib::ustring,Glib::ustring> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::tuple<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::tuple<Glib::ustring,Glib::ustring>
org::gdbus::codegen::glibmm::TestProxy::TestStruct_sync(
    const std::tuple<Glib::ustring,Glib::ustring> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStruct_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStruct", cancellable, base, timeout_msec);

    std::tuple<Glib::ustring,Glib::ustring> out_Param2;
    Glib::Variant<std::tuple<Glib::ustring,Glib::ustring>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestStructArray(
    const std::vector<std::tuple<guint32,Glib::ustring,gint32>> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStructArray_pack(
        arg_Param1);

    m_proxy->call("TestStructArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestStructArray_finish(
    std::vector<std::tuple<guint32,Glib::ustring,gint32>> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::tuple<guint32,Glib::ustring,gint32>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<std::tuple<guint32,Glib::ustring,gint32>>
org::gdbus::codegen::glibmm::TestProxy::TestStructArray_sync(
    const std::vector<std::tuple<guint32,Glib::ustring,gint32>> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestStructArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestStructArray", cancellable, base, timeout_msec);

    std::vector<std::tuple<guint32,Glib::ustring,gint32>> out_Param2;
    Glib::Variant<std::vector<std::tuple<guint32,Glib::ustring,gint32>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestDictStructArray(
    const std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDictStructArray_pack(
        arg_Param1);

    m_proxy->call("TestDictStructArray", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestDictStructArray_finish(
    std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>>
org::gdbus::codegen::glibmm::TestProxy::TestDictStructArray_sync(
    const std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDictStructArray_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestDictStructArray", cancellable, base, timeout_msec);

    std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>> out_Param2;
    Glib::Variant<std::vector<std::tuple<Glib::ustring,std::map<Glib::ustring,Glib::VariantBase>>>> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestSignature(
    const Glib::DBusSignatureString & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestSignature_pack(
        arg_Param1);

    m_proxy->call("TestSignature", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestSignature_finish(
    Glib::DBusSignatureString &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::DBusSignatureString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

Glib::DBusSignatureString
org::gdbus::codegen::glibmm::TestProxy::TestSignature_sync(
    const Glib::DBusSignatureString & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestSignature_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestSignature", cancellable, base, timeout_msec);

    Glib::DBusSignatureString out_Param2;
    Glib::Variant<Glib::DBusSignatureString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestObjectPath(
    const Glib::DBusObjectPathString & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPath_pack(
        arg_Param1);

    m_proxy->call("TestObjectPath", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestObjectPath_finish(
    Glib::DBusObjectPathString &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::DBusObjectPathString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

Glib::DBusObjectPathString
org::gdbus::codegen::glibmm::TestProxy::TestObjectPath_sync(
    const Glib::DBusObjectPathString & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestObjectPath_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestObjectPath", cancellable, base, timeout_msec);

    Glib::DBusObjectPathString out_Param2;
    Glib::Variant<Glib::DBusObjectPathString> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestString(
    const Glib::ustring & arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestString_pack(
        arg_Param1);

    m_proxy->call("TestString", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestString_finish(
    Glib::ustring &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<Glib::ustring> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

Glib::ustring
org::gdbus::codegen::glibmm::TestProxy::TestString_sync(
    const Glib::ustring & arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestString_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestString", cancellable, base, timeout_msec);

    Glib::ustring out_Param2;
    Glib::Variant<Glib::ustring> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestDouble(
    double arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDouble_pack(
        arg_Param1);

    m_proxy->call("TestDouble", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestDouble_finish(
    double &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<double> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

double
org::gdbus::codegen::glibmm::TestProxy::TestDouble_sync(
    double arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestDouble_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestDouble", cancellable, base, timeout_msec);

    double out_Param2;
    Glib::Variant<double> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt64(
    guint64 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt64_pack(
        arg_Param1);

    m_proxy->call("TestUInt64", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt64_finish(
    guint64 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

guint64
org::gdbus::codegen::glibmm::TestProxy::TestUInt64_sync(
    guint64 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt64_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestUInt64", cancellable, base, timeout_msec);

    guint64 out_Param2;
    Glib::Variant<guint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt64(
    gint64 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt64_pack(
        arg_Param1);

    m_proxy->call("TestInt64", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt64_finish(
    gint64 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

gint64
org::gdbus::codegen::glibmm::TestProxy::TestInt64_sync(
    gint64 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt64_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestInt64", cancellable, base, timeout_msec);

    gint64 out_Param2;
    Glib::Variant<gint64> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt(
    guint32 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt_pack(
        arg_Param1);

    m_proxy->call("TestUInt", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt_finish(
    guint32 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

guint32
org::gdbus::codegen::glibmm::TestProxy::TestUInt_sync(
    guint32 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestUInt", cancellable, base, timeout_msec);

    guint32 out_Param2;
    Glib::Variant<guint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt(
    gint32 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt_pack(
        arg_Param1);

    m_proxy->call("TestInt", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt_finish(
    gint32 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

gint32
org::gdbus::codegen::glibmm::TestProxy::TestInt_sync(
    gint32 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestInt", cancellable, base, timeout_msec);

    gint32 out_Param2;
    Glib::Variant<gint32> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt16(
    guint16 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt16_pack(
        arg_Param1);

    m_proxy->call("TestUInt16", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestUInt16_finish(
    guint16 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

guint16
org::gdbus::codegen::glibmm::TestProxy::TestUInt16_sync(
    guint16 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestUInt16_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestUInt16", cancellable, base, timeout_msec);

    guint16 out_Param2;
    Glib::Variant<guint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt16(
    gint16 arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt16_pack(
        arg_Param1);

    m_proxy->call("TestInt16", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestInt16_finish(
    gint16 &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<gint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

gint16
org::gdbus::codegen::glibmm::TestProxy::TestInt16_sync(
    gint16 arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestInt16_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestInt16", cancellable, base, timeout_msec);

    gint16 out_Param2;
    Glib::Variant<gint16> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestChar(
    guchar arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestChar_pack(
        arg_Param1);

    m_proxy->call("TestChar", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestChar_finish(
    guchar &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<guchar> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

guchar
org::gdbus::codegen::glibmm::TestProxy::TestChar_sync(
    guchar arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestChar_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestChar", cancellable, base, timeout_msec);

    guchar out_Param2;
    Glib::Variant<guchar> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestBoolean(
    bool arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestBoolean_pack(
        arg_Param1);

    m_proxy->call("TestBoolean", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestBoolean_finish(
    bool &out_Param2,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<bool> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
}

bool
org::gdbus::codegen::glibmm::TestProxy::TestBoolean_sync(
    bool arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestBoolean_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestBoolean", cancellable, base, timeout_msec);

    bool out_Param2;
    Glib::Variant<bool> out_Param2_v;
    wrapped.get_child(out_Param2_v, 0);
    out_Param2 = out_Param2_v.get();
    return out_Param2;
}

void org::gdbus::codegen::glibmm::TestProxy::TestSelectiveSignalTrigger(
    bool arg_Param1,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestSelectiveSignalTrigger_pack(
        arg_Param1);

    m_proxy->call("TestSelectiveSignalTrigger", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestSelectiveSignalTrigger_finish(
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);
}

void
org::gdbus::codegen::glibmm::TestProxy::TestSelectiveSignalTrigger_sync(
    bool arg_Param1,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestSelectiveSignalTrigger_pack(
        arg_Param1);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestSelectiveSignalTrigger", cancellable, base, timeout_msec);

}

void org::gdbus::codegen::glibmm::TestProxy::TestAll(
    const std::vector<std::string> & arg_in_Param1,
    const std::vector<Glib::DBusObjectPathString> & arg_in_Param2,
    const std::vector<Glib::ustring> & arg_in_Param3,
    const std::string & arg_in_Param4,
    const Glib::DBusSignatureString & arg_in_Param5,
    const Glib::DBusObjectPathString & arg_in_Param6,
    const Glib::ustring & arg_in_Param7,
    double arg_in_Param8,
    guint64 arg_in_Param9,
    gint64 arg_in_Param10,
    guint32 arg_in_Param11,
    gint32 arg_in_Param12,
    guint16 arg_in_Param13,
    gint16 arg_in_Param14,
    guchar arg_in_Param15,
    bool arg_in_Param16,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestAll_pack(
        arg_in_Param1,
        arg_in_Param2,
        arg_in_Param3,
        arg_in_Param4,
        arg_in_Param5,
        arg_in_Param6,
        arg_in_Param7,
        arg_in_Param8,
        arg_in_Param9,
        arg_in_Param10,
        arg_in_Param11,
        arg_in_Param12,
        arg_in_Param13,
        arg_in_Param14,
        arg_in_Param15,
        arg_in_Param16);

    m_proxy->call("TestAll", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestAll_finish(
    std::vector<std::string> &out_out_Param1,
    std::vector<Glib::DBusObjectPathString> &out_out_Param2,
    std::vector<Glib::ustring> &out_out_Param3,
    std::string &out_out_Param4,
    Glib::DBusSignatureString &out_out_Param5,
    Glib::DBusObjectPathString &out_out_Param6,
    Glib::ustring &out_out_Param7,
    double &out_out_Param8,
    guint64 &out_out_Param9,
    gint64 &out_out_Param10,
    guint32 &out_out_Param11,
    gint32 &out_out_Param12,
    guint16 &out_out_Param13,
    gint16 &out_out_Param14,
    guchar &out_out_Param15,
    bool &out_out_Param16,
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);

    Glib::Variant<std::vector<std::string>> out_out_Param1_v;
    wrapped.get_child(out_out_Param1_v, 0);
    out_out_Param1 = out_out_Param1_v.get();

    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_out_Param2_v;
    wrapped.get_child(out_out_Param2_v, 1);
    out_out_Param2 = out_out_Param2_v.get();

    Glib::Variant<std::vector<Glib::ustring>> out_out_Param3_v;
    wrapped.get_child(out_out_Param3_v, 2);
    out_out_Param3 = out_out_Param3_v.get();

    Glib::Variant<std::string> out_out_Param4_v;
    wrapped.get_child(out_out_Param4_v, 3);
    out_out_Param4 = out_out_Param4_v.get();

    Glib::Variant<Glib::DBusSignatureString> out_out_Param5_v;
    wrapped.get_child(out_out_Param5_v, 4);
    out_out_Param5 = out_out_Param5_v.get();

    Glib::Variant<Glib::DBusObjectPathString> out_out_Param6_v;
    wrapped.get_child(out_out_Param6_v, 5);
    out_out_Param6 = out_out_Param6_v.get();

    Glib::Variant<Glib::ustring> out_out_Param7_v;
    wrapped.get_child(out_out_Param7_v, 6);
    out_out_Param7 = out_out_Param7_v.get();

    Glib::Variant<double> out_out_Param8_v;
    wrapped.get_child(out_out_Param8_v, 7);
    out_out_Param8 = out_out_Param8_v.get();

    Glib::Variant<guint64> out_out_Param9_v;
    wrapped.get_child(out_out_Param9_v, 8);
    out_out_Param9 = out_out_Param9_v.get();

    Glib::Variant<gint64> out_out_Param10_v;
    wrapped.get_child(out_out_Param10_v, 9);
    out_out_Param10 = out_out_Param10_v.get();

    Glib::Variant<guint32> out_out_Param11_v;
    wrapped.get_child(out_out_Param11_v, 10);
    out_out_Param11 = out_out_Param11_v.get();

    Glib::Variant<gint32> out_out_Param12_v;
    wrapped.get_child(out_out_Param12_v, 11);
    out_out_Param12 = out_out_Param12_v.get();

    Glib::Variant<guint16> out_out_Param13_v;
    wrapped.get_child(out_out_Param13_v, 12);
    out_out_Param13 = out_out_Param13_v.get();

    Glib::Variant<gint16> out_out_Param14_v;
    wrapped.get_child(out_out_Param14_v, 13);
    out_out_Param14 = out_out_Param14_v.get();

    Glib::Variant<guchar> out_out_Param15_v;
    wrapped.get_child(out_out_Param15_v, 14);
    out_out_Param15 = out_out_Param15_v.get();

    Glib::Variant<bool> out_out_Param16_v;
    wrapped.get_child(out_out_Param16_v, 15);
    out_out_Param16 = out_out_Param16_v.get();
}

std::tuple<std::vector<std::string>, std::vector<Glib::DBusObjectPathString>, std::vector<Glib::ustring>, std::string, Glib::DBusSignatureString, Glib::DBusObjectPathString, Glib::ustring, double, guint64, gint64, guint32, gint32, guint16, gint16, guchar, bool>
org::gdbus::codegen::glibmm::TestProxy::TestAll_sync(
    const std::vector<std::string> & arg_in_Param1,
    const std::vector<Glib::DBusObjectPathString> & arg_in_Param2,
    const std::vector<Glib::ustring> & arg_in_Param3,
    const std::string & arg_in_Param4,
    const Glib::DBusSignatureString & arg_in_Param5,
    const Glib::DBusObjectPathString & arg_in_Param6,
    const Glib::ustring & arg_in_Param7,
    double arg_in_Param8,
    guint64 arg_in_Param9,
    gint64 arg_in_Param10,
    guint32 arg_in_Param11,
    gint32 arg_in_Param12,
    guint16 arg_in_Param13,
    gint16 arg_in_Param14,
    guchar arg_in_Param15,
    bool arg_in_Param16,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestAll_pack(
        arg_in_Param1,
        arg_in_Param2,
        arg_in_Param3,
        arg_in_Param4,
        arg_in_Param5,
        arg_in_Param6,
        arg_in_Param7,
        arg_in_Param8,
        arg_in_Param9,
        arg_in_Param10,
        arg_in_Param11,
        arg_in_Param12,
        arg_in_Param13,
        arg_in_Param14,
        arg_in_Param15,
        arg_in_Param16);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestAll", cancellable, base, timeout_msec);

    std::vector<std::string> out_out_Param1;
    Glib::Variant<std::vector<std::string>> out_out_Param1_v;
    wrapped.get_child(out_out_Param1_v, 0);
    out_out_Param1 = out_out_Param1_v.get();

    std::vector<Glib::DBusObjectPathString> out_out_Param2;
    Glib::Variant<std::vector<Glib::DBusObjectPathString>> out_out_Param2_v;
    wrapped.get_child(out_out_Param2_v, 1);
    out_out_Param2 = out_out_Param2_v.get();

    std::vector<Glib::ustring> out_out_Param3;
    Glib::Variant<std::vector<Glib::ustring>> out_out_Param3_v;
    wrapped.get_child(out_out_Param3_v, 2);
    out_out_Param3 = out_out_Param3_v.get();

    std::string out_out_Param4;
    Glib::Variant<std::string> out_out_Param4_v;
    wrapped.get_child(out_out_Param4_v, 3);
    out_out_Param4 = out_out_Param4_v.get();

    Glib::DBusSignatureString out_out_Param5;
    Glib::Variant<Glib::DBusSignatureString> out_out_Param5_v;
    wrapped.get_child(out_out_Param5_v, 4);
    out_out_Param5 = out_out_Param5_v.get();

    Glib::DBusObjectPathString out_out_Param6;
    Glib::Variant<Glib::DBusObjectPathString> out_out_Param6_v;
    wrapped.get_child(out_out_Param6_v, 5);
    out_out_Param6 = out_out_Param6_v.get();

    Glib::ustring out_out_Param7;
    Glib::Variant<Glib::ustring> out_out_Param7_v;
    wrapped.get_child(out_out_Param7_v, 6);
    out_out_Param7 = out_out_Param7_v.get();

    double out_out_Param8;
    Glib::Variant<double> out_out_Param8_v;
    wrapped.get_child(out_out_Param8_v, 7);
    out_out_Param8 = out_out_Param8_v.get();

    guint64 out_out_Param9;
    Glib::Variant<guint64> out_out_Param9_v;
    wrapped.get_child(out_out_Param9_v, 8);
    out_out_Param9 = out_out_Param9_v.get();

    gint64 out_out_Param10;
    Glib::Variant<gint64> out_out_Param10_v;
    wrapped.get_child(out_out_Param10_v, 9);
    out_out_Param10 = out_out_Param10_v.get();

    guint32 out_out_Param11;
    Glib::Variant<guint32> out_out_Param11_v;
    wrapped.get_child(out_out_Param11_v, 10);
    out_out_Param11 = out_out_Param11_v.get();

    gint32 out_out_Param12;
    Glib::Variant<gint32> out_out_Param12_v;
    wrapped.get_child(out_out_Param12_v, 11);
    out_out_Param12 = out_out_Param12_v.get();

    guint16 out_out_Param13;
    Glib::Variant<guint16> out_out_Param13_v;
    wrapped.get_child(out_out_Param13_v, 12);
    out_out_Param13 = out_out_Param13_v.get();

    gint16 out_out_Param14;
    Glib::Variant<gint16> out_out_Param14_v;
    wrapped.get_child(out_out_Param14_v, 13);
    out_out_Param14 = out_out_Param14_v.get();

    guchar out_out_Param15;
    Glib::Variant<guchar> out_out_Param15_v;
    wrapped.get_child(out_out_Param15_v, 14);
    out_out_Param15 = out_out_Param15_v.get();

    bool out_out_Param16;
    Glib::Variant<bool> out_out_Param16_v;
    wrapped.get_child(out_out_Param16_v, 15);
    out_out_Param16 = out_out_Param16_v.get();

    return std::make_tuple(
        std::move(out_out_Param1),
        std::move(out_out_Param2),
        std::move(out_out_Param3),
        std::move(out_out_Param4),
        std::move(out_out_Param5),
        std::move(out_out_Param6),
        std::move(out_out_Param7),
        std::move(out_out_Param8),
        std::move(out_out_Param9),
        std::move(out_out_Param10),
        std::move(out_out_Param11),
        std::move(out_out_Param12),
        std::move(out_out_Param13),
        std::move(out_out_Param14),
        std::move(out_out_Param15),
        std::move(out_out_Param16)
    );
}

void org::gdbus::codegen::glibmm::TestProxy::TestTriggerInternalPropertyChange(
    gint32 arg_NewPropertyValue,
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestTriggerInternalPropertyChange_pack(
        arg_NewPropertyValue);

    m_proxy->call("TestTriggerInternalPropertyChange", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestTriggerInternalPropertyChange_finish(
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);
}

void
org::gdbus::codegen::glibmm::TestProxy::TestTriggerInternalPropertyChange_sync(
    gint32 arg_NewPropertyValue,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;
    base = TestTypeWrap::TestTriggerInternalPropertyChange_pack(
        arg_NewPropertyValue);

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestTriggerInternalPropertyChange", cancellable, base, timeout_msec);

}

void org::gdbus::codegen::glibmm::TestProxy::TestError(
    const Gio::SlotAsyncReady &callback,
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;

    m_proxy->call("TestError", callback, cancellable, base, timeout_msec);
}

void org::gdbus::codegen::glibmm::TestProxy::TestError_finish(
    const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_finish(result);
}

void
org::gdbus::codegen::glibmm::TestProxy::TestError_sync(
    const Glib::RefPtr<Gio::Cancellable> &cancellable,
    int timeout_msec)
{
    Glib::VariantContainerBase base;

    Glib::VariantContainerBase wrapped;
    wrapped = m_proxy->call_sync("TestError", cancellable, base, timeout_msec);

}

void org::gdbus::codegen::glibmm::TestProxy::handle_signal(const Glib::ustring&/* sender_name */,
    const Glib::ustring& signal_name,
    const Glib::VariantContainerBase& parameters)
{
    static_cast<void>(signal_name); // maybe unused
    static_cast<void>(parameters); // maybe unused

}

void org::gdbus::codegen::glibmm::TestProxy::handle_properties_changed(
    const Gio::DBus::Proxy::MapChangedProperties &changed_properties,
    const std::vector<Glib::ustring> &/* invalidated_properties */)
{
    static_cast<void>(changed_properties); // maybe unused

    // Only check changed_properties since value will already be cached. Glib can be setup to get
    // values of invalidated properties in which case property will be in changed_properties when
    // value is actually received. See Gio::DBus::ProxyFlags::PROXY_FLAGS_GET_INVALIDATED_PROPERTIES .

}

org::gdbus::codegen::glibmm::TestProxy::TestProxy(const Glib::RefPtr<Gio::DBus::Proxy> &proxy) : m_proxy(proxy)
{
    m_proxy->signal_signal().connect(sigc::mem_fun(this, &TestProxy::handle_signal));
    m_proxy->signal_properties_changed().
        connect(sigc::mem_fun(this, &TestProxy::handle_properties_changed));
    org::gdbus::codegen::glibmm::Error::initialize();
}

void org::gdbus::codegen::glibmm::TestProxy::createForBus(
    Gio::DBus::BusType busType,
    Gio::DBus::ProxyFlags proxyFlags,
    const std::string &name,
    const std::string &objectPath,
    const Gio::SlotAsyncReady &slot,
    const Glib::RefPtr<Gio::Cancellable> &cancellable)
{
    Gio::DBus::Proxy::create_for_bus(busType,
        name,
        objectPath,
        "org.gdbus.codegen.glibmm.Test",
        slot,
        cancellable,
        Glib::RefPtr<Gio::DBus::InterfaceInfo>(),
        proxyFlags);
}

Glib::RefPtr<org::gdbus::codegen::glibmm::TestProxy> org::gdbus::codegen::glibmm::TestProxy::createForBusFinish(const Glib::RefPtr<Gio::AsyncResult> &result)
{
    Glib::RefPtr<Gio::DBus::Proxy> proxy =
        Gio::DBus::Proxy::create_for_bus_finish(result);
    org::gdbus::codegen::glibmm::TestProxy *p =
        new org::gdbus::codegen::glibmm::TestProxy(proxy);
    return Glib::RefPtr<org::gdbus::codegen::glibmm::TestProxy>(p);
}

Glib::RefPtr<org::gdbus::codegen::glibmm::TestProxy> org::gdbus::codegen::glibmm::TestProxy::createForBus_sync(
    Gio::DBus::BusType busType,
    Gio::DBus::ProxyFlags proxyFlags,
    const std::string &name,
    const std::string &objectPath,
    const Glib::RefPtr<Gio::Cancellable> &cancellable)
{
    Glib::RefPtr<Gio::DBus::Proxy> proxy =
        Gio::DBus::Proxy::create_for_bus_sync(busType,
            name,
            objectPath,
            "org.gdbus.codegen.glibmm.Test",
            cancellable,
            Glib::RefPtr<Gio::DBus::InterfaceInfo>(),
            proxyFlags);
    org::gdbus::codegen::glibmm::TestProxy *p =
        new org::gdbus::codegen::glibmm::TestProxy(proxy);
    return Glib::RefPtr<org::gdbus::codegen::glibmm::TestProxy>(p);
}
