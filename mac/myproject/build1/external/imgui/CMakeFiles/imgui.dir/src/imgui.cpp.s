	.arch armv8-a
	.file	"imgui.cpp"
	.text
	.section	.text._ZN6ImVec2C2Ev,"axG",@progbits,_ZN6ImVec2C5Ev,comdat
	.align	2
	.weak	_ZN6ImVec2C2Ev
	.type	_ZN6ImVec2C2Ev, %function
_ZN6ImVec2C2Ev:
.LFB1:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1:
	.size	_ZN6ImVec2C2Ev, .-_ZN6ImVec2C2Ev
	.weak	_ZN6ImVec2C1Ev
	.set	_ZN6ImVec2C1Ev,_ZN6ImVec2C2Ev
	.section	.text._ZN6ImVec2C2Eff,"axG",@progbits,_ZN6ImVec2C5Eff,comdat
	.align	2
	.weak	_ZN6ImVec2C2Eff
	.type	_ZN6ImVec2C2Eff, %function
_ZN6ImVec2C2Eff:
.LFB4:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	s0, [sp, 4]
	str	s1, [sp]
	ldr	x0, [sp, 8]
	ldr	s0, [sp, 4]
	str	s0, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [sp]
	str	s0, [x0, 4]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE4:
	.size	_ZN6ImVec2C2Eff, .-_ZN6ImVec2C2Eff
	.weak	_ZN6ImVec2C1Eff
	.set	_ZN6ImVec2C1Eff,_ZN6ImVec2C2Eff
	.section	.rodata
	.align	3
.LC32:
	.string	"float& ImVec2::operator[](size_t)"
	.align	3
.LC33:
	.string	"/media/psf/Home/Desktop/git/C-/mac/myproject/external/imgui/include/imgui.h"
	.align	3
.LC34:
	.string	"idx <= 1"
	.section	.text._ZN6ImVec2ixEm,"axG",@progbits,_ZN6ImVec2ixEm,comdat
	.align	2
	.weak	_ZN6ImVec2ixEm
	.type	_ZN6ImVec2ixEm, %function
_ZN6ImVec2ixEm:
.LFB7:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 16]
	cmp	x0, 1
	bls	.L4
	adrp	x0, .LC32
	add	x3, x0, :lo12:.LC32
	mov	w2, 259
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC34
	add	x0, x0, :lo12:.LC34
	bl	__assert_fail
.L4:
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 16]
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE7:
	.size	_ZN6ImVec2ixEm, .-_ZN6ImVec2ixEm
	.section	.text._ZN6ImVec4C2Ev,"axG",@progbits,_ZN6ImVec4C5Ev,comdat
	.align	2
	.weak	_ZN6ImVec4C2Ev
	.type	_ZN6ImVec4C2Ev, %function
_ZN6ImVec4C2Ev:
.LFB9:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 12]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE9:
	.size	_ZN6ImVec4C2Ev, .-_ZN6ImVec4C2Ev
	.weak	_ZN6ImVec4C1Ev
	.set	_ZN6ImVec4C1Ev,_ZN6ImVec4C2Ev
	.section	.text._ZN6ImVec4C2Effff,"axG",@progbits,_ZN6ImVec4C5Effff,comdat
	.align	2
	.weak	_ZN6ImVec4C2Effff
	.type	_ZN6ImVec4C2Effff, %function
_ZN6ImVec4C2Effff:
.LFB12:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	str	s0, [sp, 20]
	str	s1, [sp, 16]
	str	s2, [sp, 12]
	str	s3, [sp, 8]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 20]
	str	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 16]
	str	s0, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 12]
	str	s0, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 8]
	str	s0, [x0, 12]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE12:
	.size	_ZN6ImVec4C2Effff, .-_ZN6ImVec4C2Effff
	.weak	_ZN6ImVec4C1Effff
	.set	_ZN6ImVec4C1Effff,_ZN6ImVec4C2Effff
	.section	.text._Znwm12ImNewWrapperPv,"axG",@progbits,_Znwm12ImNewWrapperPv,comdat
	.align	2
	.weak	_Znwm12ImNewWrapperPv
	.type	_Znwm12ImNewWrapperPv, %function
_Znwm12ImNewWrapperPv:
.LFB14:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	strb	w1, [sp, 16]
	str	x2, [sp, 8]
	ldr	x0, [sp, 8]
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE14:
	.size	_Znwm12ImNewWrapperPv, .-_Znwm12ImNewWrapperPv
	.section	.text._ZdlPv12ImNewWrapperS_,"axG",@progbits,_ZdlPv12ImNewWrapperS_,comdat
	.align	2
	.weak	_ZdlPv12ImNewWrapperS_
	.type	_ZdlPv12ImNewWrapperS_, %function
_ZdlPv12ImNewWrapperS_:
.LFB15:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	strb	w1, [sp, 16]
	str	x2, [sp, 8]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE15:
	.size	_ZdlPv12ImNewWrapperS_, .-_ZdlPv12ImNewWrapperS_
	.section	.text._ZN12ImGuiPayloadC2Ev,"axG",@progbits,_ZN12ImGuiPayloadC5Ev,comdat
	.align	2
	.weak	_ZN12ImGuiPayloadC2Ev
	.type	_ZN12ImGuiPayloadC2Ev, %function
_ZN12ImGuiPayloadC2Ev:
.LFB63:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN12ImGuiPayload5ClearEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE63:
	.size	_ZN12ImGuiPayloadC2Ev, .-_ZN12ImGuiPayloadC2Ev
	.weak	_ZN12ImGuiPayloadC1Ev
	.set	_ZN12ImGuiPayloadC1Ev,_ZN12ImGuiPayloadC2Ev
	.section	.text._ZN12ImGuiPayload5ClearEv,"axG",@progbits,_ZN12ImGuiPayload5ClearEv,comdat
	.align	2
	.weak	_ZN12ImGuiPayload5ClearEv
	.type	_ZN12ImGuiPayload5ClearEv, %function
_ZN12ImGuiPayload5ClearEv:
.LFB65:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 16]
	ldr	x0, [sp, 24]
	str	w1, [x0, 12]
	ldr	x0, [sp, 24]
	str	xzr, [x0]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 8]
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	mov	x2, 33
	mov	w1, 0
	bl	memset
	ldr	x0, [sp, 24]
	mov	w1, -1
	str	w1, [x0, 20]
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 58]
	ldr	x0, [sp, 24]
	ldrb	w1, [x0, 58]
	ldr	x0, [sp, 24]
	strb	w1, [x0, 57]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE65:
	.size	_ZN12ImGuiPayload5ClearEv, .-_ZN12ImGuiPayload5ClearEv
	.section	.text._ZNK12ImGuiPayload10IsDataTypeEPKc,"axG",@progbits,_ZNK12ImGuiPayload10IsDataTypeEPKc,comdat
	.align	2
	.weak	_ZNK12ImGuiPayload10IsDataTypeEPKc
	.type	_ZNK12ImGuiPayload10IsDataTypeEPKc, %function
_ZNK12ImGuiPayload10IsDataTypeEPKc:
.LFB66:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 20]
	cmn	w0, #1
	beq	.L14
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	mov	x1, x0
	ldr	x0, [sp, 16]
	bl	strcmp
	cmp	w0, 0
	bne	.L14
	mov	w0, 1
	b	.L15
.L14:
	mov	w0, 0
.L15:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE66:
	.size	_ZNK12ImGuiPayload10IsDataTypeEPKc, .-_ZNK12ImGuiPayload10IsDataTypeEPKc
	.section	.text._ZN15ImGuiTextFilter14ImGuiTextRangeC2EPKcS2_,"axG",@progbits,_ZN15ImGuiTextFilter14ImGuiTextRangeC5EPKcS2_,comdat
	.align	2
	.weak	_ZN15ImGuiTextFilter14ImGuiTextRangeC2EPKcS2_
	.type	_ZN15ImGuiTextFilter14ImGuiTextRangeC2EPKcS2_, %function
_ZN15ImGuiTextFilter14ImGuiTextRangeC2EPKcS2_:
.LFB85:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	x2, [sp, 8]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 16]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 8]
	str	x1, [x0, 8]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE85:
	.size	_ZN15ImGuiTextFilter14ImGuiTextRangeC2EPKcS2_, .-_ZN15ImGuiTextFilter14ImGuiTextRangeC2EPKcS2_
	.weak	_ZN15ImGuiTextFilter14ImGuiTextRangeC1EPKcS2_
	.set	_ZN15ImGuiTextFilter14ImGuiTextRangeC1EPKcS2_,_ZN15ImGuiTextFilter14ImGuiTextRangeC2EPKcS2_
	.section	.text._ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv,"axG",@progbits,_ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv,comdat
	.align	2
	.weak	_ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv
	.type	_ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv, %function
_ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv:
.LFB87:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x1, [x0]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE87:
	.size	_ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv, .-_ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv
	.section	.text._ZN15ImGuiTextBufferC2Ev,"axG",@progbits,_ZN15ImGuiTextBufferC5Ev,comdat
	.align	2
	.weak	_ZN15ImGuiTextBufferC2Ev
	.type	_ZN15ImGuiTextBufferC2Ev, %function
_ZN15ImGuiTextBufferC2Ev:
.LFB89:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcEC1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE89:
	.size	_ZN15ImGuiTextBufferC2Ev, .-_ZN15ImGuiTextBufferC2Ev
	.weak	_ZN15ImGuiTextBufferC1Ev
	.set	_ZN15ImGuiTextBufferC1Ev,_ZN15ImGuiTextBufferC2Ev
	.section	.text._ZNK15ImGuiTextBuffer5beginEv,"axG",@progbits,_ZNK15ImGuiTextBuffer5beginEv,comdat
	.align	2
	.weak	_ZNK15ImGuiTextBuffer5beginEv
	.type	_ZNK15ImGuiTextBuffer5beginEv, %function
_ZNK15ImGuiTextBuffer5beginEv:
.LFB92:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L22
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIcE5frontEv
	b	.L24
.L22:
	adrp	x0, _ZN15ImGuiTextBuffer11EmptyStringE
	add	x0, x0, :lo12:_ZN15ImGuiTextBuffer11EmptyStringE
.L24:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE92:
	.size	_ZNK15ImGuiTextBuffer5beginEv, .-_ZNK15ImGuiTextBuffer5beginEv
	.section	.text._ZNK15ImGuiTextBuffer4sizeEv,"axG",@progbits,_ZNK15ImGuiTextBuffer4sizeEv,comdat
	.align	2
	.weak	_ZNK15ImGuiTextBuffer4sizeEv
	.type	_ZNK15ImGuiTextBuffer4sizeEv, %function
_ZNK15ImGuiTextBuffer4sizeEv:
.LFB94:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	cmp	w0, 0
	beq	.L26
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	sub	w0, w0, #1
	b	.L28
.L26:
	mov	w0, 0
.L28:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE94:
	.size	_ZNK15ImGuiTextBuffer4sizeEv, .-_ZNK15ImGuiTextBuffer4sizeEv
	.section	.text._ZNK15ImGuiTextBuffer5emptyEv,"axG",@progbits,_ZNK15ImGuiTextBuffer5emptyEv,comdat
	.align	2
	.weak	_ZNK15ImGuiTextBuffer5emptyEv
	.type	_ZNK15ImGuiTextBuffer5emptyEv, %function
_ZNK15ImGuiTextBuffer5emptyEv:
.LFB95:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	cmp	w0, 1
	cset	w0, le
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE95:
	.size	_ZNK15ImGuiTextBuffer5emptyEv, .-_ZNK15ImGuiTextBuffer5emptyEv
	.section	.text._ZN15ImGuiTextBuffer5clearEv,"axG",@progbits,_ZN15ImGuiTextBuffer5clearEv,comdat
	.align	2
	.weak	_ZN15ImGuiTextBuffer5clearEv
	.type	_ZN15ImGuiTextBuffer5clearEv, %function
_ZN15ImGuiTextBuffer5clearEv:
.LFB96:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcE5clearEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE96:
	.size	_ZN15ImGuiTextBuffer5clearEv, .-_ZN15ImGuiTextBuffer5clearEv
	.section	.text._ZN15ImGuiTextBuffer7reserveEi,"axG",@progbits,_ZN15ImGuiTextBuffer7reserveEi,comdat
	.align	2
	.weak	_ZN15ImGuiTextBuffer7reserveEi
	.type	_ZN15ImGuiTextBuffer7reserveEi, %function
_ZN15ImGuiTextBuffer7reserveEi:
.LFB97:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	bl	_ZN8ImVectorIcE7reserveEi
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE97:
	.size	_ZN15ImGuiTextBuffer7reserveEi, .-_ZN15ImGuiTextBuffer7reserveEi
	.section	.text._ZNK15ImGuiTextBuffer5c_strEv,"axG",@progbits,_ZNK15ImGuiTextBuffer5c_strEv,comdat
	.align	2
	.weak	_ZNK15ImGuiTextBuffer5c_strEv
	.type	_ZNK15ImGuiTextBuffer5c_strEv, %function
_ZNK15ImGuiTextBuffer5c_strEv:
.LFB98:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L34
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	b	.L36
.L34:
	adrp	x0, _ZN15ImGuiTextBuffer11EmptyStringE
	add	x0, x0, :lo12:_ZN15ImGuiTextBuffer11EmptyStringE
.L36:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE98:
	.size	_ZNK15ImGuiTextBuffer5c_strEv, .-_ZNK15ImGuiTextBuffer5c_strEv
	.section	.text._ZN12ImGuiStorage16ImGuiStoragePairC2Eji,"axG",@progbits,_ZN12ImGuiStorage16ImGuiStoragePairC5Eji,comdat
	.align	2
	.weak	_ZN12ImGuiStorage16ImGuiStoragePairC2Eji
	.type	_ZN12ImGuiStorage16ImGuiStoragePairC2Eji, %function
_ZN12ImGuiStorage16ImGuiStoragePairC2Eji:
.LFB100:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	str	w2, [sp]
	ldr	x0, [sp, 8]
	ldr	w1, [sp, 4]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	ldr	w1, [sp]
	str	w1, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE100:
	.size	_ZN12ImGuiStorage16ImGuiStoragePairC2Eji, .-_ZN12ImGuiStorage16ImGuiStoragePairC2Eji
	.weak	_ZN12ImGuiStorage16ImGuiStoragePairC1Eji
	.set	_ZN12ImGuiStorage16ImGuiStoragePairC1Eji,_ZN12ImGuiStorage16ImGuiStoragePairC2Eji
	.section	.text._ZN12ImGuiStorage16ImGuiStoragePairC2Ejf,"axG",@progbits,_ZN12ImGuiStorage16ImGuiStoragePairC5Ejf,comdat
	.align	2
	.weak	_ZN12ImGuiStorage16ImGuiStoragePairC2Ejf
	.type	_ZN12ImGuiStorage16ImGuiStoragePairC2Ejf, %function
_ZN12ImGuiStorage16ImGuiStoragePairC2Ejf:
.LFB103:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	str	s0, [sp]
	ldr	x0, [sp, 8]
	ldr	w1, [sp, 4]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [sp]
	str	s0, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE103:
	.size	_ZN12ImGuiStorage16ImGuiStoragePairC2Ejf, .-_ZN12ImGuiStorage16ImGuiStoragePairC2Ejf
	.weak	_ZN12ImGuiStorage16ImGuiStoragePairC1Ejf
	.set	_ZN12ImGuiStorage16ImGuiStoragePairC1Ejf,_ZN12ImGuiStorage16ImGuiStoragePairC2Ejf
	.section	.text._ZN12ImGuiStorage16ImGuiStoragePairC2EjPv,"axG",@progbits,_ZN12ImGuiStorage16ImGuiStoragePairC5EjPv,comdat
	.align	2
	.weak	_ZN12ImGuiStorage16ImGuiStoragePairC2EjPv
	.type	_ZN12ImGuiStorage16ImGuiStoragePairC2EjPv, %function
_ZN12ImGuiStorage16ImGuiStoragePairC2EjPv:
.LFB106:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	str	x2, [sp, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 8]
	str	x1, [x0, 8]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE106:
	.size	_ZN12ImGuiStorage16ImGuiStoragePairC2EjPv, .-_ZN12ImGuiStorage16ImGuiStoragePairC2EjPv
	.weak	_ZN12ImGuiStorage16ImGuiStoragePairC1EjPv
	.set	_ZN12ImGuiStorage16ImGuiStoragePairC1EjPv,_ZN12ImGuiStorage16ImGuiStoragePairC2EjPv
	.section	.text._ZN12ImGuiStorage5ClearEv,"axG",@progbits,_ZN12ImGuiStorage5ClearEv,comdat
	.align	2
	.weak	_ZN12ImGuiStorage5ClearEv
	.type	_ZN12ImGuiStorage5ClearEv, %function
_ZN12ImGuiStorage5ClearEv:
.LFB108:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE5clearEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE108:
	.size	_ZN12ImGuiStorage5ClearEv, .-_ZN12ImGuiStorage5ClearEv
	.section	.text._ZN18ImDrawListSplitterC2Ev,"axG",@progbits,_ZN18ImDrawListSplitterC5Ev,comdat
	.align	2
	.weak	_ZN18ImDrawListSplitterC2Ev
	.type	_ZN18ImDrawListSplitterC2Ev, %function
_ZN18ImDrawListSplitterC2Ev:
.LFB136:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN8ImVectorI13ImDrawChannelEC1Ev
	mov	x2, 24
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE136:
	.size	_ZN18ImDrawListSplitterC2Ev, .-_ZN18ImDrawListSplitterC2Ev
	.weak	_ZN18ImDrawListSplitterC1Ev
	.set	_ZN18ImDrawListSplitterC1Ev,_ZN18ImDrawListSplitterC2Ev
	.section	.text._ZN18ImDrawListSplitterD2Ev,"axG",@progbits,_ZN18ImDrawListSplitterD5Ev,comdat
	.align	2
	.weak	_ZN18ImDrawListSplitterD2Ev
	.type	_ZN18ImDrawListSplitterD2Ev, %function
_ZN18ImDrawListSplitterD2Ev:
.LFB139:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA139
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN18ImDrawListSplitter15ClearFreeMemoryEv
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN8ImVectorI13ImDrawChannelED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE139:
	.global	__gxx_personality_v0
	.section	.gcc_except_table._ZN18ImDrawListSplitterD2Ev,"aG",@progbits,_ZN18ImDrawListSplitterD5Ev,comdat
.LLSDA139:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE139-.LLSDACSB139
.LLSDACSB139:
.LLSDACSE139:
	.section	.text._ZN18ImDrawListSplitterD2Ev,"axG",@progbits,_ZN18ImDrawListSplitterD5Ev,comdat
	.size	_ZN18ImDrawListSplitterD2Ev, .-_ZN18ImDrawListSplitterD2Ev
	.weak	_ZN18ImDrawListSplitterD1Ev
	.set	_ZN18ImDrawListSplitterD1Ev,_ZN18ImDrawListSplitterD2Ev
	.section	.text._ZN15ImDrawCmdHeaderC2Ev,"axG",@progbits,_ZN15ImDrawCmdHeaderC5Ev,comdat
	.align	2
	.weak	_ZN15ImDrawCmdHeaderC2Ev
	.type	_ZN15ImDrawCmdHeaderC2Ev, %function
_ZN15ImDrawCmdHeaderC2Ev:
.LFB144:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN6ImVec4C1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE144:
	.size	_ZN15ImDrawCmdHeaderC2Ev, .-_ZN15ImDrawCmdHeaderC2Ev
	.weak	_ZN15ImDrawCmdHeaderC1Ev
	.set	_ZN15ImDrawCmdHeaderC1Ev,_ZN15ImDrawCmdHeaderC2Ev
	.section	.text._ZN10ImDrawListC2EP20ImDrawListSharedData,"axG",@progbits,_ZN10ImDrawListC5EP20ImDrawListSharedData,comdat
	.align	2
	.weak	_ZN10ImDrawListC2EP20ImDrawListSharedData
	.type	_ZN10ImDrawListC2EP20ImDrawListSharedData, %function
_ZN10ImDrawListC2EP20ImDrawListSharedData:
.LFB146:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI9ImDrawCmdEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN8ImVectorItEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN8ImVectorI10ImDrawVertEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 88
	bl	_ZN8ImVectorI6ImVec4EC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 104
	bl	_ZN8ImVectorIPvEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 120
	bl	_ZN8ImVectorI6ImVec2EC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 136
	bl	_ZN15ImDrawCmdHeaderC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 168
	bl	_ZN18ImDrawListSplitterC1Ev
	mov	x2, 200
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 16]
	str	x1, [x0, 56]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE146:
	.size	_ZN10ImDrawListC2EP20ImDrawListSharedData, .-_ZN10ImDrawListC2EP20ImDrawListSharedData
	.weak	_ZN10ImDrawListC1EP20ImDrawListSharedData
	.set	_ZN10ImDrawListC1EP20ImDrawListSharedData,_ZN10ImDrawListC2EP20ImDrawListSharedData
	.section	.text._ZN10ImDrawListD2Ev,"axG",@progbits,_ZN10ImDrawListD5Ev,comdat
	.align	2
	.weak	_ZN10ImDrawListD2Ev
	.type	_ZN10ImDrawListD2Ev, %function
_ZN10ImDrawListD2Ev:
.LFB149:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA149
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN10ImDrawList16_ClearFreeMemoryEv
	ldr	x0, [sp, 24]
	add	x0, x0, 168
	bl	_ZN18ImDrawListSplitterD1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 120
	bl	_ZN8ImVectorI6ImVec2ED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 104
	bl	_ZN8ImVectorIPvED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 88
	bl	_ZN8ImVectorI6ImVec4ED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN8ImVectorI10ImDrawVertED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN8ImVectorItED1Ev
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI9ImDrawCmdED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE149:
	.section	.gcc_except_table._ZN10ImDrawListD2Ev,"aG",@progbits,_ZN10ImDrawListD5Ev,comdat
.LLSDA149:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE149-.LLSDACSB149
.LLSDACSB149:
.LLSDACSE149:
	.section	.text._ZN10ImDrawListD2Ev,"axG",@progbits,_ZN10ImDrawListD5Ev,comdat
	.size	_ZN10ImDrawListD2Ev, .-_ZN10ImDrawListD2Ev
	.weak	_ZN10ImDrawListD1Ev
	.set	_ZN10ImDrawListD1Ev,_ZN10ImDrawListD2Ev
	.section	.text._ZN10ImDrawList10PathLineToERK6ImVec2,"axG",@progbits,_ZN10ImDrawList10PathLineToERK6ImVec2,comdat
	.align	2
	.weak	_ZN10ImDrawList10PathLineToERK6ImVec2
	.type	_ZN10ImDrawList10PathLineToERK6ImVec2, %function
_ZN10ImDrawList10PathLineToERK6ImVec2:
.LFB154:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	add	x0, x0, 120
	ldr	x1, [sp, 16]
	bl	_ZN8ImVectorI6ImVec2E9push_backERKS0_
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE154:
	.size	_ZN10ImDrawList10PathLineToERK6ImVec2, .-_ZN10ImDrawList10PathLineToERK6ImVec2
	.section	.text._ZN10ImDrawList14PathFillConvexEj,"axG",@progbits,_ZN10ImDrawList14PathFillConvexEj,comdat
	.align	2
	.weak	_ZN10ImDrawList14PathFillConvexEj
	.type	_ZN10ImDrawList14PathFillConvexEj, %function
_ZN10ImDrawList14PathFillConvexEj:
.LFB156:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 128]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 120]
	ldr	w3, [sp, 20]
	mov	w2, w0
	ldr	x0, [sp, 24]
	bl	_ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij
	ldr	x0, [sp, 24]
	str	wzr, [x0, 120]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE156:
	.size	_ZN10ImDrawList14PathFillConvexEj, .-_ZN10ImDrawList14PathFillConvexEj
	.section	.text._ZN10ImDrawList10PathStrokeEjif,"axG",@progbits,_ZN10ImDrawList10PathStrokeEjif,comdat
	.align	2
	.weak	_ZN10ImDrawList10PathStrokeEjif
	.type	_ZN10ImDrawList10PathStrokeEjif, %function
_ZN10ImDrawList10PathStrokeEjif:
.LFB157:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	w2, [sp, 32]
	str	s0, [sp, 28]
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 128]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 120]
	ldr	s0, [sp, 28]
	ldr	w4, [sp, 32]
	ldr	w3, [sp, 36]
	mov	w2, w0
	ldr	x0, [sp, 40]
	bl	_ZN10ImDrawList11AddPolylineEPK6ImVec2ijif
	ldr	x0, [sp, 40]
	str	wzr, [x0, 120]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE157:
	.size	_ZN10ImDrawList10PathStrokeEjif, .-_ZN10ImDrawList10PathStrokeEjif
	.section	.text._ZN10ImDrawDataC2Ev,"axG",@progbits,_ZN10ImDrawDataC5Ev,comdat
	.align	2
	.weak	_ZN10ImDrawDataC2Ev
	.type	_ZN10ImDrawDataC2Ev, %function
_ZN10ImDrawDataC2Ev:
.LFB167:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 40
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	bl	_ZN10ImDrawData5ClearEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE167:
	.size	_ZN10ImDrawDataC2Ev, .-_ZN10ImDrawDataC2Ev
	.weak	_ZN10ImDrawDataC1Ev
	.set	_ZN10ImDrawDataC1Ev,_ZN10ImDrawDataC2Ev
	.section	.text._ZN10ImDrawData5ClearEv,"axG",@progbits,_ZN10ImDrawData5ClearEv,comdat
	.align	2
	.weak	_ZN10ImDrawData5ClearEv
	.type	_ZN10ImDrawData5ClearEv, %function
_ZN10ImDrawData5ClearEv:
.LFB169:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	mov	x2, 48
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE169:
	.size	_ZN10ImDrawData5ClearEv, .-_ZN10ImDrawData5ClearEv
	.section	.text._ZNK11ImFontAtlas7IsBuiltEv,"axG",@progbits,_ZNK11ImFontAtlas7IsBuiltEv,comdat
	.align	2
	.weak	_ZNK11ImFontAtlas7IsBuiltEv
	.type	_ZNK11ImFontAtlas7IsBuiltEv, %function
_ZNK11ImFontAtlas7IsBuiltEv:
.LFB181:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 72]
	cmp	w0, 0
	ble	.L52
	ldr	x0, [sp, 8]
	ldrb	w0, [x0, 25]
	cmp	w0, 0
	beq	.L52
	mov	w0, 1
	b	.L53
.L52:
	mov	w0, 0
.L53:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE181:
	.size	_ZNK11ImFontAtlas7IsBuiltEv, .-_ZNK11ImFontAtlas7IsBuiltEv
	.section	.text._ZNK6ImFont8IsLoadedEv,"axG",@progbits,_ZNK6ImFont8IsLoadedEv,comdat
	.align	2
	.weak	_ZNK6ImFont8IsLoadedEv
	.type	_ZNK6ImFont8IsLoadedEv, %function
_ZNK6ImFont8IsLoadedEv:
.LFB185:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 64]
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE185:
	.size	_ZNK6ImFont8IsLoadedEv, .-_ZNK6ImFont8IsLoadedEv
	.section	.text._ZN13ImGuiViewportC2Ev,"axG",@progbits,_ZN13ImGuiViewportC5Ev,comdat
	.align	2
	.weak	_ZN13ImGuiViewportC2Ev
	.type	_ZN13ImGuiViewportC2Ev, %function
_ZN13ImGuiViewportC2Ev:
.LFB188:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 4
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 12
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 20
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 28
	bl	_ZN6ImVec2C1Ev
	mov	x2, 48
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE188:
	.size	_ZN13ImGuiViewportC2Ev, .-_ZN13ImGuiViewportC2Ev
	.weak	_ZN13ImGuiViewportC1Ev
	.set	_ZN13ImGuiViewportC1Ev,_ZN13ImGuiViewportC2Ev
	.section	.text._ZNK13ImGuiViewport9GetCenterEv,"axG",@progbits,_ZNK13ImGuiViewport9GetCenterEv,comdat
	.align	2
	.weak	_ZNK13ImGuiViewport9GetCenterEv
	.type	_ZNK13ImGuiViewport9GetCenterEv, %function
_ZNK13ImGuiViewport9GetCenterEv:
.LFB190:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 12]
	fmov	s0, 5.0e-1
	fmul	s0, s2, s0
	fadd	s3, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 16]
	fmov	s0, 5.0e-1
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s3
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L60
	bl	__stack_chk_fail
.L60:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE190:
	.size	_ZNK13ImGuiViewport9GetCenterEv, .-_ZNK13ImGuiViewport9GetCenterEv
	.section	.text._ZN20ImGuiPlatformImeDataC2Ev,"axG",@progbits,_ZN20ImGuiPlatformImeDataC5Ev,comdat
	.align	2
	.weak	_ZN20ImGuiPlatformImeDataC2Ev
	.type	_ZN20ImGuiPlatformImeDataC2Ev, %function
_ZN20ImGuiPlatformImeDataC2Ev:
.LFB193:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 4
	bl	_ZN6ImVec2C1Ev
	mov	x2, 16
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE193:
	.size	_ZN20ImGuiPlatformImeDataC2Ev, .-_ZN20ImGuiPlatformImeDataC2Ev
	.weak	_ZN20ImGuiPlatformImeDataC1Ev
	.set	_ZN20ImGuiPlatformImeDataC1Ev,_ZN20ImGuiPlatformImeDataC2Ev
	.text
	.align	2
	.type	_ZL7ImQsortPvmmPFiPKvS1_E, %function
_ZL7ImQsortPvmmPFiPKvS1_E:
.LFB1149:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	x3, [sp, 16]
	ldr	x0, [sp, 32]
	cmp	x0, 1
	bls	.L64
	ldr	x3, [sp, 16]
	ldr	x2, [sp, 24]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	qsort
.L64:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1149:
	.size	_ZL7ImQsortPvmmPFiPKvS1_E, .-_ZL7ImQsortPvmmPFiPKvS1_E
	.align	2
	.type	_ZL14ImIsPowerOfTwoi, %function
_ZL14ImIsPowerOfTwoi:
.LFB1150:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	cmp	w0, 0
	beq	.L66
	ldr	w0, [sp, 12]
	sub	w1, w0, #1
	ldr	w0, [sp, 12]
	and	w0, w1, w0
	cmp	w0, 0
	bne	.L66
	mov	w0, 1
	b	.L67
.L66:
	mov	w0, 0
.L67:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1150:
	.size	_ZL14ImIsPowerOfTwoi, .-_ZL14ImIsPowerOfTwoi
	.align	2
	.type	_ZL9ImToUpperc, %function
_ZL9ImToUpperc:
.LFB1153:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	strb	w0, [sp, 15]
	ldrb	w0, [sp, 15]
	cmp	w0, 96
	bls	.L70
	ldrb	w0, [sp, 15]
	cmp	w0, 122
	bhi	.L70
	ldrb	w0, [sp, 15]
	and	w0, w0, -33
	strb	w0, [sp, 15]
	ldrb	w0, [sp, 15]
	b	.L71
.L70:
	ldrb	w0, [sp, 15]
.L71:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1153:
	.size	_ZL9ImToUpperc, .-_ZL9ImToUpperc
	.align	2
	.type	_ZL14ImCharIsBlankAc, %function
_ZL14ImCharIsBlankAc:
.LFB1154:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	strb	w0, [sp, 15]
	ldrb	w0, [sp, 15]
	cmp	w0, 32
	beq	.L74
	ldrb	w0, [sp, 15]
	cmp	w0, 9
	bne	.L75
.L74:
	mov	w0, 1
	b	.L76
.L75:
	mov	w0, 0
.L76:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1154:
	.size	_ZL14ImCharIsBlankAc, .-_ZL14ImCharIsBlankAc
	.align	2
	.type	_ZmlRK6ImVec2f, %function
_ZmlRK6ImVec2f:
.LFB1156:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	s0, [sp, 20]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	s0, [sp, 20]
	fmul	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	s0, [sp, 20]
	fmul	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L80
	bl	__stack_chk_fail
.L80:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1156:
	.size	_ZmlRK6ImVec2f, .-_ZmlRK6ImVec2f
	.align	2
	.type	_ZdvRK6ImVec2f, %function
_ZdvRK6ImVec2f:
.LFB1157:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	s0, [sp, 20]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	s0, [sp, 20]
	fdiv	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	s0, [sp, 20]
	fdiv	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L83
	bl	__stack_chk_fail
.L83:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1157:
	.size	_ZdvRK6ImVec2f, .-_ZdvRK6ImVec2f
	.align	2
	.type	_ZplRK6ImVec2S1_, %function
_ZplRK6ImVec2S1_:
.LFB1158:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fadd	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L86
	bl	__stack_chk_fail
.L86:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1158:
	.size	_ZplRK6ImVec2S1_, .-_ZplRK6ImVec2S1_
	.align	2
	.type	_ZmiRK6ImVec2S1_, %function
_ZmiRK6ImVec2S1_:
.LFB1159:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fsub	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L89
	bl	__stack_chk_fail
.L89:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1159:
	.size	_ZmiRK6ImVec2S1_, .-_ZmiRK6ImVec2S1_
	.align	2
	.type	_ZmlRK6ImVec2S1_, %function
_ZmlRK6ImVec2S1_:
.LFB1160:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fmul	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fmul	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L92
	bl	__stack_chk_fail
.L92:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1160:
	.size	_ZmlRK6ImVec2S1_, .-_ZmlRK6ImVec2S1_
	.align	2
	.type	_ZdvRK6ImVec2S1_, %function
_ZdvRK6ImVec2S1_:
.LFB1161:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fdiv	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fdiv	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L95
	bl	__stack_chk_fail
.L95:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1161:
	.size	_ZdvRK6ImVec2S1_, .-_ZdvRK6ImVec2S1_
	.align	2
	.type	_ZpLR6ImVec2RKS_, %function
_ZpLR6ImVec2RKS_:
.LFB1164:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 4]
	ldr	x0, [sp, 8]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1164:
	.size	_ZpLR6ImVec2RKS_, .-_ZpLR6ImVec2RKS_
	.align	2
	.type	_ZmIR6ImVec2RKS_, %function
_ZmIR6ImVec2RKS_:
.LFB1165:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fsub	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 4]
	ldr	x0, [sp, 8]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1165:
	.size	_ZmIR6ImVec2RKS_, .-_ZmIR6ImVec2RKS_
	.align	2
	.type	_ZL5ImAbsf, %function
_ZL5ImAbsf:
.LFB1176:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	ldr	s0, [sp, 12]
	fabs	s0, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1176:
	.size	_ZL5ImAbsf, .-_ZL5ImAbsf
	.align	2
	.type	_ZL5ImMinRK6ImVec2S1_, %function
_ZL5ImMinRK6ImVec2S1_:
.LFB1189:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bmi	.L111
	b	.L113
.L111:
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	b	.L105
.L113:
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
.L105:
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 4]
	fcmpe	s2, s1
	bmi	.L112
	b	.L114
.L112:
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	b	.L108
.L114:
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 4]
.L108:
	add	x0, sp, 32
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L110
	bl	__stack_chk_fail
.L110:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1189:
	.size	_ZL5ImMinRK6ImVec2S1_, .-_ZL5ImMinRK6ImVec2S1_
	.align	2
	.type	_ZL5ImMaxRK6ImVec2S1_, %function
_ZL5ImMaxRK6ImVec2S1_:
.LFB1190:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bge	.L124
	b	.L126
.L124:
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	b	.L118
.L126:
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
.L118:
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 4]
	fcmpe	s2, s1
	bge	.L125
	b	.L127
.L125:
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	b	.L121
.L127:
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 4]
.L121:
	add	x0, sp, 32
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L123
	bl	__stack_chk_fail
.L123:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1190:
	.size	_ZL5ImMaxRK6ImVec2S1_, .-_ZL5ImMaxRK6ImVec2S1_
	.align	2
	.type	_ZL7ImClampRK6ImVec2S1_S_, %function
_ZL7ImClampRK6ImVec2S1_S_:
.LFB1191:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	s1, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bmi	.L143
	b	.L147
.L143:
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	b	.L131
.L147:
	ldr	x0, [sp, 40]
	ldr	s1, [x0]
	ldr	s0, [sp, 24]
	fcmpe	s1, s0
	bgt	.L144
	b	.L148
.L144:
	ldr	s0, [sp, 24]
	b	.L131
.L148:
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
.L131:
	ldr	x0, [sp, 40]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 32]
	ldr	s1, [x0, 4]
	fcmpe	s2, s1
	bmi	.L145
	b	.L149
.L145:
	ldr	x0, [sp, 32]
	ldr	s1, [x0, 4]
	b	.L137
.L149:
	ldr	x0, [sp, 40]
	ldr	s2, [x0, 4]
	ldr	s1, [sp, 28]
	fcmpe	s2, s1
	bgt	.L146
	b	.L150
.L146:
	ldr	s1, [sp, 28]
	b	.L137
.L150:
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 4]
.L137:
	add	x0, sp, 48
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 48]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L142
	bl	__stack_chk_fail
.L142:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1191:
	.size	_ZL7ImClampRK6ImVec2S1_S_, .-_ZL7ImClampRK6ImVec2S1_S_
	.align	2
	.type	_ZL6ImLerpRK6ImVec2S1_S1_, %function
_ZL6ImLerpRK6ImVec2S1_S1_:
.LFB1193:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	s1, [x0]
	ldr	x0, [sp, 32]
	ldr	s2, [x0]
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
	fsub	s2, s2, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	fmul	s0, s2, s0
	fadd	s3, s1, s0
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 32]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fsub	s2, s2, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 4]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	add	x0, sp, 48
	fmov	s1, s0
	fmov	s0, s3
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 48]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L153
	bl	__stack_chk_fail
.L153:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1193:
	.size	_ZL6ImLerpRK6ImVec2S1_S1_, .-_ZL6ImLerpRK6ImVec2S1_S1_
	.align	2
	.type	_ZL10ImSaturatef, %function
_ZL10ImSaturatef:
.LFB1195:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	ldr	s0, [sp, 12]
	fcmpe	s0, #0.0
	bmi	.L162
	b	.L164
.L162:
	movi	v0.2s, #0
	b	.L161
.L164:
	ldr	s1, [sp, 12]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	bgt	.L163
	b	.L165
.L163:
	fmov	s0, 1.0e+0
	b	.L161
.L165:
	ldr	s0, [sp, 12]
.L161:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1195:
	.size	_ZL10ImSaturatef, .-_ZL10ImSaturatef
	.align	2
	.type	_ZL11ImLengthSqrRK6ImVec2, %function
_ZL11ImLengthSqrRK6ImVec2:
.LFB1196:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [x0]
	fmul	s1, s1, s0
	ldr	x0, [sp, 8]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 4]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1196:
	.size	_ZL11ImLengthSqrRK6ImVec2, .-_ZL11ImLengthSqrRK6ImVec2
	.align	2
	.type	_ZL7ImFloorf, %function
_ZL7ImFloorf:
.LFB1199:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	ldr	s0, [sp, 12]
	fcvtzs	s0, s0
	scvtf	s0, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1199:
	.size	_ZL7ImFloorf, .-_ZL7ImFloorf
	.align	2
	.type	_ZL13ImFloorSignedf, %function
_ZL13ImFloorSignedf:
.LFB1200:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	ldr	s0, [sp, 12]
	fcmpe	s0, #0.0
	bge	.L171
	ldr	s0, [sp, 12]
	fcvtzs	s0, s0
	scvtf	s0, s0
	ldr	s1, [sp, 12]
	fcmp	s1, s0
	bne	.L172
.L171:
	ldr	s0, [sp, 12]
	fcvtzs	s0, s0
	scvtf	s0, s0
	b	.L173
.L172:
	ldr	s0, [sp, 12]
	fcvtzs	w0, s0
	sub	w0, w0, #1
	scvtf	s0, w0
.L173:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1200:
	.size	_ZL13ImFloorSignedf, .-_ZL13ImFloorSignedf
	.align	2
	.type	_ZL7ImFloorRK6ImVec2, %function
_ZL7ImFloorRK6ImVec2:
.LFB1201:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	fcvtzs	s0, s0
	scvtf	s2, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 4]
	fcvtzs	s0, s0
	scvtf	s0, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L177
	bl	__stack_chk_fail
.L177:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1201:
	.size	_ZL7ImFloorRK6ImVec2, .-_ZL7ImFloorRK6ImVec2
	.align	2
	.type	_ZL13ImFloorSignedRK6ImVec2, %function
_ZL13ImFloorSignedRK6ImVec2:
.LFB1202:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -48
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
	bl	_ZL13ImFloorSignedf
	fmov	s8, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	bl	_ZL13ImFloorSignedf
	add	x0, sp, 48
	fmov	s1, s0
	fmov	s0, s8
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 48]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L180
	bl	__stack_chk_fail
.L180:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1202:
	.size	_ZL13ImFloorSignedRK6ImVec2, .-_ZL13ImFloorSignedRK6ImVec2
	.align	2
	.type	_ZL40ImIsFloatAboveGuaranteedIntegerPrecisionf, %function
_ZL40ImIsFloatAboveGuaranteedIntegerPrecisionf:
.LFB1208:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	ldr	s0, [sp, 12]
	mov	w0, -880803840
	fmov	s1, w0
	fcmpe	s0, s1
	bls	.L182
	ldr	s0, [sp, 12]
	mov	w0, 1266679808
	fmov	s1, w0
	fcmpe	s0, s1
	bge	.L182
	b	.L187
.L182:
	mov	w0, 1
	b	.L185
.L187:
	mov	w0, 0
.L185:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1208:
	.size	_ZL40ImIsFloatAboveGuaranteedIntegerPrecisionf, .-_ZL40ImIsFloatAboveGuaranteedIntegerPrecisionf
	.section	.text._Z14ImTriangleAreaRK6ImVec2S1_S1_,"axG",@progbits,_Z14ImTriangleAreaRK6ImVec2S1_S1_,comdat
	.align	2
	.weak	_Z14ImTriangleAreaRK6ImVec2S1_S1_
	.type	_Z14ImTriangleAreaRK6ImVec2S1_S1_, %function
_Z14ImTriangleAreaRK6ImVec2S1_S1_:
.LFB1209:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	x2, [sp, 8]
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 16]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 4]
	fsub	s0, s2, s0
	fmul	s1, s1, s0
	ldr	x0, [sp, 16]
	ldr	s2, [x0]
	ldr	x0, [sp, 8]
	ldr	s3, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 4]
	fsub	s0, s3, s0
	fmul	s0, s2, s0
	fadd	s1, s1, s0
	ldr	x0, [sp, 8]
	ldr	s2, [x0]
	ldr	x0, [sp, 24]
	ldr	s3, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fsub	s0, s3, s0
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	fabs	s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1209:
	.size	_Z14ImTriangleAreaRK6ImVec2S1_S1_, .-_Z14ImTriangleAreaRK6ImVec2S1_S1_
	.section	.text._ZN6ImVec1C2Ev,"axG",@progbits,_ZN6ImVec1C5Ev,comdat
	.align	2
	.weak	_ZN6ImVec1C2Ev
	.type	_ZN6ImVec1C2Ev, %function
_ZN6ImVec1C2Ev:
.LFB1211:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1211:
	.size	_ZN6ImVec1C2Ev, .-_ZN6ImVec1C2Ev
	.weak	_ZN6ImVec1C1Ev
	.set	_ZN6ImVec1C1Ev,_ZN6ImVec1C2Ev
	.section	.text._ZN8ImVec2ihC2Ev,"axG",@progbits,_ZN8ImVec2ihC5Ev,comdat
	.align	2
	.weak	_ZN8ImVec2ihC2Ev
	.type	_ZN8ImVec2ihC2Ev, %function
_ZN8ImVec2ihC2Ev:
.LFB1217:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	strh	wzr, [x0]
	ldr	x0, [sp, 8]
	strh	wzr, [x0, 2]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1217:
	.size	_ZN8ImVec2ihC2Ev, .-_ZN8ImVec2ihC2Ev
	.weak	_ZN8ImVec2ihC1Ev
	.set	_ZN8ImVec2ihC1Ev,_ZN8ImVec2ihC2Ev
	.section	.text._ZN8ImVec2ihC2Ess,"axG",@progbits,_ZN8ImVec2ihC5Ess,comdat
	.align	2
	.weak	_ZN8ImVec2ihC2Ess
	.type	_ZN8ImVec2ihC2Ess, %function
_ZN8ImVec2ihC2Ess:
.LFB1220:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	strh	w1, [sp, 6]
	strh	w2, [sp, 4]
	ldr	x0, [sp, 8]
	ldrh	w1, [sp, 6]
	strh	w1, [x0]
	ldr	x0, [sp, 8]
	ldrh	w1, [sp, 4]
	strh	w1, [x0, 2]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1220:
	.size	_ZN8ImVec2ihC2Ess, .-_ZN8ImVec2ihC2Ess
	.weak	_ZN8ImVec2ihC1Ess
	.set	_ZN8ImVec2ihC1Ess,_ZN8ImVec2ihC2Ess
	.section	.text._ZN8ImVec2ihC2ERK6ImVec2,"axG",@progbits,_ZN8ImVec2ihC5ERK6ImVec2,comdat
	.align	2
	.weak	_ZN8ImVec2ihC2ERK6ImVec2
	.type	_ZN8ImVec2ihC2ERK6ImVec2, %function
_ZN8ImVec2ihC2ERK6ImVec2:
.LFB1223:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fcvtzs	s0, s0
	umov	w0, v0.h[0]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fcvtzs	s0, s0
	umov	w0, v0.h[0]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0, 2]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1223:
	.size	_ZN8ImVec2ihC2ERK6ImVec2, .-_ZN8ImVec2ihC2ERK6ImVec2
	.weak	_ZN8ImVec2ihC1ERK6ImVec2
	.set	_ZN8ImVec2ihC1ERK6ImVec2,_ZN8ImVec2ihC2ERK6ImVec2
	.section	.text._ZN6ImRectC2Ev,"axG",@progbits,_ZN6ImRectC5Ev,comdat
	.align	2
	.weak	_ZN6ImRectC2Ev
	.type	_ZN6ImRectC2Ev, %function
_ZN6ImRectC2Ev:
.LFB1226:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1226:
	.size	_ZN6ImRectC2Ev, .-_ZN6ImRectC2Ev
	.weak	_ZN6ImRectC1Ev
	.set	_ZN6ImRectC1Ev,_ZN6ImRectC2Ev
	.section	.text._ZN6ImRectC2ERK6ImVec2S2_,"axG",@progbits,_ZN6ImRectC5ERK6ImVec2S2_,comdat
	.align	2
	.weak	_ZN6ImRectC2ERK6ImVec2S2_
	.type	_ZN6ImRectC2ERK6ImVec2S2_, %function
_ZN6ImRectC2ERK6ImVec2S2_:
.LFB1229:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	x2, [sp, 8]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 16]
	ldr	x1, [x1]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 8]
	ldr	x1, [x1]
	str	x1, [x0, 8]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1229:
	.size	_ZN6ImRectC2ERK6ImVec2S2_, .-_ZN6ImRectC2ERK6ImVec2S2_
	.weak	_ZN6ImRectC1ERK6ImVec2S2_
	.set	_ZN6ImRectC1ERK6ImVec2S2_,_ZN6ImRectC2ERK6ImVec2S2_
	.section	.text._ZN6ImRectC2ERK6ImVec4,"axG",@progbits,_ZN6ImRectC5ERK6ImVec4,comdat
	.align	2
	.weak	_ZN6ImRectC2ERK6ImVec4
	.type	_ZN6ImRectC2ERK6ImVec4, %function
_ZN6ImRectC2ERK6ImVec4:
.LFB1232:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 4]
	mov	x0, x1
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	add	x1, x0, 8
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 8]
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 12]
	mov	x0, x1
	bl	_ZN6ImVec2C1Eff
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1232:
	.size	_ZN6ImRectC2ERK6ImVec4, .-_ZN6ImRectC2ERK6ImVec4
	.weak	_ZN6ImRectC1ERK6ImVec4
	.set	_ZN6ImRectC1ERK6ImVec4,_ZN6ImRectC2ERK6ImVec4
	.section	.text._ZN6ImRectC2Effff,"axG",@progbits,_ZN6ImRectC5Effff,comdat
	.align	2
	.weak	_ZN6ImRectC2Effff
	.type	_ZN6ImRectC2Effff, %function
_ZN6ImRectC2Effff:
.LFB1235:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	s0, [sp, 36]
	str	s1, [sp, 32]
	str	s2, [sp, 28]
	str	s3, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	s1, [sp, 32]
	ldr	s0, [sp, 36]
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 40]
	add	x0, x0, 8
	ldr	s1, [sp, 24]
	ldr	s0, [sp, 28]
	bl	_ZN6ImVec2C1Eff
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1235:
	.size	_ZN6ImRectC2Effff, .-_ZN6ImRectC2Effff
	.weak	_ZN6ImRectC1Effff
	.set	_ZN6ImRectC1Effff,_ZN6ImRectC2Effff
	.section	.text._ZNK6ImRect7GetSizeEv,"axG",@progbits,_ZNK6ImRect7GetSizeEv,comdat
	.align	2
	.weak	_ZNK6ImRect7GetSizeEv
	.type	_ZNK6ImRect7GetSizeEv, %function
_ZNK6ImRect7GetSizeEv:
.LFB1238:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	fsub	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 12]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L200
	bl	__stack_chk_fail
.L200:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1238:
	.size	_ZNK6ImRect7GetSizeEv, .-_ZNK6ImRect7GetSizeEv
	.section	.text._ZNK6ImRect8GetWidthEv,"axG",@progbits,_ZNK6ImRect8GetWidthEv,comdat
	.align	2
	.weak	_ZNK6ImRect8GetWidthEv
	.type	_ZNK6ImRect8GetWidthEv, %function
_ZNK6ImRect8GetWidthEv:
.LFB1239:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0]
	fsub	s0, s1, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1239:
	.size	_ZNK6ImRect8GetWidthEv, .-_ZNK6ImRect8GetWidthEv
	.section	.text._ZNK6ImRect9GetHeightEv,"axG",@progbits,_ZNK6ImRect9GetHeightEv,comdat
	.align	2
	.weak	_ZNK6ImRect9GetHeightEv
	.type	_ZNK6ImRect9GetHeightEv, %function
_ZNK6ImRect9GetHeightEv:
.LFB1240:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 12]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1240:
	.size	_ZNK6ImRect9GetHeightEv, .-_ZNK6ImRect9GetHeightEv
	.section	.text._ZNK6ImRect5GetBLEv,"axG",@progbits,_ZNK6ImRect5GetBLEv,comdat
	.align	2
	.weak	_ZNK6ImRect5GetBLEv
	.type	_ZNK6ImRect5GetBLEv, %function
_ZNK6ImRect5GetBLEv:
.LFB1244:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 12]
	add	x0, sp, 32
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L207
	bl	__stack_chk_fail
.L207:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1244:
	.size	_ZNK6ImRect5GetBLEv, .-_ZNK6ImRect5GetBLEv
	.section	.text._ZNK6ImRect5GetBREv,"axG",@progbits,_ZNK6ImRect5GetBREv,comdat
	.align	2
	.weak	_ZNK6ImRect5GetBREv
	.type	_ZNK6ImRect5GetBREv, %function
_ZNK6ImRect5GetBREv:
.LFB1245:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1245:
	.size	_ZNK6ImRect5GetBREv, .-_ZNK6ImRect5GetBREv
	.section	.text._ZNK6ImRect8ContainsERK6ImVec2,"axG",@progbits,_ZNK6ImRect8ContainsERK6ImVec2,comdat
	.align	2
	.weak	_ZNK6ImRect8ContainsERK6ImVec2
	.type	_ZNK6ImRect8ContainsERK6ImVec2, %function
_ZNK6ImRect8ContainsERK6ImVec2:
.LFB1246:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp]
	ldr	s1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bge	.L218
	b	.L211
.L218:
	ldr	x0, [sp]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bge	.L219
	b	.L211
.L219:
	ldr	x0, [sp]
	ldr	s1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 8]
	fcmpe	s1, s0
	bmi	.L220
	b	.L211
.L220:
	ldr	x0, [sp]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 12]
	fcmpe	s1, s0
	bmi	.L221
	b	.L211
.L221:
	mov	w0, 1
	b	.L216
.L211:
	mov	w0, 0
.L216:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1246:
	.size	_ZNK6ImRect8ContainsERK6ImVec2, .-_ZNK6ImRect8ContainsERK6ImVec2
	.section	.text._ZNK6ImRect8ContainsERKS_,"axG",@progbits,_ZNK6ImRect8ContainsERKS_,comdat
	.align	2
	.weak	_ZNK6ImRect8ContainsERKS_
	.type	_ZNK6ImRect8ContainsERKS_, %function
_ZNK6ImRect8ContainsERKS_:
.LFB1247:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp]
	ldr	s1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bge	.L230
	b	.L223
.L230:
	ldr	x0, [sp]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bge	.L231
	b	.L223
.L231:
	ldr	x0, [sp]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 8]
	fcmpe	s1, s0
	bls	.L232
	b	.L223
.L232:
	ldr	x0, [sp]
	ldr	s1, [x0, 12]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 12]
	fcmpe	s1, s0
	bls	.L233
	b	.L223
.L233:
	mov	w0, 1
	b	.L228
.L223:
	mov	w0, 0
.L228:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1247:
	.size	_ZNK6ImRect8ContainsERKS_, .-_ZNK6ImRect8ContainsERKS_
	.section	.text._ZNK6ImRect8OverlapsERKS_,"axG",@progbits,_ZNK6ImRect8OverlapsERKS_,comdat
	.align	2
	.weak	_ZNK6ImRect8OverlapsERKS_
	.type	_ZNK6ImRect8OverlapsERKS_, %function
_ZNK6ImRect8OverlapsERKS_:
.LFB1248:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 12]
	fcmpe	s1, s0
	bmi	.L242
	b	.L235
.L242:
	ldr	x0, [sp]
	ldr	s1, [x0, 12]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bgt	.L243
	b	.L235
.L243:
	ldr	x0, [sp]
	ldr	s1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 8]
	fcmpe	s1, s0
	bmi	.L244
	b	.L235
.L244:
	ldr	x0, [sp]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bgt	.L245
	b	.L235
.L245:
	mov	w0, 1
	b	.L240
.L235:
	mov	w0, 0
.L240:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1248:
	.size	_ZNK6ImRect8OverlapsERKS_, .-_ZNK6ImRect8OverlapsERKS_
	.section	.text._ZN6ImRect3AddERK6ImVec2,"axG",@progbits,_ZN6ImRect3AddERK6ImVec2,comdat
	.align	2
	.weak	_ZN6ImRect3AddERK6ImVec2
	.type	_ZN6ImRect3AddERK6ImVec2, %function
_ZN6ImRect3AddERK6ImVec2:
.LFB1249:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bgt	.L255
	b	.L247
.L255:
	ldr	x0, [sp]
	ldr	s0, [x0]
	ldr	x0, [sp, 8]
	str	s0, [x0]
.L247:
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bgt	.L256
	b	.L249
.L256:
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 8]
	str	s0, [x0, 4]
.L249:
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 8]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bmi	.L257
	b	.L251
.L257:
	ldr	x0, [sp]
	ldr	s0, [x0]
	ldr	x0, [sp, 8]
	str	s0, [x0, 8]
.L251:
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 12]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bmi	.L258
	b	.L259
.L258:
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 8]
	str	s0, [x0, 12]
.L259:
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1249:
	.size	_ZN6ImRect3AddERK6ImVec2, .-_ZN6ImRect3AddERK6ImVec2
	.section	.text._ZN6ImRect3AddERKS_,"axG",@progbits,_ZN6ImRect3AddERKS_,comdat
	.align	2
	.weak	_ZN6ImRect3AddERKS_
	.type	_ZN6ImRect3AddERKS_, %function
_ZN6ImRect3AddERKS_:
.LFB1250:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bgt	.L269
	b	.L261
.L269:
	ldr	x0, [sp]
	ldr	s0, [x0]
	ldr	x0, [sp, 8]
	str	s0, [x0]
.L261:
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bgt	.L270
	b	.L263
.L270:
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 8]
	str	s0, [x0, 4]
.L263:
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 8]
	ldr	x0, [sp]
	ldr	s0, [x0, 8]
	fcmpe	s1, s0
	bmi	.L271
	b	.L265
.L271:
	ldr	x0, [sp]
	ldr	s0, [x0, 8]
	ldr	x0, [sp, 8]
	str	s0, [x0, 8]
.L265:
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 12]
	ldr	x0, [sp]
	ldr	s0, [x0, 12]
	fcmpe	s1, s0
	bmi	.L272
	b	.L273
.L272:
	ldr	x0, [sp]
	ldr	s0, [x0, 12]
	ldr	x0, [sp, 8]
	str	s0, [x0, 12]
.L273:
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1250:
	.size	_ZN6ImRect3AddERKS_, .-_ZN6ImRect3AddERKS_
	.section	.text._ZN6ImRect6ExpandEf,"axG",@progbits,_ZN6ImRect6ExpandEf,comdat
	.align	2
	.weak	_ZN6ImRect6ExpandEf
	.type	_ZN6ImRect6ExpandEf, %function
_ZN6ImRect6ExpandEf:
.LFB1251:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	s0, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	s0, [sp, 4]
	fsub	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	s0, [sp, 4]
	fsub	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 12]
	ldr	s0, [sp, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 12]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1251:
	.size	_ZN6ImRect6ExpandEf, .-_ZN6ImRect6ExpandEf
	.section	.text._ZN6ImRect6ExpandERK6ImVec2,"axG",@progbits,_ZN6ImRect6ExpandERK6ImVec2,comdat
	.align	2
	.weak	_ZN6ImRect6ExpandERK6ImVec2
	.type	_ZN6ImRect6ExpandERK6ImVec2, %function
_ZN6ImRect6ExpandERK6ImVec2:
.LFB1252:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fsub	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 8]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 12]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 12]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1252:
	.size	_ZN6ImRect6ExpandERK6ImVec2, .-_ZN6ImRect6ExpandERK6ImVec2
	.section	.text._ZN6ImRect9TranslateERK6ImVec2,"axG",@progbits,_ZN6ImRect9TranslateERK6ImVec2,comdat
	.align	2
	.weak	_ZN6ImRect9TranslateERK6ImVec2
	.type	_ZN6ImRect9TranslateERK6ImVec2, %function
_ZN6ImRect9TranslateERK6ImVec2:
.LFB1253:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 8]
	ldr	x0, [sp]
	ldr	s0, [x0]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 12]
	ldr	x0, [sp]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 12]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1253:
	.size	_ZN6ImRect9TranslateERK6ImVec2, .-_ZN6ImRect9TranslateERK6ImVec2
	.section	.text._ZN6ImRect10TranslateXEf,"axG",@progbits,_ZN6ImRect10TranslateXEf,comdat
	.align	2
	.weak	_ZN6ImRect10TranslateXEf
	.type	_ZN6ImRect10TranslateXEf, %function
_ZN6ImRect10TranslateXEf:
.LFB1254:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	s0, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	s0, [sp, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1254:
	.size	_ZN6ImRect10TranslateXEf, .-_ZN6ImRect10TranslateXEf
	.section	.text._ZN6ImRect10TranslateYEf,"axG",@progbits,_ZN6ImRect10TranslateYEf,comdat
	.align	2
	.weak	_ZN6ImRect10TranslateYEf
	.type	_ZN6ImRect10TranslateYEf, %function
_ZN6ImRect10TranslateYEf:
.LFB1255:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	s0, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	s0, [sp, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 12]
	ldr	s0, [sp, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 8]
	str	s0, [x0, 12]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1255:
	.size	_ZN6ImRect10TranslateYEf, .-_ZN6ImRect10TranslateYEf
	.section	.text._ZN6ImRect8ClipWithERKS_,"axG",@progbits,_ZN6ImRect8ClipWithERKS_,comdat
	.align	2
	.weak	_ZN6ImRect8ClipWithERKS_
	.type	_ZN6ImRect8ClipWithERKS_, %function
_ZN6ImRect8ClipWithERKS_:
.LFB1256:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 32]
	ldr	x19, [sp, 40]
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19]
	str	s0, [x19, 4]
	ldr	x0, [sp, 40]
	add	x2, x0, 8
	ldr	x0, [sp, 32]
	add	x0, x0, 8
	ldr	x19, [sp, 40]
	mov	x1, x0
	mov	x0, x2
	bl	_ZL5ImMinRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 8]
	str	s0, [x19, 12]
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1256:
	.size	_ZN6ImRect8ClipWithERKS_, .-_ZN6ImRect8ClipWithERKS_
	.section	.text._ZN6ImRect12ClipWithFullERKS_,"axG",@progbits,_ZN6ImRect12ClipWithFullERKS_,comdat
	.align	2
	.weak	_ZN6ImRect12ClipWithFullERKS_
	.type	_ZN6ImRect12ClipWithFullERKS_, %function
_ZN6ImRect12ClipWithFullERKS_:
.LFB1257:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	ldr	x2, [sp, 40]
	ldr	x1, [sp, 32]
	ldr	x19, [sp, 40]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 8]
	ldr	s1, [x0, 12]
	mov	x0, x2
	bl	_ZL7ImClampRK6ImVec2S1_S_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19]
	str	s0, [x19, 4]
	ldr	x0, [sp, 40]
	add	x2, x0, 8
	ldr	x1, [sp, 32]
	ldr	x19, [sp, 40]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 8]
	ldr	s1, [x0, 12]
	mov	x0, x2
	bl	_ZL7ImClampRK6ImVec2S1_S_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 8]
	str	s0, [x19, 12]
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1257:
	.size	_ZN6ImRect12ClipWithFullERKS_, .-_ZN6ImRect12ClipWithFullERKS_
	.section	.text._ZNK6ImRect10IsInvertedEv,"axG",@progbits,_ZNK6ImRect10IsInvertedEv,comdat
	.align	2
	.weak	_ZNK6ImRect10IsInvertedEv
	.type	_ZNK6ImRect10IsInvertedEv, %function
_ZNK6ImRect10IsInvertedEv:
.LFB1259:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 8]
	fcmpe	s1, s0
	bgt	.L282
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 12]
	fcmpe	s1, s0
	bgt	.L282
	b	.L287
.L282:
	mov	w0, 1
	b	.L285
.L287:
	mov	w0, 0
.L285:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1259:
	.size	_ZNK6ImRect10IsInvertedEv, .-_ZNK6ImRect10IsInvertedEv
	.section	.text._ZNK6ImRect6ToVec4Ev,"axG",@progbits,_ZNK6ImRect6ToVec4Ev,comdat
	.align	2
	.weak	_ZNK6ImRect6ToVec4Ev
	.type	_ZNK6ImRect6ToVec4Ev, %function
_ZNK6ImRect6ToVec4Ev:
.LFB1260:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	s3, [x0, 12]
	add	x0, sp, 40
	bl	_ZN6ImVec4C1Effff
	ldp	x0, x1, [sp, 40]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L290
	bl	__stack_chk_fail
.L290:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1260:
	.size	_ZNK6ImRect6ToVec4Ev, .-_ZNK6ImRect6ToVec4Ev
	.section	.text._Z17ImBitArrayTestBitPKji,"axG",@progbits,_Z17ImBitArrayTestBitPKji,comdat
	.align	2
	.weak	_Z17ImBitArrayTestBitPKji
	.type	_Z17ImBitArrayTestBitPKji, %function
_Z17ImBitArrayTestBitPKji:
.LFB1261:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	w0, [sp, 4]
	and	w0, w0, 31
	mov	w1, 1
	lsl	w0, w1, w0
	str	w0, [sp, 28]
	ldr	w0, [sp, 4]
	asr	w0, w0, 5
	sxtw	x0, w0
	lsl	x0, x0, 2
	ldr	x1, [sp, 8]
	add	x0, x1, x0
	ldr	w1, [x0]
	ldr	w0, [sp, 28]
	and	w0, w1, w0
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1261:
	.size	_Z17ImBitArrayTestBitPKji, .-_Z17ImBitArrayTestBitPKji
	.section	.text._Z16ImBitArraySetBitPji,"axG",@progbits,_Z16ImBitArraySetBitPji,comdat
	.align	2
	.weak	_Z16ImBitArraySetBitPji
	.type	_Z16ImBitArraySetBitPji, %function
_Z16ImBitArraySetBitPji:
.LFB1263:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	w0, [sp, 4]
	and	w0, w0, 31
	mov	w1, 1
	lsl	w0, w1, w0
	str	w0, [sp, 28]
	ldr	w0, [sp, 4]
	asr	w0, w0, 5
	sxtw	x0, w0
	lsl	x0, x0, 2
	ldr	x1, [sp, 8]
	add	x0, x1, x0
	ldr	w2, [x0]
	ldr	w0, [sp, 4]
	asr	w0, w0, 5
	sxtw	x0, w0
	lsl	x0, x0, 2
	ldr	x1, [sp, 8]
	add	x0, x1, x0
	ldr	w1, [sp, 28]
	orr	w1, w2, w1
	str	w1, [x0]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1263:
	.size	_Z16ImBitArraySetBitPji, .-_Z16ImBitArraySetBitPji
	.section	.text._ZN14ImGuiTextIndex5clearEv,"axG",@progbits,_ZN14ImGuiTextIndex5clearEv,comdat
	.align	2
	.weak	_ZN14ImGuiTextIndex5clearEv
	.type	_ZN14ImGuiTextIndex5clearEv, %function
_ZN14ImGuiTextIndex5clearEv:
.LFB1327:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIiE5clearEv
	ldr	x0, [sp, 24]
	str	wzr, [x0, 16]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1327:
	.size	_ZN14ImGuiTextIndex5clearEv, .-_ZN14ImGuiTextIndex5clearEv
	.section	.text._ZN14ImGuiTextIndex4sizeEv,"axG",@progbits,_ZN14ImGuiTextIndex4sizeEv,comdat
	.align	2
	.weak	_ZN14ImGuiTextIndex4sizeEv
	.type	_ZN14ImGuiTextIndex4sizeEv, %function
_ZN14ImGuiTextIndex4sizeEv:
.LFB1328:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1328:
	.size	_ZN14ImGuiTextIndex4sizeEv, .-_ZN14ImGuiTextIndex4sizeEv
	.section	.text._ZN14ImGuiTextIndex14get_line_beginEPKci,"axG",@progbits,_ZN14ImGuiTextIndex14get_line_beginEPKci,comdat
	.align	2
	.weak	_ZN14ImGuiTextIndex14get_line_beginEPKci
	.type	_ZN14ImGuiTextIndex14get_line_beginEPKci, %function
_ZN14ImGuiTextIndex14get_line_beginEPKci:
.LFB1329:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorIiEixEi
	ldr	w0, [x0]
	sxtw	x0, w0
	ldr	x1, [sp, 32]
	add	x0, x1, x0
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1329:
	.size	_ZN14ImGuiTextIndex14get_line_beginEPKci, .-_ZN14ImGuiTextIndex14get_line_beginEPKci
	.section	.text._ZN14ImGuiTextIndex12get_line_endEPKci,"axG",@progbits,_ZN14ImGuiTextIndex12get_line_endEPKci,comdat
	.align	2
	.weak	_ZN14ImGuiTextIndex12get_line_endEPKci
	.type	_ZN14ImGuiTextIndex12get_line_endEPKci, %function
_ZN14ImGuiTextIndex12get_line_endEPKci:
.LFB1330:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	ldr	w0, [sp, 28]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	cmp	w1, w0
	bge	.L300
	ldr	x2, [sp, 40]
	ldr	w0, [sp, 28]
	add	w0, w0, 1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIiEixEi
	ldr	w0, [x0]
	sub	w0, w0, #1
	sxtw	x0, w0
	b	.L301
.L300:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	sxtw	x0, w0
.L301:
	ldr	x1, [sp, 32]
	add	x0, x1, x0
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1330:
	.size	_ZN14ImGuiTextIndex12get_line_endEPKci, .-_ZN14ImGuiTextIndex12get_line_endEPKci
	.section	.text._ZN17ImDrawDataBuilder5ClearEv,"axG",@progbits,_ZN17ImDrawDataBuilder5ClearEv,comdat
	.align	2
	.weak	_ZN17ImDrawDataBuilder5ClearEv
	.type	_ZN17ImDrawDataBuilder5ClearEv, %function
_ZN17ImDrawDataBuilder5ClearEv:
.LFB1331:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 44]
	b	.L304
.L305:
	ldrsw	x0, [sp, 44]
	lsl	x0, x0, 4
	ldr	x1, [sp, 24]
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP10ImDrawListE6resizeEi
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L304:
	ldr	w0, [sp, 44]
	cmp	w0, 1
	ble	.L305
	nop
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1331:
	.size	_ZN17ImDrawDataBuilder5ClearEv, .-_ZN17ImDrawDataBuilder5ClearEv
	.section	.text._ZNK17ImDrawDataBuilder16GetDrawListCountEv,"axG",@progbits,_ZNK17ImDrawDataBuilder16GetDrawListCountEv,comdat
	.align	2
	.weak	_ZNK17ImDrawDataBuilder16GetDrawListCountEv
	.type	_ZNK17ImDrawDataBuilder16GetDrawListCountEv, %function
_ZNK17ImDrawDataBuilder16GetDrawListCountEv:
.LFB1333:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	wzr, [sp, 24]
	str	wzr, [sp, 28]
	b	.L307
.L308:
	ldr	x1, [sp, 8]
	ldrsw	x0, [sp, 28]
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldr	w0, [x0]
	ldr	w1, [sp, 24]
	add	w0, w1, w0
	str	w0, [sp, 24]
	ldr	w0, [sp, 28]
	add	w0, w0, 1
	str	w0, [sp, 28]
.L307:
	ldr	w0, [sp, 28]
	cmp	w0, 1
	ble	.L308
	ldr	w0, [sp, 24]
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1333:
	.size	_ZNK17ImDrawDataBuilder16GetDrawListCountEv, .-_ZNK17ImDrawDataBuilder16GetDrawListCountEv
	.section	.text._ZN13ImGuiStyleModC2Eif,"axG",@progbits,_ZN13ImGuiStyleModC5Eif,comdat
	.align	2
	.weak	_ZN13ImGuiStyleModC2Eif
	.type	_ZN13ImGuiStyleModC2Eif, %function
_ZN13ImGuiStyleModC2Eif:
.LFB1338:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	str	s0, [sp]
	ldr	x0, [sp, 8]
	ldr	w1, [sp, 4]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [sp]
	str	s0, [x0, 4]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1338:
	.size	_ZN13ImGuiStyleModC2Eif, .-_ZN13ImGuiStyleModC2Eif
	.weak	_ZN13ImGuiStyleModC1Eif
	.set	_ZN13ImGuiStyleModC1Eif,_ZN13ImGuiStyleModC2Eif
	.section	.text._ZN13ImGuiStyleModC2Ei6ImVec2,"axG",@progbits,_ZN13ImGuiStyleModC5Ei6ImVec2,comdat
	.align	2
	.weak	_ZN13ImGuiStyleModC2Ei6ImVec2
	.type	_ZN13ImGuiStyleModC2Ei6ImVec2, %function
_ZN13ImGuiStyleModC2Ei6ImVec2:
.LFB1341:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	str	x0, [sp, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	ldr	s0, [sp, 8]
	ldr	x0, [sp, 24]
	str	s0, [x0, 4]
	ldr	s0, [sp, 12]
	ldr	x0, [sp, 24]
	str	s0, [x0, 8]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1341:
	.size	_ZN13ImGuiStyleModC2Ei6ImVec2, .-_ZN13ImGuiStyleModC2Ei6ImVec2
	.weak	_ZN13ImGuiStyleModC1Ei6ImVec2
	.set	_ZN13ImGuiStyleModC1Ei6ImVec2,_ZN13ImGuiStyleModC2Ei6ImVec2
	.section	.text._ZN21ImGuiComboPreviewDataC2Ev,"axG",@progbits,_ZN21ImGuiComboPreviewDataC5Ev,comdat
	.align	2
	.weak	_ZN21ImGuiComboPreviewDataC2Ev
	.type	_ZN21ImGuiComboPreviewDataC2Ev, %function
_ZN21ImGuiComboPreviewDataC2Ev:
.LFB1344:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN6ImVec2C1Ev
	mov	x2, 48
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1344:
	.size	_ZN21ImGuiComboPreviewDataC2Ev, .-_ZN21ImGuiComboPreviewDataC2Ev
	.weak	_ZN21ImGuiComboPreviewDataC1Ev
	.set	_ZN21ImGuiComboPreviewDataC1Ev,_ZN21ImGuiComboPreviewDataC2Ev
	.section	.text._ZN16ImGuiMenuColumnsC2Ev,"axG",@progbits,_ZN16ImGuiMenuColumnsC5Ev,comdat
	.align	2
	.weak	_ZN16ImGuiMenuColumnsC2Ev
	.type	_ZN16ImGuiMenuColumnsC2Ev, %function
_ZN16ImGuiMenuColumnsC2Ev:
.LFB1347:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	mov	x2, 28
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1347:
	.size	_ZN16ImGuiMenuColumnsC2Ev, .-_ZN16ImGuiMenuColumnsC2Ev
	.weak	_ZN16ImGuiMenuColumnsC1Ev
	.set	_ZN16ImGuiMenuColumnsC1Ev,_ZN16ImGuiMenuColumnsC2Ev
	.section	.text._ZN19ImGuiInputTextStateC2Ev,"axG",@progbits,_ZN19ImGuiInputTextStateC5Ev,comdat
	.align	2
	.weak	_ZN19ImGuiInputTextStateC2Ev
	.type	_ZN19ImGuiInputTextStateC2Ev, %function
_ZN19ImGuiInputTextStateC2Ev:
.LFB1350:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN8ImVectorItEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN8ImVectorIcEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 48
	bl	_ZN8ImVectorIcEC1Ev
	mov	x2, 3720
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1350:
	.size	_ZN19ImGuiInputTextStateC2Ev, .-_ZN19ImGuiInputTextStateC2Ev
	.weak	_ZN19ImGuiInputTextStateC1Ev
	.set	_ZN19ImGuiInputTextStateC1Ev,_ZN19ImGuiInputTextStateC2Ev
	.section	.text._ZN19ImGuiInputTextState15ClearFreeMemoryEv,"axG",@progbits,_ZN19ImGuiInputTextState15ClearFreeMemoryEv,comdat
	.align	2
	.weak	_ZN19ImGuiInputTextState15ClearFreeMemoryEv
	.type	_ZN19ImGuiInputTextState15ClearFreeMemoryEv, %function
_ZN19ImGuiInputTextState15ClearFreeMemoryEv:
.LFB1353:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN8ImVectorItE5clearEv
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN8ImVectorIcE5clearEv
	ldr	x0, [sp, 24]
	add	x0, x0, 48
	bl	_ZN8ImVectorIcE5clearEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1353:
	.size	_ZN19ImGuiInputTextState15ClearFreeMemoryEv, .-_ZN19ImGuiInputTextState15ClearFreeMemoryEv
	.section	.text._ZN14ImGuiPopupDataC2Ev,"axG",@progbits,_ZN14ImGuiPopupDataC5Ev,comdat
	.align	2
	.weak	_ZN14ImGuiPopupDataC2Ev
	.type	_ZN14ImGuiPopupDataC2Ev, %function
_ZN14ImGuiPopupDataC2Ev:
.LFB1365:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 36
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 44
	bl	_ZN6ImVec2C1Ev
	mov	x2, 56
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	ldr	x0, [sp, 24]
	mov	w1, -1
	str	w1, [x0, 28]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 28]
	ldr	x0, [sp, 24]
	str	w1, [x0, 24]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1365:
	.size	_ZN14ImGuiPopupDataC2Ev, .-_ZN14ImGuiPopupDataC2Ev
	.weak	_ZN14ImGuiPopupDataC1Ev
	.set	_ZN14ImGuiPopupDataC1Ev,_ZN14ImGuiPopupDataC2Ev
	.section	.text._ZN19ImGuiNextWindowDataC2Ev,"axG",@progbits,_ZN19ImGuiNextWindowDataC5Ev,comdat
	.align	2
	.weak	_ZN19ImGuiNextWindowDataC2Ev
	.type	_ZN19ImGuiNextWindowDataC2Ev, %function
_ZN19ImGuiNextWindowDataC2Ev:
.LFB1368:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 40
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 48
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 60
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 100
	bl	_ZN6ImVec2C1Ev
	mov	x2, 112
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1368:
	.size	_ZN19ImGuiNextWindowDataC2Ev, .-_ZN19ImGuiNextWindowDataC2Ev
	.weak	_ZN19ImGuiNextWindowDataC1Ev
	.set	_ZN19ImGuiNextWindowDataC1Ev,_ZN19ImGuiNextWindowDataC2Ev
	.section	.text._ZN19ImGuiNextWindowData10ClearFlagsEv,"axG",@progbits,_ZN19ImGuiNextWindowData10ClearFlagsEv,comdat
	.align	2
	.weak	_ZN19ImGuiNextWindowData10ClearFlagsEv
	.type	_ZN19ImGuiNextWindowData10ClearFlagsEv, %function
_ZN19ImGuiNextWindowData10ClearFlagsEv:
.LFB1370:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1370:
	.size	_ZN19ImGuiNextWindowData10ClearFlagsEv, .-_ZN19ImGuiNextWindowData10ClearFlagsEv
	.section	.text._ZN17ImGuiNextItemDataC2Ev,"axG",@progbits,_ZN17ImGuiNextItemDataC5Ev,comdat
	.align	2
	.weak	_ZN17ImGuiNextItemDataC2Ev
	.type	_ZN17ImGuiNextItemDataC2Ev, %function
_ZN17ImGuiNextItemDataC2Ev:
.LFB1372:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	mov	x2, 20
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1372:
	.size	_ZN17ImGuiNextItemDataC2Ev, .-_ZN17ImGuiNextItemDataC2Ev
	.weak	_ZN17ImGuiNextItemDataC1Ev
	.set	_ZN17ImGuiNextItemDataC1Ev,_ZN17ImGuiNextItemDataC2Ev
	.section	.text._ZN17ImGuiLastItemDataC2Ev,"axG",@progbits,_ZN17ImGuiLastItemDataC5Ev,comdat
	.align	2
	.weak	_ZN17ImGuiLastItemDataC2Ev
	.type	_ZN17ImGuiLastItemDataC2Ev, %function
_ZN17ImGuiLastItemDataC2Ev:
.LFB1376:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 12
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 28
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 44
	bl	_ZN6ImRectC1Ev
	mov	x2, 60
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1376:
	.size	_ZN17ImGuiLastItemDataC2Ev, .-_ZN17ImGuiLastItemDataC2Ev
	.weak	_ZN17ImGuiLastItemDataC1Ev
	.set	_ZN17ImGuiLastItemDataC1Ev,_ZN17ImGuiLastItemDataC2Ev
	.section	.text._ZN15ImGuiStackSizesC2Ev,"axG",@progbits,_ZN15ImGuiStackSizesC5Ev,comdat
	.align	2
	.weak	_ZN15ImGuiStackSizesC2Ev
	.type	_ZN15ImGuiStackSizesC2Ev, %function
_ZN15ImGuiStackSizesC2Ev:
.LFB1379:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	mov	x2, 18
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1379:
	.size	_ZN15ImGuiStackSizesC2Ev, .-_ZN15ImGuiStackSizesC2Ev
	.weak	_ZN15ImGuiStackSizesC1Ev
	.set	_ZN15ImGuiStackSizesC1Ev,_ZN15ImGuiStackSizesC2Ev
	.section	.text._ZN15ImGuiInputEventC2Ev,"axG",@progbits,_ZN15ImGuiInputEventC5Ev,comdat
	.align	2
	.weak	_ZN15ImGuiInputEventC2Ev
	.type	_ZN15ImGuiInputEventC2Ev, %function
_ZN15ImGuiInputEventC2Ev:
.LFB1388:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	mov	x2, 24
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1388:
	.size	_ZN15ImGuiInputEventC2Ev, .-_ZN15ImGuiInputEventC2Ev
	.weak	_ZN15ImGuiInputEventC1Ev
	.set	_ZN15ImGuiInputEventC1Ev,_ZN15ImGuiInputEventC2Ev
	.section	.text._ZN19ImGuiKeyRoutingDataC2Ev,"axG",@progbits,_ZN19ImGuiKeyRoutingDataC5Ev,comdat
	.align	2
	.weak	_ZN19ImGuiKeyRoutingDataC2Ev
	.type	_ZN19ImGuiKeyRoutingDataC2Ev, %function
_ZN19ImGuiKeyRoutingDataC2Ev:
.LFB1391:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	mov	w1, -1
	strh	w1, [x0]
	ldr	x0, [sp, 8]
	strh	wzr, [x0, 2]
	ldr	x0, [sp, 8]
	mov	w1, -1
	strb	w1, [x0, 4]
	ldr	x0, [sp, 8]
	mov	w1, -1
	str	w1, [x0, 12]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 8]
	str	w1, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1391:
	.size	_ZN19ImGuiKeyRoutingDataC2Ev, .-_ZN19ImGuiKeyRoutingDataC2Ev
	.weak	_ZN19ImGuiKeyRoutingDataC1Ev
	.set	_ZN19ImGuiKeyRoutingDataC1Ev,_ZN19ImGuiKeyRoutingDataC2Ev
	.section	.text._ZN20ImGuiKeyRoutingTableC2Ev,"axG",@progbits,_ZN20ImGuiKeyRoutingTableC5Ev,comdat
	.align	2
	.weak	_ZN20ImGuiKeyRoutingTableC2Ev
	.type	_ZN20ImGuiKeyRoutingTableC2Ev, %function
_ZN20ImGuiKeyRoutingTableC2Ev:
.LFB1394:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1394
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 280
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataEC1Ev
	ldr	x0, [sp, 40]
	add	x0, x0, 296
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataEC1Ev
	ldr	x0, [sp, 40]
.LEHB0:
	bl	_ZN20ImGuiKeyRoutingTable5ClearEv
.LEHE0:
	b	.L327
.L326:
	mov	x19, x0
	ldr	x0, [sp, 40]
	add	x0, x0, 296
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataED1Ev
	ldr	x0, [sp, 40]
	add	x0, x0, 280
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataED1Ev
	mov	x0, x19
.LEHB1:
	bl	_Unwind_Resume
.LEHE1:
.L327:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1394:
	.section	.gcc_except_table._ZN20ImGuiKeyRoutingTableC2Ev,"aG",@progbits,_ZN20ImGuiKeyRoutingTableC5Ev,comdat
.LLSDA1394:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1394-.LLSDACSB1394
.LLSDACSB1394:
	.uleb128 .LEHB0-.LFB1394
	.uleb128 .LEHE0-.LEHB0
	.uleb128 .L326-.LFB1394
	.uleb128 0
	.uleb128 .LEHB1-.LFB1394
	.uleb128 .LEHE1-.LEHB1
	.uleb128 0
	.uleb128 0
.LLSDACSE1394:
	.section	.text._ZN20ImGuiKeyRoutingTableC2Ev,"axG",@progbits,_ZN20ImGuiKeyRoutingTableC5Ev,comdat
	.size	_ZN20ImGuiKeyRoutingTableC2Ev, .-_ZN20ImGuiKeyRoutingTableC2Ev
	.weak	_ZN20ImGuiKeyRoutingTableC1Ev
	.set	_ZN20ImGuiKeyRoutingTableC1Ev,_ZN20ImGuiKeyRoutingTableC2Ev
	.section	.text._ZN20ImGuiKeyRoutingTable5ClearEv,"axG",@progbits,_ZN20ImGuiKeyRoutingTable5ClearEv,comdat
	.align	2
	.weak	_ZN20ImGuiKeyRoutingTable5ClearEv
	.type	_ZN20ImGuiKeyRoutingTable5ClearEv, %function
_ZN20ImGuiKeyRoutingTable5ClearEv:
.LFB1396:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 44]
	b	.L329
.L330:
	ldr	x0, [sp, 24]
	ldrsw	x1, [sp, 44]
	mov	w2, -1
	strh	w2, [x0, x1, lsl 1]
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L329:
	ldr	w0, [sp, 44]
	cmp	w0, 139
	ble	.L330
	ldr	x0, [sp, 24]
	add	x0, x0, 280
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv
	ldr	x0, [sp, 24]
	add	x0, x0, 296
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1396:
	.size	_ZN20ImGuiKeyRoutingTable5ClearEv, .-_ZN20ImGuiKeyRoutingTable5ClearEv
	.section	.text._ZN17ImGuiKeyOwnerDataC2Ev,"axG",@progbits,_ZN17ImGuiKeyOwnerDataC5Ev,comdat
	.align	2
	.weak	_ZN17ImGuiKeyOwnerDataC2Ev
	.type	_ZN17ImGuiKeyOwnerDataC2Ev, %function
_ZN17ImGuiKeyOwnerDataC2Ev:
.LFB1398:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	mov	w1, -1
	str	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	strb	wzr, [x0, 9]
	ldr	x0, [sp, 8]
	ldrb	w1, [x0, 9]
	ldr	x0, [sp, 8]
	strb	w1, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1398:
	.size	_ZN17ImGuiKeyOwnerDataC2Ev, .-_ZN17ImGuiKeyOwnerDataC2Ev
	.weak	_ZN17ImGuiKeyOwnerDataC1Ev
	.set	_ZN17ImGuiKeyOwnerDataC1Ev,_ZN17ImGuiKeyOwnerDataC2Ev
	.section	.text._ZN21ImGuiListClipperRange11FromIndicesEii,"axG",@progbits,_ZN21ImGuiListClipperRange11FromIndicesEii,comdat
	.align	2
	.weak	_ZN21ImGuiListClipperRange11FromIndicesEii
	.type	_ZN21ImGuiListClipperRange11FromIndicesEii, %function
_ZN21ImGuiListClipperRange11FromIndicesEii:
.LFB1400:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	str	xzr, [sp, 40]
	str	wzr, [sp, 48]
	ldr	w0, [sp, 28]
	str	w0, [sp, 40]
	ldr	w0, [sp, 24]
	str	w0, [sp, 44]
	add	x0, sp, 56
	add	x1, sp, 40
	ldr	x2, [x1]
	str	x2, [x0]
	ldr	w1, [x1, 8]
	str	w1, [x0, 8]
	ldr	x2, [sp, 56]
	mov	x0, 0
	ldr	w1, [sp, 64]
	bfi	x0, x1, 0, 32
	mov	x4, x2
	mov	x5, x0
	mov	x2, x4
	mov	x3, x5
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x4, [sp, 72]
	ldr	x1, [x0]
	subs	x4, x4, x1
	mov	x1, 0
	beq	.L334
	bl	__stack_chk_fail
.L334:
	mov	x0, x2
	mov	x1, x3
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1400:
	.size	_ZN21ImGuiListClipperRange11FromIndicesEii, .-_ZN21ImGuiListClipperRange11FromIndicesEii
	.section	.text._ZN21ImGuiListClipperRange13FromPositionsEffii,"axG",@progbits,_ZN21ImGuiListClipperRange13FromPositionsEffii,comdat
	.align	2
	.weak	_ZN21ImGuiListClipperRange13FromPositionsEffii
	.type	_ZN21ImGuiListClipperRange13FromPositionsEffii, %function
_ZN21ImGuiListClipperRange13FromPositionsEffii:
.LFB1401:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	s0, [sp, 28]
	str	s1, [sp, 24]
	str	w0, [sp, 20]
	str	w1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	str	xzr, [sp, 40]
	str	wzr, [sp, 48]
	mov	w0, 1
	strb	w0, [sp, 48]
	ldr	s0, [sp, 28]
	fcvtzs	s0, s0
	str	s0, [sp, 40]
	ldr	s0, [sp, 24]
	fcvtzs	s0, s0
	str	s0, [sp, 44]
	ldr	w0, [sp, 20]
	sxtb	w0, w0
	strb	w0, [sp, 49]
	ldr	w0, [sp, 16]
	sxtb	w0, w0
	strb	w0, [sp, 50]
	add	x0, sp, 56
	add	x1, sp, 40
	ldr	x2, [x1]
	str	x2, [x0]
	ldr	w1, [x1, 8]
	str	w1, [x0, 8]
	ldr	x2, [sp, 56]
	mov	x0, 0
	ldr	w1, [sp, 64]
	bfi	x0, x1, 0, 32
	mov	x4, x2
	mov	x5, x0
	mov	x2, x4
	mov	x3, x5
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x4, [sp, 72]
	ldr	x1, [x0]
	subs	x4, x4, x1
	mov	x1, 0
	beq	.L337
	bl	__stack_chk_fail
.L337:
	mov	x0, x2
	mov	x1, x3
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1401:
	.size	_ZN21ImGuiListClipperRange13FromPositionsEffii, .-_ZN21ImGuiListClipperRange13FromPositionsEffii
	.section	.text._ZN20ImGuiListClipperDataC2Ev,"axG",@progbits,_ZN20ImGuiListClipperDataC5Ev,comdat
	.align	2
	.weak	_ZN20ImGuiListClipperDataC2Ev
	.type	_ZN20ImGuiListClipperDataC2Ev, %function
_ZN20ImGuiListClipperDataC2Ev:
.LFB1403:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEC1Ev
	mov	x2, 40
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1403:
	.size	_ZN20ImGuiListClipperDataC2Ev, .-_ZN20ImGuiListClipperDataC2Ev
	.weak	_ZN20ImGuiListClipperDataC1Ev
	.set	_ZN20ImGuiListClipperDataC1Ev,_ZN20ImGuiListClipperDataC2Ev
	.section	.text._ZN20ImGuiListClipperData5ResetEP16ImGuiListClipper,"axG",@progbits,_ZN20ImGuiListClipperData5ResetEP16ImGuiListClipper,comdat
	.align	2
	.weak	_ZN20ImGuiListClipperData5ResetEP16ImGuiListClipper
	.type	_ZN20ImGuiListClipperData5ResetEP16ImGuiListClipper, %function
_ZN20ImGuiListClipperData5ResetEP16ImGuiListClipper:
.LFB1405:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 16]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 16]
	ldr	x0, [sp, 24]
	str	w1, [x0, 12]
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	mov	w1, 0
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE6resizeEi
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1405:
	.size	_ZN20ImGuiListClipperData5ResetEP16ImGuiListClipper, .-_ZN20ImGuiListClipperData5ResetEP16ImGuiListClipper
	.section	.text._ZN16ImGuiNavItemDataC2Ev,"axG",@progbits,_ZN16ImGuiNavItemDataC5Ev,comdat
	.align	2
	.weak	_ZN16ImGuiNavItemDataC2Ev
	.type	_ZN16ImGuiNavItemDataC2Ev, %function
_ZN16ImGuiNavItemDataC2Ev:
.LFB1407:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 24]
	bl	_ZN16ImGuiNavItemData5ClearEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1407:
	.size	_ZN16ImGuiNavItemDataC2Ev, .-_ZN16ImGuiNavItemDataC2Ev
	.weak	_ZN16ImGuiNavItemDataC1Ev
	.set	_ZN16ImGuiNavItemDataC1Ev,_ZN16ImGuiNavItemDataC2Ev
	.section	.text._ZN16ImGuiNavItemData5ClearEv,"axG",@progbits,_ZN16ImGuiNavItemData5ClearEv,comdat
	.align	2
	.weak	_ZN16ImGuiNavItemData5ClearEv
	.type	_ZN16ImGuiNavItemData5ClearEv, %function
_ZN16ImGuiNavItemData5ClearEv:
.LFB1409:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	xzr, [x0]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 12]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 8]
	str	w1, [x0, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 32]
	ldr	x0, [sp, 8]
	mov	w1, 2139095039
	fmov	s0, w1
	str	s0, [x0, 44]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 44]
	ldr	x0, [sp, 8]
	str	s0, [x0, 40]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 40]
	ldr	x0, [sp, 8]
	str	s0, [x0, 36]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1409:
	.size	_ZN16ImGuiNavItemData5ClearEv, .-_ZN16ImGuiNavItemData5ClearEv
	.section	.text._ZN17ImDrawDataBuilderC2Ev,"axG",@progbits,_ZN17ImDrawDataBuilderC5Ev,comdat
	.align	2
	.weak	_ZN17ImDrawDataBuilderC2Ev
	.type	_ZN17ImDrawDataBuilderC2Ev, %function
_ZN17ImDrawDataBuilderC2Ev:
.LFB1418:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -32
	.cfi_offset 20, -24
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	mov	x19, 1
	mov	x20, x0
	b	.L343
.L344:
	mov	x0, x20
	bl	_ZN8ImVectorIP10ImDrawListEC1Ev
	add	x20, x20, 16
	sub	x19, x19, #1
.L343:
	cmp	x19, 0
	bge	.L344
	nop
	nop
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1418:
	.size	_ZN17ImDrawDataBuilderC2Ev, .-_ZN17ImDrawDataBuilderC2Ev
	.weak	_ZN17ImDrawDataBuilderC1Ev
	.set	_ZN17ImDrawDataBuilderC1Ev,_ZN17ImDrawDataBuilderC2Ev
	.section	.text._ZN17ImDrawDataBuilderD2Ev,"axG",@progbits,_ZN17ImDrawDataBuilderD5Ev,comdat
	.align	2
	.weak	_ZN17ImDrawDataBuilderD2Ev
	.type	_ZN17ImDrawDataBuilderD2Ev, %function
_ZN17ImDrawDataBuilderD2Ev:
.LFB1421:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L346
	ldr	x0, [sp, 40]
	add	x19, x0, 32
.L347:
	ldr	x0, [sp, 40]
	cmp	x19, x0
	beq	.L346
	sub	x19, x19, #16
	mov	x0, x19
	bl	_ZN8ImVectorIP10ImDrawListED1Ev
	b	.L347
.L346:
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1421:
	.size	_ZN17ImDrawDataBuilderD2Ev, .-_ZN17ImDrawDataBuilderD2Ev
	.weak	_ZN17ImDrawDataBuilderD1Ev
	.set	_ZN17ImDrawDataBuilderD1Ev,_ZN17ImDrawDataBuilderD2Ev
	.section	.text._ZN14ImGuiViewportPC2Ev,"axG",@progbits,_ZN14ImGuiViewportPC5Ev,comdat
	.align	2
	.weak	_ZN14ImGuiViewportPC2Ev
	.type	_ZN14ImGuiViewportPC2Ev, %function
_ZN14ImGuiViewportPC2Ev:
.LFB1423:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN13ImGuiViewportC2Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 72
	bl	_ZN10ImDrawDataC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 120
	bl	_ZN17ImDrawDataBuilderC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 152
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 160
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 168
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 176
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	mov	w1, -1
	str	w1, [x0, 52]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 52]
	ldr	x0, [sp, 24]
	str	w1, [x0, 48]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 64]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 64]
	ldr	x0, [sp, 24]
	str	x1, [x0, 56]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1423:
	.size	_ZN14ImGuiViewportPC2Ev, .-_ZN14ImGuiViewportPC2Ev
	.weak	_ZN14ImGuiViewportPC1Ev
	.set	_ZN14ImGuiViewportPC1Ev,_ZN14ImGuiViewportPC2Ev
	.section	.text._ZN14ImGuiViewportPD2Ev,"axG",@progbits,_ZN14ImGuiViewportPD5Ev,comdat
	.align	2
	.weak	_ZN14ImGuiViewportPD2Ev
	.type	_ZN14ImGuiViewportPD2Ev, %function
_ZN14ImGuiViewportPD2Ev:
.LFB1426:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1426
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 56]
	cmp	x0, 0
	beq	.L350
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 56]
	bl	_Z9IM_DELETEI10ImDrawListEvPT_
.L350:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 64]
	cmp	x0, 0
	beq	.L351
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 64]
	bl	_Z9IM_DELETEI10ImDrawListEvPT_
.L351:
	ldr	x0, [sp, 24]
	add	x0, x0, 120
	bl	_ZN17ImDrawDataBuilderD1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1426:
	.section	.gcc_except_table._ZN14ImGuiViewportPD2Ev,"aG",@progbits,_ZN14ImGuiViewportPD5Ev,comdat
.LLSDA1426:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1426-.LLSDACSB1426
.LLSDACSB1426:
.LLSDACSE1426:
	.section	.text._ZN14ImGuiViewportPD2Ev,"axG",@progbits,_ZN14ImGuiViewportPD5Ev,comdat
	.size	_ZN14ImGuiViewportPD2Ev, .-_ZN14ImGuiViewportPD2Ev
	.weak	_ZN14ImGuiViewportPD1Ev
	.set	_ZN14ImGuiViewportPD1Ev,_ZN14ImGuiViewportPD2Ev
	.section	.text._ZNK14ImGuiViewportP15CalcWorkRectPosERK6ImVec2,"axG",@progbits,_ZNK14ImGuiViewportP15CalcWorkRectPosERK6ImVec2,comdat
	.align	2
	.weak	_ZNK14ImGuiViewportP15CalcWorkRectPosERK6ImVec2
	.type	_ZNK14ImGuiViewportP15CalcWorkRectPosERK6ImVec2, %function
_ZNK14ImGuiViewportP15CalcWorkRectPosERK6ImVec2:
.LFB1428:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fadd	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	add	x0, sp, 32
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L354
	bl	__stack_chk_fail
.L354:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1428:
	.size	_ZNK14ImGuiViewportP15CalcWorkRectPosERK6ImVec2, .-_ZNK14ImGuiViewportP15CalcWorkRectPosERK6ImVec2
	.section	.text._ZNK14ImGuiViewportP16CalcWorkRectSizeERK6ImVec2S2_,"axG",@progbits,_ZNK14ImGuiViewportP16CalcWorkRectSizeERK6ImVec2S2_,comdat
	.align	2
	.weak	_ZNK14ImGuiViewportP16CalcWorkRectSizeERK6ImVec2S2_
	.type	_ZNK14ImGuiViewportP16CalcWorkRectSizeERK6ImVec2S2_, %function
_ZNK14ImGuiViewportP16CalcWorkRectSizeERK6ImVec2S2_:
.LFB1429:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -64
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 12]
	ldr	x0, [sp, 48]
	ldr	s0, [x0]
	fsub	s1, s1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
	fadd	s0, s1, s0
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	fmov	s8, s0
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 16]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 4]
	fsub	s1, s1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	add	x0, sp, 64
	fmov	s1, s0
	fmov	s0, s8
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 64]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L357
	bl	__stack_chk_fail
.L357:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1429:
	.size	_ZNK14ImGuiViewportP16CalcWorkRectSizeERK6ImVec2S2_, .-_ZNK14ImGuiViewportP16CalcWorkRectSizeERK6ImVec2S2_
	.section	.text._ZN14ImGuiViewportP14UpdateWorkRectEv,"axG",@progbits,_ZN14ImGuiViewportP14UpdateWorkRectEv,comdat
	.align	2
	.weak	_ZN14ImGuiViewportP14UpdateWorkRectEv
	.type	_ZN14ImGuiViewportP14UpdateWorkRectEv, %function
_ZN14ImGuiViewportP14UpdateWorkRectEv:
.LFB1430:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 152
	ldr	x19, [sp, 40]
	mov	x1, x0
	ldr	x0, [sp, 40]
	bl	_ZNK14ImGuiViewportP15CalcWorkRectPosERK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 20]
	str	s0, [x19, 24]
	ldr	x0, [sp, 40]
	add	x1, x0, 152
	ldr	x0, [sp, 40]
	add	x0, x0, 160
	ldr	x19, [sp, 40]
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	_ZNK14ImGuiViewportP16CalcWorkRectSizeERK6ImVec2S2_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 28]
	str	s0, [x19, 32]
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1430:
	.size	_ZN14ImGuiViewportP14UpdateWorkRectEv, .-_ZN14ImGuiViewportP14UpdateWorkRectEv
	.section	.text._ZNK14ImGuiViewportP11GetMainRectEv,"axG",@progbits,_ZNK14ImGuiViewportP11GetMainRectEv,comdat
	.align	2
	.weak	_ZNK14ImGuiViewportP11GetMainRectEv
	.type	_ZNK14ImGuiViewportP11GetMainRectEv, %function
_ZNK14ImGuiViewportP11GetMainRectEv:
.LFB1431:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s4, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s5, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 12]
	fadd	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 16]
	fadd	s0, s1, s0
	add	x0, sp, 40
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 40]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L361
	bl	__stack_chk_fail
.L361:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1431:
	.size	_ZNK14ImGuiViewportP11GetMainRectEv, .-_ZNK14ImGuiViewportP11GetMainRectEv
	.section	.text._ZNK14ImGuiViewportP11GetWorkRectEv,"axG",@progbits,_ZNK14ImGuiViewportP11GetWorkRectEv,comdat
	.align	2
	.weak	_ZNK14ImGuiViewportP11GetWorkRectEv
	.type	_ZNK14ImGuiViewportP11GetWorkRectEv, %function
_ZNK14ImGuiViewportP11GetWorkRectEv:
.LFB1432:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s4, [x0, 20]
	ldr	x0, [sp, 24]
	ldr	s5, [x0, 24]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 20]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 28]
	fadd	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 32]
	fadd	s0, s1, s0
	add	x0, sp, 40
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 40]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L364
	bl	__stack_chk_fail
.L364:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1432:
	.size	_ZNK14ImGuiViewportP11GetWorkRectEv, .-_ZNK14ImGuiViewportP11GetWorkRectEv
	.section	.text._ZN19ImGuiWindowSettingsC2Ev,"axG",@progbits,_ZN19ImGuiWindowSettingsC5Ev,comdat
	.align	2
	.weak	_ZN19ImGuiWindowSettingsC2Ev
	.type	_ZN19ImGuiWindowSettingsC2Ev, %function
_ZN19ImGuiWindowSettingsC2Ev:
.LFB1435:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 4
	bl	_ZN8ImVec2ihC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN8ImVec2ihC1Ev
	mov	x2, 16
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1435:
	.size	_ZN19ImGuiWindowSettingsC2Ev, .-_ZN19ImGuiWindowSettingsC2Ev
	.weak	_ZN19ImGuiWindowSettingsC1Ev
	.set	_ZN19ImGuiWindowSettingsC1Ev,_ZN19ImGuiWindowSettingsC2Ev
	.section	.text._ZN19ImGuiWindowSettings7GetNameEv,"axG",@progbits,_ZN19ImGuiWindowSettings7GetNameEv,comdat
	.align	2
	.weak	_ZN19ImGuiWindowSettings7GetNameEv
	.type	_ZN19ImGuiWindowSettings7GetNameEv, %function
_ZN19ImGuiWindowSettings7GetNameEv:
.LFB1437:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1437:
	.size	_ZN19ImGuiWindowSettings7GetNameEv, .-_ZN19ImGuiWindowSettings7GetNameEv
	.section	.text._ZN20ImGuiSettingsHandlerC2Ev,"axG",@progbits,_ZN20ImGuiSettingsHandlerC5Ev,comdat
	.align	2
	.weak	_ZN20ImGuiSettingsHandlerC2Ev
	.type	_ZN20ImGuiSettingsHandlerC2Ev, %function
_ZN20ImGuiSettingsHandlerC2Ev:
.LFB1439:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	mov	x2, 72
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1439:
	.size	_ZN20ImGuiSettingsHandlerC2Ev, .-_ZN20ImGuiSettingsHandlerC2Ev
	.weak	_ZN20ImGuiSettingsHandlerC1Ev
	.set	_ZN20ImGuiSettingsHandlerC1Ev,_ZN20ImGuiSettingsHandlerC2Ev
	.section	.text._ZN18ImGuiMetricsConfigC2Ev,"axG",@progbits,_ZN18ImGuiMetricsConfigC5Ev,comdat
	.align	2
	.weak	_ZN18ImGuiMetricsConfigC2Ev
	.type	_ZN18ImGuiMetricsConfigC2Ev, %function
_ZN18ImGuiMetricsConfigC2Ev:
.LFB1442:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	strb	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldrb	w1, [x0, 4]
	ldr	x0, [sp, 8]
	strb	w1, [x0, 3]
	ldr	x0, [sp, 8]
	ldrb	w1, [x0, 3]
	ldr	x0, [sp, 8]
	strb	w1, [x0, 2]
	ldr	x0, [sp, 8]
	ldrb	w1, [x0, 2]
	ldr	x0, [sp, 8]
	strb	w1, [x0, 1]
	ldr	x0, [sp, 8]
	ldrb	w1, [x0, 1]
	ldr	x0, [sp, 8]
	strb	w1, [x0]
	ldr	x0, [sp, 8]
	mov	w1, 1
	strb	w1, [x0, 5]
	ldr	x0, [sp, 8]
	mov	w1, 1
	strb	w1, [x0, 6]
	ldr	x0, [sp, 8]
	mov	w1, -1
	str	w1, [x0, 12]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 8]
	str	w1, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1442:
	.size	_ZN18ImGuiMetricsConfigC2Ev, .-_ZN18ImGuiMetricsConfigC2Ev
	.weak	_ZN18ImGuiMetricsConfigC1Ev
	.set	_ZN18ImGuiMetricsConfigC1Ev,_ZN18ImGuiMetricsConfigC2Ev
	.section	.text._ZN19ImGuiStackLevelInfoC2Ev,"axG",@progbits,_ZN19ImGuiStackLevelInfoC5Ev,comdat
	.align	2
	.weak	_ZN19ImGuiStackLevelInfoC2Ev
	.type	_ZN19ImGuiStackLevelInfoC2Ev, %function
_ZN19ImGuiStackLevelInfoC2Ev:
.LFB1445:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	mov	x2, 64
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1445:
	.size	_ZN19ImGuiStackLevelInfoC2Ev, .-_ZN19ImGuiStackLevelInfoC2Ev
	.weak	_ZN19ImGuiStackLevelInfoC1Ev
	.set	_ZN19ImGuiStackLevelInfoC1Ev,_ZN19ImGuiStackLevelInfoC2Ev
	.section	.text._ZN14ImGuiStackToolC2Ev,"axG",@progbits,_ZN14ImGuiStackToolC5Ev,comdat
	.align	2
	.weak	_ZN14ImGuiStackToolC2Ev
	.type	_ZN14ImGuiStackToolC2Ev, %function
_ZN14ImGuiStackToolC2Ev:
.LFB1448:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEC1Ev
	mov	x2, 40
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	ldr	x0, [sp, 24]
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [x0, 36]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1448:
	.size	_ZN14ImGuiStackToolC2Ev, .-_ZN14ImGuiStackToolC2Ev
	.weak	_ZN14ImGuiStackToolC1Ev
	.set	_ZN14ImGuiStackToolC1Ev,_ZN14ImGuiStackToolC2Ev
	.section	.text._ZN7ImGuiIOD2Ev,"axG",@progbits,_ZN7ImGuiIOD5Ev,comdat
	.align	2
	.weak	_ZN7ImGuiIOD2Ev
	.type	_ZN7ImGuiIOD2Ev, %function
_ZN7ImGuiIOD2Ev:
.LFB1455:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x1, [sp, 24]
	mov	x0, 14248
	add	x0, x1, x0
	bl	_ZN8ImVectorItED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1455:
	.size	_ZN7ImGuiIOD2Ev, .-_ZN7ImGuiIOD2Ev
	.weak	_ZN7ImGuiIOD1Ev
	.set	_ZN7ImGuiIOD1Ev,_ZN7ImGuiIOD2Ev
	.section	.text._ZN20ImDrawListSharedDataD2Ev,"axG",@progbits,_ZN20ImDrawListSharedDataD5Ev,comdat
	.align	2
	.weak	_ZN20ImDrawListSharedDataD2Ev
	.type	_ZN20ImDrawListSharedDataD2Ev, %function
_ZN20ImDrawListSharedDataD2Ev:
.LFB1458:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 48
	bl	_ZN8ImVectorI6ImVec2ED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1458:
	.size	_ZN20ImDrawListSharedDataD2Ev, .-_ZN20ImDrawListSharedDataD2Ev
	.weak	_ZN20ImDrawListSharedDataD1Ev
	.set	_ZN20ImDrawListSharedDataD1Ev,_ZN20ImDrawListSharedDataD2Ev
	.section	.text._ZN12ImGuiStorageC2Ev,"axG",@progbits,_ZN12ImGuiStorageC5Ev,comdat
	.align	2
	.weak	_ZN12ImGuiStorageC2Ev
	.type	_ZN12ImGuiStorageC2Ev, %function
_ZN12ImGuiStorageC2Ev:
.LFB1461:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1461:
	.size	_ZN12ImGuiStorageC2Ev, .-_ZN12ImGuiStorageC2Ev
	.weak	_ZN12ImGuiStorageC1Ev
	.set	_ZN12ImGuiStorageC1Ev,_ZN12ImGuiStorageC2Ev
	.section	.text._ZN12ImGuiStorageD2Ev,"axG",@progbits,_ZN12ImGuiStorageD5Ev,comdat
	.align	2
	.weak	_ZN12ImGuiStorageD2Ev
	.type	_ZN12ImGuiStorageD2Ev, %function
_ZN12ImGuiStorageD2Ev:
.LFB1464:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1464:
	.size	_ZN12ImGuiStorageD2Ev, .-_ZN12ImGuiStorageD2Ev
	.weak	_ZN12ImGuiStorageD1Ev
	.set	_ZN12ImGuiStorageD1Ev,_ZN12ImGuiStorageD2Ev
	.section	.text._ZN20ImGuiKeyRoutingTableD2Ev,"axG",@progbits,_ZN20ImGuiKeyRoutingTableD5Ev,comdat
	.align	2
	.weak	_ZN20ImGuiKeyRoutingTableD2Ev
	.type	_ZN20ImGuiKeyRoutingTableD2Ev, %function
_ZN20ImGuiKeyRoutingTableD2Ev:
.LFB1467:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 296
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 280
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1467:
	.size	_ZN20ImGuiKeyRoutingTableD2Ev, .-_ZN20ImGuiKeyRoutingTableD2Ev
	.weak	_ZN20ImGuiKeyRoutingTableD1Ev
	.set	_ZN20ImGuiKeyRoutingTableD1Ev,_ZN20ImGuiKeyRoutingTableD2Ev
	.section	.text._ZN19ImGuiInputTextStateD2Ev,"axG",@progbits,_ZN19ImGuiInputTextStateD5Ev,comdat
	.align	2
	.weak	_ZN19ImGuiInputTextStateD2Ev
	.type	_ZN19ImGuiInputTextStateD2Ev, %function
_ZN19ImGuiInputTextStateD2Ev:
.LFB1470:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 48
	bl	_ZN8ImVectorIcED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN8ImVectorIcED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN8ImVectorItED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1470:
	.size	_ZN19ImGuiInputTextStateD2Ev, .-_ZN19ImGuiInputTextStateD2Ev
	.weak	_ZN19ImGuiInputTextStateD1Ev
	.set	_ZN19ImGuiInputTextStateD1Ev,_ZN19ImGuiInputTextStateD2Ev
	.section	.text._ZN15ImGuiTextBufferD2Ev,"axG",@progbits,_ZN15ImGuiTextBufferD5Ev,comdat
	.align	2
	.weak	_ZN15ImGuiTextBufferD2Ev
	.type	_ZN15ImGuiTextBufferD2Ev, %function
_ZN15ImGuiTextBufferD2Ev:
.LFB1473:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1473:
	.size	_ZN15ImGuiTextBufferD2Ev, .-_ZN15ImGuiTextBufferD2Ev
	.weak	_ZN15ImGuiTextBufferD1Ev
	.set	_ZN15ImGuiTextBufferD1Ev,_ZN15ImGuiTextBufferD2Ev
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsEC2Ev,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsEC5Ev,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsEC2Ev
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsEC2Ev, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsEC2Ev:
.LFB1476:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcEC1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1476:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsEC2Ev, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsEC2Ev
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsEC1Ev
	.set	_ZN13ImChunkStreamI19ImGuiWindowSettingsEC1Ev,_ZN13ImChunkStreamI19ImGuiWindowSettingsEC2Ev
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsED2Ev,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsED5Ev,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsED2Ev
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsED2Ev, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsED2Ev:
.LFB1479:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1479:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsED2Ev, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsED2Ev
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsED1Ev
	.set	_ZN13ImChunkStreamI19ImGuiWindowSettingsED1Ev,_ZN13ImChunkStreamI19ImGuiWindowSettingsED2Ev
	.section	.text._ZN13ImChunkStreamI18ImGuiTableSettingsEC2Ev,"axG",@progbits,_ZN13ImChunkStreamI18ImGuiTableSettingsEC5Ev,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI18ImGuiTableSettingsEC2Ev
	.type	_ZN13ImChunkStreamI18ImGuiTableSettingsEC2Ev, %function
_ZN13ImChunkStreamI18ImGuiTableSettingsEC2Ev:
.LFB1482:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcEC1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1482:
	.size	_ZN13ImChunkStreamI18ImGuiTableSettingsEC2Ev, .-_ZN13ImChunkStreamI18ImGuiTableSettingsEC2Ev
	.weak	_ZN13ImChunkStreamI18ImGuiTableSettingsEC1Ev
	.set	_ZN13ImChunkStreamI18ImGuiTableSettingsEC1Ev,_ZN13ImChunkStreamI18ImGuiTableSettingsEC2Ev
	.section	.text._ZN13ImChunkStreamI18ImGuiTableSettingsED2Ev,"axG",@progbits,_ZN13ImChunkStreamI18ImGuiTableSettingsED5Ev,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI18ImGuiTableSettingsED2Ev
	.type	_ZN13ImChunkStreamI18ImGuiTableSettingsED2Ev, %function
_ZN13ImChunkStreamI18ImGuiTableSettingsED2Ev:
.LFB1485:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1485:
	.size	_ZN13ImChunkStreamI18ImGuiTableSettingsED2Ev, .-_ZN13ImChunkStreamI18ImGuiTableSettingsED2Ev
	.weak	_ZN13ImChunkStreamI18ImGuiTableSettingsED1Ev
	.set	_ZN13ImChunkStreamI18ImGuiTableSettingsED1Ev,_ZN13ImChunkStreamI18ImGuiTableSettingsED2Ev
	.section	.text._ZN14ImGuiTextIndexC2Ev,"axG",@progbits,_ZN14ImGuiTextIndexC5Ev,comdat
	.align	2
	.weak	_ZN14ImGuiTextIndexC2Ev
	.type	_ZN14ImGuiTextIndexC2Ev, %function
_ZN14ImGuiTextIndexC2Ev:
.LFB1488:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIiEC1Ev
	ldr	x0, [sp, 24]
	str	wzr, [x0, 16]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1488:
	.size	_ZN14ImGuiTextIndexC2Ev, .-_ZN14ImGuiTextIndexC2Ev
	.weak	_ZN14ImGuiTextIndexC1Ev
	.set	_ZN14ImGuiTextIndexC1Ev,_ZN14ImGuiTextIndexC2Ev
	.section	.text._ZN14ImGuiTextIndexD2Ev,"axG",@progbits,_ZN14ImGuiTextIndexD5Ev,comdat
	.align	2
	.weak	_ZN14ImGuiTextIndexD2Ev
	.type	_ZN14ImGuiTextIndexD2Ev, %function
_ZN14ImGuiTextIndexD2Ev:
.LFB1491:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIiED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1491:
	.size	_ZN14ImGuiTextIndexD2Ev, .-_ZN14ImGuiTextIndexD2Ev
	.weak	_ZN14ImGuiTextIndexD1Ev
	.set	_ZN14ImGuiTextIndexD1Ev,_ZN14ImGuiTextIndexD2Ev
	.section	.text._ZN14ImGuiStackToolD2Ev,"axG",@progbits,_ZN14ImGuiStackToolD5Ev,comdat
	.align	2
	.weak	_ZN14ImGuiStackToolD2Ev
	.type	_ZN14ImGuiStackToolD2Ev, %function
_ZN14ImGuiStackToolD2Ev:
.LFB1494:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1494:
	.size	_ZN14ImGuiStackToolD2Ev, .-_ZN14ImGuiStackToolD2Ev
	.weak	_ZN14ImGuiStackToolD1Ev
	.set	_ZN14ImGuiStackToolD1Ev,_ZN14ImGuiStackToolD2Ev
	.section	.text._ZN12ImGuiContextC2EP11ImFontAtlas,"axG",@progbits,_ZN12ImGuiContextC5EP11ImFontAtlas,comdat
	.align	2
	.weak	_ZN12ImGuiContextC2EP11ImFontAtlas
	.type	_ZN12ImGuiContextC2EP11ImFontAtlas, %function
_ZN12ImGuiContextC2EP11ImFontAtlas:
.LFB1496:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1496
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	stp	x21, x22, [sp, 32]
	.cfi_offset 19, -64
	.cfi_offset 20, -56
	.cfi_offset 21, -48
	.cfi_offset 22, -40
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 56]
	add	x0, x0, 8
.LEHB2:
	bl	_ZN7ImGuiIOC1Ev
.LEHE2:
	ldr	x1, [sp, 56]
	mov	x0, 14272
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiInputEventEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 14288
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiInputEventEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 14304
	add	x0, x1, x0
.LEHB3:
	bl	_ZN10ImGuiStyleC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15368
	add	x0, x1, x0
	bl	_ZN20ImDrawListSharedDataC1Ev
.LEHE3:
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15952
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15968
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 16000
	add	x0, x1, x0
	bl	_ZN12ImGuiStorageC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 16020
	add	x0, x1, x0
	bl	_ZN6ImVec2C1Ev
	ldr	x1, [sp, 56]
	mov	x0, 16072
	add	x0, x1, x0
	bl	_ZN6ImVec2C1Ev
	ldr	x1, [sp, 56]
	mov	x0, 16128
	add	x0, x1, x0
	bl	_ZN6ImVec2C1Ev
	ldr	x1, [sp, 56]
	mov	x0, 16176
	add	x0, x1, x0
	mov	x19, 139
	mov	x20, x0
	b	.L387
.L388:
	mov	x0, x20
	bl	_ZN17ImGuiKeyOwnerDataC1Ev
	add	x20, x20, 12
	sub	x19, x19, #1
.L387:
	cmp	x19, 0
	bge	.L388
	ldr	x1, [sp, 56]
	mov	x0, 17856
	add	x0, x1, x0
.LEHB4:
	bl	_ZN20ImGuiKeyRoutingTableC1Ev
.LEHE4:
	ldr	x1, [sp, 56]
	mov	x0, 18192
	add	x0, x1, x0
	bl	_ZN17ImGuiNextItemDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18212
	add	x0, x1, x0
	bl	_ZN17ImGuiLastItemDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18272
	add	x0, x1, x0
	bl	_ZN19ImGuiNextWindowDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18384
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiColorModEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18400
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiStyleModEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18416
	add	x0, x1, x0
	bl	_ZN8ImVectorIP6ImFontEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18432
	add	x0, x1, x0
	bl	_ZN8ImVectorIjEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18464
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiGroupDataEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18480
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18496
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18520
	add	x0, x1, x0
	bl	_ZN8ImVectorIP14ImGuiViewportPEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18612
	add	x0, x1, x0
	bl	_ZN6ImRectC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18656
	add	x0, x1, x0
	bl	_ZN6ImRectC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18672
	add	x0, x1, x0
	bl	_ZN6ImRectC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18704
	add	x0, x1, x0
	bl	_ZN16ImGuiNavItemDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18752
	add	x0, x1, x0
	bl	_ZN16ImGuiNavItemDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18800
	add	x0, x1, x0
	bl	_ZN16ImGuiNavItemDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18848
	add	x0, x1, x0
	bl	_ZN16ImGuiNavItemDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18940
	add	x0, x1, x0
	bl	_ZN6ImVec2C1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18948
	add	x0, x1, x0
	bl	_ZN6ImVec2C1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18984
	add	x0, x1, x0
	bl	_ZN12ImGuiPayloadC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19048
	add	x0, x1, x0
	bl	_ZN6ImRectC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19096
	add	x0, x1, x0
	bl	_ZN8ImVectorIhEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19136
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiListClipperDataEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19168
	add	x0, x1, x0
	bl	_ZN8ImVectorI18ImGuiTableTempDataEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19184
	add	x0, x1, x0
.LEHB5:
	bl	_ZN6ImPoolI10ImGuiTableEC1Ev
.LEHE5:
	ldr	x1, [sp, 56]
	mov	x0, 19224
	add	x0, x1, x0
	bl	_ZN8ImVectorIfEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19240
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImDrawChannelEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19264
	add	x0, x1, x0
.LEHB6:
	bl	_ZN6ImPoolI11ImGuiTabBarEC1Ev
.LEHE6:
	ldr	x1, [sp, 56]
	mov	x0, 19304
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiPtrOrIndexEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19320
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiShrinkWidthItemEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19352
	add	x0, x1, x0
	bl	_ZN6ImVec2C1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19360
	add	x0, x1, x0
	bl	_ZN19ImGuiInputTextStateC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23080
	add	x0, x1, x0
.LEHB7:
	bl	_ZN6ImFontC1Ev
.LEHE7:
	ldr	x1, [sp, 56]
	mov	x0, 23212
	add	x0, x1, x0
	bl	_ZN6ImVec4C1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23228
	add	x0, x1, x0
	bl	_ZN21ImGuiComboPreviewDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23312
	add	x0, x1, x0
	bl	_ZN8ImVectorIcEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23328
	add	x0, x1, x0
	bl	_ZN8ImVectorIjEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23344
	add	x0, x1, x0
	bl	_ZN20ImGuiPlatformImeDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23360
	add	x0, x1, x0
	bl	_ZN20ImGuiPlatformImeDataC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23384
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23400
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23432
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23448
	add	x0, x1, x0
	bl	_ZN8ImVectorI16ImGuiContextHookEC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23616
	add	x0, x1, x0
	bl	_ZN14ImGuiTextIndexC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23648
	add	x0, x1, x0
	bl	_ZN18ImGuiMetricsConfigC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23664
	add	x0, x1, x0
	bl	_ZN14ImGuiStackToolC1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23968
	add	x0, x1, x0
	bl	_ZN8ImVectorIcEC1Ev
	ldr	x0, [sp, 56]
	strb	wzr, [x0]
	ldr	x0, [sp, 48]
	cmp	x0, 0
	cset	w0, eq
	and	w1, w0, 255
	ldr	x0, [sp, 56]
	strb	w1, [x0, 1]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 15352]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 15364]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 15364]
	ldr	x0, [sp, 56]
	str	s0, [x0, 15360]
	ldr	x0, [sp, 48]
	cmp	x0, 0
	bne	.L389
	mov	x0, 1168
.LEHB8:
	bl	_ZN5ImGui8MemAllocEm
.LEHE8:
	mov	x20, x0
	mov	x2, x20
	mov	w1, w21
	mov	x0, 1168
	bl	_Znwm12ImNewWrapperPv
	mov	x19, x0
	mov	x0, x19
.LEHB9:
	bl	_ZN11ImFontAtlasC1Ev
.LEHE9:
	b	.L390
.L389:
	ldr	x19, [sp, 48]
.L390:
	ldr	x0, [sp, 56]
	str	x19, [x0, 88]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 15896]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 15904]
	ldr	x0, [sp, 56]
	mov	w1, -1
	str	w1, [x0, 15912]
	ldr	x0, [sp, 56]
	ldr	w1, [x0, 15912]
	ldr	x0, [sp, 56]
	str	w1, [x0, 15908]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3630]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	ldrb	w1, [x0, 3630]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	w1, [x0, 3629]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	ldrb	w1, [x0, 3629]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	w1, [x0, 3628]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3631]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3632]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 15928]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16016]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 16032]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 16040]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 16048]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 16056]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 16064]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16080]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16084]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16092]
	ldr	x0, [sp, 56]
	ldr	w1, [x0, 16092]
	ldr	x0, [sp, 56]
	str	w1, [x0, 16088]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3808]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3809]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16104]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 16104]
	ldr	x0, [sp, 56]
	str	s0, [x0, 16100]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16108]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16112]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16116]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3832]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3833]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3834]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3835]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3836]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3837]
	add	x0, sp, 64
	fmov	s1, -1.0e+0
	fmov	s0, -1.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 64]
	str	x1, [x0, 16128]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 16136]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16144]
	ldr	x0, [sp, 56]
	mov	w1, -1
	str	w1, [x0, 16148]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16152]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3868]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	strb	wzr, [x0, 3869]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 16160]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16168]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16172]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 1784]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 1788]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 1792]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 1796]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 1800]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2128]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 18536]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2180]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2180]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2176]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2176]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2172]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2172]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2168]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2168]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2164]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2164]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2160]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2200]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2200]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2192]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2192]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2188]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2204]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2204]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2184]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2196]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2208]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2212]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2216]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2217]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2218]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2219]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2220]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2221]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2222]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2224]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2244]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2245]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2246]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2248]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2252]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2256]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 2268]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2268]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2264]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2264]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2260]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2304]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2308]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2312]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 4608
	str	w1, [x0, 2512]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 12800
	str	w1, [x0, 2516]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 18920]
	ldr	x0, [sp, 56]
	ldr	x1, [x0, 18920]
	ldr	x0, [sp, 56]
	str	x1, [x0, 18912]
	ldr	x0, [sp, 56]
	ldr	x1, [x0, 18912]
	ldr	x0, [sp, 56]
	str	x1, [x0, 18904]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2548]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	s0, [x0, 2548]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	s0, [x0, 2544]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2552]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2572]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2576]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2582]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2582]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	w1, [x0, 2581]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2581]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	w1, [x0, 2580]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2584]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 2588]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 2592]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2680]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2684]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2688]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2692]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2692]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2696]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 2700]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2704]
	ldr	x1, [sp, 56]
	mov	x0, 19112
	add	x0, x1, x0
	mov	x2, 16
	mov	w1, 0
	bl	memset
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2744]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 19152]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2776]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 19256]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2956]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2956]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2952]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 2964]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	s0, [x0, 2964]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	s0, [x0, 2960]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6808]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 177209344
	str	w1, [x0, 6812]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6820]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	s0, [x0, 6820]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	s0, [x0, 6816]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6824]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6892]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6896]
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	strb	wzr, [x0, 2804]
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	strb	wzr, [x0, 2805]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6904]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 55050
	movk	w1, 0x3c23, lsl 16
	fmov	s0, w1
	str	s0, [x0, 6908]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6912]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6916]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strh	wzr, [x0, 6920]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strh	wzr, [x0, 6922]
	add	x0, sp, 64
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x1, [sp, 56]
	mov	x0, 23552
	add	x0, x1, x0
	ldr	x1, [sp, 64]
	str	x1, [x0, -204]
	add	x0, sp, 64
	fmov	s1, -1.0e+0
	fmov	s0, -1.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x1, [sp, 56]
	mov	x0, 23552
	add	x0, x1, x0
	ldr	x1, [sp, 64]
	str	x1, [x0, -188]
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	mov	w1, 46
	strb	w1, [x0, 2896]
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	strb	wzr, [x0, 2897]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 6996]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 7080]
	ldr	x1, [sp, 56]
	mov	x0, 23472
	add	x0, x1, x0
	mov	x2, 56
	mov	w1, 0
	bl	memset
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	strb	wzr, [x0, 3048]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 7148]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 23568]
	ldr	x0, [sp, 56]
	ldr	x1, [x0, 23568]
	ldr	x0, [sp, 56]
	str	x1, [x0, 23560]
	ldr	x0, [sp, 56]
	str	xzr, [x0, 23536]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 2139095039
	fmov	s0, w1
	str	s0, [x0, 7192]
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	strb	wzr, [x0, 3100]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 7200]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 2
	str	w1, [x0, 7208]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 7208]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 7204]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 1024
	str	w1, [x0, 7212]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 1804]
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	strb	wzr, [x0, 3160]
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	strb	wzr, [x0, 3161]
	ldr	x0, [sp, 56]
	add	x0, x0, 20480
	strb	wzr, [x0, 3162]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 7260]
	ldr	x1, [sp, 56]
	mov	x0, 23704
	add	x0, x1, x0
	mov	x2, 240
	mov	w1, 0
	bl	memset
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 7564]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 7564]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 7560]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	wzr, [x0, 7568]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 7580]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 7580]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 7576]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 7576]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 7572]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L398
	b	.L406
.L405:
	mov	x21, x0
	mov	x2, x20
	mov	w1, w22
	mov	x0, x19
	bl	_ZdlPv12ImNewWrapperS_
	mov	x19, x21
	b	.L392
.L404:
	mov	x19, x0
.L392:
	ldr	x1, [sp, 56]
	mov	x0, 23968
	add	x0, x1, x0
	bl	_ZN8ImVectorIcED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23664
	add	x0, x1, x0
	bl	_ZN14ImGuiStackToolD1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23616
	add	x0, x1, x0
	bl	_ZN14ImGuiTextIndexD1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferD1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferD1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23448
	add	x0, x1, x0
	bl	_ZN8ImVectorI16ImGuiContextHookED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23432
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23400
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23384
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferD1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23328
	add	x0, x1, x0
	bl	_ZN8ImVectorIjED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23312
	add	x0, x1, x0
	bl	_ZN8ImVectorIcED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 23080
	add	x0, x1, x0
	bl	_ZN6ImFontD1Ev
	b	.L393
.L403:
	mov	x19, x0
.L393:
	ldr	x1, [sp, 56]
	mov	x0, 19360
	add	x0, x1, x0
	bl	_ZN19ImGuiInputTextStateD1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19320
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiShrinkWidthItemED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19304
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiPtrOrIndexED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19264
	add	x0, x1, x0
	bl	_ZN6ImPoolI11ImGuiTabBarED1Ev
	b	.L394
.L402:
	mov	x19, x0
.L394:
	ldr	x1, [sp, 56]
	mov	x0, 19240
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImDrawChannelED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19224
	add	x0, x1, x0
	bl	_ZN8ImVectorIfED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19184
	add	x0, x1, x0
	bl	_ZN6ImPoolI10ImGuiTableED1Ev
	b	.L395
.L401:
	mov	x19, x0
.L395:
	ldr	x1, [sp, 56]
	mov	x0, 19168
	add	x0, x1, x0
	bl	_ZN8ImVectorI18ImGuiTableTempDataED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19136
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiListClipperDataED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 19096
	add	x0, x1, x0
	bl	_ZN8ImVectorIhED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18520
	add	x0, x1, x0
	bl	_ZN8ImVectorIP14ImGuiViewportPED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18496
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18480
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18464
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiGroupDataED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18432
	add	x0, x1, x0
	bl	_ZN8ImVectorIjED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18416
	add	x0, x1, x0
	bl	_ZN8ImVectorIP6ImFontED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18400
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiStyleModED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 18384
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiColorModED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 17856
	add	x0, x1, x0
	bl	_ZN20ImGuiKeyRoutingTableD1Ev
	b	.L396
.L400:
	mov	x19, x0
.L396:
	ldr	x1, [sp, 56]
	mov	x0, 16000
	add	x0, x1, x0
	bl	_ZN12ImGuiStorageD1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15968
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15952
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 15368
	add	x0, x1, x0
	bl	_ZN20ImDrawListSharedDataD1Ev
	b	.L397
.L399:
	mov	x19, x0
.L397:
	ldr	x1, [sp, 56]
	mov	x0, 14288
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiInputEventED1Ev
	ldr	x1, [sp, 56]
	mov	x0, 14272
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiInputEventED1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 8
	bl	_ZN7ImGuiIOD1Ev
	mov	x0, x19
.LEHB10:
	bl	_Unwind_Resume
.LEHE10:
.L406:
	bl	__stack_chk_fail
.L398:
	ldp	x19, x20, [sp, 16]
	ldp	x21, x22, [sp, 32]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 21
	.cfi_restore 22
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1496:
	.section	.gcc_except_table._ZN12ImGuiContextC2EP11ImFontAtlas,"aG",@progbits,_ZN12ImGuiContextC5EP11ImFontAtlas,comdat
.LLSDA1496:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1496-.LLSDACSB1496
.LLSDACSB1496:
	.uleb128 .LEHB2-.LFB1496
	.uleb128 .LEHE2-.LEHB2
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB3-.LFB1496
	.uleb128 .LEHE3-.LEHB3
	.uleb128 .L399-.LFB1496
	.uleb128 0
	.uleb128 .LEHB4-.LFB1496
	.uleb128 .LEHE4-.LEHB4
	.uleb128 .L400-.LFB1496
	.uleb128 0
	.uleb128 .LEHB5-.LFB1496
	.uleb128 .LEHE5-.LEHB5
	.uleb128 .L401-.LFB1496
	.uleb128 0
	.uleb128 .LEHB6-.LFB1496
	.uleb128 .LEHE6-.LEHB6
	.uleb128 .L402-.LFB1496
	.uleb128 0
	.uleb128 .LEHB7-.LFB1496
	.uleb128 .LEHE7-.LEHB7
	.uleb128 .L403-.LFB1496
	.uleb128 0
	.uleb128 .LEHB8-.LFB1496
	.uleb128 .LEHE8-.LEHB8
	.uleb128 .L404-.LFB1496
	.uleb128 0
	.uleb128 .LEHB9-.LFB1496
	.uleb128 .LEHE9-.LEHB9
	.uleb128 .L405-.LFB1496
	.uleb128 0
	.uleb128 .LEHB10-.LFB1496
	.uleb128 .LEHE10-.LEHB10
	.uleb128 0
	.uleb128 0
.LLSDACSE1496:
	.section	.text._ZN12ImGuiContextC2EP11ImFontAtlas,"axG",@progbits,_ZN12ImGuiContextC5EP11ImFontAtlas,comdat
	.size	_ZN12ImGuiContextC2EP11ImFontAtlas, .-_ZN12ImGuiContextC2EP11ImFontAtlas
	.weak	_ZN12ImGuiContextC1EP11ImFontAtlas
	.set	_ZN12ImGuiContextC1EP11ImFontAtlas,_ZN12ImGuiContextC2EP11ImFontAtlas
	.section	.text._ZNK11ImGuiWindow4RectEv,"axG",@progbits,_ZNK11ImGuiWindow4RectEv,comdat
	.align	2
	.weak	_ZNK11ImGuiWindow4RectEv
	.type	_ZNK11ImGuiWindow4RectEv, %function
_ZNK11ImGuiWindow4RectEv:
.LFB1498:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	s4, [x0, 24]
	ldr	x0, [sp, 24]
	ldr	s5, [x0, 28]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 32]
	fadd	s2, s1, s0
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 28]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 36]
	fadd	s0, s1, s0
	add	x0, sp, 40
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 40]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L409
	bl	__stack_chk_fail
.L409:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1498:
	.size	_ZNK11ImGuiWindow4RectEv, .-_ZNK11ImGuiWindow4RectEv
	.section	.text._ZNK11ImGuiWindow12CalcFontSizeEv,"axG",@progbits,_ZNK11ImGuiWindow12CalcFontSizeEv,comdat
	.align	2
	.weak	_ZNK11ImGuiWindow12CalcFontSizeEv
	.type	_ZNK11ImGuiWindow12CalcFontSizeEv, %function
_ZNK11ImGuiWindow12CalcFontSizeEv:
.LFB1499:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 15364]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 624]
	fmul	s0, s1, s0
	str	s0, [sp, 20]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 840]
	cmp	x0, 0
	beq	.L411
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 840]
	ldr	s0, [x0, 624]
	ldr	s1, [sp, 20]
	fmul	s0, s1, s0
	str	s0, [sp, 20]
.L411:
	ldr	s0, [sp, 20]
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1499:
	.size	_ZNK11ImGuiWindow12CalcFontSizeEv, .-_ZNK11ImGuiWindow12CalcFontSizeEv
	.section	.text._ZNK11ImGuiWindow14TitleBarHeightEv,"axG",@progbits,_ZNK11ImGuiWindow14TitleBarHeightEv,comdat
	.align	2
	.weak	_ZNK11ImGuiWindow14TitleBarHeightEv
	.type	_ZNK11ImGuiWindow14TitleBarHeightEv, %function
_ZNK11ImGuiWindow14TitleBarHeightEv:
.LFB1500:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L414
	ldr	x0, [sp, 24]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	fmov	s1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 14368]
	fadd	s0, s0, s0
	fadd	s0, s1, s0
	b	.L416
.L414:
	movi	v0.2s, #0
.L416:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1500:
	.size	_ZNK11ImGuiWindow14TitleBarHeightEv, .-_ZNK11ImGuiWindow14TitleBarHeightEv
	.section	.text._ZNK11ImGuiWindow12TitleBarRectEv,"axG",@progbits,_ZNK11ImGuiWindow12TitleBarRectEv,comdat
	.align	2
	.weak	_ZNK11ImGuiWindow12TitleBarRectEv
	.type	_ZNK11ImGuiWindow12TitleBarRectEv, %function
_ZNK11ImGuiWindow12TitleBarRectEv:
.LFB1501:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	stp	d8, d9, [sp, 32]
	.cfi_offset 19, -80
	.cfi_offset 72, -64
	.cfi_offset 73, -56
	str	x0, [sp, 56]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	x0, [sp, 56]
	add	x19, x0, 24
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 40]
	fadd	s9, s1, s0
	ldr	x0, [sp, 56]
	ldr	s8, [x0, 28]
	ldr	x0, [sp, 56]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	fadd	s0, s8, s0
	add	x0, sp, 64
	fmov	s1, s0
	fmov	s0, s9
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 64
	add	x0, sp, 72
	mov	x2, x1
	mov	x1, x19
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldp	x0, x1, [sp, 72]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L419
	bl	__stack_chk_fail
.L419:
	ldp	d8, d9, [sp, 32]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_restore 73
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1501:
	.size	_ZNK11ImGuiWindow12TitleBarRectEv, .-_ZNK11ImGuiWindow12TitleBarRectEv
	.section	.text._ZNK11ImGuiWindow13MenuBarHeightEv,"axG",@progbits,_ZNK11ImGuiWindow13MenuBarHeightEv,comdat
	.align	2
	.weak	_ZNK11ImGuiWindow13MenuBarHeightEv
	.type	_ZNK11ImGuiWindow13MenuBarHeightEv, %function
_ZNK11ImGuiWindow13MenuBarHeightEv:
.LFB1502:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -48
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L421
	ldr	x0, [sp, 40]
	ldr	s8, [x0, 328]
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	fadd	s1, s8, s0
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 14368]
	fadd	s0, s0, s0
	fadd	s0, s1, s0
	b	.L423
.L421:
	movi	v0.2s, #0
.L423:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1502:
	.size	_ZNK11ImGuiWindow13MenuBarHeightEv, .-_ZNK11ImGuiWindow13MenuBarHeightEv
	.section	.text._ZNK11ImGuiWindow11MenuBarRectEv,"axG",@progbits,_ZNK11ImGuiWindow11MenuBarRectEv,comdat
	.align	2
	.weak	_ZNK11ImGuiWindow11MenuBarRectEv
	.type	_ZNK11ImGuiWindow11MenuBarRectEv, %function
_ZNK11ImGuiWindow11MenuBarRectEv:
.LFB1503:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	stp	d8, d9, [sp, 16]
	.cfi_offset 72, -64
	.cfi_offset 73, -56
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	s8, [x0, 28]
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	fadd	s0, s8, s0
	str	s0, [sp, 52]
	ldr	x0, [sp, 40]
	ldr	s8, [x0, 24]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 40]
	fadd	s9, s1, s0
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow13MenuBarHeightEv
	fmov	s1, s0
	ldr	s0, [sp, 52]
	fadd	s0, s1, s0
	add	x0, sp, 56
	fmov	s3, s0
	fmov	s2, s9
	ldr	s1, [sp, 52]
	fmov	s0, s8
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 56]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L426
	bl	__stack_chk_fail
.L426:
	ldp	d8, d9, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_restore 73
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1503:
	.size	_ZNK11ImGuiWindow11MenuBarRectEv, .-_ZNK11ImGuiWindow11MenuBarRectEv
	.section	.rodata
	.align	3
.LC35:
	.string	"const char* ImGuiTabBar::GetTabName(const ImGuiTabItem*) const"
	.align	3
.LC36:
	.string	"/media/psf/Home/Desktop/git/C-/mac/myproject/external/imgui/include/imgui_internal.h"
	.align	3
.LC37:
	.string	"tab->NameOffset != -1 && tab->NameOffset < TabsNames.Buf.Size"
	.section	.text._ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem,"axG",@progbits,_ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem,comdat
	.align	2
	.weak	_ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem
	.type	_ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem, %function
_ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem:
.LFB1508:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 32]
	cmn	w0, #1
	beq	.L428
	ldr	x0, [sp, 16]
	ldr	w1, [x0, 32]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 136]
	cmp	w1, w0
	blt	.L431
.L428:
	adrp	x0, .LC35
	add	x3, x0, :lo12:.LC35
	mov	w2, 2419
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC37
	add	x0, x0, :lo12:.LC37
	bl	__assert_fail
.L431:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 144]
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 32]
	sxtw	x0, w0
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1508:
	.size	_ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem, .-_ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem
	.section	.text._ZN10ImGuiTableD2Ev,"axG",@progbits,_ZN10ImGuiTableD5Ev,comdat
	.align	2
	.weak	_ZN10ImGuiTableD2Ev
	.type	_ZN10ImGuiTableD2Ev, %function
_ZN10ImGuiTableD2Ev:
.LFB1519:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1519
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	add	x0, x0, 464
	bl	_ZN8ImVectorI25ImGuiTableColumnSortSpecsED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 432
	bl	_ZN8ImVectorI22ImGuiTableInstanceDataED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 400
	bl	_ZN15ImGuiTextBufferD1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1519:
	.section	.gcc_except_table._ZN10ImGuiTableD2Ev,"aG",@progbits,_ZN10ImGuiTableD5Ev,comdat
.LLSDA1519:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1519-.LLSDACSB1519
.LLSDACSB1519:
.LLSDACSE1519:
	.section	.text._ZN10ImGuiTableD2Ev,"axG",@progbits,_ZN10ImGuiTableD5Ev,comdat
	.size	_ZN10ImGuiTableD2Ev, .-_ZN10ImGuiTableD2Ev
	.weak	_ZN10ImGuiTableD1Ev
	.set	_ZN10ImGuiTableD1Ev,_ZN10ImGuiTableD2Ev
	.section	.text._ZN5ImGui20GetCurrentWindowReadEv,"axG",@progbits,_ZN5ImGui20GetCurrentWindowReadEv,comdat
	.align	2
	.weak	_ZN5ImGui20GetCurrentWindowReadEv
	.type	_ZN5ImGui20GetCurrentWindowReadEv, %function
_ZN5ImGui20GetCurrentWindowReadEv:
.LFB1531:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 16032]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1531:
	.size	_ZN5ImGui20GetCurrentWindowReadEv, .-_ZN5ImGui20GetCurrentWindowReadEv
	.section	.text._ZN5ImGui16GetCurrentWindowEv,"axG",@progbits,_ZN5ImGui16GetCurrentWindowEv,comdat
	.align	2
	.weak	_ZN5ImGui16GetCurrentWindowEv
	.type	_ZN5ImGui16GetCurrentWindowEv, %function
_ZN5ImGui16GetCurrentWindowEv:
.LFB1532:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 16032]
	mov	w1, 1
	strb	w1, [x0, 152]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 16032]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1532:
	.size	_ZN5ImGui16GetCurrentWindowEv, .-_ZN5ImGui16GetCurrentWindowEv
	.section	.text._ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect,"axG",@progbits,_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect,comdat
	.align	2
	.weak	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	.type	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect, %function
_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect:
.LFB1533:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 240]
	str	x0, [sp, 32]
	ldr	x0, [sp, 16]
	ldr	s1, [x0]
	ldr	s0, [sp, 32]
	fsub	s4, s1, s0
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 4]
	ldr	s0, [sp, 36]
	fsub	s5, s1, s0
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 32]
	fsub	s2, s1, s0
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 12]
	ldr	s0, [sp, 36]
	fsub	s0, s1, s0
	add	x0, sp, 40
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 40]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L439
	bl	__stack_chk_fail
.L439:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1533:
	.size	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect, .-_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	.section	.text._ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect,"axG",@progbits,_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect,comdat
	.align	2
	.weak	_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect
	.type	_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect, %function
_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect:
.LFB1534:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 240]
	str	x0, [sp, 32]
	ldr	x0, [sp, 16]
	ldr	s1, [x0]
	ldr	s0, [sp, 32]
	fadd	s4, s1, s0
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 4]
	ldr	s0, [sp, 36]
	fadd	s5, s1, s0
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 32]
	fadd	s2, s1, s0
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 12]
	ldr	s0, [sp, 36]
	fadd	s0, s1, s0
	add	x0, sp, 40
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 40]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L442
	bl	__stack_chk_fail
.L442:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1534:
	.size	_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect, .-_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect
	.section	.text._ZN5ImGui14GetDefaultFontEv,"axG",@progbits,_ZN5ImGui14GetDefaultFontEv,comdat
	.align	2
	.weak	_ZN5ImGui14GetDefaultFontEv
	.type	_ZN5ImGui14GetDefaultFontEv, %function
_ZN5ImGui14GetDefaultFontEv:
.LFB1535:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 104]
	cmp	x0, 0
	beq	.L444
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 104]
	b	.L446
.L444:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 88]
	add	x0, x0, 72
	mov	w1, 0
	bl	_ZN8ImVectorIP6ImFontEixEi
	ldr	x0, [x0]
.L446:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1535:
	.size	_ZN5ImGui14GetDefaultFontEv, .-_ZN5ImGui14GetDefaultFontEv
	.section	.text._ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow,"axG",@progbits,_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow,comdat
	.align	2
	.weak	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow
	.type	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow, %function
_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow:
.LFB1536:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	bl	_ZN5ImGui21GetForegroundDrawListEv
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1536:
	.size	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow, .-_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC38:
	.string	"*Missing Text*"
	.section	.text._ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey,"axG",@progbits,_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey,comdat
	.align	2
	.weak	_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey
	.type	_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey, %function
_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey:
.LFB1537:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 16]
	ldr	x0, [sp, 16]
	ldrsw	x1, [sp, 12]
	add	x1, x1, 2934
	ldr	x0, [x0, x1, lsl 3]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L450
	ldr	x0, [sp, 24]
	b	.L452
.L450:
	adrp	x0, .LC38
	add	x0, x0, :lo12:.LC38
.L452:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1537:
	.size	_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey, .-_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey
	.section	.text._ZN5ImGui10IsNamedKeyE8ImGuiKey,"axG",@progbits,_ZN5ImGui10IsNamedKeyE8ImGuiKey,comdat
	.align	2
	.weak	_ZN5ImGui10IsNamedKeyE8ImGuiKey
	.type	_ZN5ImGui10IsNamedKeyE8ImGuiKey, %function
_ZN5ImGui10IsNamedKeyE8ImGuiKey:
.LFB1545:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	cmp	w0, 511
	ble	.L454
	ldr	w0, [sp, 12]
	cmp	w0, 651
	bgt	.L454
	mov	w0, 1
	b	.L455
.L454:
	mov	w0, 0
.L455:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1545:
	.size	_ZN5ImGui10IsNamedKeyE8ImGuiKey, .-_ZN5ImGui10IsNamedKeyE8ImGuiKey
	.section	.text._ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey,"axG",@progbits,_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey,comdat
	.align	2
	.weak	_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey
	.type	_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey, %function
_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey:
.LFB1546:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	cmp	w0, 511
	ble	.L458
	ldr	w0, [sp, 12]
	cmp	w0, 651
	ble	.L459
.L458:
	ldr	w0, [sp, 12]
	cmp	w0, 4096
	beq	.L459
	ldr	w0, [sp, 12]
	cmp	w0, 8192
	beq	.L459
	ldr	w0, [sp, 12]
	cmp	w0, 16384
	beq	.L459
	ldr	w0, [sp, 12]
	cmp	w0, 32768
	bne	.L460
.L459:
	mov	w0, 1
	b	.L461
.L460:
	mov	w0, 0
.L461:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1546:
	.size	_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey, .-_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey
	.section	.text._ZN5ImGui11IsLegacyKeyE8ImGuiKey,"axG",@progbits,_ZN5ImGui11IsLegacyKeyE8ImGuiKey,comdat
	.align	2
	.weak	_ZN5ImGui11IsLegacyKeyE8ImGuiKey
	.type	_ZN5ImGui11IsLegacyKeyE8ImGuiKey, %function
_ZN5ImGui11IsLegacyKeyE8ImGuiKey:
.LFB1547:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	cmp	w0, 0
	blt	.L464
	ldr	w0, [sp, 12]
	cmp	w0, 511
	bgt	.L464
	mov	w0, 1
	b	.L465
.L464:
	mov	w0, 0
.L465:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1547:
	.size	_ZN5ImGui11IsLegacyKeyE8ImGuiKey, .-_ZN5ImGui11IsLegacyKeyE8ImGuiKey
	.section	.text._ZN5ImGui12IsGamepadKeyE8ImGuiKey,"axG",@progbits,_ZN5ImGui12IsGamepadKeyE8ImGuiKey,comdat
	.align	2
	.weak	_ZN5ImGui12IsGamepadKeyE8ImGuiKey
	.type	_ZN5ImGui12IsGamepadKeyE8ImGuiKey, %function
_ZN5ImGui12IsGamepadKeyE8ImGuiKey:
.LFB1549:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	cmp	w0, 616
	ble	.L468
	ldr	w0, [sp, 12]
	cmp	w0, 640
	bgt	.L468
	mov	w0, 1
	b	.L469
.L468:
	mov	w0, 0
.L469:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1549:
	.size	_ZN5ImGui12IsGamepadKeyE8ImGuiKey, .-_ZN5ImGui12IsGamepadKeyE8ImGuiKey
	.section	.text._ZN5ImGui10IsAliasKeyE8ImGuiKey,"axG",@progbits,_ZN5ImGui10IsAliasKeyE8ImGuiKey,comdat
	.align	2
	.weak	_ZN5ImGui10IsAliasKeyE8ImGuiKey
	.type	_ZN5ImGui10IsAliasKeyE8ImGuiKey, %function
_ZN5ImGui10IsAliasKeyE8ImGuiKey:
.LFB1551:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	cmp	w0, 640
	ble	.L472
	ldr	w0, [sp, 12]
	cmp	w0, 647
	bgt	.L472
	mov	w0, 1
	b	.L473
.L472:
	mov	w0, 0
.L473:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1551:
	.size	_ZN5ImGui10IsAliasKeyE8ImGuiKey, .-_ZN5ImGui10IsAliasKeyE8ImGuiKey
	.section	.text._ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey,"axG",@progbits,_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey,comdat
	.align	2
	.weak	_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey
	.type	_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey, %function
_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey:
.LFB1552:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	cmp	w0, 4096
	bne	.L476
	mov	w0, 648
	b	.L477
.L476:
	ldr	w0, [sp, 12]
	cmp	w0, 8192
	bne	.L478
	mov	w0, 649
	b	.L477
.L478:
	ldr	w0, [sp, 12]
	cmp	w0, 16384
	bne	.L479
	mov	w0, 650
	b	.L477
.L479:
	ldr	w0, [sp, 12]
	cmp	w0, 32768
	bne	.L480
	mov	w0, 651
	b	.L477
.L480:
	ldr	w0, [sp, 12]
.L477:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1552:
	.size	_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey, .-_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey
	.section	.rodata
	.align	3
.LC39:
	.string	"ImGuiKey ImGui::MouseButtonToKey(ImGuiMouseButton)"
	.align	3
.LC40:
	.string	"button >= 0 && button < ImGuiMouseButton_COUNT"
	.section	.text._ZN5ImGui16MouseButtonToKeyEi,"axG",@progbits,_ZN5ImGui16MouseButtonToKeyEi,comdat
	.align	2
	.weak	_ZN5ImGui16MouseButtonToKeyEi
	.type	_ZN5ImGui16MouseButtonToKeyEi, %function
_ZN5ImGui16MouseButtonToKeyEi:
.LFB1553:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L482
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L485
.L482:
	adrp	x0, .LC39
	add	x3, x0, :lo12:.LC39
	mov	w2, 2880
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC40
	add	x0, x0, :lo12:.LC40
	bl	__assert_fail
.L485:
	ldr	w0, [sp, 28]
	add	w0, w0, 641
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1553:
	.size	_ZN5ImGui16MouseButtonToKeyEi, .-_ZN5ImGui16MouseButtonToKeyEi
	.section	.text._ZN5ImGui21IsActiveIdUsingNavDirEi,"axG",@progbits,_ZN5ImGui21IsActiveIdUsingNavDirEi,comdat
	.align	2
	.weak	_ZN5ImGui21IsActiveIdUsingNavDirEi
	.type	_ZN5ImGui21IsActiveIdUsingNavDirEi, %function
_ZN5ImGui21IsActiveIdUsingNavDirEi:
.LFB1554:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 1784]
	ldr	w1, [sp, 12]
	mov	w2, 1
	lsl	w1, w2, w1
	and	w0, w0, w1
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1554:
	.size	_ZN5ImGui21IsActiveIdUsingNavDirEi, .-_ZN5ImGui21IsActiveIdUsingNavDirEi
	.section	.rodata
	.align	3
.LC41:
	.string	"ImGuiKeyOwnerData* ImGui::GetKeyOwnerData(ImGuiKey)"
	.align	3
.LC42:
	.string	"IsNamedKey(key)"
	.section	.text._ZN5ImGui15GetKeyOwnerDataE8ImGuiKey,"axG",@progbits,_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey,comdat
	.align	2
	.weak	_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey
	.type	_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey, %function
_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey:
.LFB1555:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	and	w0, w0, 61440
	cmp	w0, 0
	beq	.L489
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey
	str	w0, [sp, 28]
.L489:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10IsNamedKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L490
	adrp	x0, .LC41
	add	x3, x0, :lo12:.LC41
	mov	w2, 2904
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC42
	add	x0, x0, :lo12:.LC42
	bl	__assert_fail
.L490:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x2, [x0]
	ldr	w0, [sp, 28]
	sub	w0, w0, #512
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x1, 16176
	add	x0, x0, x1
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1555:
	.size	_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey, .-_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey
	.section	.text._ZN5ImGui20TableGetInstanceDataEP10ImGuiTablei,"axG",@progbits,_ZN5ImGui20TableGetInstanceDataEP10ImGuiTablei,comdat
	.align	2
	.weak	_ZN5ImGui20TableGetInstanceDataEP10ImGuiTablei
	.type	_ZN5ImGui20TableGetInstanceDataEP10ImGuiTablei, %function
_ZN5ImGui20TableGetInstanceDataEP10ImGuiTablei:
.LFB1558:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	bne	.L493
	ldr	x0, [sp, 24]
	add	x0, x0, 424
	b	.L494
.L493:
	ldr	x0, [sp, 24]
	add	x2, x0, 432
	ldr	w0, [sp, 20]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI22ImGuiTableInstanceDataEixEi
.L494:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1558:
	.size	_ZN5ImGui20TableGetInstanceDataEP10ImGuiTablei, .-_ZN5ImGui20TableGetInstanceDataEP10ImGuiTablei
	.section	.text._ZN5ImGui20DebugStartItemPickerEv,"axG",@progbits,_ZN5ImGui20DebugStartItemPickerEv,comdat
	.align	2
	.weak	_ZN5ImGui20DebugStartItemPickerEv
	.type	_ZN5ImGui20DebugStartItemPickerEv, %function
_ZN5ImGui20DebugStartItemPickerEv:
.LFB1562:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 20480
	mov	w1, 1
	strb	w1, [x0, 3161]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1562:
	.size	_ZN5ImGui20DebugStartItemPickerEv, .-_ZN5ImGui20DebugStartItemPickerEv
	.section	.rodata
	.align	2
	.type	_ZL29NAV_WINDOWING_HIGHLIGHT_DELAY, %object
	.size	_ZL29NAV_WINDOWING_HIGHLIGHT_DELAY, 4
_ZL29NAV_WINDOWING_HIGHLIGHT_DELAY:
	.word	1045220557
	.align	2
	.type	_ZL31NAV_WINDOWING_LIST_APPEAR_DELAY, %object
	.size	_ZL31NAV_WINDOWING_LIST_APPEAR_DELAY, 4
_ZL31NAV_WINDOWING_LIST_APPEAR_DELAY:
	.word	1041865114
	.align	2
	.type	_ZL21WINDOWS_HOVER_PADDING, %object
	.size	_ZL21WINDOWS_HOVER_PADDING, 4
_ZL21WINDOWS_HOVER_PADDING:
	.word	1082130432
	.align	2
	.type	_ZL40WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER, %object
	.size	_ZL40WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER, 4
_ZL40WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER:
	.word	1025758986
	.align	2
	.type	_ZL37WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER, %object
	.size	_ZL37WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER, 4
_ZL37WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER:
	.word	1060320051
	.global	GImGui
	.bss
	.align	3
	.type	GImGui, %object
	.size	GImGui, 8
GImGui:
	.zero	8
	.text
	.align	2
	.type	_ZL13MallocWrappermPv, %function
_ZL13MallocWrappermPv:
.LFB1568:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	malloc
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1568:
	.size	_ZL13MallocWrappermPv, .-_ZL13MallocWrappermPv
	.align	2
	.type	_ZL11FreeWrapperPvS_, %function
_ZL11FreeWrapperPvS_:
.LFB1569:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	free
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1569:
	.size	_ZL11FreeWrapperPvS_, .-_ZL11FreeWrapperPvS_
	.section	.data.rel.local,"aw"
	.align	3
	.type	_ZL21GImAllocatorAllocFunc, %object
	.size	_ZL21GImAllocatorAllocFunc, 8
_ZL21GImAllocatorAllocFunc:
	.xword	_ZL13MallocWrappermPv
	.align	3
	.type	_ZL20GImAllocatorFreeFunc, %object
	.size	_ZL20GImAllocatorFreeFunc, 8
_ZL20GImAllocatorFreeFunc:
	.xword	_ZL11FreeWrapperPvS_
	.local	_ZL20GImAllocatorUserData
	.comm	_ZL20GImAllocatorUserData,8,8
	.text
	.align	2
	.global	_ZN10ImGuiStyleC2Ev
	.type	_ZN10ImGuiStyleC2Ev, %function
_ZN10ImGuiStyleC2Ev:
.LFB1571:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 60
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 76
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 84
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 92
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 100
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 152
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 160
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 168
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 176
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 200
	mov	x3, x0
	mov	x0, 848
	mov	x2, x0
	mov	w1, 0
	mov	x0, x3
	bl	memset
	ldr	x0, [sp, 24]
	fmov	s0, 1.0e+0
	str	s0, [x0]
	ldr	x0, [sp, 24]
	mov	w1, 39322
	movk	w1, 0x3f19, lsl 16
	fmov	s0, w1
	str	s0, [x0, 4]
	add	x0, sp, 32
	fmov	s1, 8.0e+0
	fmov	s0, 8.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 16]
	ldr	x0, [sp, 24]
	fmov	s0, 1.0e+0
	str	s0, [x0, 20]
	add	x0, sp, 32
	movi	v1.2s, 0x42, lsl 24
	movi	v0.2s, 0x42, lsl 24
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 24]
	add	x0, sp, 32
	fmov	s1, 5.0e-1
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 32]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 40]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 44]
	ldr	x0, [sp, 24]
	fmov	s0, 1.0e+0
	str	s0, [x0, 48]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 52]
	ldr	x0, [sp, 24]
	fmov	s0, 1.0e+0
	str	s0, [x0, 56]
	add	x0, sp, 32
	fmov	s1, 3.0e+0
	fmov	s0, 4.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 60]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 68]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 72]
	add	x0, sp, 32
	fmov	s1, 4.0e+0
	fmov	s0, 8.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 76]
	add	x0, sp, 32
	fmov	s1, 4.0e+0
	fmov	s0, 4.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 84]
	add	x0, sp, 32
	fmov	s1, 2.0e+0
	fmov	s0, 4.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 92]
	add	x0, sp, 32
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 100]
	ldr	x0, [sp, 24]
	fmov	s0, 2.1e+1
	str	s0, [x0, 108]
	ldr	x0, [sp, 24]
	fmov	s0, 6.0e+0
	str	s0, [x0, 112]
	ldr	x0, [sp, 24]
	fmov	s0, 1.4e+1
	str	s0, [x0, 116]
	ldr	x0, [sp, 24]
	fmov	s0, 9.0e+0
	str	s0, [x0, 120]
	ldr	x0, [sp, 24]
	fmov	s0, 1.2e+1
	str	s0, [x0, 124]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 128]
	ldr	x0, [sp, 24]
	fmov	s0, 4.0e+0
	str	s0, [x0, 132]
	ldr	x0, [sp, 24]
	fmov	s0, 4.0e+0
	str	s0, [x0, 136]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 140]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 144]
	ldr	x0, [sp, 24]
	mov	w1, 1
	str	w1, [x0, 148]
	add	x0, sp, 32
	fmov	s1, 5.0e-1
	fmov	s0, 5.0e-1
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 152]
	add	x0, sp, 32
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 160]
	add	x0, sp, 32
	fmov	s1, 1.9e+1
	fmov	s0, 1.9e+1
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 168]
	add	x0, sp, 32
	fmov	s1, 3.0e+0
	fmov	s0, 3.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 32]
	str	x1, [x0, 176]
	ldr	x0, [sp, 24]
	fmov	s0, 1.0e+0
	str	s0, [x0, 184]
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 188]
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 189]
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 190]
	ldr	x0, [sp, 24]
	fmov	s0, 1.25e+0
	str	s0, [x0, 192]
	ldr	x0, [sp, 24]
	mov	w1, 39322
	movk	w1, 0x3e99, lsl 16
	fmov	s0, w1
	str	s0, [x0, 196]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui15StyleColorsDarkEP10ImGuiStyle
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L500
	bl	__stack_chk_fail
.L500:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1571:
	.size	_ZN10ImGuiStyleC2Ev, .-_ZN10ImGuiStyleC2Ev
	.global	_ZN10ImGuiStyleC1Ev
	.set	_ZN10ImGuiStyleC1Ev,_ZN10ImGuiStyleC2Ev
	.align	2
	.global	_ZN10ImGuiStyle13ScaleAllSizesEf
	.type	_ZN10ImGuiStyle13ScaleAllSizesEf, %function
_ZN10ImGuiStyle13ScaleAllSizesEf:
.LFB1573:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	str	s0, [sp, 36]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 40]
	add	x0, x0, 8
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 8]
	str	s0, [x19, 12]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 16]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 16]
	ldr	x0, [sp, 40]
	add	x0, x0, 24
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 44]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 44]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 52]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 52]
	ldr	x0, [sp, 40]
	add	x0, x0, 60
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 60]
	str	s0, [x19, 64]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 68]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 68]
	ldr	x0, [sp, 40]
	add	x0, x0, 76
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 76]
	str	s0, [x19, 80]
	ldr	x0, [sp, 40]
	add	x0, x0, 84
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 84]
	str	s0, [x19, 88]
	ldr	x0, [sp, 40]
	add	x0, x0, 92
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 92]
	str	s0, [x19, 96]
	ldr	x0, [sp, 40]
	add	x0, x0, 100
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 100]
	str	s0, [x19, 104]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 108]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 108]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 112]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 112]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 116]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 116]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 120]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 120]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 124]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 124]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 128]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 128]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 132]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 132]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 136]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 136]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 144]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmp	s0, s1
	beq	.L502
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 144]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	b	.L503
.L502:
	mov	w0, 2139095039
	fmov	s0, w0
.L503:
	ldr	x0, [sp, 40]
	str	s0, [x0, 144]
	ldr	x0, [sp, 40]
	add	x0, x0, 168
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 168]
	str	s0, [x19, 172]
	ldr	x0, [sp, 40]
	add	x0, x0, 176
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 176]
	str	s0, [x19, 180]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 184]
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 40]
	str	s0, [x0, 184]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L504
	bl	__stack_chk_fail
.L504:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1573:
	.size	_ZN10ImGuiStyle13ScaleAllSizesEf, .-_ZN10ImGuiStyle13ScaleAllSizesEf
	.section	.rodata
	.align	3
.LC43:
	.string	"imgui.ini"
	.align	3
.LC44:
	.string	"imgui_log.txt"
	.text
	.align	2
	.global	_ZN7ImGuiIOC2Ev
	.type	_ZN7ImGuiIOC2Ev, %function
_ZN7ImGuiIOC2Ev:
.LFB1575:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 104
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 240
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 3572
	bl	_ZN6ImVec2C1Ev
	ldr	x1, [sp, 24]
	mov	x0, 14040
	add	x0, x1, x0
	bl	_ZN6ImVec2C1Ev
	ldr	x1, [sp, 24]
	mov	x0, 14336
	add	x0, x1, x0
	sub	x0, x0, #288
	stp	xzr, xzr, [x0]
	stp	xzr, xzr, [x0, 16]
	str	xzr, [x0, 32]
	ldr	x1, [sp, 24]
	mov	x0, 14248
	add	x0, x1, x0
	bl	_ZN8ImVectorItEC1Ev
	mov	x2, 14264
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	ldr	x0, [sp, 24]
	str	wzr, [x0]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	add	x0, sp, 48
	fmov	s1, -1.0e+0
	fmov	s0, -1.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 48]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	mov	w1, 34953
	movk	w1, 0x3c88, lsl 16
	fmov	s0, w1
	str	s0, [x0, 16]
	ldr	x0, [sp, 24]
	fmov	s0, 5.0e+0
	str	s0, [x0, 20]
	ldr	x0, [sp, 24]
	adrp	x1, .LC43
	add	x1, x1, :lo12:.LC43
	str	x1, [x0, 24]
	ldr	x0, [sp, 24]
	adrp	x1, .LC44
	add	x1, x1, :lo12:.LC44
	str	x1, [x0, 32]
	ldr	x0, [sp, 24]
	mov	w1, 39322
	movk	w1, 0x3e99, lsl 16
	fmov	s0, w1
	str	s0, [x0, 40]
	ldr	x0, [sp, 24]
	fmov	s0, 6.0e+0
	str	s0, [x0, 44]
	str	wzr, [sp, 36]
	b	.L506
.L507:
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 36]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	mov	w1, -1
	str	w1, [x0, 8]
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L506:
	ldr	w0, [sp, 36]
	cmp	w0, 651
	ble	.L507
	ldr	x0, [sp, 24]
	mov	w1, 52429
	movk	w1, 0x3e8c, lsl 16
	fmov	s0, w1
	str	s0, [x0, 52]
	ldr	x0, [sp, 24]
	mov	w1, 52429
	movk	w1, 0x3d4c, lsl 16
	fmov	s0, w1
	str	s0, [x0, 56]
	ldr	x0, [sp, 24]
	mov	w1, 39322
	movk	w1, 0x3e99, lsl 16
	fmov	s0, w1
	str	s0, [x0, 60]
	ldr	x0, [sp, 24]
	mov	w1, 52429
	movk	w1, 0x3dcc, lsl 16
	fmov	s0, w1
	str	s0, [x0, 64]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 72]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 80]
	ldr	x0, [sp, 24]
	fmov	s0, 1.0e+0
	str	s0, [x0, 88]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 96]
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 92]
	add	x0, sp, 48
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 48]
	str	x1, [x0, 104]
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 112]
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 113]
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 114]
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 115]
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 116]
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 117]
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 118]
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 119]
	ldr	x0, [sp, 24]
	mov	w1, 1114636288
	fmov	s0, w1
	str	s0, [x0, 120]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 136]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 136]
	ldr	x0, [sp, 24]
	str	x1, [x0, 128]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 160]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 160]
	ldr	x0, [sp, 24]
	str	x1, [x0, 152]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 152]
	ldr	x0, [sp, 24]
	str	x1, [x0, 144]
	ldr	x0, [sp, 24]
	adrp	x1, _ZL30GetClipboardTextFn_DefaultImplPv
	add	x1, x1, :lo12:_ZL30GetClipboardTextFn_DefaultImplPv
	str	x1, [x0, 168]
	ldr	x0, [sp, 24]
	adrp	x1, _ZL30SetClipboardTextFn_DefaultImplPvPKc
	add	x1, x1, :lo12:_ZL30SetClipboardTextFn_DefaultImplPvPKc
	str	x1, [x0, 176]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 184]
	ldr	x0, [sp, 24]
	adrp	x1, _ZL32SetPlatformImeDataFn_DefaultImplP13ImGuiViewportP20ImGuiPlatformImeData
	add	x1, x1, :lo12:_ZL32SetPlatformImeDataFn_DefaultImplP13ImGuiViewportP20ImGuiPlatformImeData
	str	x1, [x0, 192]
	add	x0, sp, 48
	mvni	v1.2s, 0x80, lsl 16
	mvni	v0.2s, 0x80, lsl 16
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	add	x0, x0, 3584
	ldr	x1, [sp, 48]
	str	x1, [x0, -12]
	add	x0, sp, 48
	mvni	v1.2s, 0x80, lsl 16
	mvni	v0.2s, 0x80, lsl 16
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 48]
	str	x1, [x0, 14040]
	ldr	x0, [sp, 24]
	fmov	s0, 6.0e+0
	str	s0, [x0, 48]
	str	wzr, [sp, 40]
	b	.L508
.L509:
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 3548
	lsl	x0, x0, 2
	add	x0, x1, x0
	fmov	s0, -1.0e+0
	str	s0, [x0, 4]
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 3548
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 24]
	ldrsw	x1, [sp, 40]
	add	x1, x1, 3544
	str	s0, [x0, x1, lsl 2]
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
.L508:
	ldr	w0, [sp, 40]
	cmp	w0, 4
	ble	.L509
	str	wzr, [sp, 44]
	b	.L510
.L511:
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	fmov	s0, -1.0e+0
	str	s0, [x0, 12]
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldr	s0, [x0, 12]
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	str	s0, [x0, 8]
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L510:
	ldr	w0, [sp, 44]
	cmp	w0, 651
	ble	.L511
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 1953]
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	mov	w1, -1
	strb	w1, [x0, 1954]
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 1955]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L512
	bl	__stack_chk_fail
.L512:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1575:
	.size	_ZN7ImGuiIOC2Ev, .-_ZN7ImGuiIOC2Ev
	.global	_ZN7ImGuiIOC1Ev
	.set	_ZN7ImGuiIOC1Ev,_ZN7ImGuiIOC2Ev
	.section	.rodata
	.align	3
.LC45:
	.string	"void ImGuiIO::AddInputCharacter(unsigned int)"
	.align	3
.LC46:
	.string	"/media/psf/Home/Desktop/git/C-/mac/myproject/external/imgui/src/imgui.cpp"
	.align	3
.LC47:
	.string	"&g.IO == this && \"Can only add events to current context.\""
	.text
	.align	2
	.global	_ZN7ImGuiIO17AddInputCharacterEj
	.type	_ZN7ImGuiIO17AddInputCharacterEj, %function
_ZN7ImGuiIO17AddInputCharacterEj:
.LFB1577:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 8
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L514
	adrp	x0, .LC45
	add	x3, x0, :lo12:.LC45
	mov	w2, 1227
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC47
	add	x0, x0, :lo12:.LC47
	bl	__assert_fail
.L514:
	ldr	w0, [sp, 20]
	cmp	w0, 0
	beq	.L519
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1953]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L519
	add	x0, sp, 48
	bl	_ZN15ImGuiInputEventC1Ev
	mov	w0, 5
	str	w0, [sp, 48]
	mov	w0, 2
	str	w0, [sp, 52]
	ldr	w0, [sp, 20]
	str	w0, [sp, 56]
	ldr	x1, [sp, 40]
	mov	x0, 14272
	add	x0, x1, x0
	add	x1, sp, 48
	bl	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	b	.L513
.L519:
	nop
.L513:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L518
	bl	__stack_chk_fail
.L518:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1577:
	.size	_ZN7ImGuiIO17AddInputCharacterEj, .-_ZN7ImGuiIO17AddInputCharacterEj
	.align	2
	.global	_ZN7ImGuiIO22AddInputCharacterUTF16Et
	.type	_ZN7ImGuiIO22AddInputCharacterUTF16Et, %function
_ZN7ImGuiIO22AddInputCharacterUTF16Et:
.LFB1578:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	strh	w1, [sp, 22]
	ldrh	w0, [sp, 22]
	cmp	w0, 0
	bne	.L521
	ldr	x0, [sp, 24]
	add	x0, x0, 8192
	ldrh	w0, [x0, 6052]
	cmp	w0, 0
	beq	.L530
.L521:
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1953]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L530
	ldrh	w0, [sp, 22]
	and	w1, w0, 64512
	mov	w0, 55296
	cmp	w1, w0
	bne	.L525
	ldr	x0, [sp, 24]
	add	x0, x0, 8192
	ldrh	w0, [x0, 6052]
	cmp	w0, 0
	beq	.L526
	mov	w1, 65533
	ldr	x0, [sp, 24]
	bl	_ZN7ImGuiIO17AddInputCharacterEj
.L526:
	ldr	x0, [sp, 24]
	add	x0, x0, 8192
	ldrh	w1, [sp, 22]
	strh	w1, [x0, 6052]
	b	.L520
.L525:
	ldrh	w0, [sp, 22]
	strh	w0, [sp, 46]
	ldr	x0, [sp, 24]
	add	x0, x0, 8192
	ldrh	w0, [x0, 6052]
	cmp	w0, 0
	beq	.L527
	ldrh	w0, [sp, 22]
	and	w1, w0, 64512
	mov	w0, 56320
	cmp	w1, w0
	beq	.L528
	mov	w1, 65533
	ldr	x0, [sp, 24]
	bl	_ZN7ImGuiIO17AddInputCharacterEj
	b	.L529
.L528:
	mov	w0, -3
	strh	w0, [sp, 46]
.L529:
	ldr	x0, [sp, 24]
	add	x0, x0, 8192
	strh	wzr, [x0, 6052]
.L527:
	ldrh	w0, [sp, 46]
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN7ImGuiIO17AddInputCharacterEj
	b	.L520
.L530:
	nop
.L520:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1578:
	.size	_ZN7ImGuiIO22AddInputCharacterUTF16Et, .-_ZN7ImGuiIO22AddInputCharacterUTF16Et
	.align	2
	.global	_ZN7ImGuiIO22AddInputCharactersUTF8EPKc
	.type	_ZN7ImGuiIO22AddInputCharactersUTF8EPKc, %function
_ZN7ImGuiIO22AddInputCharactersUTF8EPKc:
.LFB1579:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1953]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L538
	b	.L534
.L536:
	str	wzr, [sp, 36]
	add	x0, sp, 36
	mov	x2, 0
	ldr	x1, [sp, 16]
	bl	_Z18ImTextCharFromUtf8PjPKcS1_
	sxtw	x0, w0
	ldr	x1, [sp, 16]
	add	x0, x1, x0
	str	x0, [sp, 16]
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L534
	ldr	w0, [sp, 36]
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN7ImGuiIO17AddInputCharacterEj
.L534:
	ldr	x0, [sp, 16]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L536
	b	.L531
.L538:
	nop
.L531:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L537
	bl	__stack_chk_fail
.L537:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1579:
	.size	_ZN7ImGuiIO22AddInputCharactersUTF8EPKc, .-_ZN7ImGuiIO22AddInputCharactersUTF8EPKc
	.align	2
	.global	_ZN7ImGuiIO20ClearInputCharactersEv
	.type	_ZN7ImGuiIO20ClearInputCharactersEv, %function
_ZN7ImGuiIO20ClearInputCharactersEv:
.LFB1580:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x1, [sp, 24]
	mov	x0, 14248
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorItE6resizeEi
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1580:
	.size	_ZN7ImGuiIO20ClearInputCharactersEv, .-_ZN7ImGuiIO20ClearInputCharactersEv
	.align	2
	.global	_ZN7ImGuiIO14ClearInputKeysEv
	.type	_ZN7ImGuiIO14ClearInputKeysEv, %function
_ZN7ImGuiIO14ClearInputKeysEv:
.LFB1581:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	add	x0, x0, 2856
	mov	x2, 652
	mov	w1, 0
	bl	memset
	str	wzr, [sp, 40]
	b	.L541
.L542:
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	strb	wzr, [x0, 4]
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	fmov	s0, -1.0e+0
	str	s0, [x0, 8]
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	fmov	s0, -1.0e+0
	str	s0, [x0, 12]
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
.L541:
	ldr	w0, [sp, 40]
	cmp	w0, 651
	ble	.L542
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 3599]
	ldr	x0, [sp, 24]
	ldrb	w1, [x0, 3599]
	ldr	x0, [sp, 24]
	strb	w1, [x0, 3598]
	ldr	x0, [sp, 24]
	ldrb	w1, [x0, 3598]
	ldr	x0, [sp, 24]
	strb	w1, [x0, 3597]
	ldr	x0, [sp, 24]
	ldrb	w1, [x0, 3597]
	ldr	x0, [sp, 24]
	strb	w1, [x0, 3596]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 3600]
	add	x0, sp, 48
	mvni	v1.2s, 0x80, lsl 16
	mvni	v0.2s, 0x80, lsl 16
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 24]
	add	x0, x0, 3584
	ldr	x1, [sp, 48]
	str	x1, [x0, -12]
	str	wzr, [sp, 44]
	b	.L543
.L544:
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 44]
	add	x0, x1, x0
	strb	wzr, [x0, 3580]
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 3548
	lsl	x0, x0, 2
	add	x0, x1, x0
	fmov	s0, -1.0e+0
	str	s0, [x0, 4]
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 3548
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 24]
	ldrsw	x1, [sp, 44]
	add	x1, x1, 3544
	str	s0, [x0, x1, lsl 2]
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L543:
	ldr	w0, [sp, 44]
	cmp	w0, 4
	ble	.L544
	ldr	x0, [sp, 24]
	str	wzr, [x0, 3592]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 3592]
	ldr	x0, [sp, 24]
	str	s0, [x0, 3588]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L545
	bl	__stack_chk_fail
.L545:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1581:
	.size	_ZN7ImGuiIO14ClearInputKeysEv, .-_ZN7ImGuiIO14ClearInputKeysEv
	.align	2
	.type	_ZL20FindLatestInputEvent19ImGuiInputEventTypei, %function
_ZL20FindLatestInputEvent19ImGuiInputEventTypei:
.LFB1582:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 14272]
	sub	w0, w0, #1
	str	w0, [sp, 44]
	b	.L547
.L553:
	ldr	x1, [sp, 48]
	mov	x0, 14272
	add	x0, x1, x0
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorI15ImGuiInputEventEixEi
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bne	.L554
	ldr	w0, [sp, 28]
	cmp	w0, 4
	bne	.L550
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 24]
	cmp	w1, w0
	bne	.L555
.L550:
	ldr	w0, [sp, 28]
	cmp	w0, 3
	bne	.L551
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 24]
	cmp	w1, w0
	bne	.L556
.L551:
	ldr	x0, [sp, 56]
	b	.L552
.L554:
	nop
	b	.L549
.L555:
	nop
	b	.L549
.L556:
	nop
.L549:
	ldr	w0, [sp, 44]
	sub	w0, w0, #1
	str	w0, [sp, 44]
.L547:
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bge	.L553
	mov	x0, 0
.L552:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1582:
	.size	_ZL20FindLatestInputEvent19ImGuiInputEventTypei, .-_ZL20FindLatestInputEvent19ImGuiInputEventTypei
	.section	.rodata
	.align	3
.LC48:
	.string	"void ImGuiIO::AddKeyAnalogEvent(ImGuiKey, bool, float)"
	.align	3
.LC49:
	.string	"ImGui::IsNamedKeyOrModKey(key)"
	.align	3
.LC50:
	.string	"!ImGui::IsAliasKey(key)"
	.align	3
.LC51:
	.string	"(BackendUsingLegacyKeyArrays == -1 || BackendUsingLegacyKeyArrays == 0) && \"Backend needs to either only use io.AddKeyEvent(), either only fill legacy io.KeysDown[] + io.KeyMap[]. Not both!\""
	.align	3
.LC52:
	.string	"KeyMap[n] == -1 && \"Backend needs to either only use io.AddKeyEvent(), either only fill legacy io.KeysDown[] + io.KeyMap[]. Not both!\""
	.text
	.align	2
	.global	_ZN7ImGuiIO17AddKeyAnalogEventE8ImGuiKeybf
	.type	_ZN7ImGuiIO17AddKeyAnalogEventE8ImGuiKeybf, %function
_ZN7ImGuiIO17AddKeyAnalogEventE8ImGuiKeybf:
.LFB1583:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	strb	w2, [sp, 35]
	str	s0, [sp, 28]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L579
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1953]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L579
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	add	x0, x0, 8
	ldr	x1, [sp, 40]
	cmp	x1, x0
	beq	.L561
	adrp	x0, .LC48
	add	x3, x0, :lo12:.LC48
	mov	w2, 1343
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC47
	add	x0, x0, :lo12:.LC47
	bl	__assert_fail
.L561:
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L562
	adrp	x0, .LC48
	add	x3, x0, :lo12:.LC48
	mov	w2, 1344
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC49
	add	x0, x0, :lo12:.LC49
	bl	__assert_fail
.L562:
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui10IsAliasKeyE8ImGuiKey
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L563
	adrp	x0, .LC48
	add	x3, x0, :lo12:.LC48
	mov	w2, 1345
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC50
	add	x0, x0, :lo12:.LC50
	bl	__assert_fail
.L563:
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	ldrsb	w0, [x0, 1954]
	cmn	w0, #1
	beq	.L564
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	ldrsb	w0, [x0, 1954]
	cmp	w0, 0
	beq	.L564
	adrp	x0, .LC48
	add	x3, x0, :lo12:.LC48
	mov	w2, 1349
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC51
	add	x0, x0, :lo12:.LC51
	bl	__assert_fail
.L564:
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	ldrsb	w0, [x0, 1954]
	cmn	w0, #1
	bne	.L565
	mov	w0, 512
	str	w0, [sp, 64]
	b	.L566
.L568:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 64]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	cmn	w0, #1
	beq	.L567
	adrp	x0, .LC48
	add	x3, x0, :lo12:.LC48
	mov	w2, 1352
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC52
	add	x0, x0, :lo12:.LC52
	bl	__assert_fail
.L567:
	ldr	w0, [sp, 64]
	add	w0, w0, 1
	str	w0, [sp, 64]
.L566:
	ldr	w0, [sp, 64]
	cmp	w0, 651
	ble	.L568
.L565:
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	strb	wzr, [x0, 1954]
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui12IsGamepadKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L569
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	strb	wzr, [x0, 1955]
.L569:
	ldr	w1, [sp, 36]
	mov	w0, 4
	bl	_ZL20FindLatestInputEvent19ImGuiInputEventTypei
	str	x0, [sp, 80]
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	str	x0, [sp, 88]
	ldr	x0, [sp, 80]
	cmp	x0, 0
	beq	.L570
	ldr	x0, [sp, 80]
	ldrb	w0, [x0, 12]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	b	.L571
.L570:
	ldr	x0, [sp, 88]
	ldrb	w0, [x0]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
.L571:
	strb	w0, [sp, 63]
	ldr	x0, [sp, 80]
	cmp	x0, 0
	beq	.L572
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 16]
	b	.L573
.L572:
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 12]
.L573:
	str	s0, [sp, 68]
	ldrb	w1, [sp, 63]
	ldrb	w0, [sp, 35]
	cmp	w1, w0
	bne	.L574
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 28]
	fcmp	s1, s0
	beq	.L580
.L574:
	add	x0, sp, 96
	bl	_ZN15ImGuiInputEventC1Ev
	mov	w0, 4
	str	w0, [sp, 96]
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui12IsGamepadKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L575
	mov	w0, 3
	b	.L576
.L575:
	mov	w0, 2
.L576:
	str	w0, [sp, 100]
	ldr	w0, [sp, 36]
	str	w0, [sp, 104]
	ldrb	w0, [sp, 35]
	strb	w0, [sp, 108]
	ldr	s0, [sp, 28]
	str	s0, [sp, 112]
	ldr	x1, [sp, 72]
	mov	x0, 14272
	add	x0, x1, x0
	add	x1, sp, 96
	bl	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	b	.L557
.L579:
	nop
	b	.L557
.L580:
	nop
.L557:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L578
	bl	__stack_chk_fail
.L578:
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1583:
	.size	_ZN7ImGuiIO17AddKeyAnalogEventE8ImGuiKeybf, .-_ZN7ImGuiIO17AddKeyAnalogEventE8ImGuiKeybf
	.align	2
	.global	_ZN7ImGuiIO11AddKeyEventE8ImGuiKeyb
	.type	_ZN7ImGuiIO11AddKeyEventE8ImGuiKeyb, %function
_ZN7ImGuiIO11AddKeyEventE8ImGuiKeyb:
.LFB1584:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	strb	w2, [sp, 19]
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1953]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L586
	ldrb	w0, [sp, 19]
	cmp	w0, 0
	beq	.L584
	fmov	s0, 1.0e+0
	b	.L585
.L584:
	movi	v0.2s, #0
.L585:
	ldrb	w2, [sp, 19]
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZN7ImGuiIO17AddKeyAnalogEventE8ImGuiKeybf
	b	.L581
.L586:
	nop
.L581:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1584:
	.size	_ZN7ImGuiIO11AddKeyEventE8ImGuiKeyb, .-_ZN7ImGuiIO11AddKeyEventE8ImGuiKeyb
	.section	.rodata
	.align	3
.LC53:
	.string	"void ImGuiIO::SetKeyEventNativeData(ImGuiKey, int, int, int)"
	.align	3
.LC54:
	.string	"ImGui::IsNamedKey(key)"
	.align	3
.LC55:
	.string	"native_legacy_index == -1 || ImGui::IsLegacyKey((ImGuiKey)native_legacy_index)"
	.text
	.align	2
	.global	_ZN7ImGuiIO21SetKeyEventNativeDataE8ImGuiKeyiii
	.type	_ZN7ImGuiIO21SetKeyEventNativeDataE8ImGuiKeyiii, %function
_ZN7ImGuiIO21SetKeyEventNativeDataE8ImGuiKeyiii:
.LFB1585:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	w2, [sp, 32]
	str	w3, [sp, 28]
	str	w4, [sp, 24]
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L595
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui10IsNamedKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L590
	adrp	x0, .LC53
	add	x3, x0, :lo12:.LC53
	mov	w2, 1390
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC54
	add	x0, x0, :lo12:.LC54
	bl	__assert_fail
.L590:
	ldr	w0, [sp, 24]
	cmn	w0, #1
	beq	.L591
	ldr	w0, [sp, 24]
	bl	_ZN5ImGui11IsLegacyKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L591
	adrp	x0, .LC53
	add	x3, x0, :lo12:.LC53
	mov	w2, 1391
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC55
	add	x0, x0, :lo12:.LC55
	bl	__assert_fail
.L591:
	ldr	w0, [sp, 24]
	cmn	w0, #1
	beq	.L592
	ldr	w0, [sp, 24]
	b	.L593
.L592:
	ldr	w0, [sp, 32]
.L593:
	str	w0, [sp, 60]
	ldr	w0, [sp, 60]
	bl	_ZN5ImGui11IsLegacyKeyE8ImGuiKey
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L596
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 60]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	str	w1, [x0, 8]
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 36]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	str	w1, [x0, 8]
	b	.L587
.L595:
	nop
	b	.L587
.L596:
	nop
.L587:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1585:
	.size	_ZN7ImGuiIO21SetKeyEventNativeDataE8ImGuiKeyiii, .-_ZN7ImGuiIO21SetKeyEventNativeDataE8ImGuiKeyiii
	.align	2
	.global	_ZN7ImGuiIO21SetAppAcceptingEventsEb
	.type	_ZN7ImGuiIO21SetAppAcceptingEventsEb, %function
_ZN7ImGuiIO21SetAppAcceptingEventsEb:
.LFB1586:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	strb	w1, [sp, 7]
	ldr	x0, [sp, 8]
	add	x0, x0, 12288
	ldrb	w1, [sp, 7]
	strb	w1, [x0, 1953]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1586:
	.size	_ZN7ImGuiIO21SetAppAcceptingEventsEb, .-_ZN7ImGuiIO21SetAppAcceptingEventsEb
	.section	.rodata
	.align	3
.LC56:
	.string	"void ImGuiIO::AddMousePosEvent(float, float)"
	.text
	.align	2
	.global	_ZN7ImGuiIO16AddMousePosEventEff
	.type	_ZN7ImGuiIO16AddMousePosEventEff, %function
_ZN7ImGuiIO16AddMousePosEventEff:
.LFB1587:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -96
	str	x0, [sp, 40]
	str	s0, [sp, 36]
	str	s1, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	add	x0, x0, 8
	ldr	x1, [sp, 40]
	cmp	x1, x0
	beq	.L599
	adrp	x0, .LC56
	add	x3, x0, :lo12:.LC56
	mov	w2, 1418
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC47
	add	x0, x0, :lo12:.LC47
	bl	__assert_fail
.L599:
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1953]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L617
	ldr	s1, [sp, 36]
	mvni	v0.2s, 0x80, lsl 16
	fcmpe	s1, s0
	bgt	.L613
	b	.L615
.L613:
	ldr	s0, [sp, 36]
	bl	_ZL13ImFloorSignedf
	fmov	s8, s0
	b	.L604
.L615:
	ldr	s8, [sp, 36]
.L604:
	ldr	s1, [sp, 32]
	mvni	v0.2s, 0x80, lsl 16
	fcmpe	s1, s0
	bgt	.L614
	b	.L616
.L614:
	ldr	s0, [sp, 32]
	bl	_ZL13ImFloorSignedf
	b	.L607
.L616:
	ldr	s0, [sp, 32]
.L607:
	add	x0, sp, 48
	fmov	s1, s0
	fmov	s0, s8
	bl	_ZN6ImVec2C1Eff
	mov	w1, -1
	mov	w0, 1
	bl	_ZL20FindLatestInputEvent19ImGuiInputEventTypei
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	cmp	x0, 0
	beq	.L608
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 8]
	ldr	x0, [sp, 72]
	ldr	s1, [x0, 12]
	add	x0, sp, 56
	bl	_ZN6ImVec2C1Eff
	b	.L609
.L608:
	ldr	x0, [sp, 64]
	add	x0, x0, 3584
	ldr	x0, [x0, -4]
	str	x0, [sp, 56]
.L609:
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 48]
	fcmp	s1, s0
	bne	.L610
	ldr	s1, [sp, 60]
	ldr	s0, [sp, 52]
	fcmp	s1, s0
	beq	.L618
.L610:
	add	x0, sp, 80
	bl	_ZN15ImGuiInputEventC1Ev
	mov	w0, 1
	str	w0, [sp, 80]
	mov	w0, 1
	str	w0, [sp, 84]
	ldr	s0, [sp, 48]
	str	s0, [sp, 88]
	ldr	s0, [sp, 52]
	str	s0, [sp, 92]
	ldr	x1, [sp, 64]
	mov	x0, 14272
	add	x0, x1, x0
	add	x1, sp, 80
	bl	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	b	.L598
.L617:
	nop
	b	.L598
.L618:
	nop
.L598:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L612
	bl	__stack_chk_fail
.L612:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1587:
	.size	_ZN7ImGuiIO16AddMousePosEventEff, .-_ZN7ImGuiIO16AddMousePosEventEff
	.section	.rodata
	.align	3
.LC57:
	.string	"void ImGuiIO::AddMouseButtonEvent(int, bool)"
	.align	3
.LC58:
	.string	"mouse_button >= 0 && mouse_button < ImGuiMouseButton_COUNT"
	.text
	.align	2
	.global	_ZN7ImGuiIO19AddMouseButtonEventEib
	.type	_ZN7ImGuiIO19AddMouseButtonEventEib, %function
_ZN7ImGuiIO19AddMouseButtonEventEib:
.LFB1588:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	strb	w2, [sp, 19]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	add	x0, x0, 8
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L620
	adrp	x0, .LC57
	add	x3, x0, :lo12:.LC57
	mov	w2, 1442
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC47
	add	x0, x0, :lo12:.LC47
	bl	__assert_fail
.L620:
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L621
	ldr	w0, [sp, 20]
	cmp	w0, 4
	ble	.L630
.L621:
	adrp	x0, .LC57
	add	x3, x0, :lo12:.LC57
	mov	w2, 1443
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC58
	add	x0, x0, :lo12:.LC58
	bl	__assert_fail
.L630:
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1953]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L631
	ldr	w1, [sp, 20]
	mov	w0, 3
	bl	_ZL20FindLatestInputEvent19ImGuiInputEventTypei
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L625
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 12]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	b	.L626
.L625:
	ldrsw	x0, [sp, 20]
	add	x0, x0, 3568
	ldr	x1, [sp, 48]
	add	x0, x1, x0
	add	x0, x0, 20
	ldrb	w0, [x0]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
.L626:
	strb	w0, [sp, 47]
	ldrb	w1, [sp, 47]
	ldrb	w0, [sp, 19]
	cmp	w1, w0
	beq	.L632
	add	x0, sp, 64
	bl	_ZN15ImGuiInputEventC1Ev
	mov	w0, 3
	str	w0, [sp, 64]
	mov	w0, 1
	str	w0, [sp, 68]
	ldr	w0, [sp, 20]
	str	w0, [sp, 72]
	ldrb	w0, [sp, 19]
	strb	w0, [sp, 76]
	ldr	x1, [sp, 48]
	mov	x0, 14272
	add	x0, x1, x0
	add	x1, sp, 64
	bl	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	b	.L619
.L631:
	nop
	b	.L619
.L632:
	nop
.L619:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L629
	bl	__stack_chk_fail
.L629:
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1588:
	.size	_ZN7ImGuiIO19AddMouseButtonEventEib, .-_ZN7ImGuiIO19AddMouseButtonEventEib
	.section	.rodata
	.align	3
.LC59:
	.string	"void ImGuiIO::AddMouseWheelEvent(float, float)"
	.text
	.align	2
	.global	_ZN7ImGuiIO18AddMouseWheelEventEff
	.type	_ZN7ImGuiIO18AddMouseWheelEventEff, %function
_ZN7ImGuiIO18AddMouseWheelEventEff:
.LFB1589:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 24]
	str	s0, [sp, 20]
	str	s1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 8
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L634
	adrp	x0, .LC59
	add	x3, x0, :lo12:.LC59
	mov	w2, 1465
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC47
	add	x0, x0, :lo12:.LC47
	bl	__assert_fail
.L634:
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1953]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L639
	ldr	s0, [sp, 20]
	fcmp	s0, #0.0
	bne	.L636
	ldr	s0, [sp, 16]
	fcmp	s0, #0.0
	beq	.L639
.L636:
	add	x0, sp, 48
	bl	_ZN15ImGuiInputEventC1Ev
	mov	w0, 2
	str	w0, [sp, 48]
	mov	w0, 1
	str	w0, [sp, 52]
	ldr	s0, [sp, 20]
	str	s0, [sp, 56]
	ldr	s0, [sp, 16]
	str	s0, [sp, 60]
	ldr	x1, [sp, 40]
	mov	x0, 14272
	add	x0, x1, x0
	add	x1, sp, 48
	bl	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	b	.L633
.L639:
	nop
.L633:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L638
	bl	__stack_chk_fail
.L638:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1589:
	.size	_ZN7ImGuiIO18AddMouseWheelEventEff, .-_ZN7ImGuiIO18AddMouseWheelEventEff
	.section	.rodata
	.align	3
.LC60:
	.string	"void ImGuiIO::AddFocusEvent(bool)"
	.text
	.align	2
	.global	_ZN7ImGuiIO13AddFocusEventEb
	.type	_ZN7ImGuiIO13AddFocusEventEb, %function
_ZN7ImGuiIO13AddFocusEventEb:
.LFB1590:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 24]
	strb	w1, [sp, 23]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	add	x0, x0, 8
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L641
	adrp	x0, .LC60
	add	x3, x0, :lo12:.LC60
	mov	w2, 1482
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC47
	add	x0, x0, :lo12:.LC47
	bl	__assert_fail
.L641:
	mov	w1, -1
	mov	w0, 6
	bl	_ZL20FindLatestInputEvent19ImGuiInputEventTypei
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L642
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 8]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	b	.L643
.L642:
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1960]
	eor	w0, w0, 1
	and	w0, w0, 255
.L643:
	strb	w0, [sp, 47]
	ldrb	w1, [sp, 47]
	ldrb	w0, [sp, 23]
	cmp	w1, w0
	beq	.L647
	add	x0, sp, 64
	bl	_ZN15ImGuiInputEventC1Ev
	mov	w0, 6
	str	w0, [sp, 64]
	ldrb	w0, [sp, 23]
	strb	w0, [sp, 72]
	ldr	x1, [sp, 48]
	mov	x0, 14272
	add	x0, x1, x0
	add	x1, sp, 64
	bl	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	b	.L640
.L647:
	nop
.L640:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L646
	bl	__stack_chk_fail
.L646:
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1590:
	.size	_ZN7ImGuiIO13AddFocusEventEb, .-_ZN7ImGuiIO13AddFocusEventEb
	.section	.rodata
	.align	3
.LC61:
	.string	"ImVec2 ImBezierCubicClosestPoint(const ImVec2&, const ImVec2&, const ImVec2&, const ImVec2&, const ImVec2&, int)"
	.align	3
.LC62:
	.string	"num_segments > 0"
	.text
	.align	2
	.global	_Z25ImBezierCubicClosestPointRK6ImVec2S1_S1_S1_S1_i
	.type	_Z25ImBezierCubicClosestPointRK6ImVec2S1_S1_S1_S1_i, %function
_Z25ImBezierCubicClosestPointRK6ImVec2S1_S1_S1_S1_i:
.LFB1591:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	str	x3, [sp, 32]
	str	x4, [sp, 24]
	str	w5, [sp, 20]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	ldr	w0, [sp, 20]
	cmp	w0, 0
	bgt	.L649
	adrp	x0, .LC61
	add	x3, x0, :lo12:.LC61
	mov	w2, 1502
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC62
	add	x0, x0, :lo12:.LC62
	bl	__assert_fail
.L649:
	ldr	x0, [sp, 56]
	ldr	x0, [x0]
	str	x0, [sp, 80]
	str	wzr, [sp, 88]
	str	wzr, [sp, 92]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 64]
	ldr	s0, [sp, 20]
	scvtf	s0, s0
	fmov	s1, 1.0e+0
	fdiv	s0, s1, s0
	str	s0, [sp, 72]
	mov	w0, 1
	str	w0, [sp, 68]
	b	.L650
.L653:
	ldr	s0, [sp, 68]
	scvtf	s1, s0
	ldr	s0, [sp, 72]
	fmul	s0, s1, s0
	ldr	x3, [sp, 32]
	ldr	x2, [sp, 40]
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 56]
	bl	_Z17ImBezierCubicCalcRK6ImVec2S1_S1_S1_f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	add	x1, sp, 96
	add	x0, sp, 80
	ldr	x2, [sp, 24]
	bl	_Z18ImLineClosestPointRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	add	x0, sp, 104
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	add	x0, sp, 112
	bl	_ZL11ImLengthSqrRK6ImVec2
	str	s0, [sp, 76]
	ldr	s1, [sp, 76]
	ldr	s0, [sp, 64]
	fcmpe	s1, s0
	bmi	.L656
	b	.L651
.L656:
	ldr	x0, [sp, 104]
	str	x0, [sp, 88]
	ldr	s0, [sp, 76]
	str	s0, [sp, 64]
.L651:
	ldr	x0, [sp, 96]
	str	x0, [sp, 80]
	ldr	w0, [sp, 68]
	add	w0, w0, 1
	str	w0, [sp, 68]
.L650:
	ldr	w1, [sp, 68]
	ldr	w0, [sp, 20]
	cmp	w1, w0
	ble	.L653
	ldr	x0, [sp, 88]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L655
	bl	__stack_chk_fail
.L655:
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1591:
	.size	_Z25ImBezierCubicClosestPointRK6ImVec2S1_S1_S1_S1_i, .-_Z25ImBezierCubicClosestPointRK6ImVec2S1_S1_S1_S1_i
	.align	2
	.type	_ZL38ImBezierCubicClosestPointCasteljauStepRK6ImVec2RS_S2_Rffffffffffi, %function
_ZL38ImBezierCubicClosestPointCasteljauStepRK6ImVec2RS_S2_Rffffffffffi:
.LFB1592:
	.cfi_startproc
	sub	sp, sp, #224
	.cfi_def_cfa_offset 224
	stp	x29, x30, [sp, 16]
	.cfi_offset 29, -208
	.cfi_offset 30, -200
	add	x29, sp, 16
	str	x0, [sp, 104]
	str	x1, [sp, 96]
	str	x2, [sp, 88]
	str	x3, [sp, 80]
	str	s0, [sp, 76]
	str	s1, [sp, 72]
	str	s2, [sp, 68]
	str	s3, [sp, 64]
	str	s4, [sp, 60]
	str	s5, [sp, 56]
	str	s6, [sp, 52]
	str	s7, [sp, 48]
	str	w4, [sp, 44]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 216]
	mov	x1, 0
	ldr	s1, [sp, 52]
	ldr	s0, [sp, 76]
	fsub	s0, s1, s0
	str	s0, [sp, 124]
	ldr	s1, [sp, 48]
	ldr	s0, [sp, 72]
	fsub	s0, s1, s0
	str	s0, [sp, 128]
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 52]
	fsub	s1, s1, s0
	ldr	s0, [sp, 128]
	fmul	s1, s1, s0
	ldr	s2, [sp, 64]
	ldr	s0, [sp, 48]
	fsub	s2, s2, s0
	ldr	s0, [sp, 124]
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	str	s0, [sp, 132]
	ldr	s1, [sp, 60]
	ldr	s0, [sp, 52]
	fsub	s1, s1, s0
	ldr	s0, [sp, 128]
	fmul	s1, s1, s0
	ldr	s2, [sp, 56]
	ldr	s0, [sp, 48]
	fsub	s2, s2, s0
	ldr	s0, [sp, 124]
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	str	s0, [sp, 136]
	ldr	s0, [sp, 132]
	fcmpe	s0, #0.0
	bge	.L670
	b	.L674
.L670:
	ldr	s0, [sp, 132]
	b	.L660
.L674:
	ldr	s0, [sp, 132]
	fneg	s0, s0
.L660:
	str	s0, [sp, 132]
	ldr	s0, [sp, 136]
	fcmpe	s0, #0.0
	bge	.L671
	b	.L675
.L671:
	ldr	s0, [sp, 136]
	b	.L663
.L675:
	ldr	s0, [sp, 136]
	fneg	s0, s0
.L663:
	str	s0, [sp, 136]
	ldr	s1, [sp, 132]
	ldr	s0, [sp, 136]
	fadd	s1, s1, s0
	ldr	s2, [sp, 132]
	ldr	s0, [sp, 136]
	fadd	s0, s2, s0
	fmul	s1, s1, s0
	ldr	s0, [sp, 124]
	fmul	s2, s0, s0
	ldr	s0, [sp, 128]
	fmul	s0, s0, s0
	fadd	s2, s2, s0
	ldr	s0, [sp, 224]
	fmul	s0, s2, s0
	fcmpe	s1, s0
	bmi	.L672
	b	.L676
.L672:
	add	x0, sp, 192
	ldr	s1, [sp, 48]
	ldr	s0, [sp, 52]
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 192
	ldr	x2, [sp, 104]
	mov	x1, x0
	ldr	x0, [sp, 88]
	bl	_Z18ImLineClosestPointRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 200]
	str	s0, [sp, 204]
	add	x0, sp, 200
	mov	x1, x0
	ldr	x0, [sp, 104]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 208]
	str	s0, [sp, 212]
	add	x0, sp, 208
	bl	_ZL11ImLengthSqrRK6ImVec2
	str	s0, [sp, 188]
	ldr	x0, [sp, 80]
	ldr	s0, [x0]
	ldr	s1, [sp, 188]
	fcmpe	s1, s0
	bmi	.L673
	b	.L666
.L673:
	ldr	x0, [sp, 96]
	ldr	x1, [sp, 200]
	str	x1, [x0]
	ldr	x0, [sp, 80]
	ldr	s0, [sp, 188]
	str	s0, [x0]
.L666:
	ldr	x0, [sp, 88]
	ldr	x1, [sp, 192]
	str	x1, [x0]
	b	.L677
.L676:
	ldr	w0, [sp, 44]
	cmp	w0, 9
	bgt	.L677
	ldr	s1, [sp, 76]
	ldr	s0, [sp, 68]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 140]
	ldr	s1, [sp, 72]
	ldr	s0, [sp, 64]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 144]
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 60]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 148]
	ldr	s1, [sp, 64]
	ldr	s0, [sp, 56]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 152]
	ldr	s1, [sp, 60]
	ldr	s0, [sp, 52]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 156]
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 48]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 160]
	ldr	s1, [sp, 140]
	ldr	s0, [sp, 148]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 164]
	ldr	s1, [sp, 144]
	ldr	s0, [sp, 152]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 168]
	ldr	s1, [sp, 148]
	ldr	s0, [sp, 156]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 172]
	ldr	s1, [sp, 152]
	ldr	s0, [sp, 160]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 176]
	ldr	s1, [sp, 164]
	ldr	s0, [sp, 172]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 180]
	ldr	s1, [sp, 168]
	ldr	s0, [sp, 176]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 184]
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	ldr	s0, [sp, 224]
	str	s0, [sp]
	mov	w4, w0
	ldr	s7, [sp, 184]
	ldr	s6, [sp, 180]
	ldr	s5, [sp, 168]
	ldr	s4, [sp, 164]
	ldr	s3, [sp, 144]
	ldr	s2, [sp, 140]
	ldr	s1, [sp, 72]
	ldr	s0, [sp, 76]
	ldr	x3, [sp, 80]
	ldr	x2, [sp, 88]
	ldr	x1, [sp, 96]
	ldr	x0, [sp, 104]
	bl	_ZL38ImBezierCubicClosestPointCasteljauStepRK6ImVec2RS_S2_Rffffffffffi
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	ldr	s0, [sp, 224]
	str	s0, [sp]
	mov	w4, w0
	ldr	s7, [sp, 48]
	ldr	s6, [sp, 52]
	ldr	s5, [sp, 160]
	ldr	s4, [sp, 156]
	ldr	s3, [sp, 176]
	ldr	s2, [sp, 172]
	ldr	s1, [sp, 184]
	ldr	s0, [sp, 180]
	ldr	x3, [sp, 80]
	ldr	x2, [sp, 88]
	ldr	x1, [sp, 96]
	ldr	x0, [sp, 104]
	bl	_ZL38ImBezierCubicClosestPointCasteljauStepRK6ImVec2RS_S2_Rffffffffffi
.L677:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 216]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L669
	bl	__stack_chk_fail
.L669:
	ldp	x29, x30, [sp, 16]
	add	sp, sp, 224
	.cfi_restore 29
	.cfi_restore 30
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1592:
	.size	_ZL38ImBezierCubicClosestPointCasteljauStepRK6ImVec2RS_S2_Rffffffffffi, .-_ZL38ImBezierCubicClosestPointCasteljauStepRK6ImVec2RS_S2_Rffffffffffi
	.section	.rodata
	.align	3
.LC63:
	.string	"ImVec2 ImBezierCubicClosestPointCasteljau(const ImVec2&, const ImVec2&, const ImVec2&, const ImVec2&, const ImVec2&, float)"
	.align	3
.LC64:
	.string	"tess_tol > 0.0f"
	.text
	.align	2
	.global	_Z34ImBezierCubicClosestPointCasteljauRK6ImVec2S1_S1_S1_S1_f
	.type	_Z34ImBezierCubicClosestPointCasteljauRK6ImVec2S1_S1_S1_S1_f, %function
_Z34ImBezierCubicClosestPointCasteljauRK6ImVec2S1_S1_S1_S1_f:
.LFB1593:
	.cfi_startproc
	sub	sp, sp, #128
	.cfi_def_cfa_offset 128
	stp	x29, x30, [sp, 16]
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	add	x29, sp, 16
	str	d8, [sp, 32]
	.cfi_offset 72, -96
	str	x0, [sp, 88]
	str	x1, [sp, 80]
	str	x2, [sp, 72]
	str	x3, [sp, 64]
	str	x4, [sp, 56]
	str	s0, [sp, 52]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	ldr	s0, [sp, 52]
	fcmpe	s0, #0.0
	bgt	.L679
	adrp	x0, .LC63
	add	x3, x0, :lo12:.LC63
	mov	w2, 1560
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC64
	add	x0, x0, :lo12:.LC64
	bl	__assert_fail
.L679:
	ldr	x0, [sp, 88]
	ldr	x0, [x0]
	str	x0, [sp, 104]
	str	wzr, [sp, 112]
	str	wzr, [sp, 116]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 100]
	ldr	x0, [sp, 88]
	ldr	s8, [x0]
	ldr	x0, [sp, 88]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 80]
	ldr	s2, [x0]
	ldr	x0, [sp, 80]
	ldr	s3, [x0, 4]
	ldr	x0, [sp, 72]
	ldr	s4, [x0]
	ldr	x0, [sp, 72]
	ldr	s5, [x0, 4]
	ldr	x0, [sp, 64]
	ldr	s6, [x0]
	ldr	x0, [sp, 64]
	ldr	s7, [x0, 4]
	add	x2, sp, 100
	add	x1, sp, 104
	add	x0, sp, 112
	ldr	s0, [sp, 52]
	str	s0, [sp]
	mov	w4, 0
	fmov	s0, s8
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZL38ImBezierCubicClosestPointCasteljauStepRK6ImVec2RS_S2_Rffffffffffi
	ldr	x0, [sp, 112]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L681
	bl	__stack_chk_fail
.L681:
	ldr	d8, [sp, 32]
	ldp	x29, x30, [sp, 16]
	add	sp, sp, 128
	.cfi_restore 29
	.cfi_restore 30
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1593:
	.size	_Z34ImBezierCubicClosestPointCasteljauRK6ImVec2S1_S1_S1_S1_f, .-_Z34ImBezierCubicClosestPointCasteljauRK6ImVec2S1_S1_S1_S1_f
	.align	2
	.global	_Z18ImLineClosestPointRK6ImVec2S1_S1_
	.type	_Z18ImLineClosestPointRK6ImVec2S1_S1_, %function
_Z18ImLineClosestPointRK6ImVec2S1_S1_:
.LFB1594:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 32]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 64]
	fmul	s1, s1, s0
	ldr	s2, [sp, 60]
	ldr	s0, [sp, 68]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	str	s0, [sp, 48]
	ldr	s0, [sp, 48]
	fcmpe	s0, #0.0
	bmi	.L690
	b	.L692
.L690:
	ldr	x0, [sp, 40]
	ldr	x0, [x0]
	b	.L688
.L692:
	ldr	s1, [sp, 64]
	ldr	s0, [sp, 64]
	fmul	s1, s1, s0
	ldr	s2, [sp, 68]
	ldr	s0, [sp, 68]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	str	s0, [sp, 52]
	ldr	s1, [sp, 48]
	ldr	s0, [sp, 52]
	fcmpe	s1, s0
	bgt	.L691
	b	.L693
.L691:
	ldr	x0, [sp, 32]
	ldr	x0, [x0]
	b	.L688
.L693:
	add	x0, sp, 64
	ldr	s0, [sp, 48]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	add	x0, sp, 72
	ldr	s0, [sp, 52]
	bl	_ZdvRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 80
	mov	x1, x0
	ldr	x0, [sp, 40]
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
.L688:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L689
	bl	__stack_chk_fail
.L689:
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1594:
	.size	_Z18ImLineClosestPointRK6ImVec2S1_S1_, .-_Z18ImLineClosestPointRK6ImVec2S1_S1_
	.align	2
	.global	_Z23ImTriangleContainsPointRK6ImVec2S1_S1_S1_
	.type	_Z23ImTriangleContainsPointRK6ImVec2S1_S1_S1_, %function
_Z23ImTriangleContainsPointRK6ImVec2S1_S1_S1_:
.LFB1595:
	.cfi_startproc
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	x2, [sp, 8]
	str	x3, [sp]
	ldr	x0, [sp]
	ldr	s1, [x0]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fsub	s1, s1, s0
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fsub	s0, s2, s0
	fmul	s1, s1, s0
	ldr	x0, [sp]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fsub	s2, s2, s0
	ldr	x0, [sp, 24]
	ldr	s3, [x0]
	ldr	x0, [sp, 16]
	ldr	s0, [x0]
	fsub	s0, s3, s0
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	fcmpe	s0, #0.0
	cset	w0, mi
	strb	w0, [sp, 45]
	ldr	x0, [sp]
	ldr	s1, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [x0]
	fsub	s1, s1, s0
	ldr	x0, [sp, 16]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 4]
	fsub	s0, s2, s0
	fmul	s1, s1, s0
	ldr	x0, [sp]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 4]
	fsub	s2, s2, s0
	ldr	x0, [sp, 16]
	ldr	s3, [x0]
	ldr	x0, [sp, 8]
	ldr	s0, [x0]
	fsub	s0, s3, s0
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	fcmpe	s0, #0.0
	cset	w0, mi
	strb	w0, [sp, 46]
	ldr	x0, [sp]
	ldr	s1, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	fsub	s1, s1, s0
	ldr	x0, [sp, 8]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 4]
	fsub	s0, s2, s0
	fmul	s1, s1, s0
	ldr	x0, [sp]
	ldr	s2, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 4]
	fsub	s2, s2, s0
	ldr	x0, [sp, 8]
	ldr	s3, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	fsub	s0, s3, s0
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	fcmpe	s0, #0.0
	cset	w0, mi
	strb	w0, [sp, 47]
	ldrb	w1, [sp, 45]
	ldrb	w0, [sp, 46]
	cmp	w1, w0
	bne	.L695
	ldrb	w1, [sp, 46]
	ldrb	w0, [sp, 47]
	cmp	w1, w0
	bne	.L695
	mov	w0, 1
	b	.L696
.L695:
	mov	w0, 0
.L696:
	add	sp, sp, 48
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1595:
	.size	_Z23ImTriangleContainsPointRK6ImVec2S1_S1_S1_, .-_Z23ImTriangleContainsPointRK6ImVec2S1_S1_S1_
	.align	2
	.global	_Z27ImTriangleBarycentricCoordsRK6ImVec2S1_S1_S1_RfS2_S2_
	.type	_Z27ImTriangleBarycentricCoordsRK6ImVec2S1_S1_S1_RfS2_S2_, %function
_Z27ImTriangleBarycentricCoordsRK6ImVec2S1_S1_S1_RfS2_S2_:
.LFB1596:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	str	x2, [sp, 56]
	str	x3, [sp, 48]
	str	x4, [sp, 40]
	str	x5, [sp, 32]
	str	x6, [sp, 24]
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 64]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 56]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 48]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	ldr	s1, [sp, 88]
	ldr	s0, [sp, 100]
	fmul	s1, s1, s0
	ldr	s2, [sp, 96]
	ldr	s0, [sp, 92]
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	str	s0, [sp, 84]
	ldr	s1, [sp, 104]
	ldr	s0, [sp, 100]
	fmul	s1, s1, s0
	ldr	s2, [sp, 96]
	ldr	s0, [sp, 108]
	fmul	s0, s2, s0
	fsub	s1, s1, s0
	ldr	s0, [sp, 84]
	fdiv	s0, s1, s0
	ldr	x0, [sp, 32]
	str	s0, [x0]
	ldr	s1, [sp, 88]
	ldr	s0, [sp, 108]
	fmul	s1, s1, s0
	ldr	s2, [sp, 104]
	ldr	s0, [sp, 92]
	fmul	s0, s2, s0
	fsub	s1, s1, s0
	ldr	s0, [sp, 84]
	fdiv	s0, s1, s0
	ldr	x0, [sp, 24]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	fmov	s1, 1.0e+0
	fsub	s1, s1, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	fsub	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0]
	nop
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1596:
	.size	_Z27ImTriangleBarycentricCoordsRK6ImVec2S1_S1_S1_RfS2_S2_, .-_Z27ImTriangleBarycentricCoordsRK6ImVec2S1_S1_S1_RfS2_S2_
	.align	2
	.global	_Z22ImTriangleClosestPointRK6ImVec2S1_S1_S1_
	.type	_Z22ImTriangleClosestPointRK6ImVec2S1_S1_S1_, %function
_Z22ImTriangleClosestPointRK6ImVec2S1_S1_S1_:
.LFB1597:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	x3, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	ldr	x2, [sp, 16]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	_Z18ImLineClosestPointRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	ldr	x2, [sp, 16]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 32]
	bl	_Z18ImLineClosestPointRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	ldr	x2, [sp, 16]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_Z18ImLineClosestPointRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	add	x0, sp, 72
	mov	x1, x0
	ldr	x0, [sp, 16]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	add	x0, sp, 96
	bl	_ZL11ImLengthSqrRK6ImVec2
	str	s0, [sp, 56]
	add	x0, sp, 80
	mov	x1, x0
	ldr	x0, [sp, 16]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	add	x0, sp, 96
	bl	_ZL11ImLengthSqrRK6ImVec2
	str	s0, [sp, 60]
	add	x0, sp, 88
	mov	x1, x0
	ldr	x0, [sp, 16]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	add	x0, sp, 96
	bl	_ZL11ImLengthSqrRK6ImVec2
	str	s0, [sp, 64]
	ldr	s1, [sp, 64]
	ldr	s0, [sp, 60]
	bl	_Z5ImMinIfET_S0_S0_
	fmov	s1, s0
	ldr	s0, [sp, 56]
	bl	_Z5ImMinIfET_S0_S0_
	str	s0, [sp, 68]
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 56]
	fcmp	s1, s0
	bne	.L700
	ldr	x0, [sp, 72]
	b	.L703
.L700:
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 60]
	fcmp	s1, s0
	bne	.L702
	ldr	x0, [sp, 80]
	b	.L703
.L702:
	ldr	x0, [sp, 88]
.L703:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L704
	bl	__stack_chk_fail
.L704:
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1597:
	.size	_Z22ImTriangleClosestPointRK6ImVec2S1_S1_S1_, .-_Z22ImTriangleClosestPointRK6ImVec2S1_S1_S1_
	.align	2
	.global	_Z9ImStricmpPKcS0_
	.type	_Z9ImStricmpPKcS0_, %function
_Z9ImStricmpPKcS0_:
.LFB1598:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	b	.L706
.L709:
	ldr	x0, [sp, 40]
	add	x0, x0, 1
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	add	x0, x0, 1
	str	x0, [sp, 32]
.L706:
	ldr	x0, [sp, 32]
	ldrb	w0, [x0]
	bl	_ZL9ImToUpperc
	and	w0, w0, 255
	mov	w19, w0
	ldr	x0, [sp, 40]
	ldrb	w0, [x0]
	bl	_ZL9ImToUpperc
	and	w0, w0, 255
	sub	w0, w19, w0
	str	w0, [sp, 60]
	ldr	w0, [sp, 60]
	cmp	w0, 0
	bne	.L707
	ldr	x0, [sp, 40]
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L707
	mov	w0, 1
	b	.L708
.L707:
	mov	w0, 0
.L708:
	cmp	w0, 0
	bne	.L709
	ldr	w0, [sp, 60]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1598:
	.size	_Z9ImStricmpPKcS0_, .-_Z9ImStricmpPKcS0_
	.align	2
	.global	_Z10ImStrnicmpPKcS0_m
	.type	_Z10ImStrnicmpPKcS0_m, %function
_Z10ImStrnicmpPKcS0_m:
.LFB1599:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	str	wzr, [sp, 76]
	b	.L712
.L715:
	ldr	x0, [sp, 56]
	add	x0, x0, 1
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	add	x0, x0, 1
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	sub	x0, x0, #1
	str	x0, [sp, 40]
.L712:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L713
	ldr	x0, [sp, 48]
	ldrb	w0, [x0]
	bl	_ZL9ImToUpperc
	and	w0, w0, 255
	mov	w19, w0
	ldr	x0, [sp, 56]
	ldrb	w0, [x0]
	bl	_ZL9ImToUpperc
	and	w0, w0, 255
	sub	w0, w19, w0
	str	w0, [sp, 76]
	ldr	w0, [sp, 76]
	cmp	w0, 0
	bne	.L713
	ldr	x0, [sp, 56]
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L713
	mov	w0, 1
	b	.L714
.L713:
	mov	w0, 0
.L714:
	cmp	w0, 0
	bne	.L715
	ldr	w0, [sp, 76]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1599:
	.size	_Z10ImStrnicmpPKcS0_m, .-_Z10ImStrnicmpPKcS0_m
	.align	2
	.global	_Z9ImStrncpyPcPKcm
	.type	_Z9ImStrncpyPcPKcm, %function
_Z9ImStrncpyPcPKcm:
.LFB1600:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L721
	ldr	x0, [sp, 24]
	cmp	x0, 1
	bls	.L720
	ldr	x0, [sp, 24]
	sub	x0, x0, #1
	mov	x2, x0
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	strncpy
.L720:
	ldr	x0, [sp, 24]
	sub	x0, x0, #1
	ldr	x1, [sp, 40]
	add	x0, x1, x0
	strb	wzr, [x0]
	b	.L717
.L721:
	nop
.L717:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1600:
	.size	_Z9ImStrncpyPcPKcm, .-_Z9ImStrncpyPcPKcm
	.align	2
	.global	_Z8ImStrdupPKc
	.type	_Z8ImStrdupPKc, %function
_Z8ImStrdupPKc:
.LFB1601:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	strlen
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 1
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	add	x0, x0, 1
	mov	x2, x0
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 40]
	bl	memcpy
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1601:
	.size	_Z8ImStrdupPKc, .-_Z8ImStrdupPKc
	.align	2
	.global	_Z11ImStrdupcpyPcPmPKc
	.type	_Z11ImStrdupcpyPcPmPKc, %function
_Z11ImStrdupcpyPcPmPKc:
.LFB1602:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L725
	ldr	x0, [sp, 32]
	ldr	x0, [x0]
	b	.L726
.L725:
	ldr	x0, [sp, 40]
	bl	strlen
	add	x0, x0, 1
.L726:
	str	x0, [sp, 48]
	ldr	x0, [sp, 24]
	bl	strlen
	add	x0, x0, 1
	str	x0, [sp, 56]
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 56]
	cmp	x1, x0
	bcs	.L727
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L727
	ldr	x0, [sp, 32]
	ldr	x1, [sp, 56]
	str	x1, [x0]
.L727:
	ldr	x2, [sp, 56]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 40]
	bl	memcpy
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1602:
	.size	_Z11ImStrdupcpyPcPmPKc, .-_Z11ImStrdupcpyPcPmPKc
	.align	2
	.global	_Z13ImStrchrRangePKcS0_c
	.type	_Z13ImStrchrRangePKcS0_c, %function
_Z13ImStrchrRangePKcS0_c:
.LFB1603:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	strb	w2, [sp, 31]
	ldrb	w3, [sp, 31]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	sub	x0, x1, x0
	mov	x2, x0
	mov	w1, w3
	ldr	x0, [sp, 40]
	bl	memchr
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1603:
	.size	_Z13ImStrchrRangePKcS0_c, .-_Z13ImStrchrRangePKcS0_c
	.align	2
	.global	_Z9ImStrlenWPKt
	.type	_Z9ImStrlenWPKt, %function
_Z9ImStrlenWPKt:
.LFB1604:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	wzr, [sp, 28]
	b	.L732
.L733:
	ldr	w0, [sp, 28]
	add	w0, w0, 1
	str	w0, [sp, 28]
.L732:
	ldr	x0, [sp, 8]
	add	x1, x0, 2
	str	x1, [sp, 8]
	ldrh	w0, [x0]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L733
	ldr	w0, [sp, 28]
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1604:
	.size	_Z9ImStrlenWPKt, .-_Z9ImStrlenWPKt
	.align	2
	.global	_Z13ImStreolRangePKcS0_
	.type	_Z13ImStreolRangePKcS0_, %function
_Z13ImStreolRangePKcS0_:
.LFB1605:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	sub	x0, x1, x0
	mov	x2, x0
	mov	w1, 10
	ldr	x0, [sp, 24]
	bl	memchr
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L736
	ldr	x0, [sp, 40]
	b	.L738
.L736:
	ldr	x0, [sp, 16]
.L738:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1605:
	.size	_Z13ImStreolRangePKcS0_, .-_Z13ImStreolRangePKcS0_
	.align	2
	.global	_Z9ImStrbolWPKtS0_
	.type	_Z9ImStrbolWPKtS0_, %function
_Z9ImStrbolWPKtS0_:
.LFB1606:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	b	.L740
.L742:
	ldr	x0, [sp, 8]
	sub	x0, x0, #2
	str	x0, [sp, 8]
.L740:
	ldr	x1, [sp, 8]
	ldr	x0, [sp]
	cmp	x1, x0
	bls	.L741
	ldr	x0, [sp, 8]
	sub	x0, x0, #2
	ldrh	w0, [x0]
	cmp	w0, 10
	bne	.L742
.L741:
	ldr	x0, [sp, 8]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1606:
	.size	_Z9ImStrbolWPKtS0_, .-_Z9ImStrbolWPKtS0_
	.align	2
	.global	_Z9ImStristrPKcS0_S0_S0_
	.type	_Z9ImStristrPKcS0_S0_S0_, %function
_Z9ImStristrPKcS0_S0_S0_:
.LFB1607:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	str	x3, [sp, 32]
	ldr	x0, [sp, 32]
	cmp	x0, 0
	bne	.L745
	ldr	x0, [sp, 40]
	bl	strlen
	mov	x1, x0
	ldr	x0, [sp, 40]
	add	x0, x0, x1
	str	x0, [sp, 32]
.L745:
	ldr	x0, [sp, 40]
	ldrb	w0, [x0]
	bl	_ZL9ImToUpperc
	strb	w0, [sp, 79]
	b	.L746
.L754:
	ldr	x0, [sp, 56]
	ldrb	w0, [x0]
	bl	_ZL9ImToUpperc
	and	w0, w0, 255
	ldrb	w1, [sp, 79]
	cmp	w1, w0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L747
	ldr	x0, [sp, 40]
	add	x0, x0, 1
	str	x0, [sp, 80]
	ldr	x0, [sp, 56]
	add	x0, x0, 1
	str	x0, [sp, 88]
	b	.L748
.L751:
	ldr	x0, [sp, 88]
	ldrb	w0, [x0]
	bl	_ZL9ImToUpperc
	and	w19, w0, 255
	ldr	x0, [sp, 80]
	ldrb	w0, [x0]
	bl	_ZL9ImToUpperc
	and	w0, w0, 255
	cmp	w19, w0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L756
	ldr	x0, [sp, 88]
	add	x0, x0, 1
	str	x0, [sp, 88]
	ldr	x0, [sp, 80]
	add	x0, x0, 1
	str	x0, [sp, 80]
.L748:
	ldr	x1, [sp, 80]
	ldr	x0, [sp, 32]
	cmp	x1, x0
	bcc	.L751
	b	.L750
.L756:
	nop
.L750:
	ldr	x1, [sp, 80]
	ldr	x0, [sp, 32]
	cmp	x1, x0
	bne	.L747
	ldr	x0, [sp, 56]
	b	.L752
.L747:
	ldr	x0, [sp, 56]
	add	x0, x0, 1
	str	x0, [sp, 56]
.L746:
	ldr	x0, [sp, 48]
	cmp	x0, 0
	bne	.L753
	ldr	x0, [sp, 56]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L754
.L753:
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L755
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 48]
	cmp	x1, x0
	bcc	.L754
.L755:
	mov	x0, 0
.L752:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1607:
	.size	_Z9ImStristrPKcS0_S0_S0_, .-_Z9ImStristrPKcS0_S0_S0_
	.align	2
	.global	_Z15ImStrTrimBlanksPc
	.type	_Z15ImStrTrimBlanksPc, %function
_Z15ImStrTrimBlanksPc:
.LFB1608:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	str	x0, [sp, 32]
	b	.L758
.L759:
	ldr	x0, [sp, 32]
	add	x0, x0, 1
	str	x0, [sp, 32]
.L758:
	ldr	x0, [sp, 32]
	ldrb	w0, [x0]
	cmp	w0, 32
	beq	.L759
	ldr	x0, [sp, 32]
	ldrb	w0, [x0]
	cmp	w0, 9
	beq	.L759
	ldr	x0, [sp, 32]
	str	x0, [sp, 40]
	b	.L760
.L761:
	ldr	x0, [sp, 32]
	add	x0, x0, 1
	str	x0, [sp, 32]
.L760:
	ldr	x0, [sp, 32]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L761
	b	.L762
.L764:
	ldr	x0, [sp, 32]
	sub	x0, x0, #1
	str	x0, [sp, 32]
.L762:
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	cmp	x1, x0
	bls	.L763
	ldr	x0, [sp, 32]
	sub	x0, x0, #1
	ldrb	w0, [x0]
	cmp	w0, 32
	beq	.L764
	ldr	x0, [sp, 32]
	sub	x0, x0, #1
	ldrb	w0, [x0]
	cmp	w0, 9
	beq	.L764
.L763:
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 24]
	cmp	x1, x0
	beq	.L765
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	sub	x0, x1, x0
	mov	x2, x0
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 24]
	bl	memmove
.L765:
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	sub	x0, x1, x0
	mov	x1, x0
	ldr	x0, [sp, 24]
	add	x0, x0, x1
	strb	wzr, [x0]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1608:
	.size	_Z15ImStrTrimBlanksPc, .-_Z15ImStrTrimBlanksPc
	.align	2
	.global	_Z14ImStrSkipBlankPKc
	.type	_Z14ImStrSkipBlankPKc, %function
_Z14ImStrSkipBlankPKc:
.LFB1609:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	b	.L767
.L768:
	ldr	x0, [sp, 8]
	add	x0, x0, 1
	str	x0, [sp, 8]
.L767:
	ldr	x0, [sp, 8]
	ldrb	w0, [x0]
	cmp	w0, 32
	beq	.L768
	ldr	x0, [sp, 8]
	ldrb	w0, [x0]
	cmp	w0, 9
	beq	.L768
	ldr	x0, [sp, 8]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1609:
	.size	_Z14ImStrSkipBlankPKc, .-_Z14ImStrSkipBlankPKc
	.align	2
	.global	_Z14ImFormatStringPcmPKcz
	.type	_Z14ImFormatStringPcmPKcz, %function
_Z14ImFormatStringPcmPKcz:
.LFB1610:
	.cfi_startproc
	stp	x29, x30, [sp, -304]!
	.cfi_def_cfa_offset 304
	.cfi_offset 29, -304
	.cfi_offset 30, -296
	mov	x29, sp
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	str	x2, [sp, 56]
	str	x3, [sp, 264]
	str	x4, [sp, 272]
	str	x5, [sp, 280]
	str	x6, [sp, 288]
	str	x7, [sp, 296]
	str	q0, [sp, 128]
	str	q1, [sp, 144]
	str	q2, [sp, 160]
	str	q3, [sp, 176]
	str	q4, [sp, 192]
	str	q5, [sp, 208]
	str	q6, [sp, 224]
	str	q7, [sp, 240]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	add	x0, sp, 304
	str	x0, [sp, 88]
	add	x0, sp, 304
	str	x0, [sp, 96]
	add	x0, sp, 256
	str	x0, [sp, 104]
	mov	w0, -40
	str	w0, [sp, 112]
	mov	w0, -128
	str	w0, [sp, 116]
	add	x0, sp, 16
	add	x1, sp, 88
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 16
	mov	x3, x0
	ldr	x2, [sp, 56]
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 72]
	bl	vsnprintf
	str	w0, [sp, 84]
	ldr	x0, [sp, 72]
	cmp	x0, 0
	bne	.L771
	ldr	w0, [sp, 84]
	b	.L775
.L771:
	ldr	w0, [sp, 84]
	cmn	w0, #1
	beq	.L773
	ldr	x0, [sp, 64]
	mov	w1, w0
	ldr	w0, [sp, 84]
	cmp	w0, w1
	blt	.L774
.L773:
	ldr	x0, [sp, 64]
	sub	w0, w0, #1
	str	w0, [sp, 84]
.L774:
	ldrsw	x0, [sp, 84]
	ldr	x1, [sp, 72]
	add	x0, x1, x0
	strb	wzr, [x0]
	ldr	w0, [sp, 84]
.L775:
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 120]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L776
	bl	__stack_chk_fail
.L776:
	mov	w0, w1
	ldp	x29, x30, [sp], 304
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1610:
	.size	_Z14ImFormatStringPcmPKcz, .-_Z14ImFormatStringPcmPKcz
	.align	2
	.global	_Z15ImFormatStringVPcmPKcSt9__va_list
	.type	_Z15ImFormatStringVPcmPKcSt9__va_list, %function
_Z15ImFormatStringVPcmPKcSt9__va_list:
.LFB1611:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -96
	str	x0, [sp, 88]
	str	x1, [sp, 80]
	str	x2, [sp, 72]
	mov	x19, x3
	add	x0, sp, 32
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x3, x0
	ldr	x2, [sp, 72]
	ldr	x1, [sp, 80]
	ldr	x0, [sp, 88]
	bl	vsnprintf
	str	w0, [sp, 108]
	ldr	x0, [sp, 88]
	cmp	x0, 0
	bne	.L778
	ldr	w0, [sp, 108]
	b	.L779
.L778:
	ldr	w0, [sp, 108]
	cmn	w0, #1
	beq	.L780
	ldr	x0, [sp, 80]
	mov	w1, w0
	ldr	w0, [sp, 108]
	cmp	w0, w1
	blt	.L781
.L780:
	ldr	x0, [sp, 80]
	sub	w0, w0, #1
	str	w0, [sp, 108]
.L781:
	ldrsw	x0, [sp, 108]
	ldr	x1, [sp, 88]
	add	x0, x1, x0
	strb	wzr, [x0]
	ldr	w0, [sp, 108]
.L779:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1611:
	.size	_Z15ImFormatStringVPcmPKcSt9__va_list, .-_Z15ImFormatStringVPcmPKcSt9__va_list
	.align	2
	.global	_Z26ImFormatStringToTempBufferPPKcS1_S0_z
	.type	_Z26ImFormatStringToTempBufferPPKcS1_S0_z, %function
_Z26ImFormatStringToTempBufferPPKcS1_S0_z:
.LFB1612:
	.cfi_startproc
	stp	x29, x30, [sp, -320]!
	.cfi_def_cfa_offset 320
	.cfi_offset 29, -320
	.cfi_offset 30, -312
	mov	x29, sp
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	str	x2, [sp, 56]
	str	x3, [sp, 280]
	str	x4, [sp, 288]
	str	x5, [sp, 296]
	str	x6, [sp, 304]
	str	x7, [sp, 312]
	str	q0, [sp, 144]
	str	q1, [sp, 160]
	str	q2, [sp, 176]
	str	q3, [sp, 192]
	str	q4, [sp, 208]
	str	q5, [sp, 224]
	str	q6, [sp, 240]
	str	q7, [sp, 256]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	add	x0, sp, 320
	str	x0, [sp, 104]
	add	x0, sp, 320
	str	x0, [sp, 112]
	add	x0, sp, 272
	str	x0, [sp, 120]
	mov	w0, -40
	str	w0, [sp, 128]
	mov	w0, -128
	str	w0, [sp, 132]
	ldr	x0, [sp, 96]
	ldr	x4, [x0, 23976]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 7584]
	sxtw	x5, w0
	add	x0, sp, 16
	add	x1, sp, 104
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 16
	mov	x3, x0
	ldr	x2, [sp, 56]
	mov	x1, x5
	mov	x0, x4
	bl	_Z15ImFormatStringVPcmPKcSt9__va_list
	str	w0, [sp, 92]
	ldr	x0, [sp, 96]
	ldr	x1, [x0, 23976]
	ldr	x0, [sp, 72]
	str	x1, [x0]
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L785
	ldr	x0, [sp, 96]
	ldr	x1, [x0, 23976]
	ldrsw	x0, [sp, 92]
	add	x1, x1, x0
	ldr	x0, [sp, 64]
	str	x1, [x0]
.L785:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L784
	bl	__stack_chk_fail
.L784:
	ldp	x29, x30, [sp], 320
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1612:
	.size	_Z26ImFormatStringToTempBufferPPKcS1_S0_z, .-_Z26ImFormatStringToTempBufferPPKcS1_S0_z
	.align	2
	.global	_Z27ImFormatStringToTempBufferVPPKcS1_S0_St9__va_list
	.type	_Z27ImFormatStringToTempBufferVPPKcS1_S0_St9__va_list, %function
_Z27ImFormatStringToTempBufferVPPKcS1_S0_St9__va_list:
.LFB1613:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -96
	str	x0, [sp, 88]
	str	x1, [sp, 80]
	str	x2, [sp, 72]
	mov	x19, x3
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	ldr	x4, [x0, 23976]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 7584]
	sxtw	x5, w0
	add	x0, sp, 32
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x3, x0
	ldr	x2, [sp, 72]
	mov	x1, x5
	mov	x0, x4
	bl	_Z15ImFormatStringVPcmPKcSt9__va_list
	str	w0, [sp, 100]
	ldr	x0, [sp, 104]
	ldr	x1, [x0, 23976]
	ldr	x0, [sp, 88]
	str	x1, [x0]
	ldr	x0, [sp, 80]
	cmp	x0, 0
	beq	.L788
	ldr	x0, [sp, 104]
	ldr	x1, [x0, 23976]
	ldrsw	x0, [sp, 100]
	add	x1, x1, x0
	ldr	x0, [sp, 80]
	str	x1, [x0]
.L788:
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1613:
	.size	_Z27ImFormatStringToTempBufferVPPKcS1_S0_St9__va_list, .-_Z27ImFormatStringToTempBufferVPPKcS1_S0_St9__va_list
	.section	.rodata
	.align	3
	.type	_ZL17GCrc32LookupTable, %object
	.size	_ZL17GCrc32LookupTable, 1024
_ZL17GCrc32LookupTable:
	.word	0
	.word	1996959894
	.word	-301047508
	.word	-1727442502
	.word	124634137
	.word	1886057615
	.word	-379345611
	.word	-1637575261
	.word	249268274
	.word	2044508324
	.word	-522852066
	.word	-1747789432
	.word	162941995
	.word	2125561021
	.word	-407360249
	.word	-1866523247
	.word	498536548
	.word	1789927666
	.word	-205950648
	.word	-2067906082
	.word	450548861
	.word	1843258603
	.word	-187386543
	.word	-2083289657
	.word	325883990
	.word	1684777152
	.word	-43845254
	.word	-1973040660
	.word	335633487
	.word	1661365465
	.word	-99664541
	.word	-1928851979
	.word	997073096
	.word	1281953886
	.word	-715111964
	.word	-1570279054
	.word	1006888145
	.word	1258607687
	.word	-770865667
	.word	-1526024853
	.word	901097722
	.word	1119000684
	.word	-608450090
	.word	-1396901568
	.word	853044451
	.word	1172266101
	.word	-589951537
	.word	-1412350631
	.word	651767980
	.word	1373503546
	.word	-925412992
	.word	-1076862698
	.word	565507253
	.word	1454621731
	.word	-809855591
	.word	-1195530993
	.word	671266974
	.word	1594198024
	.word	-972236366
	.word	-1324619484
	.word	795835527
	.word	1483230225
	.word	-1050600021
	.word	-1234817731
	.word	1994146192
	.word	31158534
	.word	-1731059524
	.word	-271249366
	.word	1907459465
	.word	112637215
	.word	-1614814043
	.word	-390540237
	.word	2013776290
	.word	251722036
	.word	-1777751922
	.word	-519137256
	.word	2137656763
	.word	141376813
	.word	-1855689577
	.word	-429695999
	.word	1802195444
	.word	476864866
	.word	-2056965928
	.word	-228458418
	.word	1812370925
	.word	453092731
	.word	-2113342271
	.word	-183516073
	.word	1706088902
	.word	314042704
	.word	-1950435094
	.word	-54949764
	.word	1658658271
	.word	366619977
	.word	-1932296973
	.word	-69972891
	.word	1303535960
	.word	984961486
	.word	-1547960204
	.word	-725929758
	.word	1256170817
	.word	1037604311
	.word	-1529756563
	.word	-740887301
	.word	1131014506
	.word	879679996
	.word	-1385723834
	.word	-631195440
	.word	1141124467
	.word	855842277
	.word	-1442165665
	.word	-586318647
	.word	1342533948
	.word	654459306
	.word	-1106571248
	.word	-921952122
	.word	1466479909
	.word	544179635
	.word	-1184443383
	.word	-832445281
	.word	1591671054
	.word	702138776
	.word	-1328506846
	.word	-942167884
	.word	1504918807
	.word	783551873
	.word	-1212326853
	.word	-1061524307
	.word	-306674912
	.word	-1698712650
	.word	62317068
	.word	1957810842
	.word	-355121351
	.word	-1647151185
	.word	81470997
	.word	1943803523
	.word	-480048366
	.word	-1805370492
	.word	225274430
	.word	2053790376
	.word	-468791541
	.word	-1828061283
	.word	167816743
	.word	2097651377
	.word	-267414716
	.word	-2029476910
	.word	503444072
	.word	1762050814
	.word	-144550051
	.word	-2140837941
	.word	426522225
	.word	1852507879
	.word	-19653770
	.word	-1982649376
	.word	282753626
	.word	1742555852
	.word	-105259153
	.word	-1900089351
	.word	397917763
	.word	1622183637
	.word	-690576408
	.word	-1580100738
	.word	953729732
	.word	1340076626
	.word	-776247311
	.word	-1497606297
	.word	1068828381
	.word	1219638859
	.word	-670225446
	.word	-1358292148
	.word	906185462
	.word	1090812512
	.word	-547295293
	.word	-1469587627
	.word	829329135
	.word	1181335161
	.word	-882789492
	.word	-1134132454
	.word	628085408
	.word	1382605366
	.word	-871598187
	.word	-1156888829
	.word	570562233
	.word	1426400815
	.word	-977650754
	.word	-1296233688
	.word	733239954
	.word	1555261956
	.word	-1026031705
	.word	-1244606671
	.word	752459403
	.word	1541320221
	.word	-1687895376
	.word	-328994266
	.word	1969922972
	.word	40735498
	.word	-1677130071
	.word	-351390145
	.word	1913087877
	.word	83908371
	.word	-1782625662
	.word	-491226604
	.word	2075208622
	.word	213261112
	.word	-1831694693
	.word	-438977011
	.word	2094854071
	.word	198958881
	.word	-2032938284
	.word	-237706686
	.word	1759359992
	.word	534414190
	.word	-2118248755
	.word	-155638181
	.word	1873836001
	.word	414664567
	.word	-2012718362
	.word	-15766928
	.word	1711684554
	.word	285281116
	.word	-1889165569
	.word	-127750551
	.word	1634467795
	.word	376229701
	.word	-1609899400
	.word	-686959890
	.word	1308918612
	.word	956543938
	.word	-1486412191
	.word	-799009033
	.word	1231636301
	.word	1047427035
	.word	-1362007478
	.word	-640263460
	.word	1088359270
	.word	936918000
	.word	-1447252397
	.word	-558129467
	.word	1202900863
	.word	817233897
	.word	-1111625188
	.word	-893730166
	.word	1404277552
	.word	615818150
	.word	-1160759803
	.word	-841546093
	.word	1423857449
	.word	601450431
	.word	-1285129682
	.word	-1000256840
	.word	1567103746
	.word	711928724
	.word	-1274298825
	.word	-1022587231
	.word	1510334235
	.word	755167117
	.text
	.align	2
	.global	_Z10ImHashDataPKvmj
	.type	_Z10ImHashDataPKvmj, %function
_Z10ImHashDataPKvmj:
.LFB1614:
	.cfi_startproc
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	w2, [sp, 12]
	ldr	w0, [sp, 12]
	mvn	w0, w0
	str	w0, [sp, 44]
	ldr	x0, [sp, 24]
	str	x0, [sp, 48]
	adrp	x0, _ZL17GCrc32LookupTable
	add	x0, x0, :lo12:_ZL17GCrc32LookupTable
	str	x0, [sp, 56]
	b	.L790
.L791:
	ldr	w0, [sp, 44]
	lsr	w1, w0, 8
	ldr	x2, [sp, 56]
	ldr	w0, [sp, 44]
	and	w3, w0, 255
	ldr	x0, [sp, 48]
	add	x4, x0, 1
	str	x4, [sp, 48]
	ldrb	w0, [x0]
	eor	w0, w3, w0
	uxtw	x0, w0
	lsl	x0, x0, 2
	add	x0, x2, x0
	ldr	w0, [x0]
	eor	w0, w1, w0
	str	w0, [sp, 44]
.L790:
	ldr	x0, [sp, 16]
	sub	x1, x0, #1
	str	x1, [sp, 16]
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L791
	ldr	w0, [sp, 44]
	mvn	w0, w0
	add	sp, sp, 64
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1614:
	.size	_Z10ImHashDataPKvmj, .-_Z10ImHashDataPKvmj
	.align	2
	.global	_Z9ImHashStrPKcmj
	.type	_Z9ImHashStrPKcmj, %function
_Z9ImHashStrPKcmj:
.LFB1615:
	.cfi_startproc
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	w2, [sp, 12]
	ldr	w0, [sp, 12]
	mvn	w0, w0
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	str	w0, [sp, 44]
	ldr	x0, [sp, 24]
	str	x0, [sp, 48]
	adrp	x0, _ZL17GCrc32LookupTable
	add	x0, x0, :lo12:_ZL17GCrc32LookupTable
	str	x0, [sp, 56]
	ldr	x0, [sp, 16]
	cmp	x0, 0
	beq	.L794
	b	.L795
.L797:
	ldr	x0, [sp, 48]
	add	x1, x0, 1
	str	x1, [sp, 48]
	ldrb	w0, [x0]
	strb	w0, [sp, 43]
	ldrb	w0, [sp, 43]
	cmp	w0, 35
	bne	.L796
	ldr	x0, [sp, 16]
	cmp	x0, 1
	bls	.L796
	ldr	x0, [sp, 48]
	ldrb	w0, [x0]
	cmp	w0, 35
	bne	.L796
	ldr	x0, [sp, 48]
	add	x0, x0, 1
	ldrb	w0, [x0]
	cmp	w0, 35
	bne	.L796
	ldr	w0, [sp, 12]
	str	w0, [sp, 44]
.L796:
	ldr	w0, [sp, 44]
	lsr	w1, w0, 8
	ldr	w0, [sp, 44]
	and	w2, w0, 255
	ldrb	w0, [sp, 43]
	eor	w0, w2, w0
	uxtw	x0, w0
	lsl	x0, x0, 2
	ldr	x2, [sp, 56]
	add	x0, x2, x0
	ldr	w0, [x0]
	eor	w0, w1, w0
	str	w0, [sp, 44]
.L795:
	ldr	x0, [sp, 16]
	sub	x1, x0, #1
	str	x1, [sp, 16]
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L797
	b	.L798
.L794:
	ldr	x0, [sp, 48]
	add	x1, x0, 1
	str	x1, [sp, 48]
	ldrb	w0, [x0]
	strb	w0, [sp, 42]
	ldrb	w0, [sp, 42]
	cmp	w0, 0
	beq	.L798
	ldrb	w0, [sp, 42]
	cmp	w0, 35
	bne	.L799
	ldr	x0, [sp, 48]
	ldrb	w0, [x0]
	cmp	w0, 35
	bne	.L799
	ldr	x0, [sp, 48]
	add	x0, x0, 1
	ldrb	w0, [x0]
	cmp	w0, 35
	bne	.L799
	ldr	w0, [sp, 12]
	str	w0, [sp, 44]
.L799:
	ldr	w0, [sp, 44]
	lsr	w1, w0, 8
	ldr	w0, [sp, 44]
	and	w2, w0, 255
	ldrb	w0, [sp, 42]
	eor	w0, w2, w0
	uxtw	x0, w0
	lsl	x0, x0, 2
	ldr	x2, [sp, 56]
	add	x0, x2, x0
	ldr	w0, [x0]
	eor	w0, w1, w0
	str	w0, [sp, 44]
	b	.L794
.L798:
	ldr	w0, [sp, 44]
	mvn	w0, w0
	add	sp, sp, 64
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1615:
	.size	_Z9ImHashStrPKcmj, .-_Z9ImHashStrPKcmj
	.align	2
	.global	_Z10ImFileOpenPKcS0_
	.type	_Z10ImFileOpenPKcS0_, %function
_Z10ImFileOpenPKcS0_:
.LFB1616:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	fopen
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1616:
	.size	_Z10ImFileOpenPKcS0_, .-_Z10ImFileOpenPKcS0_
	.align	2
	.global	_Z11ImFileCloseP8_IO_FILE
	.type	_Z11ImFileCloseP8_IO_FILE, %function
_Z11ImFileCloseP8_IO_FILE:
.LFB1617:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	fclose
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1617:
	.size	_Z11ImFileCloseP8_IO_FILE, .-_Z11ImFileCloseP8_IO_FILE
	.align	2
	.global	_Z13ImFileGetSizeP8_IO_FILE
	.type	_Z13ImFileGetSizeP8_IO_FILE, %function
_Z13ImFileGetSizeP8_IO_FILE:
.LFB1618:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	xzr, [sp, 32]
	str	xzr, [sp, 40]
	ldr	x0, [sp, 24]
	bl	ftell
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	cmn	x0, #1
	beq	.L806
	mov	w2, 2
	mov	x1, 0
	ldr	x0, [sp, 24]
	bl	fseek
	cmp	w0, 0
	bne	.L806
	ldr	x0, [sp, 24]
	bl	ftell
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmn	x0, #1
	beq	.L806
	mov	w2, 0
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 24]
	bl	fseek
	cmp	w0, 0
	bne	.L806
	ldr	x0, [sp, 40]
	b	.L807
.L806:
	mov	x0, -1
.L807:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1618:
	.size	_Z13ImFileGetSizeP8_IO_FILE, .-_Z13ImFileGetSizeP8_IO_FILE
	.align	2
	.global	_Z10ImFileReadPvyyP8_IO_FILE
	.type	_Z10ImFileReadPvyyP8_IO_FILE, %function
_Z10ImFileReadPvyyP8_IO_FILE:
.LFB1619:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	x3, [sp, 16]
	ldr	x3, [sp, 16]
	ldr	x2, [sp, 24]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	fread
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1619:
	.size	_Z10ImFileReadPvyyP8_IO_FILE, .-_Z10ImFileReadPvyyP8_IO_FILE
	.align	2
	.global	_Z11ImFileWritePKvyyP8_IO_FILE
	.type	_Z11ImFileWritePKvyyP8_IO_FILE, %function
_Z11ImFileWritePKvyyP8_IO_FILE:
.LFB1620:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	x3, [sp, 16]
	ldr	x3, [sp, 16]
	ldr	x2, [sp, 24]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	fwrite
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1620:
	.size	_Z11ImFileWritePKvyyP8_IO_FILE, .-_Z11ImFileWritePKvyyP8_IO_FILE
	.section	.rodata
	.align	3
.LC65:
	.string	"void* ImFileLoadToMemory(const char*, const char*, size_t*, int)"
	.align	3
.LC66:
	.string	"filename && mode"
	.text
	.align	2
	.global	_Z18ImFileLoadToMemoryPKcS0_Pmi
	.type	_Z18ImFileLoadToMemoryPKcS0_Pmi, %function
_Z18ImFileLoadToMemoryPKcS0_Pmi:
.LFB1621:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	w3, [sp, 20]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L814
	ldr	x0, [sp, 32]
	cmp	x0, 0
	bne	.L824
.L814:
	adrp	x0, .LC65
	add	x3, x0, :lo12:.LC65
	mov	w2, 1919
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC66
	add	x0, x0, :lo12:.LC66
	bl	__assert_fail
.L824:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L816
	ldr	x0, [sp, 24]
	str	xzr, [x0]
.L816:
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	_Z10ImFileOpenPKcS0_
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L817
	mov	x0, 0
	b	.L818
.L817:
	ldr	x0, [sp, 56]
	bl	_Z13ImFileGetSizeP8_IO_FILE
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	cmn	x0, #1
	bne	.L819
	ldr	x0, [sp, 56]
	bl	_Z11ImFileCloseP8_IO_FILE
	mov	x0, 0
	b	.L818
.L819:
	ldrsw	x1, [sp, 20]
	ldr	x0, [sp, 64]
	add	x0, x1, x0
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	cmp	x0, 0
	bne	.L820
	ldr	x0, [sp, 56]
	bl	_Z11ImFileCloseP8_IO_FILE
	mov	x0, 0
	b	.L818
.L820:
	ldr	x3, [sp, 56]
	ldr	x2, [sp, 64]
	mov	x1, 1
	ldr	x0, [sp, 72]
	bl	_Z10ImFileReadPvyyP8_IO_FILE
	mov	x1, x0
	ldr	x0, [sp, 64]
	cmp	x0, x1
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L821
	ldr	x0, [sp, 56]
	bl	_Z11ImFileCloseP8_IO_FILE
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui7MemFreeEPv
	mov	x0, 0
	b	.L818
.L821:
	ldr	w0, [sp, 20]
	cmp	w0, 0
	ble	.L822
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 64]
	add	x0, x1, x0
	ldrsw	x1, [sp, 20]
	mov	x2, x1
	mov	w1, 0
	bl	memset
.L822:
	ldr	x0, [sp, 56]
	bl	_Z11ImFileCloseP8_IO_FILE
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L823
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 64]
	str	x1, [x0]
.L823:
	ldr	x0, [sp, 72]
.L818:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1621:
	.size	_Z18ImFileLoadToMemoryPKcS0_Pmi, .-_Z18ImFileLoadToMemoryPKcS0_Pmi
	.section	.rodata
	.align	3
	.type	_ZZ18ImTextCharFromUtf8PjPKcS1_E7lengths, %object
	.size	_ZZ18ImTextCharFromUtf8PjPKcS1_E7lengths, 32
_ZZ18ImTextCharFromUtf8PjPKcS1_E7lengths:
	.string	"\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001\001"
	.string	""
	.string	""
	.string	""
	.string	""
	.string	""
	.string	""
	.string	""
	.string	"\002\002\002\002\003\003\004"
	.align	3
	.type	_ZZ18ImTextCharFromUtf8PjPKcS1_E5masks, %object
	.size	_ZZ18ImTextCharFromUtf8PjPKcS1_E5masks, 20
_ZZ18ImTextCharFromUtf8PjPKcS1_E5masks:
	.word	0
	.word	127
	.word	31
	.word	15
	.word	7
	.align	3
	.type	_ZZ18ImTextCharFromUtf8PjPKcS1_E4mins, %object
	.size	_ZZ18ImTextCharFromUtf8PjPKcS1_E4mins, 20
_ZZ18ImTextCharFromUtf8PjPKcS1_E4mins:
	.word	4194304
	.word	0
	.word	128
	.word	2048
	.word	65536
	.align	3
	.type	_ZZ18ImTextCharFromUtf8PjPKcS1_E6shiftc, %object
	.size	_ZZ18ImTextCharFromUtf8PjPKcS1_E6shiftc, 20
_ZZ18ImTextCharFromUtf8PjPKcS1_E6shiftc:
	.word	0
	.word	18
	.word	12
	.word	6
	.word	0
	.align	3
	.type	_ZZ18ImTextCharFromUtf8PjPKcS1_E6shifte, %object
	.size	_ZZ18ImTextCharFromUtf8PjPKcS1_E6shifte, 20
_ZZ18ImTextCharFromUtf8PjPKcS1_E6shifte:
	.word	0
	.word	6
	.word	4
	.word	2
	.word	0
	.text
	.align	2
	.global	_Z18ImTextCharFromUtf8PjPKcS1_
	.type	_Z18ImTextCharFromUtf8PjPKcS1_, %function
_Z18ImTextCharFromUtf8PjPKcS1_:
.LFB1622:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 32]
	ldrb	w0, [x0]
	lsr	w0, w0, 3
	and	w0, w0, 255
	mov	w2, w0
	adrp	x0, _ZZ18ImTextCharFromUtf8PjPKcS1_E7lengths
	add	x1, x0, :lo12:_ZZ18ImTextCharFromUtf8PjPKcS1_E7lengths
	sxtw	x0, w2
	ldrb	w0, [x1, x0]
	str	w0, [sp, 56]
	ldr	w0, [sp, 56]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	mov	w1, w0
	ldr	w0, [sp, 56]
	add	w0, w0, w1
	str	w0, [sp, 52]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L826
	ldrsw	x0, [sp, 52]
	ldr	x1, [sp, 32]
	add	x0, x1, x0
	str	x0, [sp, 24]
.L826:
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 24]
	cmp	x1, x0
	bcs	.L827
	ldr	x0, [sp, 32]
	ldrb	w0, [x0]
	b	.L828
.L827:
	mov	w0, 0
.L828:
	strb	w0, [sp, 64]
	ldr	x0, [sp, 32]
	add	x0, x0, 1
	ldr	x1, [sp, 24]
	cmp	x1, x0
	bls	.L829
	ldr	x0, [sp, 32]
	add	x0, x0, 1
	ldrb	w0, [x0]
	b	.L830
.L829:
	mov	w0, 0
.L830:
	strb	w0, [sp, 65]
	ldr	x0, [sp, 32]
	add	x0, x0, 2
	ldr	x1, [sp, 24]
	cmp	x1, x0
	bls	.L831
	ldr	x0, [sp, 32]
	add	x0, x0, 2
	ldrb	w0, [x0]
	b	.L832
.L831:
	mov	w0, 0
.L832:
	strb	w0, [sp, 66]
	ldr	x0, [sp, 32]
	add	x0, x0, 3
	ldr	x1, [sp, 24]
	cmp	x1, x0
	bls	.L833
	ldr	x0, [sp, 32]
	add	x0, x0, 3
	ldrb	w0, [x0]
	b	.L834
.L833:
	mov	w0, 0
.L834:
	strb	w0, [sp, 67]
	ldrb	w0, [sp, 64]
	mov	w2, w0
	adrp	x0, _ZZ18ImTextCharFromUtf8PjPKcS1_E5masks
	add	x0, x0, :lo12:_ZZ18ImTextCharFromUtf8PjPKcS1_E5masks
	ldrsw	x1, [sp, 56]
	ldr	w0, [x0, x1, lsl 2]
	and	w0, w2, w0
	lsl	w1, w0, 18
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldrb	w0, [sp, 65]
	lsl	w0, w0, 12
	and	w0, w0, 258048
	orr	w1, w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldrb	w0, [sp, 66]
	lsl	w0, w0, 6
	and	w0, w0, 4032
	orr	w1, w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldrb	w0, [sp, 67]
	and	w0, w0, 63
	orr	w1, w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	adrp	x0, _ZZ18ImTextCharFromUtf8PjPKcS1_E6shiftc
	add	x0, x0, :lo12:_ZZ18ImTextCharFromUtf8PjPKcS1_E6shiftc
	ldrsw	x2, [sp, 56]
	ldr	w0, [x0, x2, lsl 2]
	lsr	w1, w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0]
	str	wzr, [sp, 60]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	adrp	x0, _ZZ18ImTextCharFromUtf8PjPKcS1_E4mins
	add	x0, x0, :lo12:_ZZ18ImTextCharFromUtf8PjPKcS1_E4mins
	ldrsw	x2, [sp, 56]
	ldr	w0, [x0, x2, lsl 2]
	cmp	w1, w0
	bcs	.L835
	mov	w0, 64
	b	.L836
.L835:
	mov	w0, 0
.L836:
	str	w0, [sp, 60]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	lsr	w0, w0, 11
	cmp	w0, 27
	bne	.L837
	mov	w0, 128
	b	.L838
.L837:
	mov	w0, 0
.L838:
	ldr	w1, [sp, 60]
	orr	w0, w1, w0
	str	w0, [sp, 60]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	mov	w0, 65535
	cmp	w1, w0
	bls	.L839
	mov	w0, 256
	b	.L840
.L839:
	mov	w0, 0
.L840:
	ldr	w1, [sp, 60]
	orr	w0, w1, w0
	str	w0, [sp, 60]
	ldrb	w0, [sp, 65]
	lsr	w0, w0, 2
	and	w0, w0, 255
	and	w0, w0, 48
	ldr	w1, [sp, 60]
	orr	w0, w1, w0
	str	w0, [sp, 60]
	ldrb	w0, [sp, 66]
	lsr	w0, w0, 4
	and	w0, w0, 255
	and	w0, w0, 12
	ldr	w1, [sp, 60]
	orr	w0, w1, w0
	str	w0, [sp, 60]
	ldrb	w0, [sp, 67]
	lsr	w0, w0, 6
	and	w0, w0, 255
	mov	w1, w0
	ldr	w0, [sp, 60]
	orr	w0, w0, w1
	str	w0, [sp, 60]
	ldr	w1, [sp, 60]
	mov	w0, 42
	eor	w0, w1, w0
	str	w0, [sp, 60]
	adrp	x0, _ZZ18ImTextCharFromUtf8PjPKcS1_E6shifte
	add	x0, x0, :lo12:_ZZ18ImTextCharFromUtf8PjPKcS1_E6shifte
	ldrsw	x1, [sp, 56]
	ldr	w0, [x0, x1, lsl 2]
	ldr	w1, [sp, 60]
	asr	w0, w1, w0
	str	w0, [sp, 60]
	ldr	w0, [sp, 60]
	cmp	w0, 0
	beq	.L841
	ldrb	w0, [sp, 64]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	mov	w1, w0
	ldrb	w0, [sp, 65]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	add	w0, w1, w0
	ldrb	w1, [sp, 66]
	cmp	w1, 0
	cset	w1, ne
	and	w1, w1, 255
	add	w0, w0, w1
	ldrb	w1, [sp, 67]
	cmp	w1, 0
	cset	w1, ne
	and	w1, w1, 255
	add	w0, w0, w1
	mov	w1, w0
	ldr	w0, [sp, 52]
	bl	_Z5ImMinIiET_S0_S0_
	str	w0, [sp, 52]
	ldr	x0, [sp, 40]
	mov	w1, 65533
	str	w1, [x0]
.L841:
	ldr	w0, [sp, 52]
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 72]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L843
	bl	__stack_chk_fail
.L843:
	mov	w0, w1
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1622:
	.size	_Z18ImTextCharFromUtf8PjPKcS1_, .-_Z18ImTextCharFromUtf8PjPKcS1_
	.align	2
	.global	_Z17ImTextStrFromUtf8PtiPKcS1_PS1_
	.type	_Z17ImTextStrFromUtf8PtiPKcS1_PS1_, %function
_Z17ImTextStrFromUtf8PtiPKcS1_PS1_:
.LFB1623:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 56]
	str	w1, [sp, 52]
	str	x2, [sp, 40]
	str	x3, [sp, 32]
	str	x4, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	x0, [sp, 56]
	str	x0, [sp, 72]
	ldrsw	x0, [sp, 52]
	lsl	x0, x0, 1
	ldr	x1, [sp, 56]
	add	x0, x1, x0
	str	x0, [sp, 80]
	b	.L845
.L849:
	add	x0, sp, 68
	ldr	x2, [sp, 32]
	ldr	x1, [sp, 40]
	bl	_Z18ImTextCharFromUtf8PjPKcS1_
	sxtw	x0, w0
	ldr	x1, [sp, 40]
	add	x0, x1, x0
	str	x0, [sp, 40]
	ldr	w0, [sp, 68]
	cmp	w0, 0
	beq	.L853
	ldr	w0, [sp, 68]
	and	w2, w0, 65535
	ldr	x0, [sp, 72]
	add	x1, x0, 2
	str	x1, [sp, 72]
	mov	w1, w2
	strh	w1, [x0]
.L845:
	ldr	x0, [sp, 80]
	sub	x0, x0, #2
	ldr	x1, [sp, 72]
	cmp	x1, x0
	bcs	.L847
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L848
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 32]
	cmp	x1, x0
	bcs	.L847
.L848:
	ldr	x0, [sp, 40]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L849
	b	.L847
.L853:
	nop
.L847:
	ldr	x0, [sp, 72]
	strh	wzr, [x0]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L850
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0]
.L850:
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 56]
	sub	x0, x1, x0
	asr	x0, x0, 1
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 88]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L852
	bl	__stack_chk_fail
.L852:
	mov	w0, w1
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1623:
	.size	_Z17ImTextStrFromUtf8PtiPKcS1_PS1_, .-_Z17ImTextStrFromUtf8PtiPKcS1_PS1_
	.align	2
	.global	_Z24ImTextCountCharsFromUtf8PKcS0_
	.type	_Z24ImTextCountCharsFromUtf8PKcS0_, %function
_Z24ImTextCountCharsFromUtf8PKcS0_:
.LFB1624:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	str	wzr, [sp, 36]
	b	.L855
.L859:
	add	x0, sp, 32
	ldr	x2, [sp, 16]
	ldr	x1, [sp, 24]
	bl	_Z18ImTextCharFromUtf8PjPKcS1_
	sxtw	x0, w0
	ldr	x1, [sp, 24]
	add	x0, x1, x0
	str	x0, [sp, 24]
	ldr	w0, [sp, 32]
	cmp	w0, 0
	beq	.L862
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L855:
	ldr	x0, [sp, 16]
	cmp	x0, 0
	beq	.L858
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 16]
	cmp	x1, x0
	bcs	.L857
.L858:
	ldr	x0, [sp, 24]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L859
	b	.L857
.L862:
	nop
.L857:
	ldr	w0, [sp, 36]
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 40]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L861
	bl	__stack_chk_fail
.L861:
	mov	w0, w1
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1624:
	.size	_Z24ImTextCountCharsFromUtf8PKcS0_, .-_Z24ImTextCountCharsFromUtf8PKcS0_
	.align	2
	.type	_ZL23ImTextCharToUtf8_inlinePcij, %function
_ZL23ImTextCharToUtf8_inlinePcij:
.LFB1625:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	str	w2, [sp]
	ldr	w0, [sp]
	cmp	w0, 127
	bhi	.L864
	ldr	w0, [sp]
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	strb	w1, [x0]
	mov	w0, 1
	b	.L865
.L864:
	ldr	w0, [sp]
	cmp	w0, 2047
	bhi	.L866
	ldr	w0, [sp, 4]
	cmp	w0, 1
	bgt	.L867
	mov	w0, 0
	b	.L865
.L867:
	ldr	w0, [sp]
	lsr	w0, w0, 6
	and	w0, w0, 255
	sub	w0, w0, #64
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	strb	w1, [x0]
	ldr	w0, [sp]
	and	w0, w0, 255
	and	w0, w0, 63
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	add	x0, x0, 1
	sub	w1, w1, #128
	and	w1, w1, 255
	strb	w1, [x0]
	mov	w0, 2
	b	.L865
.L866:
	ldr	w1, [sp]
	mov	w0, 65535
	cmp	w1, w0
	bhi	.L868
	ldr	w0, [sp, 4]
	cmp	w0, 2
	bgt	.L869
	mov	w0, 0
	b	.L865
.L869:
	ldr	w0, [sp]
	lsr	w0, w0, 12
	and	w0, w0, 255
	sub	w0, w0, #32
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	strb	w1, [x0]
	ldr	w0, [sp]
	lsr	w0, w0, 6
	and	w0, w0, 255
	and	w0, w0, 63
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	add	x0, x0, 1
	sub	w1, w1, #128
	and	w1, w1, 255
	strb	w1, [x0]
	ldr	w0, [sp]
	and	w0, w0, 255
	and	w0, w0, 63
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	add	x0, x0, 2
	sub	w1, w1, #128
	and	w1, w1, 255
	strb	w1, [x0]
	mov	w0, 3
	b	.L865
.L868:
	ldr	w1, [sp]
	mov	w0, 1114111
	cmp	w1, w0
	bhi	.L870
	ldr	w0, [sp, 4]
	cmp	w0, 3
	bgt	.L871
	mov	w0, 0
	b	.L865
.L871:
	ldr	w0, [sp]
	lsr	w0, w0, 18
	and	w0, w0, 255
	sub	w0, w0, #16
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	strb	w1, [x0]
	ldr	w0, [sp]
	lsr	w0, w0, 12
	and	w0, w0, 255
	and	w0, w0, 63
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	add	x0, x0, 1
	sub	w1, w1, #128
	and	w1, w1, 255
	strb	w1, [x0]
	ldr	w0, [sp]
	lsr	w0, w0, 6
	and	w0, w0, 255
	and	w0, w0, 63
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	add	x0, x0, 2
	sub	w1, w1, #128
	and	w1, w1, 255
	strb	w1, [x0]
	ldr	w0, [sp]
	and	w0, w0, 255
	and	w0, w0, 63
	and	w1, w0, 255
	ldr	x0, [sp, 8]
	add	x0, x0, 3
	sub	w1, w1, #128
	and	w1, w1, 255
	strb	w1, [x0]
	mov	w0, 4
	b	.L865
.L870:
	mov	w0, 0
.L865:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1625:
	.size	_ZL23ImTextCharToUtf8_inlinePcij, .-_ZL23ImTextCharToUtf8_inlinePcij
	.align	2
	.global	_Z16ImTextCharToUtf8Pcj
	.type	_Z16ImTextCharToUtf8Pcj, %function
_Z16ImTextCharToUtf8Pcj:
.LFB1626:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w2, [sp, 20]
	mov	w1, 5
	ldr	x0, [sp, 24]
	bl	_ZL23ImTextCharToUtf8_inlinePcij
	str	w0, [sp, 44]
	ldrsw	x0, [sp, 44]
	ldr	x1, [sp, 24]
	add	x0, x1, x0
	strb	wzr, [x0]
	ldr	x0, [sp, 24]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1626:
	.size	_Z16ImTextCharToUtf8Pcj, .-_Z16ImTextCharToUtf8Pcj
	.align	2
	.global	_Z28ImTextCountUtf8BytesFromCharPKcS0_
	.type	_Z28ImTextCountUtf8BytesFromCharPKcS0_, %function
_Z28ImTextCountUtf8BytesFromCharPKcS0_:
.LFB1627:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	str	wzr, [sp, 36]
	add	x0, sp, 36
	ldr	x2, [sp, 16]
	ldr	x1, [sp, 24]
	bl	_Z18ImTextCharFromUtf8PjPKcS1_
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 40]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L876
	bl	__stack_chk_fail
.L876:
	mov	w0, w1
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1627:
	.size	_Z28ImTextCountUtf8BytesFromCharPKcS0_, .-_Z28ImTextCountUtf8BytesFromCharPKcS0_
	.align	2
	.type	_ZL28ImTextCountUtf8BytesFromCharj, %function
_ZL28ImTextCountUtf8BytesFromCharj:
.LFB1628:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	ldr	w0, [sp, 12]
	cmp	w0, 127
	bhi	.L878
	mov	w0, 1
	b	.L879
.L878:
	ldr	w0, [sp, 12]
	cmp	w0, 2047
	bhi	.L880
	mov	w0, 2
	b	.L879
.L880:
	ldr	w1, [sp, 12]
	mov	w0, 65535
	cmp	w1, w0
	bhi	.L881
	mov	w0, 3
	b	.L879
.L881:
	ldr	w1, [sp, 12]
	mov	w0, 1114111
	cmp	w1, w0
	bhi	.L882
	mov	w0, 4
	b	.L879
.L882:
	mov	w0, 3
.L879:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1628:
	.size	_ZL28ImTextCountUtf8BytesFromCharj, .-_ZL28ImTextCountUtf8BytesFromCharj
	.align	2
	.global	_Z15ImTextStrToUtf8PciPKtS1_
	.type	_Z15ImTextStrToUtf8PciPKtS1_, %function
_Z15ImTextStrToUtf8PciPKtS1_:
.LFB1629:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	str	x3, [sp, 16]
	ldr	x0, [sp, 40]
	str	x0, [sp, 64]
	ldrsw	x0, [sp, 36]
	ldr	x1, [sp, 40]
	add	x0, x1, x0
	str	x0, [sp, 72]
	b	.L884
.L888:
	ldr	x0, [sp, 24]
	add	x1, x0, 2
	str	x1, [sp, 24]
	ldrh	w0, [x0]
	str	w0, [sp, 60]
	ldr	w0, [sp, 60]
	cmp	w0, 127
	bhi	.L885
	ldr	w0, [sp, 60]
	and	w2, w0, 255
	ldr	x0, [sp, 64]
	add	x1, x0, 1
	str	x1, [sp, 64]
	mov	w1, w2
	strb	w1, [x0]
	b	.L884
.L885:
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 64]
	sub	x0, x1, x0
	sub	w0, w0, #1
	ldr	w2, [sp, 60]
	mov	w1, w0
	ldr	x0, [sp, 64]
	bl	_ZL23ImTextCharToUtf8_inlinePcij
	sxtw	x0, w0
	ldr	x1, [sp, 64]
	add	x0, x1, x0
	str	x0, [sp, 64]
.L884:
	ldr	x0, [sp, 72]
	sub	x0, x0, #1
	ldr	x1, [sp, 64]
	cmp	x1, x0
	bcs	.L886
	ldr	x0, [sp, 16]
	cmp	x0, 0
	beq	.L887
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 16]
	cmp	x1, x0
	bcs	.L886
.L887:
	ldr	x0, [sp, 24]
	ldrh	w0, [x0]
	cmp	w0, 0
	bne	.L888
.L886:
	ldr	x0, [sp, 64]
	strb	wzr, [x0]
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 40]
	sub	x0, x1, x0
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1629:
	.size	_Z15ImTextStrToUtf8PciPKtS1_, .-_Z15ImTextStrToUtf8PciPKtS1_
	.align	2
	.global	_Z27ImTextCountUtf8BytesFromStrPKtS0_
	.type	_Z27ImTextCountUtf8BytesFromStrPKtS0_, %function
_Z27ImTextCountUtf8BytesFromStrPKtS0_:
.LFB1630:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	wzr, [sp, 40]
	b	.L891
.L895:
	ldr	x0, [sp, 24]
	add	x1, x0, 2
	str	x1, [sp, 24]
	ldrh	w0, [x0]
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	cmp	w0, 127
	bhi	.L892
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
	b	.L891
.L892:
	ldr	w0, [sp, 44]
	bl	_ZL28ImTextCountUtf8BytesFromCharj
	mov	w1, w0
	ldr	w0, [sp, 40]
	add	w0, w0, w1
	str	w0, [sp, 40]
.L891:
	ldr	x0, [sp, 16]
	cmp	x0, 0
	beq	.L893
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 16]
	cmp	x1, x0
	bcs	.L894
.L893:
	ldr	x0, [sp, 24]
	ldrh	w0, [x0]
	cmp	w0, 0
	bne	.L895
.L894:
	ldr	w0, [sp, 40]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1630:
	.size	_Z27ImTextCountUtf8BytesFromStrPKtS0_, .-_Z27ImTextCountUtf8BytesFromStrPKtS0_
	.align	2
	.global	_Z18ImAlphaBlendColorsjj
	.type	_Z18ImAlphaBlendColorsjj, %function
_Z18ImAlphaBlendColorsjj:
.LFB1631:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	ldr	w0, [sp, 24]
	fmov	s0, w0
	ushr	v0.2s, v0.2s, 24
	ucvtf	s0, s0
	mov	w0, 1132396544
	fmov	s1, w0
	fdiv	s0, s0, s1
	str	s0, [sp, 32]
	ldr	w0, [sp, 28]
	and	w2, w0, 255
	ldr	w0, [sp, 24]
	and	w0, w0, 255
	ldr	s0, [sp, 32]
	mov	w1, w0
	mov	w0, w2
	bl	_Z6ImLerpIiET_S0_S0_f
	str	w0, [sp, 36]
	ldr	w0, [sp, 28]
	lsr	w0, w0, 8
	and	w2, w0, 255
	ldr	w0, [sp, 24]
	lsr	w0, w0, 8
	and	w0, w0, 255
	ldr	s0, [sp, 32]
	mov	w1, w0
	mov	w0, w2
	bl	_Z6ImLerpIiET_S0_S0_f
	str	w0, [sp, 40]
	ldr	w0, [sp, 28]
	lsr	w0, w0, 16
	and	w2, w0, 255
	ldr	w0, [sp, 24]
	lsr	w0, w0, 16
	and	w0, w0, 255
	ldr	s0, [sp, 32]
	mov	w1, w0
	mov	w0, w2
	bl	_Z6ImLerpIiET_S0_S0_f
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	lsl	w1, w0, 16
	ldr	w0, [sp, 40]
	lsl	w0, w0, 8
	orr	w1, w1, w0
	ldr	w0, [sp, 36]
	orr	w0, w1, w0
	orr	w0, w0, -16777216
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1631:
	.size	_Z18ImAlphaBlendColorsjj, .-_Z18ImAlphaBlendColorsjj
	.align	2
	.global	_ZN5ImGui23ColorConvertU32ToFloat4Ej
	.type	_ZN5ImGui23ColorConvertU32ToFloat4Ej, %function
_ZN5ImGui23ColorConvertU32ToFloat4Ej:
.LFB1632:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	mov	w0, 32897
	movk	w0, 0x3b80, lsl 16
	fmov	s0, w0
	str	s0, [sp, 36]
	ldr	w0, [sp, 28]
	and	w0, w0, 255
	ucvtf	s1, w0
	ldr	s0, [sp, 36]
	fmul	s4, s1, s0
	ldr	w0, [sp, 28]
	lsr	w0, w0, 8
	and	w0, w0, 255
	ucvtf	s1, w0
	ldr	s0, [sp, 36]
	fmul	s5, s1, s0
	ldr	w0, [sp, 28]
	lsr	w0, w0, 16
	and	w0, w0, 255
	ucvtf	s1, w0
	ldr	s0, [sp, 36]
	fmul	s2, s1, s0
	ldr	w0, [sp, 28]
	fmov	s0, w0
	ushr	v0.2s, v0.2s, 24
	ucvtf	s1, s0
	ldr	s0, [sp, 36]
	fmul	s0, s1, s0
	add	x0, sp, 40
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImVec4C1Effff
	ldp	x0, x1, [sp, 40]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L901
	bl	__stack_chk_fail
.L901:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1632:
	.size	_ZN5ImGui23ColorConvertU32ToFloat4Ej, .-_ZN5ImGui23ColorConvertU32ToFloat4Ej
	.align	2
	.global	_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4
	.type	_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4, %function
_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4:
.LFB1633:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	bl	_ZL10ImSaturatef
	mov	w0, 1132396544
	fmov	s1, w0
	fmul	s1, s0, s1
	fmov	s0, 5.0e-1
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	str	s0, [sp, 44]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 4]
	bl	_ZL10ImSaturatef
	mov	w0, 1132396544
	fmov	s1, w0
	fmul	s1, s0, s1
	fmov	s0, 5.0e-1
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	fmov	w0, s0
	lsl	w0, w0, 8
	ldr	w1, [sp, 44]
	orr	w0, w1, w0
	str	w0, [sp, 44]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 8]
	bl	_ZL10ImSaturatef
	mov	w0, 1132396544
	fmov	s1, w0
	fmul	s1, s0, s1
	fmov	s0, 5.0e-1
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	fmov	w0, s0
	lsl	w0, w0, 16
	ldr	w1, [sp, 44]
	orr	w0, w1, w0
	str	w0, [sp, 44]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 12]
	bl	_ZL10ImSaturatef
	mov	w0, 1132396544
	fmov	s1, w0
	fmul	s1, s0, s1
	fmov	s0, 5.0e-1
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	fmov	w0, s0
	lsl	w0, w0, 24
	ldr	w1, [sp, 44]
	orr	w0, w1, w0
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1633:
	.size	_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4, .-_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4
	.align	2
	.global	_ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_
	.type	_ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_, %function
_ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_:
.LFB1634:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	s0, [sp, 60]
	str	s1, [sp, 56]
	str	s2, [sp, 52]
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	wzr, [sp, 72]
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 52]
	fcmpe	s1, s0
	bmi	.L912
	b	.L905
.L912:
	add	x1, sp, 52
	add	x0, sp, 56
	bl	_Z6ImSwapIfEvRT_S1_
	fmov	s0, -1.0e+0
	str	s0, [sp, 72]
.L905:
	ldr	s1, [sp, 60]
	ldr	s0, [sp, 56]
	fcmpe	s1, s0
	bmi	.L913
	b	.L907
.L913:
	add	x1, sp, 56
	add	x0, sp, 60
	bl	_Z6ImSwapIfEvRT_S1_
	mov	w0, 43691
	movk	w0, 0xbeaa, lsl 16
	fmov	s1, w0
	ldr	s0, [sp, 72]
	fsub	s0, s1, s0
	str	s0, [sp, 72]
.L907:
	ldr	s1, [sp, 60]
	ldr	s2, [sp, 56]
	ldr	s0, [sp, 52]
	fcmpe	s2, s0
	bmi	.L914
	b	.L915
.L914:
	ldr	s0, [sp, 56]
	b	.L911
.L915:
	ldr	s0, [sp, 52]
.L911:
	fsub	s0, s1, s0
	str	s0, [sp, 76]
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 52]
	fsub	s1, s1, s0
	ldr	s2, [sp, 76]
	fmov	s0, 6.0e+0
	fmul	s0, s2, s0
	mov	w0, 58632
	movk	w0, 0x1e3c, lsl 16
	fmov	s2, w0
	fadd	s0, s0, s2
	fdiv	s1, s1, s0
	ldr	s0, [sp, 72]
	fadd	s0, s1, s0
	fabs	s0, s0
	ldr	x0, [sp, 40]
	str	s0, [x0]
	ldr	s0, [sp, 60]
	mov	w0, 58632
	movk	w0, 0x1e3c, lsl 16
	fmov	s1, w0
	fadd	s0, s0, s1
	ldr	s1, [sp, 76]
	fdiv	s0, s1, s0
	ldr	x0, [sp, 32]
	str	s0, [x0]
	ldr	s0, [sp, 60]
	ldr	x0, [sp, 24]
	str	s0, [x0]
	nop
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1634:
	.size	_ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_, .-_ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_
	.align	2
	.global	_ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_
	.type	_ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_, %function
_ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_:
.LFB1635:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	s0, [sp, 60]
	str	s1, [sp, 56]
	str	s2, [sp, 52]
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	s0, [sp, 56]
	fcmp	s0, #0.0
	bne	.L917
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 52]
	str	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	ldr	x0, [sp, 32]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	ldr	x0, [sp, 40]
	str	s0, [x0]
	b	.L916
.L917:
	fmov	s1, 1.0e+0
	ldr	s0, [sp, 60]
	bl	fmodf
	mov	w0, 43691
	movk	w0, 0x3e2a, lsl 16
	fmov	s1, w0
	fdiv	s0, s0, s1
	str	s0, [sp, 60]
	ldr	s0, [sp, 60]
	fcvtzs	s0, s0
	str	s0, [sp, 76]
	ldr	s0, [sp, 76]
	scvtf	s0, s0
	ldr	s1, [sp, 60]
	fsub	s0, s1, s0
	str	s0, [sp, 80]
	fmov	s1, 1.0e+0
	ldr	s0, [sp, 56]
	fsub	s0, s1, s0
	ldr	s1, [sp, 52]
	fmul	s0, s1, s0
	str	s0, [sp, 84]
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 80]
	fmul	s0, s1, s0
	fmov	s1, 1.0e+0
	fsub	s0, s1, s0
	ldr	s1, [sp, 52]
	fmul	s0, s1, s0
	str	s0, [sp, 88]
	fmov	s1, 1.0e+0
	ldr	s0, [sp, 80]
	fsub	s1, s1, s0
	ldr	s0, [sp, 56]
	fmul	s0, s1, s0
	fmov	s1, 1.0e+0
	fsub	s0, s1, s0
	ldr	s1, [sp, 52]
	fmul	s0, s1, s0
	str	s0, [sp, 92]
	ldr	w0, [sp, 76]
	cmp	w0, 4
	beq	.L919
	ldr	w0, [sp, 76]
	cmp	w0, 4
	bgt	.L920
	ldr	w0, [sp, 76]
	cmp	w0, 3
	beq	.L921
	ldr	w0, [sp, 76]
	cmp	w0, 3
	bgt	.L920
	ldr	w0, [sp, 76]
	cmp	w0, 2
	beq	.L922
	ldr	w0, [sp, 76]
	cmp	w0, 2
	bgt	.L920
	ldr	w0, [sp, 76]
	cmp	w0, 0
	beq	.L923
	ldr	w0, [sp, 76]
	cmp	w0, 1
	beq	.L924
	b	.L920
.L923:
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 52]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [sp, 92]
	str	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 84]
	str	s0, [x0]
	b	.L916
.L924:
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 88]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [sp, 52]
	str	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 84]
	str	s0, [x0]
	b	.L916
.L922:
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 84]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [sp, 52]
	str	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 92]
	str	s0, [x0]
	b	.L916
.L921:
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 84]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [sp, 88]
	str	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 52]
	str	s0, [x0]
	b	.L916
.L919:
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 92]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [sp, 84]
	str	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 52]
	str	s0, [x0]
	b	.L916
.L920:
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 52]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [sp, 84]
	str	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 88]
	str	s0, [x0]
	nop
.L916:
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1635:
	.size	_ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_, .-_ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_
	.align	2
	.type	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj, %function
_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj:
.LFB1636:
	.cfi_startproc
	sub	sp, sp, #64
	.cfi_def_cfa_offset 64
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	add	x0, x1, x0
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 24]
	sub	x0, x1, x0
	asr	x0, x0, 4
	str	x0, [sp, 32]
	b	.L926
.L928:
	ldr	x0, [sp, 32]
	lsr	x0, x0, 1
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	lsl	x0, x0, 4
	ldr	x1, [sp, 24]
	add	x0, x1, x0
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	ldr	w1, [sp, 4]
	cmp	w1, w0
	bls	.L927
	ldr	x0, [sp, 56]
	add	x0, x0, 16
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	str	x0, [sp, 24]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 48]
	sub	x0, x1, x0
	sub	x0, x0, #1
	str	x0, [sp, 32]
	b	.L926
.L927:
	ldr	x0, [sp, 48]
	str	x0, [sp, 32]
.L926:
	ldr	x0, [sp, 32]
	cmp	x0, 0
	bne	.L928
	ldr	x0, [sp, 24]
	add	sp, sp, 64
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1636:
	.size	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj, .-_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	.align	2
	.type	_ZZN12ImGuiStorage14BuildSortByKeyEvEN10StaticFunc16PairComparerByIDEPKvS2_, %function
_ZZN12ImGuiStorage14BuildSortByKeyEvEN10StaticFunc16PairComparerByIDEPKvS2_:
.LFB1638:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	w1, [x0]
	ldr	x0, [sp]
	ldr	w0, [x0]
	cmp	w1, w0
	bls	.L931
	mov	w0, 1
	b	.L932
.L931:
	ldr	x0, [sp, 8]
	ldr	w1, [x0]
	ldr	x0, [sp]
	ldr	w0, [x0]
	cmp	w1, w0
	bcs	.L933
	mov	w0, -1
	b	.L932
.L933:
	mov	w0, 0
.L932:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1638:
	.size	_ZZN12ImGuiStorage14BuildSortByKeyEvEN10StaticFunc16PairComparerByIDEPKvS2_, .-_ZZN12ImGuiStorage14BuildSortByKeyEvEN10StaticFunc16PairComparerByIDEPKvS2_
	.align	2
	.global	_ZN12ImGuiStorage14BuildSortByKeyEv
	.type	_ZN12ImGuiStorage14BuildSortByKeyEv, %function
_ZN12ImGuiStorage14BuildSortByKeyEv:
.LFB1637:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x4, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	adrp	x0, _ZZN12ImGuiStorage14BuildSortByKeyEvEN10StaticFunc16PairComparerByIDEPKvS2_
	add	x3, x0, :lo12:_ZZN12ImGuiStorage14BuildSortByKeyEvEN10StaticFunc16PairComparerByIDEPKvS2_
	mov	x2, 16
	mov	x0, x4
	bl	_ZL7ImQsortPvmmPFiPKvS1_E
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1637:
	.size	_ZN12ImGuiStorage14BuildSortByKeyEv, .-_ZN12ImGuiStorage14BuildSortByKeyEv
	.align	2
	.global	_ZNK12ImGuiStorage6GetIntEji
	.type	_ZNK12ImGuiStorage6GetIntEji, %function
_ZNK12ImGuiStorage6GetIntEji:
.LFB1639:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	str	w2, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 40]
	cmp	x0, x1
	beq	.L936
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	beq	.L937
.L936:
	mov	w0, 1
	b	.L938
.L937:
	mov	w0, 0
.L938:
	cmp	w0, 0
	beq	.L939
	ldr	w0, [sp, 16]
	b	.L940
.L939:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
.L940:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1639:
	.size	_ZNK12ImGuiStorage6GetIntEji, .-_ZNK12ImGuiStorage6GetIntEji
	.align	2
	.global	_ZNK12ImGuiStorage7GetBoolEjb
	.type	_ZNK12ImGuiStorage7GetBoolEjb, %function
_ZNK12ImGuiStorage7GetBoolEjb:
.LFB1640:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	strb	w2, [sp, 19]
	ldrb	w0, [sp, 19]
	cmp	w0, 0
	beq	.L942
	mov	w0, 1
	b	.L943
.L942:
	mov	w0, 0
.L943:
	mov	w2, w0
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK12ImGuiStorage6GetIntEji
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1640:
	.size	_ZNK12ImGuiStorage7GetBoolEjb, .-_ZNK12ImGuiStorage7GetBoolEjb
	.align	2
	.global	_ZNK12ImGuiStorage8GetFloatEjf
	.type	_ZNK12ImGuiStorage8GetFloatEjf, %function
_ZNK12ImGuiStorage8GetFloatEjf:
.LFB1641:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	str	s0, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 40]
	cmp	x0, x1
	beq	.L946
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	beq	.L947
.L946:
	mov	w0, 1
	b	.L948
.L947:
	mov	w0, 0
.L948:
	cmp	w0, 0
	beq	.L949
	ldr	s0, [sp, 16]
	b	.L950
.L949:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 8]
.L950:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1641:
	.size	_ZNK12ImGuiStorage8GetFloatEjf, .-_ZNK12ImGuiStorage8GetFloatEjf
	.align	2
	.global	_ZNK12ImGuiStorage10GetVoidPtrEj
	.type	_ZNK12ImGuiStorage10GetVoidPtrEj, %function
_ZNK12ImGuiStorage10GetVoidPtrEj:
.LFB1642:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 40]
	cmp	x0, x1
	beq	.L952
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	beq	.L953
.L952:
	mov	w0, 1
	b	.L954
.L953:
	mov	w0, 0
.L954:
	cmp	w0, 0
	beq	.L955
	mov	x0, 0
	b	.L956
.L955:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
.L956:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1642:
	.size	_ZNK12ImGuiStorage10GetVoidPtrEj, .-_ZNK12ImGuiStorage10GetVoidPtrEj
	.align	2
	.global	_ZN12ImGuiStorage9GetIntRefEji
	.type	_ZN12ImGuiStorage9GetIntRefEji, %function
_ZN12ImGuiStorage9GetIntRefEji:
.LFB1643:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	w2, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 36]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 48]
	cmp	x0, x1
	beq	.L958
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L959
.L958:
	mov	w0, 1
	b	.L960
.L959:
	mov	w0, 0
.L960:
	cmp	w0, 0
	beq	.L961
	ldr	x19, [sp, 40]
	add	x0, sp, 56
	ldr	w2, [sp, 32]
	ldr	w1, [sp, 36]
	bl	_ZN12ImGuiStorage16ImGuiStoragePairC1Eji
	add	x0, sp, 56
	mov	x2, x0
	ldr	x1, [sp, 48]
	mov	x0, x19
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_
	str	x0, [sp, 48]
.L961:
	ldr	x0, [sp, 48]
	add	x0, x0, 8
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 72]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L963
	bl	__stack_chk_fail
.L963:
	mov	x0, x1
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1643:
	.size	_ZN12ImGuiStorage9GetIntRefEji, .-_ZN12ImGuiStorage9GetIntRefEji
	.align	2
	.global	_ZN12ImGuiStorage10GetBoolRefEjb
	.type	_ZN12ImGuiStorage10GetBoolRefEjb, %function
_ZN12ImGuiStorage10GetBoolRefEjb:
.LFB1644:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	strb	w2, [sp, 19]
	ldrb	w0, [sp, 19]
	cmp	w0, 0
	beq	.L965
	mov	w0, 1
	b	.L966
.L965:
	mov	w0, 0
.L966:
	mov	w2, w0
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZN12ImGuiStorage9GetIntRefEji
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1644:
	.size	_ZN12ImGuiStorage10GetBoolRefEjb, .-_ZN12ImGuiStorage10GetBoolRefEjb
	.align	2
	.global	_ZN12ImGuiStorage11GetFloatRefEjf
	.type	_ZN12ImGuiStorage11GetFloatRefEjf, %function
_ZN12ImGuiStorage11GetFloatRefEjf:
.LFB1645:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	s0, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 36]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 48]
	cmp	x0, x1
	beq	.L969
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L970
.L969:
	mov	w0, 1
	b	.L971
.L970:
	mov	w0, 0
.L971:
	cmp	w0, 0
	beq	.L972
	ldr	x19, [sp, 40]
	add	x0, sp, 56
	ldr	s0, [sp, 32]
	ldr	w1, [sp, 36]
	bl	_ZN12ImGuiStorage16ImGuiStoragePairC1Ejf
	add	x0, sp, 56
	mov	x2, x0
	ldr	x1, [sp, 48]
	mov	x0, x19
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_
	str	x0, [sp, 48]
.L972:
	ldr	x0, [sp, 48]
	add	x0, x0, 8
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 72]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L974
	bl	__stack_chk_fail
.L974:
	mov	x0, x1
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1645:
	.size	_ZN12ImGuiStorage11GetFloatRefEjf, .-_ZN12ImGuiStorage11GetFloatRefEjf
	.align	2
	.global	_ZN12ImGuiStorage13GetVoidPtrRefEjPv
	.type	_ZN12ImGuiStorage13GetVoidPtrRefEjPv, %function
_ZN12ImGuiStorage13GetVoidPtrRefEjPv:
.LFB1646:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	x0, [sp, 56]
	str	w1, [sp, 52]
	str	x2, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	x0, [sp, 56]
	ldr	w1, [sp, 52]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 64]
	ldr	x0, [sp, 56]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 64]
	cmp	x0, x1
	beq	.L976
	ldr	x0, [sp, 64]
	ldr	w0, [x0]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	beq	.L977
.L976:
	mov	w0, 1
	b	.L978
.L977:
	mov	w0, 0
.L978:
	cmp	w0, 0
	beq	.L979
	ldr	x19, [sp, 56]
	add	x0, sp, 72
	ldr	x2, [sp, 40]
	ldr	w1, [sp, 52]
	bl	_ZN12ImGuiStorage16ImGuiStoragePairC1EjPv
	add	x0, sp, 72
	mov	x2, x0
	ldr	x1, [sp, 64]
	mov	x0, x19
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_
	str	x0, [sp, 64]
.L979:
	ldr	x0, [sp, 64]
	add	x0, x0, 8
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 88]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L981
	bl	__stack_chk_fail
.L981:
	mov	x0, x1
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1646:
	.size	_ZN12ImGuiStorage13GetVoidPtrRefEjPv, .-_ZN12ImGuiStorage13GetVoidPtrRefEjPv
	.align	2
	.global	_ZN12ImGuiStorage6SetIntEji
	.type	_ZN12ImGuiStorage6SetIntEji, %function
_ZN12ImGuiStorage6SetIntEji:
.LFB1647:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	w2, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 36]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 48]
	cmp	x0, x1
	beq	.L983
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L984
.L983:
	mov	w0, 1
	b	.L985
.L984:
	mov	w0, 0
.L985:
	cmp	w0, 0
	beq	.L986
	ldr	x19, [sp, 40]
	add	x0, sp, 56
	ldr	w2, [sp, 32]
	ldr	w1, [sp, 36]
	bl	_ZN12ImGuiStorage16ImGuiStoragePairC1Eji
	add	x0, sp, 56
	mov	x2, x0
	ldr	x1, [sp, 48]
	mov	x0, x19
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_
	b	.L982
.L986:
	ldr	x0, [sp, 48]
	ldr	w1, [sp, 32]
	str	w1, [x0, 8]
.L982:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L988
	bl	__stack_chk_fail
.L988:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1647:
	.size	_ZN12ImGuiStorage6SetIntEji, .-_ZN12ImGuiStorage6SetIntEji
	.align	2
	.global	_ZN12ImGuiStorage7SetBoolEjb
	.type	_ZN12ImGuiStorage7SetBoolEjb, %function
_ZN12ImGuiStorage7SetBoolEjb:
.LFB1648:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	strb	w2, [sp, 19]
	ldrb	w0, [sp, 19]
	cmp	w0, 0
	beq	.L990
	mov	w0, 1
	b	.L991
.L990:
	mov	w0, 0
.L991:
	mov	w2, w0
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZN12ImGuiStorage6SetIntEji
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1648:
	.size	_ZN12ImGuiStorage7SetBoolEjb, .-_ZN12ImGuiStorage7SetBoolEjb
	.align	2
	.global	_ZN12ImGuiStorage8SetFloatEjf
	.type	_ZN12ImGuiStorage8SetFloatEjf, %function
_ZN12ImGuiStorage8SetFloatEjf:
.LFB1649:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	s0, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 36]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 48]
	cmp	x0, x1
	beq	.L993
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L994
.L993:
	mov	w0, 1
	b	.L995
.L994:
	mov	w0, 0
.L995:
	cmp	w0, 0
	beq	.L996
	ldr	x19, [sp, 40]
	add	x0, sp, 56
	ldr	s0, [sp, 32]
	ldr	w1, [sp, 36]
	bl	_ZN12ImGuiStorage16ImGuiStoragePairC1Ejf
	add	x0, sp, 56
	mov	x2, x0
	ldr	x1, [sp, 48]
	mov	x0, x19
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_
	b	.L992
.L996:
	ldr	x0, [sp, 48]
	ldr	s0, [sp, 32]
	str	s0, [x0, 8]
.L992:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L998
	bl	__stack_chk_fail
.L998:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1649:
	.size	_ZN12ImGuiStorage8SetFloatEjf, .-_ZN12ImGuiStorage8SetFloatEjf
	.align	2
	.global	_ZN12ImGuiStorage10SetVoidPtrEjPv
	.type	_ZN12ImGuiStorage10SetVoidPtrEjPv, %function
_ZN12ImGuiStorage10SetVoidPtrEjPv:
.LFB1650:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	x0, [sp, 56]
	str	w1, [sp, 52]
	str	x2, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	x0, [sp, 56]
	ldr	w1, [sp, 52]
	bl	_ZL10LowerBoundR8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEj
	str	x0, [sp, 64]
	ldr	x0, [sp, 56]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	mov	x1, x0
	ldr	x0, [sp, 64]
	cmp	x0, x1
	beq	.L1000
	ldr	x0, [sp, 64]
	ldr	w0, [x0]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	beq	.L1001
.L1000:
	mov	w0, 1
	b	.L1002
.L1001:
	mov	w0, 0
.L1002:
	cmp	w0, 0
	beq	.L1003
	ldr	x19, [sp, 56]
	add	x0, sp, 72
	ldr	x2, [sp, 40]
	ldr	w1, [sp, 52]
	bl	_ZN12ImGuiStorage16ImGuiStoragePairC1EjPv
	add	x0, sp, 72
	mov	x2, x0
	ldr	x1, [sp, 64]
	mov	x0, x19
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_
	b	.L999
.L1003:
	ldr	x0, [sp, 64]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
.L999:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1005
	bl	__stack_chk_fail
.L1005:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1650:
	.size	_ZN12ImGuiStorage10SetVoidPtrEjPv, .-_ZN12ImGuiStorage10SetVoidPtrEjPv
	.align	2
	.global	_ZN12ImGuiStorage9SetAllIntEi
	.type	_ZN12ImGuiStorage9SetAllIntEi, %function
_ZN12ImGuiStorage9SetAllIntEi:
.LFB1651:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	wzr, [sp, 60]
	b	.L1007
.L1008:
	ldr	w19, [sp, 36]
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi
	str	w19, [x0, 8]
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L1007:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	blt	.L1008
	nop
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1651:
	.size	_ZN12ImGuiStorage9SetAllIntEi, .-_ZN12ImGuiStorage9SetAllIntEi
	.align	2
	.global	_ZN15ImGuiTextFilterC2EPKc
	.type	_ZN15ImGuiTextFilterC2EPKc, %function
_ZN15ImGuiTextFilterC2EPKc:
.LFB1653:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1653
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	ldr	x0, [sp, 40]
	add	x0, x0, 256
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC1Ev
	ldr	x0, [sp, 40]
	strb	wzr, [x0]
	ldr	x0, [sp, 40]
	str	wzr, [x0, 272]
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L1013
	ldr	x0, [sp, 40]
	mov	x2, 256
	ldr	x1, [sp, 32]
	bl	_Z9ImStrncpyPcPKcm
	ldr	x0, [sp, 40]
.LEHB11:
	bl	_ZN15ImGuiTextFilter5BuildEv
.LEHE11:
	b	.L1013
.L1012:
	mov	x19, x0
	ldr	x0, [sp, 40]
	add	x0, x0, 256
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED1Ev
	mov	x0, x19
.LEHB12:
	bl	_Unwind_Resume
.LEHE12:
.L1013:
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1653:
	.section	.gcc_except_table,"a",@progbits
.LLSDA1653:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1653-.LLSDACSB1653
.LLSDACSB1653:
	.uleb128 .LEHB11-.LFB1653
	.uleb128 .LEHE11-.LEHB11
	.uleb128 .L1012-.LFB1653
	.uleb128 0
	.uleb128 .LEHB12-.LFB1653
	.uleb128 .LEHE12-.LEHB12
	.uleb128 0
	.uleb128 0
.LLSDACSE1653:
	.text
	.size	_ZN15ImGuiTextFilterC2EPKc, .-_ZN15ImGuiTextFilterC2EPKc
	.global	_ZN15ImGuiTextFilterC1EPKc
	.set	_ZN15ImGuiTextFilterC1EPKc,_ZN15ImGuiTextFilterC2EPKc
	.align	2
	.global	_ZN15ImGuiTextFilter4DrawEPKcf
	.type	_ZN15ImGuiTextFilter4DrawEPKcf, %function
_ZN15ImGuiTextFilter4DrawEPKcf:
.LFB1655:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	s0, [sp, 28]
	ldr	s0, [sp, 28]
	fcmp	s0, #0.0
	beq	.L1015
	ldr	s0, [sp, 28]
	bl	_ZN5ImGui16SetNextItemWidthEf
.L1015:
	ldr	x0, [sp, 40]
	mov	x5, 0
	mov	x4, 0
	mov	w3, 0
	mov	x2, 256
	mov	x1, x0
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui9InputTextEPKcPcmiPFiP26ImGuiInputTextCallbackDataEPv
	and	w0, w0, 255
	strb	w0, [sp, 63]
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L1016
	ldr	x0, [sp, 40]
	bl	_ZN15ImGuiTextFilter5BuildEv
.L1016:
	ldrb	w0, [sp, 63]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1655:
	.size	_ZN15ImGuiTextFilter4DrawEPKcf, .-_ZN15ImGuiTextFilter4DrawEPKcf
	.align	2
	.global	_ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E
	.type	_ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E, %function
_ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E:
.LFB1656:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -96
	str	x0, [sp, 56]
	strb	w1, [sp, 55]
	str	x2, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	mov	w1, 0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi
	ldr	x0, [sp, 56]
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	str	x0, [sp, 80]
	b	.L1019
.L1021:
	ldr	x0, [sp, 80]
	ldrb	w0, [x0]
	ldrb	w1, [sp, 55]
	cmp	w1, w0
	bne	.L1020
	ldr	x19, [sp, 40]
	add	x0, sp, 88
	ldr	x2, [sp, 80]
	ldr	x1, [sp, 72]
	bl	_ZN15ImGuiTextFilter14ImGuiTextRangeC1EPKcS2_
	add	x0, sp, 88
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_
	ldr	x0, [sp, 80]
	add	x0, x0, 1
	str	x0, [sp, 72]
.L1020:
	ldr	x0, [sp, 80]
	add	x0, x0, 1
	str	x0, [sp, 80]
.L1019:
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 80]
	cmp	x1, x0
	bcc	.L1021
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 80]
	cmp	x1, x0
	beq	.L1024
	ldr	x19, [sp, 40]
	add	x0, sp, 88
	ldr	x2, [sp, 80]
	ldr	x1, [sp, 72]
	bl	_ZN15ImGuiTextFilter14ImGuiTextRangeC1EPKcS2_
	add	x0, sp, 88
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_
.L1024:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1023
	bl	__stack_chk_fail
.L1023:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1656:
	.size	_ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E, .-_ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E
	.align	2
	.global	_ZN15ImGuiTextFilter5BuildEv
	.type	_ZN15ImGuiTextFilter5BuildEv, %function
_ZN15ImGuiTextFilter5BuildEv:
.LFB1657:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	x0, [sp, 40]
	add	x0, x0, 256
	mov	w1, 0
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi
	ldr	x20, [sp, 40]
	ldr	x19, [sp, 40]
	ldr	x0, [sp, 40]
	bl	strlen
	add	x1, x19, x0
	add	x0, sp, 72
	mov	x2, x1
	mov	x1, x20
	bl	_ZN15ImGuiTextFilter14ImGuiTextRangeC1EPKcS2_
	ldr	x0, [sp, 40]
	add	x1, x0, 256
	add	x0, sp, 72
	mov	x2, x1
	mov	w1, 44
	bl	_ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E
	ldr	x0, [sp, 40]
	str	wzr, [x0, 272]
	str	wzr, [sp, 60]
	b	.L1026
.L1037:
	ldr	x0, [sp, 40]
	add	x0, x0, 256
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi
	str	x0, [sp, 64]
	b	.L1027
.L1030:
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	add	x1, x0, 1
	ldr	x0, [sp, 64]
	str	x1, [x0]
.L1027:
	ldr	x0, [sp, 64]
	ldr	x1, [x0]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 8]
	cmp	x1, x0
	bcs	.L1028
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	ldrb	w0, [x0]
	bl	_ZL14ImCharIsBlankAc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1028
	mov	w0, 1
	b	.L1029
.L1028:
	mov	w0, 0
.L1029:
	cmp	w0, 0
	bne	.L1030
	b	.L1031
.L1034:
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 8]
	sub	x1, x0, #1
	ldr	x0, [sp, 64]
	str	x1, [x0, 8]
.L1031:
	ldr	x0, [sp, 64]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	cmp	x1, x0
	bls	.L1032
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 8]
	sub	x0, x0, #1
	ldrb	w0, [x0]
	bl	_ZL14ImCharIsBlankAc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1032
	mov	w0, 1
	b	.L1033
.L1032:
	mov	w0, 0
.L1033:
	cmp	w0, 0
	bne	.L1034
	ldr	x0, [sp, 64]
	bl	_ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1039
	ldr	x0, [sp, 40]
	add	x0, x0, 256
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi
	ldr	x0, [x0]
	ldrb	w0, [x0]
	cmp	w0, 45
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1036
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 272]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	str	w1, [x0, 272]
	b	.L1036
.L1039:
	nop
.L1036:
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L1026:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 256]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	bne	.L1037
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1038
	bl	__stack_chk_fail
.L1038:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1657:
	.size	_ZN15ImGuiTextFilter5BuildEv, .-_ZN15ImGuiTextFilter5BuildEv
	.section	.rodata
	.align	3
.LC67:
	.string	""
	.text
	.align	2
	.global	_ZNK15ImGuiTextFilter10PassFilterEPKcS1_
	.type	_ZNK15ImGuiTextFilter10PassFilterEPKcS1_, %function
_ZNK15ImGuiTextFilter10PassFilterEPKcS1_:
.LFB1658:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	add	x0, x0, 256
	bl	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1041
	mov	w0, 1
	b	.L1042
.L1041:
	ldr	x0, [sp, 32]
	cmp	x0, 0
	bne	.L1043
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
	str	x0, [sp, 32]
.L1043:
	str	wzr, [sp, 52]
	b	.L1044
.L1048:
	ldr	x0, [sp, 40]
	add	x0, x0, 256
	ldr	w1, [sp, 52]
	bl	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	bl	_ZNK15ImGuiTextFilter14ImGuiTextRange5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1050
	ldr	x0, [sp, 56]
	ldr	x0, [x0]
	ldrb	w0, [x0]
	cmp	w0, 45
	bne	.L1047
	ldr	x0, [sp, 56]
	ldr	x0, [x0]
	add	x1, x0, 1
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 8]
	mov	x3, x0
	mov	x2, x1
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 32]
	bl	_Z9ImStristrPKcS0_S0_S0_
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1046
	mov	w0, 0
	b	.L1042
.L1047:
	ldr	x0, [sp, 56]
	ldr	x1, [x0]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 8]
	mov	x3, x0
	mov	x2, x1
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 32]
	bl	_Z9ImStristrPKcS0_S0_S0_
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1046
	mov	w0, 1
	b	.L1042
.L1050:
	nop
.L1046:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L1044:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 256]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	bne	.L1048
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 272]
	cmp	w0, 0
	bne	.L1049
	mov	w0, 1
	b	.L1042
.L1049:
	mov	w0, 0
.L1042:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1658:
	.size	_ZNK15ImGuiTextFilter10PassFilterEPKcS1_, .-_ZNK15ImGuiTextFilter10PassFilterEPKcS1_
	.global	_ZN15ImGuiTextBuffer11EmptyStringE
	.bss
	.align	3
	.type	_ZN15ImGuiTextBuffer11EmptyStringE, %object
	.size	_ZN15ImGuiTextBuffer11EmptyStringE, 1
_ZN15ImGuiTextBuffer11EmptyStringE:
	.zero	1
	.text
	.align	2
	.global	_ZN15ImGuiTextBuffer6appendEPKcS1_
	.type	_ZN15ImGuiTextBuffer6appendEPKcS1_, %function
_ZN15ImGuiTextBuffer6appendEPKcS1_:
.LFB1659:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L1052
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 32]
	sub	x0, x1, x0
	b	.L1053
.L1052:
	ldr	x0, [sp, 32]
	bl	strlen
.L1053:
	str	w0, [sp, 60]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	cmp	w0, 0
	beq	.L1054
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	b	.L1055
.L1054:
	mov	w0, 1
.L1055:
	str	w0, [sp, 64]
	ldr	w1, [sp, 64]
	ldr	w0, [sp, 60]
	add	w0, w1, w0
	str	w0, [sp, 68]
	ldr	w1, [sp, 64]
	ldr	w0, [sp, 60]
	add	w1, w1, w0
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	blt	.L1056
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	lsl	w0, w0, 1
	str	w0, [sp, 56]
	ldr	x2, [sp, 40]
	ldr	w0, [sp, 56]
	ldr	w1, [sp, 68]
	cmp	w1, w0
	bgt	.L1057
	add	x0, sp, 56
	ldr	w0, [x0]
	b	.L1058
.L1057:
	ldr	w0, [sp, 68]
.L1058:
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIcE7reserveEi
.L1056:
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 68]
	bl	_ZN8ImVectorIcE6resizeEi
	ldr	x2, [sp, 40]
	ldr	w0, [sp, 64]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIcEixEi
	mov	x3, x0
	ldrsw	x0, [sp, 60]
	mov	x2, x0
	ldr	x1, [sp, 32]
	mov	x0, x3
	bl	memcpy
	ldr	x2, [sp, 40]
	ldr	w0, [sp, 64]
	sub	w1, w0, #1
	ldr	w0, [sp, 60]
	add	w0, w1, w0
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIcEixEi
	strb	wzr, [x0]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1059
	bl	__stack_chk_fail
.L1059:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1659:
	.size	_ZN15ImGuiTextBuffer6appendEPKcS1_, .-_ZN15ImGuiTextBuffer6appendEPKcS1_
	.align	2
	.global	_ZN15ImGuiTextBuffer7appendfEPKcz
	.type	_ZN15ImGuiTextBuffer7appendfEPKcz, %function
_ZN15ImGuiTextBuffer7appendfEPKcz:
.LFB1660:
	.cfi_startproc
	stp	x29, x30, [sp, -288]!
	.cfi_def_cfa_offset 288
	.cfi_offset 29, -288
	.cfi_offset 30, -280
	mov	x29, sp
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 240]
	str	x3, [sp, 248]
	str	x4, [sp, 256]
	str	x5, [sp, 264]
	str	x6, [sp, 272]
	str	x7, [sp, 280]
	str	q0, [sp, 112]
	str	q1, [sp, 128]
	str	q2, [sp, 144]
	str	q3, [sp, 160]
	str	q4, [sp, 176]
	str	q5, [sp, 192]
	str	q6, [sp, 208]
	str	q7, [sp, 224]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	add	x0, sp, 288
	str	x0, [sp, 72]
	add	x0, sp, 288
	str	x0, [sp, 80]
	add	x0, sp, 240
	str	x0, [sp, 88]
	mov	w0, -48
	str	w0, [sp, 96]
	mov	w0, -128
	str	w0, [sp, 100]
	add	x0, sp, 16
	add	x1, sp, 72
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 16
	mov	x2, x0
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 56]
	bl	_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1061
	bl	__stack_chk_fail
.L1061:
	ldp	x29, x30, [sp], 288
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1660:
	.size	_ZN15ImGuiTextBuffer7appendfEPKcz, .-_ZN15ImGuiTextBuffer7appendfEPKcz
	.align	2
	.global	_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list
	.type	_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list, %function
_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list:
.LFB1661:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -128
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	mov	x19, x2
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	add	x0, sp, 104
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x3, x0
	ldr	x2, [sp, 64]
	mov	x1, 0
	mov	x0, 0
	bl	_Z15ImFormatStringVPcmPKcSt9__va_list
	str	w0, [sp, 92]
	ldr	w0, [sp, 92]
	cmp	w0, 0
	ble	.L1071
	ldr	x0, [sp, 72]
	ldr	w0, [x0]
	cmp	w0, 0
	beq	.L1065
	ldr	x0, [sp, 72]
	ldr	w0, [x0]
	b	.L1066
.L1065:
	mov	w0, 1
.L1066:
	str	w0, [sp, 96]
	ldr	w1, [sp, 96]
	ldr	w0, [sp, 92]
	add	w0, w1, w0
	str	w0, [sp, 100]
	ldr	w1, [sp, 96]
	ldr	w0, [sp, 92]
	add	w1, w1, w0
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	blt	.L1067
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 4]
	lsl	w0, w0, 1
	str	w0, [sp, 88]
	ldr	x2, [sp, 72]
	ldr	w0, [sp, 88]
	ldr	w1, [sp, 100]
	cmp	w1, w0
	bgt	.L1068
	add	x0, sp, 88
	ldr	w0, [x0]
	b	.L1069
.L1068:
	ldr	w0, [sp, 100]
.L1069:
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIcE7reserveEi
.L1067:
	ldr	x0, [sp, 72]
	ldr	w1, [sp, 100]
	bl	_ZN8ImVectorIcE6resizeEi
	ldr	x2, [sp, 72]
	ldr	w0, [sp, 96]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIcEixEi
	mov	x5, x0
	ldrsw	x0, [sp, 92]
	add	x4, x0, 1
	add	x0, sp, 32
	add	x1, sp, 104
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x3, x0
	ldr	x2, [sp, 64]
	mov	x1, x4
	mov	x0, x5
	bl	_Z15ImFormatStringVPcmPKcSt9__va_list
	b	.L1062
.L1071:
	nop
.L1062:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1070
	bl	__stack_chk_fail
.L1070:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1661:
	.size	_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list, .-_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list
	.section	.rodata
	.align	3
.LC68:
	.string	"void ImGuiTextIndex::append(const char*, int, int)"
	.align	3
.LC69:
	.string	"old_size >= 0 && new_size >= old_size && new_size >= EndOffset"
	.text
	.align	2
	.global	_ZN14ImGuiTextIndex6appendEPKcii
	.type	_ZN14ImGuiTextIndex6appendEPKcii, %function
_ZN14ImGuiTextIndex6appendEPKcii:
.LFB1662:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	str	w3, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L1073
	ldr	w1, [sp, 24]
	ldr	w0, [sp, 28]
	cmp	w1, w0
	blt	.L1073
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 24]
	cmp	w1, w0
	bge	.L1082
.L1073:
	adrp	x0, .LC68
	add	x3, x0, :lo12:.LC68
	mov	w2, 2539
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC69
	add	x0, x0, :lo12:.LC69
	bl	__assert_fail
.L1082:
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 24]
	cmp	w1, w0
	beq	.L1083
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	cmp	w0, 0
	beq	.L1077
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	sxtw	x0, w0
	sub	x0, x0, #1
	ldr	x1, [sp, 32]
	add	x0, x1, x0
	ldrb	w0, [x0]
	cmp	w0, 10
	bne	.L1078
.L1077:
	ldr	x2, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIiE9push_backERKi
.L1078:
	ldrsw	x0, [sp, 24]
	ldr	x1, [sp, 32]
	add	x0, x1, x0
	str	x0, [sp, 64]
	ldrsw	x0, [sp, 28]
	ldr	x1, [sp, 32]
	add	x0, x1, x0
	str	x0, [sp, 56]
	b	.L1079
.L1080:
	ldr	x0, [sp, 56]
	add	x0, x0, 1
	str	x0, [sp, 56]
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 64]
	cmp	x1, x0
	cset	w0, cc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1079
	ldr	x2, [sp, 40]
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 32]
	sub	x0, x1, x0
	str	w0, [sp, 52]
	add	x0, sp, 52
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIiE9push_backERKi
.L1079:
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 56]
	sub	x0, x1, x0
	mov	x2, x0
	mov	w1, 10
	ldr	x0, [sp, 56]
	bl	memchr
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1080
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 24]
	bl	_Z5ImMaxIiET_S0_S0_
	mov	w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0, 16]
	b	.L1072
.L1083:
	nop
.L1072:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1081
	bl	__stack_chk_fail
.L1081:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1662:
	.size	_ZN14ImGuiTextIndex6appendEPKcii, .-_ZN14ImGuiTextIndex6appendEPKcii
	.align	2
	.type	_ZL26GetSkipItemForListClippingv, %function
_ZL26GetSkipItemForListClippingv:
.LFB1663:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 19152]
	cmp	x0, 0
	beq	.L1085
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 19152]
	ldrb	w0, [x0, 535]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	b	.L1086
.L1085:
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 16032]
	ldrb	w0, [x0, 155]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
.L1086:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1663:
	.size	_ZL26GetSkipItemForListClippingv, .-_ZL26GetSkipItemForListClippingv
	.align	2
	.global	_ZN5ImGui16CalcListClippingEifPiS0_
	.type	_ZN5ImGui16CalcListClippingEifPiS0_, %function
_ZN5ImGui16CalcListClippingEifPiS0_:
.LFB1664:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	w0, [sp, 44]
	str	s0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 80]
	ldr	x0, [sp, 72]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L1089
	ldr	x0, [sp, 32]
	str	wzr, [x0]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 44]
	str	w1, [x0]
	b	.L1088
.L1089:
	bl	_ZL26GetSkipItemForListClippingv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1091
	ldr	x0, [sp, 24]
	str	wzr, [x0]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 32]
	str	w1, [x0]
	b	.L1088
.L1091:
	ldr	x0, [sp, 80]
	add	x0, x0, 512
	ldp	x0, x1, [x0, 24]
	stp	x0, x1, [sp, 88]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2245]
	cmp	w0, 0
	beq	.L1092
	ldr	x1, [sp, 72]
	mov	x0, 18672
	add	x1, x1, x0
	add	x0, sp, 88
	bl	_ZN6ImRect3AddERKS_
.L1092:
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldr	w0, [x0, 2188]
	cmp	w0, 0
	beq	.L1093
	ldr	x0, [sp, 80]
	ldr	w1, [x0, 896]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldr	w0, [x0, 2188]
	cmp	w1, w0
	bne	.L1093
	ldr	x0, [sp, 80]
	add	x0, x0, 904
	mov	x1, x0
	ldr	x0, [sp, 80]
	bl	_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 104]
	str	s4, [sp, 108]
	str	s1, [sp, 112]
	str	s0, [sp, 116]
	add	x1, sp, 104
	add	x0, sp, 88
	bl	_ZN6ImRect3AddERKS_
.L1093:
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 224]
	str	x0, [sp, 104]
	ldr	s1, [sp, 92]
	ldr	s0, [sp, 108]
	fsub	s1, s1, s0
	ldr	s0, [sp, 40]
	fdiv	s0, s1, s0
	fcvtzs	s0, s0
	str	s0, [sp, 64]
	ldr	s1, [sp, 100]
	ldr	s0, [sp, 108]
	fsub	s1, s1, s0
	ldr	s0, [sp, 40]
	fdiv	s0, s1, s0
	fcvtzs	s0, s0
	str	s0, [sp, 68]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2245]
	cmp	w0, 0
	beq	.L1094
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L1094
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 18536]
	ldr	x1, [x0, 880]
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 880]
	cmp	x1, x0
	bne	.L1094
	mov	w0, 1
	b	.L1095
.L1094:
	mov	w0, 0
.L1095:
	strb	w0, [sp, 63]
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L1096
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldr	w0, [x0, 2268]
	cmp	w0, 2
	bne	.L1096
	ldr	w0, [sp, 64]
	sub	w0, w0, #1
	str	w0, [sp, 64]
.L1096:
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L1097
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldr	w0, [x0, 2268]
	cmp	w0, 3
	bne	.L1097
	ldr	w0, [sp, 68]
	add	w0, w0, 1
	str	w0, [sp, 68]
.L1097:
	ldr	w2, [sp, 44]
	mov	w1, 0
	ldr	w0, [sp, 64]
	bl	_Z7ImClampIiET_S0_S0_S0_
	str	w0, [sp, 64]
	ldr	w0, [sp, 68]
	add	w0, w0, 1
	ldr	w2, [sp, 44]
	ldr	w1, [sp, 64]
	bl	_Z7ImClampIiET_S0_S0_S0_
	str	w0, [sp, 68]
	ldr	x0, [sp, 32]
	ldr	w1, [sp, 64]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 68]
	str	w1, [x0]
.L1088:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1099
	bl	__stack_chk_fail
.L1099:
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1664:
	.size	_ZN5ImGui16CalcListClippingEifPiS0_, .-_ZN5ImGui16CalcListClippingEifPiS0_
	.section	.rodata
	.align	3
.LC70:
	.string	"void ImGuiListClipper_SortAndFuseRanges(ImVector<ImGuiListClipperRange>&, int)"
	.align	3
.LC71:
	.string	"!ranges[i].PosToIndexConvert && !ranges[i - 1].PosToIndexConvert"
	.text
	.align	2
	.type	_ZL34ImGuiListClipper_SortAndFuseRangesR8ImVectorI21ImGuiListClipperRangeEi, %function
_ZL34ImGuiListClipper_SortAndFuseRangesR8ImVectorI21ImGuiListClipperRangeEi:
.LFB1665:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldr	w0, [sp, 36]
	sub	w0, w1, w0
	cmp	w0, 1
	ble	.L1115
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldr	w0, [sp, 36]
	sub	w0, w1, w0
	sub	w0, w0, #1
	str	w0, [sp, 52]
	b	.L1103
.L1107:
	ldr	w0, [sp, 36]
	str	w0, [sp, 56]
	b	.L1104
.L1106:
	ldr	w1, [sp, 56]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w19, [x0]
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w0, [x0]
	cmp	w19, w0
	cset	w0, gt
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1105
	ldr	w1, [sp, 56]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	mov	x19, x0
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	mov	x1, x0
	mov	x0, x19
	bl	_Z6ImSwapI21ImGuiListClipperRangeEvRT_S2_
.L1105:
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	str	w0, [sp, 56]
.L1104:
	ldr	w1, [sp, 52]
	ldr	w0, [sp, 36]
	add	w0, w1, w0
	ldr	w1, [sp, 56]
	cmp	w1, w0
	blt	.L1106
	ldr	w0, [sp, 52]
	sub	w0, w0, #1
	str	w0, [sp, 52]
.L1103:
	ldr	w0, [sp, 52]
	cmp	w0, 0
	bgt	.L1107
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 60]
	b	.L1108
.L1113:
	ldr	w1, [sp, 60]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldrb	w0, [x0, 8]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1109
	ldr	w0, [sp, 60]
	sub	w0, w0, #1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldrb	w0, [x0, 8]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1114
.L1109:
	adrp	x0, .LC70
	add	x3, x0, :lo12:.LC70
	mov	w2, 2627
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC71
	add	x0, x0, :lo12:.LC71
	bl	__assert_fail
.L1114:
	ldr	w0, [sp, 60]
	sub	w0, w0, #1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w19, [x0, 4]
	ldr	w1, [sp, 60]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w0, [x0]
	cmp	w19, w0
	cset	w0, lt
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1116
	ldr	w0, [sp, 60]
	sub	w0, w0, #1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w19, [x0]
	ldr	w1, [sp, 60]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w0, [x0]
	mov	w1, w0
	mov	w0, w19
	bl	_Z5ImMinIiET_S0_S0_
	mov	w19, w0
	ldr	w0, [sp, 60]
	sub	w0, w0, #1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	str	w19, [x0]
	ldr	w0, [sp, 60]
	sub	w0, w0, #1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w19, [x0, 4]
	ldr	w1, [sp, 60]
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w0, [x0, 4]
	mov	w1, w0
	mov	w0, w19
	bl	_Z5ImMaxIiET_S0_S0_
	mov	w19, w0
	ldr	w0, [sp, 60]
	sub	w0, w0, #1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	str	w19, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 60]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	mov	x1, x0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE5eraseEPKS0_
	ldr	w0, [sp, 60]
	sub	w0, w0, #1
	str	w0, [sp, 60]
	b	.L1112
.L1116:
	nop
.L1112:
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L1108:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	blt	.L1113
	b	.L1100
.L1115:
	nop
.L1100:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1665:
	.size	_ZL34ImGuiListClipper_SortAndFuseRangesR8ImVectorI21ImGuiListClipperRangeEi, .-_ZL34ImGuiListClipper_SortAndFuseRangesR8ImVectorI21ImGuiListClipperRangeEi
	.align	2
	.type	_ZL43ImGuiListClipper_SeekCursorAndSetupPrevLineff, %function
_ZL43ImGuiListClipper_SeekCursorAndSetupPrevLineff:
.LFB1666:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	s0, [sp, 28]
	str	s1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 228]
	ldr	s1, [sp, 28]
	fsub	s0, s1, s0
	str	s0, [sp, 40]
	ldr	x0, [sp, 56]
	ldr	s0, [sp, 28]
	str	s0, [x0, 228]
	ldr	x0, [sp, 56]
	ldr	s2, [x0, 252]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 14384]
	ldr	s1, [sp, 28]
	fsub	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 56]
	str	s0, [x0, 252]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 228]
	ldr	s0, [sp, 24]
	fsub	s0, s1, s0
	ldr	x0, [sp, 56]
	str	s0, [x0, 236]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 14384]
	ldr	s1, [sp, 24]
	fsub	s0, s1, s0
	ldr	x0, [sp, 56]
	str	s0, [x0, 276]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 392]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L1118
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 228]
	ldr	x0, [sp, 64]
	str	s0, [x0, 28]
.L1118:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 19152]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	cmp	x0, 0
	beq	.L1121
	ldr	x0, [sp, 72]
	ldrb	w0, [x0, 522]
	cmp	w0, 0
	beq	.L1120
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui11TableEndRowEP10ImGuiTable
.L1120:
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 228]
	ldr	x0, [sp, 72]
	str	s0, [x0, 136]
	ldr	s0, [sp, 24]
	ldr	s1, [sp, 40]
	fdiv	s1, s1, s0
	fmov	s0, 5.0e-1
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	str	s0, [sp, 44]
	ldr	x0, [sp, 72]
	ldr	w1, [x0, 156]
	ldr	w0, [sp, 44]
	add	w1, w1, w0
	ldr	x0, [sp, 72]
	str	w1, [x0, 156]
.L1121:
	nop
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1666:
	.size	_ZL43ImGuiListClipper_SeekCursorAndSetupPrevLineff, .-_ZL43ImGuiListClipper_SeekCursorAndSetupPrevLineff
	.align	2
	.type	_ZL34ImGuiListClipper_SeekCursorForItemP16ImGuiListClipperi, %function
_ZL34ImGuiListClipper_SeekCursorForItemP16ImGuiListClipperi:
.LFB1667:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 24]
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 16]
	fcvt	d1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 8]
	fcvt	d0, s0
	fadd	d1, d1, d0
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 20]
	sub	w0, w1, w0
	scvtf	d2, w0
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 12]
	fcvt	d0, s0
	fmul	d0, d2, d0
	fadd	d0, d1, d0
	fcvt	s0, d0
	str	s0, [sp, 36]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 12]
	fmov	s1, s0
	ldr	s0, [sp, 36]
	bl	_ZL43ImGuiListClipper_SeekCursorAndSetupPrevLineff
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1667:
	.size	_ZL34ImGuiListClipper_SeekCursorForItemP16ImGuiListClipperi, .-_ZL34ImGuiListClipper_SeekCursorForItemP16ImGuiListClipperi
	.align	2
	.global	_ZN16ImGuiListClipperC2Ev
	.type	_ZN16ImGuiListClipperC2Ev, %function
_ZN16ImGuiListClipperC2Ev:
.LFB1669:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	mov	x2, 32
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	memset
	ldr	x0, [sp, 24]
	mov	w1, -1
	str	w1, [x0, 8]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1669:
	.size	_ZN16ImGuiListClipperC2Ev, .-_ZN16ImGuiListClipperC2Ev
	.global	_ZN16ImGuiListClipperC1Ev
	.set	_ZN16ImGuiListClipperC1Ev,_ZN16ImGuiListClipperC2Ev
	.align	2
	.global	_ZN16ImGuiListClipperD2Ev
	.type	_ZN16ImGuiListClipperD2Ev, %function
_ZN16ImGuiListClipperD2Ev:
.LFB1672:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1672
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN16ImGuiListClipper3EndEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1672:
	.section	.gcc_except_table
.LLSDA1672:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1672-.LLSDACSB1672
.LLSDACSB1672:
.LLSDACSE1672:
	.text
	.size	_ZN16ImGuiListClipperD2Ev, .-_ZN16ImGuiListClipperD2Ev
	.global	_ZN16ImGuiListClipperD1Ev
	.set	_ZN16ImGuiListClipperD1Ev,_ZN16ImGuiListClipperD2Ev
	.section	.text._ZN20ImGuiListClipperDataD2Ev,"axG",@progbits,_ZN20ImGuiListClipperDataD5Ev,comdat
	.align	2
	.weak	_ZN20ImGuiListClipperDataD2Ev
	.type	_ZN20ImGuiListClipperDataD2Ev, %function
_ZN20ImGuiListClipperDataD2Ev:
.LFB1676:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	bl	_ZN8ImVectorI21ImGuiListClipperRangeED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1676:
	.size	_ZN20ImGuiListClipperDataD2Ev, .-_ZN20ImGuiListClipperDataD2Ev
	.weak	_ZN20ImGuiListClipperDataD1Ev
	.set	_ZN20ImGuiListClipperDataD1Ev,_ZN20ImGuiListClipperDataD2Ev
	.section	.rodata
	.align	3
.LC72:
	.string	"Clipper: Begin(%d,%.2f) in '%s'\n"
	.text
	.align	2
	.global	_ZN16ImGuiListClipper5BeginEif
	.type	_ZN16ImGuiListClipper5BeginEif, %function
_ZN16ImGuiListClipper5BeginEif:
.LFB1674:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1674
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -112
	.cfi_offset 20, -104
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	s0, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1127
	ldr	s0, [sp, 32]
	fcvt	d0, s0
	ldr	x0, [sp, 56]
	ldr	x0, [x0]
	mov	x2, x0
	ldr	w1, [sp, 36]
	adrp	x0, .LC72
	add	x0, x0, :lo12:.LC72
.LEHB13:
	bl	_ZN5ImGui8DebugLogEPKcz
.L1127:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 19152]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L1128
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 522]
	cmp	w0, 0
	beq	.L1128
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui11TableEndRowEP10ImGuiTable
.LEHE13:
.L1128:
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 228]
	ldr	x0, [sp, 40]
	str	s0, [x0, 16]
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 32]
	str	s0, [x0, 12]
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 36]
	str	w1, [x0, 8]
	ldr	x0, [sp, 40]
	mov	w1, -1
	str	w1, [x0]
	ldr	x0, [sp, 40]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2744]
	add	w1, w0, 1
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 2744]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 2744]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2752]
	cmp	w1, w0
	cset	w0, gt
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1129
	ldr	x1, [sp, 48]
	mov	x0, 19136
	add	x19, x1, x0
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w20, [x0, 2744]
	add	x0, sp, 80
	bl	_ZN20ImGuiListClipperDataC1Ev
	add	x0, sp, 80
	mov	x2, x0
	mov	w1, w20
	mov	x0, x19
.LEHB14:
	bl	_ZN8ImVectorI20ImGuiListClipperDataE6resizeEiRKS0_
.LEHE14:
	add	x0, sp, 80
	bl	_ZN20ImGuiListClipperDataD1Ev
.L1129:
	ldr	x1, [sp, 48]
	mov	x0, 19136
	add	x2, x1, x0
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2744]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI20ImGuiListClipperDataEixEi
	str	x0, [sp, 72]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 72]
.LEHB15:
	bl	_ZN20ImGuiListClipperData5ResetEP16ImGuiListClipper
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 308]
	ldr	x0, [sp, 72]
	str	s0, [x0, 8]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 72]
	str	x1, [x0, 24]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1131
	b	.L1133
.L1132:
	mov	x19, x0
	add	x0, sp, 80
	bl	_ZN20ImGuiListClipperDataD1Ev
	mov	x0, x19
	bl	_Unwind_Resume
.LEHE15:
.L1133:
	bl	__stack_chk_fail
.L1131:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1674:
	.section	.gcc_except_table
.LLSDA1674:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1674-.LLSDACSB1674
.LLSDACSB1674:
	.uleb128 .LEHB13-.LFB1674
	.uleb128 .LEHE13-.LEHB13
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB14-.LFB1674
	.uleb128 .LEHE14-.LEHB14
	.uleb128 .L1132-.LFB1674
	.uleb128 0
	.uleb128 .LEHB15-.LFB1674
	.uleb128 .LEHE15-.LEHB15
	.uleb128 0
	.uleb128 0
.LLSDACSE1674:
	.text
	.size	_ZN16ImGuiListClipper5BeginEif, .-_ZN16ImGuiListClipper5BeginEif
	.section	.rodata
	.align	3
.LC73:
	.string	"Clipper: End() in '%s'\n"
	.align	3
.LC74:
	.string	"void ImGuiListClipper::End()"
	.align	3
.LC75:
	.string	"data->ListClipper == this"
	.text
	.align	2
	.global	_ZN16ImGuiListClipper3EndEv
	.type	_ZN16ImGuiListClipper3EndEv, %function
_ZN16ImGuiListClipper3EndEv:
.LFB1678:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 24]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L1135
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1136
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	ldr	x0, [x0]
	mov	x1, x0
	adrp	x0, .LC73
	add	x0, x0, :lo12:.LC73
	bl	_ZN5ImGui8DebugLogEPKcz
.L1136:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 8]
	cmp	w0, 0
	blt	.L1137
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 8]
	mov	w0, 2147483647
	cmp	w1, w0
	beq	.L1137
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	blt	.L1137
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 8]
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZL34ImGuiListClipper_SeekCursorForItemP16ImGuiListClipperi
.L1137:
	ldr	x0, [sp, 40]
	ldr	x0, [x0]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L1138
	adrp	x0, .LC74
	add	x3, x0, :lo12:.LC74
	mov	w2, 2718
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC75
	add	x0, x0, :lo12:.LC75
	bl	__assert_fail
.L1138:
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 24]
	ldr	x0, [sp, 40]
	str	w1, [x0, 12]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2744]
	sub	w1, w0, #1
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2744]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2744]
	cmp	w0, 0
	cset	w0, gt
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1139
	ldr	x1, [sp, 32]
	mov	x0, 19136
	add	x2, x1, x0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2744]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI20ImGuiListClipperDataEixEi
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0]
	ldr	x1, [sp, 40]
	str	x1, [x0, 24]
.L1139:
	ldr	x0, [sp, 24]
	str	xzr, [x0, 24]
.L1135:
	ldr	x0, [sp, 24]
	mov	w1, -1
	str	w1, [x0, 8]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1678:
	.size	_ZN16ImGuiListClipper3EndEv, .-_ZN16ImGuiListClipper3EndEv
	.section	.rodata
	.align	3
.LC76:
	.string	"void ImGuiListClipper::ForceDisplayRangeByIndices(int, int)"
	.align	3
.LC77:
	.string	"DisplayStart < 0"
	.align	3
.LC78:
	.string	"item_min <= item_max"
	.text
	.align	2
	.global	_ZN16ImGuiListClipper26ForceDisplayRangeByIndicesEii
	.type	_ZN16ImGuiListClipper26ForceDisplayRangeByIndicesEii, %function
_ZN16ImGuiListClipper26ForceDisplayRangeByIndicesEii:
.LFB1679:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	w2, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 24]
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	cmp	w0, 0
	blt	.L1141
	adrp	x0, .LC76
	add	x3, x0, :lo12:.LC76
	mov	w2, 2733
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC77
	add	x0, x0, :lo12:.LC77
	bl	__assert_fail
.L1141:
	ldr	w1, [sp, 36]
	ldr	w0, [sp, 32]
	cmp	w1, w0
	ble	.L1142
	adrp	x0, .LC76
	add	x3, x0, :lo12:.LC76
	mov	w2, 2734
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC78
	add	x0, x0, :lo12:.LC78
	bl	__assert_fail
.L1142:
	ldr	w1, [sp, 36]
	ldr	w0, [sp, 32]
	cmp	w1, w0
	bge	.L1145
	ldr	x0, [sp, 48]
	add	x19, x0, 24
	ldr	w1, [sp, 32]
	ldr	w0, [sp, 36]
	bl	_ZN21ImGuiListClipperRange11FromIndicesEii
	mov	w2, w0
	str	w2, [sp, 56]
	lsr	x2, x0, 32
	str	w2, [sp, 60]
	mov	w0, w1
	str	w0, [sp, 64]
	add	x0, sp, 56
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
.L1145:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1144
	bl	__stack_chk_fail
.L1144:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1679:
	.size	_ZN16ImGuiListClipper26ForceDisplayRangeByIndicesEii, .-_ZN16ImGuiListClipper26ForceDisplayRangeByIndicesEii
	.section	.rodata
	.align	3
.LC79:
	.string	"bool ImGuiListClipper_StepInternal(ImGuiListClipper*)"
	.align	3
.LC80:
	.string	"data != __null && \"Called ImGuiListClipper::Step() too many times, or before ImGuiListClipper::Begin() ?\""
	.align	3
.LC81:
	.string	"data->StepNo == 1"
	.align	3
.LC82:
	.string	"table->RowPosY1 == clipper->StartPosY && table->RowPosY2 == window->DC.CursorPos.y"
	.align	3
.LC83:
	.string	"clipper->ItemsHeight > 0.0f && \"Unable to calculate item height! First item hasn't moved the cursor vertically!\""
	.text
	.align	2
	.type	_ZL29ImGuiListClipper_StepInternalP16ImGuiListClipper, %function
_ZL29ImGuiListClipper_StepInternalP16ImGuiListClipper:
.LFB1680:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -144
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 96]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 24]
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	cmp	x0, 0
	bne	.L1147
	adrp	x0, .LC79
	add	x3, x0, :lo12:.LC79
	mov	w2, 2744
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC80
	add	x0, x0, :lo12:.LC80
	bl	__assert_fail
.L1147:
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 19152]
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L1148
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 522]
	cmp	w0, 0
	beq	.L1148
	ldr	x0, [sp, 112]
	bl	_ZN5ImGui11TableEndRowEP10ImGuiTable
.L1148:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	cmp	w0, 0
	beq	.L1149
	bl	_ZL26GetSkipItemForListClippingv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1150
.L1149:
	mov	w0, 1
	b	.L1151
.L1150:
	mov	w0, 0
.L1151:
	cmp	w0, 0
	beq	.L1152
	mov	w0, 0
	b	.L1153
.L1152:
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 12]
	cmp	w0, 0
	bne	.L1154
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L1154
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 532]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1154
	ldr	x0, [sp, 104]
	ldr	w1, [x0, 16]
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 16]
	add	w2, w0, 1
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	mov	w1, w0
	mov	w0, w2
	bl	_Z5ImMinIiET_S0_S0_
	mov	w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bge	.L1155
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 16]
	add	w1, w0, 1
	ldr	x0, [sp, 104]
	str	w1, [x0, 16]
.L1155:
	mov	w0, 1
	b	.L1153
.L1154:
	strb	wzr, [sp, 61]
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 12]
	cmp	w0, 0
	bne	.L1156
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 228]
	ldr	x0, [sp, 40]
	str	s0, [x0, 16]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 12]
	fcmpe	s0, #0.0
	bls	.L1189
	b	.L1191
.L1189:
	ldr	x0, [sp, 104]
	add	x19, x0, 24
	ldr	x0, [sp, 104]
	ldr	w2, [x0, 16]
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 16]
	add	w0, w0, 1
	mov	w1, w0
	mov	w0, w2
	bl	_ZN21ImGuiListClipperRange11FromIndicesEii
	mov	w2, w0
	str	w2, [sp, 136]
	lsr	x2, x0, 32
	str	w2, [sp, 140]
	mov	w0, w1
	str	w0, [sp, 144]
	add	x0, sp, 136
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE10push_frontERKS0_
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	mov	w1, 0
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w2, [x0]
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 16]
	mov	w1, w0
	mov	w0, w2
	bl	_Z5ImMaxIiET_S0_S0_
	mov	w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	mov	w1, 0
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w2, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	mov	w1, w0
	mov	w0, w2
	bl	_Z5ImMinIiET_S0_S0_
	mov	w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0, 4]
	ldr	x0, [sp, 104]
	mov	w1, 1
	str	w1, [x0, 12]
	mov	w0, 1
	b	.L1153
.L1191:
	mov	w0, 1
	strb	w0, [sp, 61]
.L1156:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 12]
	fcmpe	s0, #0.0
	bls	.L1190
	b	.L1159
.L1190:
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 12]
	cmp	w0, 1
	beq	.L1161
	adrp	x0, .LC79
	add	x3, x0, :lo12:.LC79
	mov	w2, 2785
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC81
	add	x0, x0, :lo12:.LC81
	bl	__assert_fail
.L1161:
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L1162
	ldr	x0, [sp, 112]
	ldr	s1, [x0, 132]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 16]
	fcmp	s1, s0
	bne	.L1163
	ldr	x0, [sp, 112]
	ldr	s1, [x0, 136]
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 228]
	fcmp	s1, s0
	beq	.L1162
.L1163:
	adrp	x0, .LC79
	add	x3, x0, :lo12:.LC79
	mov	w2, 2787
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC82
	add	x0, x0, :lo12:.LC82
	bl	__assert_fail
.L1162:
	ldr	x0, [sp, 96]
	ldr	s1, [x0, 228]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 16]
	fsub	s1, s1, s0
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sub	w0, w1, w0
	scvtf	s0, w0
	fdiv	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 12]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 16]
	bl	_ZL40ImIsFloatAboveGuaranteedIntegerPrecisionf
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1165
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 228]
	bl	_ZL40ImIsFloatAboveGuaranteedIntegerPrecisionf
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1166
.L1165:
	mov	w0, 1
	b	.L1167
.L1166:
	mov	w0, 0
.L1167:
	strb	w0, [sp, 62]
	ldrb	w0, [sp, 62]
	cmp	w0, 0
	beq	.L1168
	ldr	x0, [sp, 96]
	ldr	s1, [x0, 276]
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 14384]
	fadd	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 12]
.L1168:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 12]
	fcmpe	s0, #0.0
	bgt	.L1169
	adrp	x0, .LC79
	add	x3, x0, :lo12:.LC79
	mov	w2, 2794
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC83
	add	x0, x0, :lo12:.LC83
	bl	__assert_fail
.L1169:
	mov	w0, 1
	strb	w0, [sp, 61]
.L1159:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	str	w0, [sp, 68]
	ldrb	w0, [sp, 61]
	cmp	w0, 0
	beq	.L1170
	ldr	x0, [sp, 88]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L1171
	ldr	x0, [sp, 104]
	add	x19, x0, 24
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	mov	w1, w0
	mov	w0, 0
	bl	_ZN21ImGuiListClipperRange11FromIndicesEii
	mov	w2, w0
	str	w2, [sp, 136]
	lsr	x2, x0, 32
	str	w2, [sp, 140]
	mov	w0, w1
	str	w0, [sp, 144]
	add	x0, sp, 136
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
	b	.L1172
.L1171:
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2245]
	cmp	w0, 0
	beq	.L1173
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L1173
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 18536]
	ldr	x1, [x0, 880]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 880]
	cmp	x1, x0
	bne	.L1173
	mov	w0, 1
	b	.L1174
.L1173:
	mov	w0, 0
.L1174:
	strb	w0, [sp, 63]
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L1175
	ldr	x0, [sp, 104]
	add	x19, x0, 24
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	s0, [x0, 2292]
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	s1, [x0, 2300]
	mov	w1, 0
	mov	w0, 0
	bl	_ZN21ImGuiListClipperRange13FromPositionsEffii
	mov	w2, w0
	str	w2, [sp, 136]
	lsr	x2, x0, 32
	str	w2, [sp, 140]
	mov	w0, w1
	str	w0, [sp, 144]
	add	x0, sp, 136
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
.L1175:
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L1176
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L1176
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 2308]
	cmn	w0, #1
	bne	.L1176
	ldr	x0, [sp, 104]
	add	x19, x0, 24
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	sub	w2, w0, #1
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	mov	w1, w0
	mov	w0, w2
	bl	_ZN21ImGuiListClipperRange11FromIndicesEii
	mov	w2, w0
	str	w2, [sp, 136]
	lsr	x2, x0, 32
	str	w2, [sp, 140]
	mov	w0, w1
	str	w0, [sp, 144]
	add	x0, sp, 136
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
.L1176:
	ldr	x0, [sp, 96]
	add	x0, x0, 904
	mov	x1, x0
	ldr	x0, [sp, 96]
	bl	_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 136]
	str	s4, [sp, 140]
	str	s1, [sp, 144]
	str	s0, [sp, 148]
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w0, 0
	beq	.L1177
	ldr	x0, [sp, 96]
	ldr	w1, [x0, 896]
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w1, w0
	bne	.L1177
	ldr	x0, [sp, 104]
	add	x19, x0, 24
	ldr	s0, [sp, 140]
	ldr	s1, [sp, 148]
	mov	w1, 0
	mov	w0, 0
	bl	_ZN21ImGuiListClipperRange13FromPositionsEffii
	mov	w2, w0
	str	w2, [sp, 120]
	lsr	x2, x0, 32
	str	w2, [sp, 124]
	mov	w0, w1
	str	w0, [sp, 128]
	add	x0, sp, 120
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
.L1177:
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L1178
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 2268]
	cmp	w0, 2
	bne	.L1178
	mov	w0, -1
	b	.L1179
.L1178:
	mov	w0, 0
.L1179:
	str	w0, [sp, 72]
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L1180
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 2268]
	cmp	w0, 3
	bne	.L1180
	mov	w0, 1
	b	.L1181
.L1180:
	mov	w0, 0
.L1181:
	str	w0, [sp, 76]
	ldr	x0, [sp, 104]
	add	x19, x0, 24
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 540]
	ldr	x0, [sp, 96]
	ldr	s1, [x0, 548]
	ldr	w1, [sp, 76]
	ldr	w0, [sp, 72]
	bl	_ZN21ImGuiListClipperRange13FromPositionsEffii
	mov	w2, w0
	str	w2, [sp, 120]
	lsr	x2, x0, 32
	str	w2, [sp, 124]
	mov	w0, w1
	str	w0, [sp, 128]
	add	x0, sp, 120
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
.L1172:
	str	wzr, [sp, 64]
	b	.L1182
.L1184:
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldrb	w0, [x0, 8]
	cmp	w0, 0
	beq	.L1183
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w0, [x0]
	scvtf	d1, w0
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 228]
	fcvt	d0, s0
	fsub	d1, d1, d0
	ldr	x0, [sp, 104]
	ldr	s0, [x0, 8]
	fcvt	d0, s0
	fsub	d1, d1, d0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 12]
	fcvt	d0, s0
	fdiv	d0, d1, d0
	fcvtzs	w0, d0
	str	w0, [sp, 80]
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w0, [x0, 4]
	scvtf	d1, w0
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 228]
	fcvt	d0, s0
	fsub	d1, d1, d0
	ldr	x0, [sp, 104]
	ldr	s0, [x0, 8]
	fcvt	d0, s0
	fsub	d1, d1, d0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 12]
	fcvt	d0, s0
	fdiv	d0, d1, d0
	adrp	x0, .LC84
	ldr	d1, [x0, #:lo12:.LC84]
	fadd	d0, d0, d1
	fcvtzs	w0, d0
	str	w0, [sp, 84]
	ldr	w1, [sp, 68]
	ldr	w0, [sp, 80]
	add	w19, w1, w0
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldrsb	w0, [x0, 9]
	add	w3, w19, w0
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	sub	w0, w0, #1
	mov	w2, w0
	ldr	w1, [sp, 68]
	mov	w0, w3
	bl	_Z7ImClampIiET_S0_S0_S0_
	mov	w19, w0
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	str	w19, [x0]
	ldr	w1, [sp, 68]
	ldr	w0, [sp, 84]
	add	w19, w1, w0
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldrsb	w0, [x0, 10]
	add	w19, w19, w0
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	mov	w2, w0
	mov	w0, w19
	bl	_Z7ImClampIiET_S0_S0_S0_
	mov	w19, w0
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	str	w19, [x0, 4]
	ldr	x0, [sp, 104]
	add	x0, x0, 24
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	strb	wzr, [x0, 8]
.L1183:
	ldr	w0, [sp, 64]
	add	w0, w0, 1
	str	w0, [sp, 64]
.L1182:
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 24]
	ldr	w1, [sp, 64]
	cmp	w1, w0
	blt	.L1184
	ldr	x0, [sp, 104]
	add	x2, x0, 24
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 12]
	mov	w1, w0
	mov	x0, x2
	bl	_ZL34ImGuiListClipper_SortAndFuseRangesR8ImVectorI21ImGuiListClipperRangeEi
.L1170:
	ldr	x0, [sp, 104]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 24]
	cmp	w1, w0
	bge	.L1185
	ldr	x0, [sp, 104]
	add	x2, x0, 24
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 12]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w0, [x0]
	ldr	w1, [sp, 68]
	bl	_Z5ImMaxIiET_S0_S0_
	mov	w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 104]
	add	x2, x0, 24
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 12]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	ldr	w2, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	mov	w1, w0
	mov	w0, w2
	bl	_Z5ImMinIiET_S0_S0_
	mov	w1, w0
	ldr	x0, [sp, 40]
	str	w1, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 68]
	cmp	w1, w0
	bge	.L1186
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZL34ImGuiListClipper_SeekCursorForItemP16ImGuiListClipperi
.L1186:
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 12]
	add	w1, w0, 1
	ldr	x0, [sp, 104]
	str	w1, [x0, 12]
	mov	w0, 1
	b	.L1153
.L1185:
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 8]
	mov	w0, 2147483647
	cmp	w1, w0
	beq	.L1187
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZL34ImGuiListClipper_SeekCursorForItemP16ImGuiListClipperi
.L1187:
	mov	w0, 0
.L1153:
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 152]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L1188
	bl	__stack_chk_fail
.L1188:
	mov	w0, w1
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1680:
	.size	_ZL29ImGuiListClipper_StepInternalP16ImGuiListClipper, .-_ZL29ImGuiListClipper_StepInternalP16ImGuiListClipper
	.section	.rodata
	.align	3
.LC85:
	.string	"Clipper: Step(): inside frozen table row.\n"
	.align	3
.LC86:
	.string	"Clipper: Step(): computed ItemsHeight: %.2f.\n"
	.align	3
.LC87:
	.string	"Clipper: Step(): display %d to %d.\n"
	.align	3
.LC88:
	.string	"Clipper: Step(): End.\n"
	.text
	.align	2
	.global	_ZN16ImGuiListClipper4StepEv
	.type	_ZN16ImGuiListClipper4StepEv, %function
_ZN16ImGuiListClipper4StepEv:
.LFB1681:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 12]
	fcmpe	s0, #0.0
	cset	w0, ls
	strb	w0, [sp, 39]
	ldr	x0, [sp, 24]
	bl	_ZL29ImGuiListClipper_StepInternalP16ImGuiListClipper
	and	w0, w0, 255
	strb	w0, [sp, 38]
	ldrb	w0, [sp, 38]
	cmp	w0, 0
	beq	.L1193
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L1193
	strb	wzr, [sp, 38]
.L1193:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 19152]
	cmp	x0, 0
	beq	.L1194
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 19152]
	ldrb	w0, [x0, 532]
	cmp	w0, 0
	bne	.L1194
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1194
	adrp	x0, .LC85
	add	x0, x0, :lo12:.LC85
	bl	_ZN5ImGui8DebugLogEPKcz
.L1194:
	ldrb	w0, [sp, 39]
	cmp	w0, 0
	beq	.L1195
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 12]
	fcmpe	s0, #0.0
	bgt	.L1201
	b	.L1195
.L1201:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1195
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 12]
	fcvt	d0, s0
	adrp	x0, .LC86
	add	x0, x0, :lo12:.LC86
	bl	_ZN5ImGui8DebugLogEPKcz
.L1195:
	ldrb	w0, [sp, 38]
	cmp	w0, 0
	beq	.L1197
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1198
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	mov	w2, w0
	adrp	x0, .LC87
	add	x0, x0, :lo12:.LC87
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L1198
.L1197:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1198
	adrp	x0, .LC88
	add	x0, x0, :lo12:.LC88
	bl	_ZN5ImGui8DebugLogEPKcz
.L1198:
	ldrb	w0, [sp, 38]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1199
	ldr	x0, [sp, 24]
	bl	_ZN16ImGuiListClipper3EndEv
.L1199:
	ldrb	w0, [sp, 38]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1681:
	.size	_ZN16ImGuiListClipper4StepEv, .-_ZN16ImGuiListClipper4StepEv
	.section	.rodata
	.align	3
.LC89:
	.string	"ImGuiStyle& ImGui::GetStyle()"
	.align	3
.LC90:
	.string	"GImGui != __null && \"No current context. Did you call ImGui::CreateContext() and ImGui::SetCurrentContext() ?\""
	.text
	.align	2
	.global	_ZN5ImGui8GetStyleEv
	.type	_ZN5ImGui8GetStyleEv, %function
_ZN5ImGui8GetStyleEv:
.LFB1682:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	cmp	x0, 0
	bne	.L1203
	adrp	x0, .LC89
	add	x3, x0, :lo12:.LC89
	mov	w2, 2888
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC90
	add	x0, x0, :lo12:.LC90
	bl	__assert_fail
.L1203:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x1, [x0]
	mov	x0, 14304
	add	x0, x1, x0
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1682:
	.size	_ZN5ImGui8GetStyleEv, .-_ZN5ImGui8GetStyleEv
	.align	2
	.global	_ZN5ImGui11GetColorU32Eif
	.type	_ZN5ImGui11GetColorU32Eif, %function
_ZN5ImGui11GetColorU32Eif:
.LFB1683:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	str	s0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x1, [x0]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 32]
	ldr	x1, [sp, 32]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 12
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x0, x1, [x0, 8]
	stp	x0, x1, [sp, 40]
	ldr	s1, [sp, 52]
	ldr	x0, [sp, 32]
	ldr	s2, [x0]
	ldr	s0, [sp, 24]
	fmul	s0, s2, s0
	fmul	s0, s1, s0
	str	s0, [sp, 52]
	add	x0, sp, 40
	bl	_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 56]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L1207
	bl	__stack_chk_fail
.L1207:
	mov	w0, w1
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1683:
	.size	_ZN5ImGui11GetColorU32Eif, .-_ZN5ImGui11GetColorU32Eif
	.align	2
	.global	_ZN5ImGui11GetColorU32ERK6ImVec4
	.type	_ZN5ImGui11GetColorU32ERK6ImVec4, %function
_ZN5ImGui11GetColorU32ERK6ImVec4:
.LFB1684:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x1, [x0]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 32]
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0]
	stp	x0, x1, [sp, 40]
	ldr	s1, [sp, 52]
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	fmul	s0, s1, s0
	str	s0, [sp, 52]
	add	x0, sp, 40
	bl	_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 56]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L1210
	bl	__stack_chk_fail
.L1210:
	mov	w0, w1
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1684:
	.size	_ZN5ImGui11GetColorU32ERK6ImVec4, .-_ZN5ImGui11GetColorU32ERK6ImVec4
	.align	2
	.global	_ZN5ImGui17GetStyleColorVec4Ei
	.type	_ZN5ImGui17GetStyleColorVec4Ei, %function
_ZN5ImGui17GetStyleColorVec4Ei:
.LFB1685:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x1, [x0]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 24]
	ldrsw	x0, [sp, 12]
	add	x0, x0, 12
	lsl	x0, x0, 4
	ldr	x1, [sp, 24]
	add	x0, x1, x0
	add	x0, x0, 8
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1685:
	.size	_ZN5ImGui17GetStyleColorVec4Ei, .-_ZN5ImGui17GetStyleColorVec4Ei
	.align	2
	.global	_ZN5ImGui11GetColorU32Ej
	.type	_ZN5ImGui11GetColorU32Ej, %function
_ZN5ImGui11GetColorU32Ej:
.LFB1686:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x1, [x0]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	bge	.L1217
	b	.L1218
.L1217:
	ldr	w0, [sp, 12]
	b	.L1216
.L1218:
	ldr	w0, [sp, 12]
	lsr	w0, w0, 24
	str	w0, [sp, 20]
	ldr	s0, [sp, 20]
	ucvtf	s1, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	fmul	s0, s1, s0
	fcvtzu	s0, s0
	str	s0, [sp, 20]
	ldr	w0, [sp, 12]
	and	w1, w0, 16777215
	ldr	w0, [sp, 20]
	lsl	w0, w0, 24
	orr	w0, w1, w0
.L1216:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1686:
	.size	_ZN5ImGui11GetColorU32Ej, .-_ZN5ImGui11GetColorU32Ej
	.section	.text._ZN13ImGuiColorModC2Ev,"axG",@progbits,_ZN13ImGuiColorModC5Ev,comdat
	.align	2
	.weak	_ZN13ImGuiColorModC2Ev
	.type	_ZN13ImGuiColorModC2Ev, %function
_ZN13ImGuiColorModC2Ev:
.LFB1689:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 4
	bl	_ZN6ImVec4C1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1689:
	.size	_ZN13ImGuiColorModC2Ev, .-_ZN13ImGuiColorModC2Ev
	.weak	_ZN13ImGuiColorModC1Ev
	.set	_ZN13ImGuiColorModC1Ev,_ZN13ImGuiColorModC2Ev
	.text
	.align	2
	.global	_ZN5ImGui14PushStyleColorEij
	.type	_ZN5ImGui14PushStyleColorEij, %function
_ZN5ImGui14PushStyleColorEij:
.LFB1687:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	w0, [sp, 44]
	str	w1, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	add	x0, sp, 64
	bl	_ZN13ImGuiColorModC1Ev
	ldr	w0, [sp, 44]
	str	w0, [sp, 64]
	ldr	x1, [sp, 56]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 906
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x0, x1, [x0, 8]
	add	x2, sp, 4
	stp	x0, x1, [x2, 64]
	ldr	x1, [sp, 56]
	mov	x0, 18384
	add	x0, x1, x0
	add	x1, sp, 64
	bl	_ZN8ImVectorI13ImGuiColorModE9push_backERKS0_
	ldr	x1, [sp, 56]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 906
	lsl	x0, x0, 4
	add	x19, x1, x0
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui23ColorConvertU32ToFloat4Ej
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [x19, 8]
	str	s4, [x19, 12]
	str	s1, [x19, 16]
	str	s0, [x19, 20]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1221
	bl	__stack_chk_fail
.L1221:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1687:
	.size	_ZN5ImGui14PushStyleColorEij, .-_ZN5ImGui14PushStyleColorEij
	.align	2
	.global	_ZN5ImGui14PushStyleColorEiRK6ImVec4
	.type	_ZN5ImGui14PushStyleColorEiRK6ImVec4, %function
_ZN5ImGui14PushStyleColorEiRK6ImVec4:
.LFB1691:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	w0, [sp, 28]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	add	x0, sp, 48
	bl	_ZN13ImGuiColorModC1Ev
	ldr	w0, [sp, 28]
	str	w0, [sp, 48]
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 906
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x0, x1, [x0, 8]
	add	x2, sp, 4
	stp	x0, x1, [x2, 48]
	ldr	x1, [sp, 40]
	mov	x0, 18384
	add	x0, x1, x0
	add	x1, sp, 48
	bl	_ZN8ImVectorI13ImGuiColorModE9push_backERKS0_
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 906
	lsl	x0, x0, 4
	add	x2, x1, x0
	ldr	x0, [sp, 16]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2, 8]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1223
	bl	__stack_chk_fail
.L1223:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1691:
	.size	_ZN5ImGui14PushStyleColorEiRK6ImVec4, .-_ZN5ImGui14PushStyleColorEiRK6ImVec4
	.section	.rodata
	.align	3
.LC91:
	.string	"void ImGui::PopStyleColor(int)"
	.align	3
.LC92:
	.string	"(g.ColorStack.Size > count) && \"Calling PopStyleColor() too many times: stack underflow.\""
	.text
	.align	2
	.global	_ZN5ImGui13PopStyleColorEi
	.type	_ZN5ImGui13PopStyleColorEi, %function
_ZN5ImGui13PopStyleColorEi:
.LFB1692:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2000]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	ble	.L1227
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2000]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	blt	.L1226
	adrp	x0, .LC91
	add	x3, x0, :lo12:.LC91
	mov	w2, 2950
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC92
	add	x0, x0, :lo12:.LC92
	bl	__assert_fail
.L1226:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2000]
	str	w0, [sp, 28]
	b	.L1227
.L1228:
	ldr	x1, [sp, 32]
	mov	x0, 18384
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiColorModE4backEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	x1, [sp, 32]
	sxtw	x0, w0
	add	x0, x0, 906
	lsl	x0, x0, 4
	add	x2, x1, x0
	ldr	x0, [sp, 40]
	add	x0, x0, 4
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2, 8]
	ldr	x1, [sp, 32]
	mov	x0, 18384
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiColorModE8pop_backEv
	ldr	w0, [sp, 28]
	sub	w0, w0, #1
	str	w0, [sp, 28]
.L1227:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bgt	.L1228
	nop
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1692:
	.size	_ZN5ImGui13PopStyleColorEi, .-_ZN5ImGui13PopStyleColorEi
	.section	.text._ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle,"axG",@progbits,_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle,comdat
	.align	2
	.weak	_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle
	.type	_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle, %function
_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle:
.LFB1693:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 8]
	uxtw	x0, w0
	ldr	x1, [sp]
	add	x0, x1, x0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1693:
	.size	_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle, .-_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle
	.section	.rodata
	.align	3
	.type	_ZL13GStyleVarInfo, %object
	.size	_ZL13GStyleVarInfo, 300
_ZL13GStyleVarInfo:
	.word	8
	.word	1
	.word	0
	.word	8
	.word	1
	.word	4
	.word	8
	.word	2
	.word	8
	.word	8
	.word	1
	.word	16
	.word	8
	.word	1
	.word	20
	.word	8
	.word	2
	.word	24
	.word	8
	.word	2
	.word	32
	.word	8
	.word	1
	.word	44
	.word	8
	.word	1
	.word	48
	.word	8
	.word	1
	.word	52
	.word	8
	.word	1
	.word	56
	.word	8
	.word	2
	.word	60
	.word	8
	.word	1
	.word	68
	.word	8
	.word	1
	.word	72
	.word	8
	.word	2
	.word	76
	.word	8
	.word	2
	.word	84
	.word	8
	.word	1
	.word	108
	.word	8
	.word	2
	.word	92
	.word	8
	.word	1
	.word	116
	.word	8
	.word	1
	.word	120
	.word	8
	.word	1
	.word	124
	.word	8
	.word	1
	.word	128
	.word	8
	.word	1
	.word	136
	.word	8
	.word	2
	.word	152
	.word	8
	.word	2
	.word	160
	.align	3
.LC93:
	.string	"const ImGuiStyleVarInfo* GetStyleVarInfo(ImGuiStyleVar)"
	.align	3
.LC94:
	.string	"idx >= 0 && idx < ImGuiStyleVar_COUNT"
	.text
	.align	2
	.type	_ZL15GetStyleVarInfoi, %function
_ZL15GetStyleVarInfoi:
.LFB1694:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L1232
	ldr	w0, [sp, 28]
	cmp	w0, 24
	ble	.L1235
.L1232:
	adrp	x0, .LC93
	add	x3, x0, :lo12:.LC93
	mov	w2, 3001
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC94
	add	x0, x0, :lo12:.LC94
	bl	__assert_fail
.L1235:
	ldrsw	x1, [sp, 28]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	adrp	x1, _ZL13GStyleVarInfo
	add	x1, x1, :lo12:_ZL13GStyleVarInfo
	add	x0, x0, x1
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1694:
	.size	_ZL15GetStyleVarInfoi, .-_ZL15GetStyleVarInfoi
	.section	.rodata
	.align	3
.LC95:
	.string	"void ImGui::PushStyleVar(ImGuiStyleVar, float)"
	.align	3
.LC96:
	.string	"0 && \"Called PushStyleVar() float variant but variable is not a float!\""
	.text
	.align	2
	.global	_ZN5ImGui12PushStyleVarEif
	.type	_ZN5ImGui12PushStyleVarEif, %function
_ZN5ImGui12PushStyleVarEif:
.LFB1695:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	w0, [sp, 44]
	str	s0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	w0, [sp, 44]
	bl	_ZL15GetStyleVarInfoi
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	cmp	w0, 8
	bne	.L1237
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 4]
	cmp	w0, 1
	bne	.L1237
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x1, [sp, 56]
	mov	x0, 14304
	add	x0, x1, x0
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle
	str	x0, [sp, 64]
	ldr	x1, [sp, 56]
	mov	x0, 18400
	add	x19, x1, x0
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	add	x0, sp, 72
	ldr	w1, [sp, 44]
	bl	_ZN13ImGuiStyleModC1Eif
	add	x0, sp, 72
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_
	ldr	x0, [sp, 64]
	ldr	s0, [sp, 40]
	str	s0, [x0]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1239
	b	.L1240
.L1237:
	adrp	x0, .LC95
	add	x3, x0, :lo12:.LC95
	mov	w2, 3017
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC96
	add	x0, x0, :lo12:.LC96
	bl	__assert_fail
.L1240:
	bl	__stack_chk_fail
.L1239:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1695:
	.size	_ZN5ImGui12PushStyleVarEif, .-_ZN5ImGui12PushStyleVarEif
	.section	.rodata
	.align	3
.LC97:
	.string	"void ImGui::PushStyleVar(ImGuiStyleVar, const ImVec2&)"
	.align	3
.LC98:
	.string	"0 && \"Called PushStyleVar() ImVec2 variant but variable is not a ImVec2!\""
	.text
	.align	2
	.global	_ZN5ImGui12PushStyleVarEiRK6ImVec2
	.type	_ZN5ImGui12PushStyleVarEiRK6ImVec2, %function
_ZN5ImGui12PushStyleVarEiRK6ImVec2:
.LFB1696:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	w0, [sp, 44]
	str	x1, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	w0, [sp, 44]
	bl	_ZL15GetStyleVarInfoi
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	cmp	w0, 8
	bne	.L1242
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 4]
	cmp	w0, 2
	bne	.L1242
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x1, [sp, 56]
	mov	x0, 14304
	add	x0, x1, x0
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle
	str	x0, [sp, 64]
	ldr	x1, [sp, 56]
	mov	x0, 18400
	add	x19, x1, x0
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	ldr	s1, [x0, 4]
	add	x0, sp, 72
	ldr	w1, [sp, 44]
	bl	_ZN13ImGuiStyleModC1Ei6ImVec2
	add	x0, sp, 72
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_
	ldr	x0, [sp, 64]
	ldr	x1, [sp, 32]
	ldr	x1, [x1]
	str	x1, [x0]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1244
	b	.L1245
.L1242:
	adrp	x0, .LC97
	add	x3, x0, :lo12:.LC97
	mov	w2, 3031
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC98
	add	x0, x0, :lo12:.LC98
	bl	__assert_fail
.L1245:
	bl	__stack_chk_fail
.L1244:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1696:
	.size	_ZN5ImGui12PushStyleVarEiRK6ImVec2, .-_ZN5ImGui12PushStyleVarEiRK6ImVec2
	.section	.rodata
	.align	3
.LC99:
	.string	"void ImGui::PopStyleVar(int)"
	.align	3
.LC100:
	.string	"(g.StyleVarStack.Size > count) && \"Calling PopStyleVar() too many times: stack underflow.\""
	.text
	.align	2
	.global	_ZN5ImGui11PopStyleVarEi
	.type	_ZN5ImGui11PopStyleVarEi, %function
_ZN5ImGui11PopStyleVarEi:
.LFB1697:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2016]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	ble	.L1249
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2016]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	blt	.L1248
	adrp	x0, .LC99
	add	x3, x0, :lo12:.LC99
	mov	w2, 3039
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC100
	add	x0, x0, :lo12:.LC100
	bl	__assert_fail
.L1248:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2016]
	str	w0, [sp, 28]
	b	.L1249
.L1252:
	ldr	x1, [sp, 32]
	mov	x0, 18400
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiStyleModE4backEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	bl	_ZL15GetStyleVarInfoi
	str	x0, [sp, 48]
	ldr	x1, [sp, 32]
	mov	x0, 14304
	add	x0, x1, x0
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZNK17ImGuiStyleVarInfo9GetVarPtrEP10ImGuiStyle
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	cmp	w0, 8
	bne	.L1250
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 4]
	cmp	w0, 1
	bne	.L1250
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 56]
	str	s0, [x0]
	b	.L1251
.L1250:
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	cmp	w0, 8
	bne	.L1251
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 4]
	cmp	w0, 2
	bne	.L1251
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 56]
	str	s0, [x0]
	ldr	x0, [sp, 56]
	add	x0, x0, 4
	ldr	x1, [sp, 40]
	ldr	s0, [x1, 8]
	str	s0, [x0]
.L1251:
	ldr	x1, [sp, 32]
	mov	x0, 18400
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiStyleModE8pop_backEv
	ldr	w0, [sp, 28]
	sub	w0, w0, #1
	str	w0, [sp, 28]
.L1249:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bgt	.L1252
	nop
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1697:
	.size	_ZN5ImGui11PopStyleVarEi, .-_ZN5ImGui11PopStyleVarEi
	.section	.rodata
	.align	3
.LC101:
	.string	"Text"
	.align	3
.LC102:
	.string	"TextDisabled"
	.align	3
.LC103:
	.string	"WindowBg"
	.align	3
.LC104:
	.string	"ChildBg"
	.align	3
.LC105:
	.string	"PopupBg"
	.align	3
.LC106:
	.string	"Border"
	.align	3
.LC107:
	.string	"BorderShadow"
	.align	3
.LC108:
	.string	"FrameBg"
	.align	3
.LC109:
	.string	"FrameBgHovered"
	.align	3
.LC110:
	.string	"FrameBgActive"
	.align	3
.LC111:
	.string	"TitleBg"
	.align	3
.LC112:
	.string	"TitleBgActive"
	.align	3
.LC113:
	.string	"TitleBgCollapsed"
	.align	3
.LC114:
	.string	"MenuBarBg"
	.align	3
.LC115:
	.string	"ScrollbarBg"
	.align	3
.LC116:
	.string	"ScrollbarGrab"
	.align	3
.LC117:
	.string	"ScrollbarGrabHovered"
	.align	3
.LC118:
	.string	"ScrollbarGrabActive"
	.align	3
.LC119:
	.string	"CheckMark"
	.align	3
.LC120:
	.string	"SliderGrab"
	.align	3
.LC121:
	.string	"SliderGrabActive"
	.align	3
.LC122:
	.string	"Button"
	.align	3
.LC123:
	.string	"ButtonHovered"
	.align	3
.LC124:
	.string	"ButtonActive"
	.align	3
.LC125:
	.string	"Header"
	.align	3
.LC126:
	.string	"HeaderHovered"
	.align	3
.LC127:
	.string	"HeaderActive"
	.align	3
.LC128:
	.string	"Separator"
	.align	3
.LC129:
	.string	"SeparatorHovered"
	.align	3
.LC130:
	.string	"SeparatorActive"
	.align	3
.LC131:
	.string	"ResizeGrip"
	.align	3
.LC132:
	.string	"ResizeGripHovered"
	.align	3
.LC133:
	.string	"ResizeGripActive"
	.align	3
.LC134:
	.string	"Tab"
	.align	3
.LC135:
	.string	"TabHovered"
	.align	3
.LC136:
	.string	"TabActive"
	.align	3
.LC137:
	.string	"TabUnfocused"
	.align	3
.LC138:
	.string	"TabUnfocusedActive"
	.align	3
.LC139:
	.string	"PlotLines"
	.align	3
.LC140:
	.string	"PlotLinesHovered"
	.align	3
.LC141:
	.string	"PlotHistogram"
	.align	3
.LC142:
	.string	"PlotHistogramHovered"
	.align	3
.LC143:
	.string	"TableHeaderBg"
	.align	3
.LC144:
	.string	"TableBorderStrong"
	.align	3
.LC145:
	.string	"TableBorderLight"
	.align	3
.LC146:
	.string	"TableRowBg"
	.align	3
.LC147:
	.string	"TableRowBgAlt"
	.align	3
.LC148:
	.string	"TextSelectedBg"
	.align	3
.LC149:
	.string	"DragDropTarget"
	.align	3
.LC150:
	.string	"NavHighlight"
	.align	3
.LC151:
	.string	"NavWindowingHighlight"
	.align	3
.LC152:
	.string	"NavWindowingDimBg"
	.align	3
.LC153:
	.string	"ModalWindowDimBg"
	.align	3
.LC154:
	.string	"const char* ImGui::GetStyleColorName(ImGuiCol)"
	.align	3
.LC155:
	.string	"0"
	.text
	.align	2
	.global	_ZN5ImGui17GetStyleColorNameEi
	.type	_ZN5ImGui17GetStyleColorNameEi, %function
_ZN5ImGui17GetStyleColorNameEi:
.LFB1698:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	cmp	w0, 52
	bhi	.L1254
	adrp	x1, .L1256
	add	x1, x1, :lo12:.L1256
	ldr	w0, [x1,w0,uxtw #2]
	adr	x1, .Lrtx1256
	add	x0, x1, w0, sxtw #2
	br	x0
.Lrtx1256:
	.section	.rodata
	.align	0
	.align	2
.L1256:
	.word	(.L1308 - .Lrtx1256) / 4
	.word	(.L1307 - .Lrtx1256) / 4
	.word	(.L1306 - .Lrtx1256) / 4
	.word	(.L1305 - .Lrtx1256) / 4
	.word	(.L1304 - .Lrtx1256) / 4
	.word	(.L1303 - .Lrtx1256) / 4
	.word	(.L1302 - .Lrtx1256) / 4
	.word	(.L1301 - .Lrtx1256) / 4
	.word	(.L1300 - .Lrtx1256) / 4
	.word	(.L1299 - .Lrtx1256) / 4
	.word	(.L1298 - .Lrtx1256) / 4
	.word	(.L1297 - .Lrtx1256) / 4
	.word	(.L1296 - .Lrtx1256) / 4
	.word	(.L1295 - .Lrtx1256) / 4
	.word	(.L1294 - .Lrtx1256) / 4
	.word	(.L1293 - .Lrtx1256) / 4
	.word	(.L1292 - .Lrtx1256) / 4
	.word	(.L1291 - .Lrtx1256) / 4
	.word	(.L1290 - .Lrtx1256) / 4
	.word	(.L1289 - .Lrtx1256) / 4
	.word	(.L1288 - .Lrtx1256) / 4
	.word	(.L1287 - .Lrtx1256) / 4
	.word	(.L1286 - .Lrtx1256) / 4
	.word	(.L1285 - .Lrtx1256) / 4
	.word	(.L1284 - .Lrtx1256) / 4
	.word	(.L1283 - .Lrtx1256) / 4
	.word	(.L1282 - .Lrtx1256) / 4
	.word	(.L1281 - .Lrtx1256) / 4
	.word	(.L1280 - .Lrtx1256) / 4
	.word	(.L1279 - .Lrtx1256) / 4
	.word	(.L1278 - .Lrtx1256) / 4
	.word	(.L1277 - .Lrtx1256) / 4
	.word	(.L1276 - .Lrtx1256) / 4
	.word	(.L1275 - .Lrtx1256) / 4
	.word	(.L1274 - .Lrtx1256) / 4
	.word	(.L1273 - .Lrtx1256) / 4
	.word	(.L1272 - .Lrtx1256) / 4
	.word	(.L1271 - .Lrtx1256) / 4
	.word	(.L1270 - .Lrtx1256) / 4
	.word	(.L1269 - .Lrtx1256) / 4
	.word	(.L1268 - .Lrtx1256) / 4
	.word	(.L1267 - .Lrtx1256) / 4
	.word	(.L1266 - .Lrtx1256) / 4
	.word	(.L1265 - .Lrtx1256) / 4
	.word	(.L1264 - .Lrtx1256) / 4
	.word	(.L1263 - .Lrtx1256) / 4
	.word	(.L1262 - .Lrtx1256) / 4
	.word	(.L1261 - .Lrtx1256) / 4
	.word	(.L1260 - .Lrtx1256) / 4
	.word	(.L1259 - .Lrtx1256) / 4
	.word	(.L1258 - .Lrtx1256) / 4
	.word	(.L1257 - .Lrtx1256) / 4
	.word	(.L1255 - .Lrtx1256) / 4
	.text
.L1308:
	adrp	x0, .LC101
	add	x0, x0, :lo12:.LC101
	b	.L1309
.L1307:
	adrp	x0, .LC102
	add	x0, x0, :lo12:.LC102
	b	.L1309
.L1306:
	adrp	x0, .LC103
	add	x0, x0, :lo12:.LC103
	b	.L1309
.L1305:
	adrp	x0, .LC104
	add	x0, x0, :lo12:.LC104
	b	.L1309
.L1304:
	adrp	x0, .LC105
	add	x0, x0, :lo12:.LC105
	b	.L1309
.L1303:
	adrp	x0, .LC106
	add	x0, x0, :lo12:.LC106
	b	.L1309
.L1302:
	adrp	x0, .LC107
	add	x0, x0, :lo12:.LC107
	b	.L1309
.L1301:
	adrp	x0, .LC108
	add	x0, x0, :lo12:.LC108
	b	.L1309
.L1300:
	adrp	x0, .LC109
	add	x0, x0, :lo12:.LC109
	b	.L1309
.L1299:
	adrp	x0, .LC110
	add	x0, x0, :lo12:.LC110
	b	.L1309
.L1298:
	adrp	x0, .LC111
	add	x0, x0, :lo12:.LC111
	b	.L1309
.L1297:
	adrp	x0, .LC112
	add	x0, x0, :lo12:.LC112
	b	.L1309
.L1296:
	adrp	x0, .LC113
	add	x0, x0, :lo12:.LC113
	b	.L1309
.L1295:
	adrp	x0, .LC114
	add	x0, x0, :lo12:.LC114
	b	.L1309
.L1294:
	adrp	x0, .LC115
	add	x0, x0, :lo12:.LC115
	b	.L1309
.L1293:
	adrp	x0, .LC116
	add	x0, x0, :lo12:.LC116
	b	.L1309
.L1292:
	adrp	x0, .LC117
	add	x0, x0, :lo12:.LC117
	b	.L1309
.L1291:
	adrp	x0, .LC118
	add	x0, x0, :lo12:.LC118
	b	.L1309
.L1290:
	adrp	x0, .LC119
	add	x0, x0, :lo12:.LC119
	b	.L1309
.L1289:
	adrp	x0, .LC120
	add	x0, x0, :lo12:.LC120
	b	.L1309
.L1288:
	adrp	x0, .LC121
	add	x0, x0, :lo12:.LC121
	b	.L1309
.L1287:
	adrp	x0, .LC122
	add	x0, x0, :lo12:.LC122
	b	.L1309
.L1286:
	adrp	x0, .LC123
	add	x0, x0, :lo12:.LC123
	b	.L1309
.L1285:
	adrp	x0, .LC124
	add	x0, x0, :lo12:.LC124
	b	.L1309
.L1284:
	adrp	x0, .LC125
	add	x0, x0, :lo12:.LC125
	b	.L1309
.L1283:
	adrp	x0, .LC126
	add	x0, x0, :lo12:.LC126
	b	.L1309
.L1282:
	adrp	x0, .LC127
	add	x0, x0, :lo12:.LC127
	b	.L1309
.L1281:
	adrp	x0, .LC128
	add	x0, x0, :lo12:.LC128
	b	.L1309
.L1280:
	adrp	x0, .LC129
	add	x0, x0, :lo12:.LC129
	b	.L1309
.L1279:
	adrp	x0, .LC130
	add	x0, x0, :lo12:.LC130
	b	.L1309
.L1278:
	adrp	x0, .LC131
	add	x0, x0, :lo12:.LC131
	b	.L1309
.L1277:
	adrp	x0, .LC132
	add	x0, x0, :lo12:.LC132
	b	.L1309
.L1276:
	adrp	x0, .LC133
	add	x0, x0, :lo12:.LC133
	b	.L1309
.L1275:
	adrp	x0, .LC134
	add	x0, x0, :lo12:.LC134
	b	.L1309
.L1274:
	adrp	x0, .LC135
	add	x0, x0, :lo12:.LC135
	b	.L1309
.L1273:
	adrp	x0, .LC136
	add	x0, x0, :lo12:.LC136
	b	.L1309
.L1272:
	adrp	x0, .LC137
	add	x0, x0, :lo12:.LC137
	b	.L1309
.L1271:
	adrp	x0, .LC138
	add	x0, x0, :lo12:.LC138
	b	.L1309
.L1270:
	adrp	x0, .LC139
	add	x0, x0, :lo12:.LC139
	b	.L1309
.L1269:
	adrp	x0, .LC140
	add	x0, x0, :lo12:.LC140
	b	.L1309
.L1268:
	adrp	x0, .LC141
	add	x0, x0, :lo12:.LC141
	b	.L1309
.L1267:
	adrp	x0, .LC142
	add	x0, x0, :lo12:.LC142
	b	.L1309
.L1266:
	adrp	x0, .LC143
	add	x0, x0, :lo12:.LC143
	b	.L1309
.L1265:
	adrp	x0, .LC144
	add	x0, x0, :lo12:.LC144
	b	.L1309
.L1264:
	adrp	x0, .LC145
	add	x0, x0, :lo12:.LC145
	b	.L1309
.L1263:
	adrp	x0, .LC146
	add	x0, x0, :lo12:.LC146
	b	.L1309
.L1262:
	adrp	x0, .LC147
	add	x0, x0, :lo12:.LC147
	b	.L1309
.L1261:
	adrp	x0, .LC148
	add	x0, x0, :lo12:.LC148
	b	.L1309
.L1260:
	adrp	x0, .LC149
	add	x0, x0, :lo12:.LC149
	b	.L1309
.L1259:
	adrp	x0, .LC150
	add	x0, x0, :lo12:.LC150
	b	.L1309
.L1258:
	adrp	x0, .LC151
	add	x0, x0, :lo12:.LC151
	b	.L1309
.L1257:
	adrp	x0, .LC152
	add	x0, x0, :lo12:.LC152
	b	.L1309
.L1255:
	adrp	x0, .LC153
	add	x0, x0, :lo12:.LC153
	b	.L1309
.L1254:
	adrp	x0, .LC154
	add	x3, x0, :lo12:.LC154
	mov	w2, 3114
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L1309:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1698:
	.size	_ZN5ImGui17GetStyleColorNameEi, .-_ZN5ImGui17GetStyleColorNameEi
	.align	2
	.global	_ZN5ImGui19FindRenderedTextEndEPKcS1_
	.type	_ZN5ImGui19FindRenderedTextEndEPKcS1_, %function
_ZN5ImGui19FindRenderedTextEndEPKcS1_:
.LFB1699:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	str	x0, [sp, 24]
	ldr	x0, [sp]
	cmp	x0, 0
	bne	.L1312
	mov	x0, -1
	str	x0, [sp]
	b	.L1312
.L1314:
	ldr	x0, [sp, 24]
	add	x0, x0, 1
	str	x0, [sp, 24]
.L1312:
	ldr	x1, [sp, 24]
	ldr	x0, [sp]
	cmp	x1, x0
	bcs	.L1313
	ldr	x0, [sp, 24]
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L1313
	ldr	x0, [sp, 24]
	ldrb	w0, [x0]
	cmp	w0, 35
	bne	.L1314
	ldr	x0, [sp, 24]
	add	x0, x0, 1
	ldrb	w0, [x0]
	cmp	w0, 35
	bne	.L1314
.L1313:
	ldr	x0, [sp, 24]
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1699:
	.size	_ZN5ImGui19FindRenderedTextEndEPKcS1_, .-_ZN5ImGui19FindRenderedTextEndEPKcS1_
	.align	2
	.global	_ZN5ImGui10RenderTextE6ImVec2PKcS2_b
	.type	_ZN5ImGui10RenderTextE6ImVec2PKcS2_b, %function
_ZN5ImGui10RenderTextE6ImVec2PKcS2_b:
.LFB1700:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	str	d8, [sp, 32]
	.cfi_offset 19, -96
	.cfi_offset 20, -88
	.cfi_offset 72, -80
	fmov	s2, s0
	fmov	s0, s1
	fmov	x3, d2
	fmov	w4, s0
	bfi	x3, x4, 32, 32
	str	x3, [sp, 72]
	str	x0, [sp, 64]
	str	x1, [sp, 56]
	strb	w2, [sp, 55]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 104]
	ldrb	w0, [sp, 55]
	cmp	w0, 0
	beq	.L1317
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui19FindRenderedTextEndEPKcS1_
	str	x0, [sp, 88]
	b	.L1318
.L1317:
	ldr	x0, [sp, 56]
	cmp	x0, 0
	bne	.L1319
	ldr	x0, [sp, 64]
	bl	strlen
	mov	x1, x0
	ldr	x0, [sp, 64]
	add	x0, x0, x1
	str	x0, [sp, 56]
.L1319:
	ldr	x0, [sp, 56]
	str	x0, [sp, 88]
.L1318:
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 88]
	cmp	x1, x0
	beq	.L1321
	ldr	x0, [sp, 104]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 96]
	ldr	x20, [x0, 15352]
	ldr	x0, [sp, 96]
	ldr	s8, [x0, 15360]
	fmov	s0, 1.0e+0
	mov	w0, 0
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w1, w0
	add	x0, sp, 72
	mov	x6, 0
	movi	v1.2s, #0
	ldr	x5, [sp, 88]
	ldr	x4, [sp, 64]
	mov	w3, w1
	mov	x2, x0
	fmov	s0, s8
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4
	ldr	x0, [sp, 96]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L1321
	add	x0, sp, 72
	ldr	x2, [sp, 88]
	ldr	x1, [sp, 64]
	bl	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_
.L1321:
	nop
	ldr	d8, [sp, 32]
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1700:
	.size	_ZN5ImGui10RenderTextE6ImVec2PKcS2_b, .-_ZN5ImGui10RenderTextE6ImVec2PKcS2_b
	.align	2
	.global	_ZN5ImGui17RenderTextWrappedE6ImVec2PKcS2_f
	.type	_ZN5ImGui17RenderTextWrappedE6ImVec2PKcS2_f, %function
_ZN5ImGui17RenderTextWrappedE6ImVec2PKcS2_f:
.LFB1701:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	str	d8, [sp, 32]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	.cfi_offset 72, -64
	fmov	s3, s0
	fmov	s0, s1
	fmov	x2, d3
	fmov	w3, s0
	bfi	x2, x3, 32, 32
	str	x2, [sp, 72]
	str	x0, [sp, 64]
	str	x1, [sp, 56]
	str	s2, [sp, 52]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 88]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	bne	.L1323
	ldr	x0, [sp, 64]
	bl	strlen
	mov	x1, x0
	ldr	x0, [sp, 64]
	add	x0, x0, x1
	str	x0, [sp, 56]
.L1323:
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 56]
	cmp	x1, x0
	beq	.L1325
	ldr	x0, [sp, 88]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 80]
	ldr	x20, [x0, 15352]
	ldr	x0, [sp, 80]
	ldr	s8, [x0, 15360]
	fmov	s0, 1.0e+0
	mov	w0, 0
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w1, w0
	add	x0, sp, 72
	mov	x6, 0
	ldr	s1, [sp, 52]
	ldr	x5, [sp, 56]
	ldr	x4, [sp, 64]
	mov	w3, w1
	mov	x2, x0
	fmov	s0, s8
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4
	ldr	x0, [sp, 80]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L1325
	add	x0, sp, 72
	ldr	x2, [sp, 56]
	ldr	x1, [sp, 64]
	bl	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_
.L1325:
	nop
	ldr	d8, [sp, 32]
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1701:
	.size	_ZN5ImGui17RenderTextWrappedE6ImVec2PKcS2_f, .-_ZN5ImGui17RenderTextWrappedE6ImVec2PKcS2_f
	.align	2
	.global	_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect
	.type	_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect, %function
_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect:
.LFB1702:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -144
	str	x0, [sp, 88]
	str	x1, [sp, 80]
	str	x2, [sp, 72]
	str	x3, [sp, 64]
	str	x4, [sp, 56]
	str	x5, [sp, 48]
	str	x6, [sp, 40]
	str	x7, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	ldr	x0, [sp, 80]
	ldr	x0, [x0]
	str	x0, [sp, 104]
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L1327
	ldr	x0, [sp, 48]
	ldr	x0, [x0]
	str	x0, [sp, 112]
	b	.L1328
.L1327:
	movi	v0.2s, #0
	mov	w2, 0
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui12CalcTextSizeEPKcS1_bf
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
.L1328:
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L1329
	ldr	x0, [sp, 32]
	b	.L1330
.L1329:
	ldr	x0, [sp, 80]
.L1330:
	str	x0, [sp, 120]
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L1331
	ldr	x0, [sp, 32]
	add	x0, x0, 8
	b	.L1332
.L1331:
	ldr	x0, [sp, 72]
.L1332:
	str	x0, [sp, 128]
	ldr	s1, [sp, 104]
	ldr	s0, [sp, 112]
	fadd	s1, s1, s0
	ldr	x0, [sp, 128]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bge	.L1333
	ldr	s1, [sp, 108]
	ldr	s0, [sp, 116]
	fadd	s1, s1, s0
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bge	.L1333
	b	.L1351
.L1333:
	mov	w0, 1
	b	.L1336
.L1351:
	mov	w0, 0
.L1336:
	strb	w0, [sp, 103]
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L1337
	ldr	s1, [sp, 104]
	ldr	x0, [sp, 120]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bmi	.L1338
	ldr	s1, [sp, 108]
	ldr	x0, [sp, 120]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bmi	.L1338
	b	.L1352
.L1338:
	mov	w0, 1
	b	.L1341
.L1352:
	mov	w0, 0
.L1341:
	ldrb	w1, [sp, 103]
	orr	w0, w0, w1
	and	w0, w0, 255
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 103]
.L1337:
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
	fcmpe	s0, #0.0
	bgt	.L1349
	b	.L1342
.L1349:
	ldr	s3, [sp, 104]
	ldr	s1, [sp, 104]
	ldr	x0, [sp, 72]
	ldr	s2, [x0]
	ldr	s0, [sp, 104]
	fsub	s2, s2, s0
	ldr	s0, [sp, 112]
	fsub	s2, s2, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s3
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 104]
.L1342:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fcmpe	s0, #0.0
	bgt	.L1350
	b	.L1344
.L1350:
	ldr	s3, [sp, 108]
	ldr	s1, [sp, 108]
	ldr	x0, [sp, 72]
	ldr	s2, [x0, 4]
	ldr	s0, [sp, 108]
	fsub	s2, s2, s0
	ldr	s0, [sp, 116]
	fsub	s2, s2, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s3
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 108]
.L1344:
	ldrb	w0, [sp, 103]
	cmp	w0, 0
	beq	.L1346
	ldr	x0, [sp, 120]
	ldr	s0, [x0]
	ldr	x0, [sp, 120]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 128]
	ldr	s2, [x0]
	ldr	x0, [sp, 128]
	ldr	s3, [x0, 4]
	add	x0, sp, 136
	bl	_ZN6ImVec4C1Effff
	ldr	x19, [sp, 88]
	fmov	s0, 1.0e+0
	mov	w0, 0
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x1, sp, 136
	add	x0, sp, 104
	mov	x6, x1
	movi	v1.2s, #0
	ldr	x5, [sp, 56]
	ldr	x4, [sp, 64]
	mov	w3, w2
	mov	x2, x0
	movi	v0.2s, #0
	mov	x1, 0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4
	b	.L1353
.L1346:
	ldr	x19, [sp, 88]
	fmov	s0, 1.0e+0
	mov	w0, 0
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w1, w0
	add	x0, sp, 104
	mov	x6, 0
	movi	v1.2s, #0
	ldr	x5, [sp, 56]
	ldr	x4, [sp, 64]
	mov	w3, w1
	mov	x2, x0
	movi	v0.2s, #0
	mov	x1, 0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4
.L1353:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1348
	bl	__stack_chk_fail
.L1348:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1702:
	.size	_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect, .-_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect
	.align	2
	.global	_ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect
	.type	_ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect, %function
_ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect:
.LFB1703:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	str	x2, [sp, 56]
	str	x3, [sp, 48]
	str	x4, [sp, 40]
	str	x5, [sp, 32]
	str	x6, [sp, 24]
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui19FindRenderedTextEndEPKcS1_
	str	x0, [sp, 88]
	ldr	x1, [sp, 88]
	ldr	x0, [sp, 56]
	sub	x0, x1, x0
	str	w0, [sp, 84]
	ldr	w0, [sp, 84]
	cmp	w0, 0
	beq	.L1357
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 632]
	ldr	x7, [sp, 24]
	ldr	x6, [sp, 32]
	ldr	x5, [sp, 40]
	ldr	x4, [sp, 88]
	ldr	x3, [sp, 56]
	ldr	x2, [sp, 64]
	ldr	x1, [sp, 72]
	bl	_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect
	ldr	x0, [sp, 96]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L1354
	ldr	x2, [sp, 88]
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_
	b	.L1354
.L1357:
	nop
.L1354:
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1703:
	.size	_ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect, .-_ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect
	.align	2
	.global	_ZN5ImGui18RenderTextEllipsisEP10ImDrawListRK6ImVec2S4_ffPKcS6_PS3_
	.type	_ZN5ImGui18RenderTextEllipsisEP10ImDrawListRK6ImVec2S4_ffPKcS6_PS3_, %function
_ZN5ImGui18RenderTextEllipsisEP10ImDrawListRK6ImVec2S4_ffPKcS6_PS3_:
.LFB1704:
	.cfi_startproc
	stp	x29, x30, [sp, -208]!
	.cfi_def_cfa_offset 208
	.cfi_offset 29, -208
	.cfi_offset 30, -200
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -192
	str	x0, [sp, 88]
	str	x1, [sp, 80]
	str	x2, [sp, 72]
	str	s0, [sp, 68]
	str	s1, [sp, 64]
	str	x3, [sp, 56]
	str	x4, [sp, 48]
	str	x5, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 200]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 176]
	ldr	x0, [sp, 48]
	cmp	x0, 0
	bne	.L1359
	mov	x1, 0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui19FindRenderedTextEndEPKcS1_
	str	x0, [sp, 48]
.L1359:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L1360
	ldr	x0, [sp, 40]
	ldr	x0, [x0]
	str	x0, [sp, 144]
	b	.L1361
.L1360:
	movi	v0.2s, #0
	mov	w2, 0
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui12CalcTextSizeEPKcS1_bf
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 144]
	str	s0, [sp, 148]
.L1361:
	ldr	s1, [sp, 144]
	ldr	x0, [sp, 72]
	ldr	s2, [x0]
	ldr	x0, [sp, 80]
	ldr	s0, [x0]
	fsub	s0, s2, s0
	fcmpe	s1, s0
	bgt	.L1378
	b	.L1380
.L1378:
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 56]
	ldr	x0, [x0, 8]
	str	x0, [sp, 184]
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 56]
	ldr	s0, [x0, 16]
	str	s0, [sp, 132]
	str	xzr, [sp, 152]
	ldr	x0, [sp, 184]
	ldrh	w0, [x0, 84]
	strh	w0, [sp, 106]
	mov	w0, 1
	str	w0, [sp, 108]
	ldrh	w1, [sp, 106]
	mov	w0, 65535
	cmp	w1, w0
	bne	.L1364
	ldr	x0, [sp, 184]
	ldrh	w0, [x0, 86]
	strh	w0, [sp, 106]
	mov	w0, 3
	str	w0, [sp, 108]
.L1364:
	ldrh	w1, [sp, 106]
	ldr	x0, [sp, 184]
	bl	_ZNK6ImFont9FindGlyphEt
	str	x0, [sp, 192]
	ldr	x0, [sp, 192]
	ldr	s0, [x0, 16]
	str	s0, [sp, 112]
	ldr	s0, [sp, 112]
	str	s0, [sp, 116]
	ldr	w0, [sp, 108]
	cmp	w0, 1
	ble	.L1365
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 56]
	ldr	s1, [x0, 16]
	ldr	x0, [sp, 184]
	ldr	s0, [x0, 20]
	fdiv	s0, s1, s0
	str	s0, [sp, 136]
	ldr	x0, [sp, 192]
	ldr	s1, [x0, 16]
	ldr	x0, [sp, 192]
	ldr	s0, [x0, 8]
	fsub	s0, s1, s0
	ldr	s1, [sp, 136]
	fadd	s0, s1, s0
	str	s0, [sp, 112]
	ldr	s0, [sp, 108]
	scvtf	s1, s0
	ldr	s0, [sp, 112]
	fmul	s1, s1, s0
	ldr	s0, [sp, 136]
	fsub	s0, s1, s0
	str	s0, [sp, 116]
.L1365:
	ldr	x0, [sp, 72]
	ldr	s0, [x0]
	ldr	s1, [sp, 64]
	bl	_Z5ImMaxIfET_S0_S0_
	fmov	s1, s0
	ldr	s0, [sp, 116]
	fsub	s1, s1, s0
	ldr	x0, [sp, 80]
	ldr	s0, [x0]
	fsub	s0, s1, s0
	fmov	s1, 1.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 140]
	add	x0, sp, 152
	mov	x3, x0
	ldr	x2, [sp, 48]
	ldr	x1, [sp, 56]
	movi	v2.2s, #0
	ldr	s1, [sp, 140]
	ldr	s0, [sp, 132]
	ldr	x0, [sp, 184]
	bl	_ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	sbfx	x0, x0, 0, 32
	fmov	s0, w0
	str	s0, [sp, 120]
	ldr	x0, [sp, 152]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	bne	.L1367
	ldr	x0, [sp, 152]
	ldr	x1, [sp, 48]
	cmp	x1, x0
	bls	.L1367
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 56]
	bl	_Z28ImTextCountUtf8BytesFromCharPKcS0_
	sxtw	x0, w0
	ldr	x1, [sp, 56]
	add	x0, x1, x0
	str	x0, [sp, 152]
	ldr	x0, [sp, 152]
	mov	x3, 0
	mov	x2, x0
	ldr	x1, [sp, 56]
	movi	v2.2s, #0
	mov	w0, 2139095039
	fmov	s1, w0
	ldr	s0, [sp, 132]
	ldr	x0, [sp, 184]
	bl	_ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	sbfx	x0, x0, 0, 32
	fmov	s0, w0
	str	s0, [sp, 120]
	b	.L1367
.L1370:
	ldr	x0, [sp, 152]
	sub	x0, x0, #1
	str	x0, [sp, 152]
	ldr	x1, [sp, 152]
	ldr	x0, [sp, 152]
	add	x0, x0, 1
	mov	x3, 0
	mov	x2, x0
	movi	v2.2s, #0
	mov	w0, 2139095039
	fmov	s1, w0
	ldr	s0, [sp, 132]
	ldr	x0, [sp, 184]
	bl	_ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	sbfx	x0, x0, 0, 32
	fmov	d1, x0
	ldr	s0, [sp, 120]
	fsub	s0, s0, s1
	str	s0, [sp, 120]
.L1367:
	ldr	x0, [sp, 152]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	bcs	.L1368
	ldr	x0, [sp, 152]
	sub	x0, x0, #1
	ldrb	w0, [x0]
	bl	_ZL14ImCharIsBlankAc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1368
	mov	w0, 1
	b	.L1369
.L1368:
	mov	w0, 0
.L1369:
	cmp	w0, 0
	bne	.L1370
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 4]
	add	x0, sp, 160
	fmov	s1, s0
	ldr	s0, [sp, 68]
	bl	_ZN6ImVec2C1Eff
	ldr	x19, [sp, 152]
	add	x0, sp, 168
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x2, sp, 168
	add	x1, sp, 144
	add	x0, sp, 160
	mov	x7, 0
	mov	x6, x2
	mov	x5, x1
	mov	x4, x19
	ldr	x3, [sp, 56]
	mov	x2, x0
	ldr	x1, [sp, 80]
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect
	ldr	x0, [sp, 80]
	ldr	s0, [x0]
	ldr	s1, [sp, 120]
	fadd	s0, s1, s0
	str	s0, [sp, 124]
	ldr	s1, [sp, 124]
	ldr	s0, [sp, 116]
	fadd	s0, s1, s0
	ldr	s1, [sp, 64]
	fcmpe	s1, s0
	bge	.L1379
	b	.L1375
.L1379:
	str	wzr, [sp, 128]
	b	.L1373
.L1374:
	ldr	x19, [sp, 184]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 4]
	add	x0, sp, 168
	fmov	s1, s0
	ldr	s0, [sp, 124]
	bl	_ZN6ImVec2C1Eff
	fmov	s0, 1.0e+0
	mov	w0, 0
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w1, w0
	add	x0, sp, 168
	ldrh	w4, [sp, 106]
	mov	w3, w1
	mov	x2, x0
	ldr	s0, [sp, 132]
	ldr	x1, [sp, 88]
	mov	x0, x19
	bl	_ZNK6ImFont10RenderCharEP10ImDrawListfRK6ImVec2jt
	ldr	s1, [sp, 124]
	ldr	s0, [sp, 112]
	fadd	s0, s1, s0
	str	s0, [sp, 124]
	ldr	w0, [sp, 128]
	add	w0, w0, 1
	str	w0, [sp, 128]
.L1373:
	ldr	w1, [sp, 128]
	ldr	w0, [sp, 108]
	cmp	w1, w0
	blt	.L1374
	b	.L1375
.L1380:
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 4]
	add	x0, sp, 160
	fmov	s1, s0
	ldr	s0, [sp, 68]
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 168
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x2, sp, 168
	add	x1, sp, 144
	add	x0, sp, 160
	mov	x7, 0
	mov	x6, x2
	mov	x5, x1
	ldr	x4, [sp, 48]
	ldr	x3, [sp, 56]
	mov	x2, x0
	ldr	x1, [sp, 80]
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui19RenderTextClippedExEP10ImDrawListRK6ImVec2S4_PKcS6_PS3_S4_PK6ImRect
.L1375:
	ldr	x0, [sp, 176]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L1381
	ldr	x2, [sp, 48]
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 80]
	bl	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_
.L1381:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 200]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1377
	bl	__stack_chk_fail
.L1377:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 208
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1704:
	.size	_ZN5ImGui18RenderTextEllipsisEP10ImDrawListRK6ImVec2S4_ffPKcS6_PS3_, .-_ZN5ImGui18RenderTextEllipsisEP10ImDrawListRK6ImVec2S4_ffPKcS6_PS3_
	.align	2
	.global	_ZN5ImGui11RenderFrameE6ImVec2S0_jbf
	.type	_ZN5ImGui11RenderFrameE6ImVec2S0_jbf, %function
_ZN5ImGui11RenderFrameE6ImVec2S0_jbf:
.LFB1705:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -112
	fmov	s5, s0
	fmov	s0, s1
	fmov	x2, d5
	fmov	w3, s0
	bfi	x2, x3, 32, 32
	str	x2, [sp, 56]
	fmov	s1, s2
	fmov	s0, s3
	fmov	x2, d1
	fmov	w3, s0
	bfi	x2, x3, 32, 32
	str	x2, [sp, 48]
	str	w0, [sp, 44]
	strb	w1, [sp, 43]
	str	s4, [sp, 36]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	ldr	x0, [x0, 632]
	add	x2, sp, 48
	add	x1, sp, 56
	mov	w4, 0
	ldr	s0, [sp, 36]
	ldr	w3, [sp, 44]
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
	ldr	x0, [sp, 104]
	ldr	s0, [x0, 14376]
	str	s0, [sp, 68]
	ldrb	w0, [sp, 43]
	cmp	w0, 0
	beq	.L1387
	ldr	s0, [sp, 68]
	fcmpe	s0, #0.0
	bgt	.L1386
	b	.L1387
.L1386:
	ldr	x0, [sp, 112]
	ldr	x19, [x0, 632]
	add	x0, sp, 72
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 56
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 88
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 88
	add	x0, sp, 48
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	fmov	s0, 1.0e+0
	mov	w0, 6
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x1, sp, 96
	add	x0, sp, 80
	ldr	s1, [sp, 68]
	mov	w4, 0
	ldr	s0, [sp, 36]
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldr	x0, [sp, 112]
	ldr	x19, [x0, 632]
	fmov	s0, 1.0e+0
	mov	w0, 5
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x1, sp, 48
	add	x0, sp, 56
	ldr	s1, [sp, 68]
	mov	w4, 0
	ldr	s0, [sp, 36]
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L1387:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1385
	bl	__stack_chk_fail
.L1385:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1705:
	.size	_ZN5ImGui11RenderFrameE6ImVec2S0_jbf, .-_ZN5ImGui11RenderFrameE6ImVec2S0_jbf
	.align	2
	.global	_ZN5ImGui17RenderFrameBorderE6ImVec2S0_f
	.type	_ZN5ImGui17RenderFrameBorderE6ImVec2S0_f, %function
_ZN5ImGui17RenderFrameBorderE6ImVec2S0_f:
.LFB1706:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -112
	fmov	s5, s0
	fmov	s0, s1
	fmov	x0, d5
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	str	x0, [sp, 56]
	fmov	s1, s2
	fmov	s0, s3
	fmov	x0, d1
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	str	x0, [sp, 48]
	str	s4, [sp, 44]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 112]
	ldr	x0, [sp, 104]
	ldr	s0, [x0, 14376]
	str	s0, [sp, 68]
	ldr	s0, [sp, 68]
	fcmpe	s0, #0.0
	bgt	.L1392
	b	.L1393
.L1392:
	ldr	x0, [sp, 112]
	ldr	x19, [x0, 632]
	add	x0, sp, 72
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 56
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 88
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 88
	add	x0, sp, 48
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	fmov	s0, 1.0e+0
	mov	w0, 6
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x1, sp, 96
	add	x0, sp, 80
	ldr	s1, [sp, 68]
	mov	w4, 0
	ldr	s0, [sp, 44]
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldr	x0, [sp, 112]
	ldr	x19, [x0, 632]
	fmov	s0, 1.0e+0
	mov	w0, 5
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x1, sp, 48
	add	x0, sp, 56
	ldr	s1, [sp, 68]
	mov	w4, 0
	ldr	s0, [sp, 44]
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L1393:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1391
	bl	__stack_chk_fail
.L1391:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1706:
	.size	_ZN5ImGui17RenderFrameBorderE6ImVec2S0_f, .-_ZN5ImGui17RenderFrameBorderE6ImVec2S0_f
	.align	2
	.global	_ZN5ImGui18RenderNavHighlightERK6ImRectji
	.type	_ZN5ImGui18RenderNavHighlightERK6ImRectji, %function
_ZN5ImGui18RenderNavHighlightERK6ImRectji:
.LFB1707:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -128
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	w2, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L1406
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	cmp	w0, 0
	beq	.L1397
	ldr	w0, [sp, 32]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L1407
.L1397:
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 320]
	cmp	w0, 0
	bne	.L1408
	ldr	w0, [sp, 32]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L1399
	ldr	x0, [sp, 104]
	ldr	s0, [x0, 14372]
	b	.L1400
.L1399:
	movi	v0.2s, #0
.L1400:
	str	s0, [sp, 60]
	ldr	x0, [sp, 40]
	ldp	x0, x1, [x0]
	stp	x0, x1, [sp, 120]
	ldr	x0, [sp, 112]
	add	x1, x0, 536
	add	x0, sp, 120
	bl	_ZN6ImRect8ClipWithERKS_
	ldr	w0, [sp, 32]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L1401
	fmov	s0, 2.0e+0
	str	s0, [sp, 64]
	fmov	s0, 4.0e+0
	str	s0, [sp, 68]
	add	x0, sp, 96
	fmov	s1, 4.0e+0
	fmov	s0, 4.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 96
	add	x0, sp, 120
	bl	_ZN6ImRect6ExpandERK6ImVec2
	ldr	x0, [sp, 112]
	add	x0, x0, 536
	add	x1, sp, 120
	bl	_ZNK6ImRect8ContainsERKS_
	strb	w0, [sp, 59]
	ldrb	w0, [sp, 59]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1402
	ldr	x0, [sp, 112]
	ldr	x4, [x0, 632]
	add	x0, sp, 120
	add	x1, x0, 8
	add	x0, sp, 120
	mov	w3, 0
	mov	x2, x1
	mov	x1, x0
	mov	x0, x4
	bl	_ZN10ImDrawList12PushClipRectERK6ImVec2S2_b
.L1402:
	ldr	x0, [sp, 112]
	ldr	x19, [x0, 632]
	add	x0, sp, 72
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 120
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 88
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 88
	add	x0, sp, 120
	add	x0, x0, 8
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	fmov	s0, 1.0e+0
	mov	w0, 49
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x1, sp, 96
	add	x0, sp, 80
	fmov	s1, 2.0e+0
	mov	w4, 0
	ldr	s0, [sp, 60]
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldrb	w0, [sp, 59]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1401
	ldr	x0, [sp, 112]
	ldr	x0, [x0, 632]
	bl	_ZN10ImDrawList11PopClipRectEv
.L1401:
	ldr	w0, [sp, 32]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L1394
	ldr	x0, [sp, 112]
	ldr	x19, [x0, 632]
	fmov	s0, 1.0e+0
	mov	w0, 49
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x0, sp, 120
	add	x1, x0, 8
	add	x0, sp, 120
	fmov	s1, 1.0e+0
	mov	w4, 0
	ldr	s0, [sp, 60]
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	b	.L1394
.L1406:
	nop
	b	.L1394
.L1407:
	nop
	b	.L1394
.L1408:
	nop
.L1394:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1405
	bl	__stack_chk_fail
.L1405:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1707:
	.size	_ZN5ImGui18RenderNavHighlightERK6ImRectji, .-_ZN5ImGui18RenderNavHighlightERK6ImRectji
	.section	.rodata
	.align	3
.LC156:
	.string	"void ImGui::RenderMouseCursor(ImVec2, float, ImGuiMouseCursor, ImU32, ImU32, ImU32)"
	.align	3
.LC157:
	.string	"mouse_cursor > ImGuiMouseCursor_None && mouse_cursor < ImGuiMouseCursor_COUNT"
	.text
	.align	2
	.global	_ZN5ImGui17RenderMouseCursorE6ImVec2fijjj
	.type	_ZN5ImGui17RenderMouseCursorE6ImVec2fijjj, %function
_ZN5ImGui17RenderMouseCursorE6ImVec2fijjj:
.LFB1708:
	.cfi_startproc
	stp	x29, x30, [sp, -240]!
	.cfi_def_cfa_offset 240
	.cfi_offset 29, -240
	.cfi_offset 30, -232
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -224
	fmov	s3, s0
	fmov	s0, s1
	fmov	x4, d3
	fmov	w5, s0
	bfi	x4, x5, 32, 32
	str	x4, [sp, 56]
	str	s2, [sp, 52]
	str	w0, [sp, 48]
	str	w1, [sp, 44]
	str	w2, [sp, 40]
	str	w3, [sp, 36]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 232]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 160]
	ldr	w0, [sp, 48]
	cmp	w0, 0
	blt	.L1410
	ldr	w0, [sp, 48]
	cmp	w0, 8
	ble	.L1416
.L1410:
	adrp	x0, .LC156
	add	x3, x0, :lo12:.LC156
	mov	w2, 3368
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC157
	add	x0, x0, :lo12:.LC157
	bl	__assert_fail
.L1416:
	str	wzr, [sp, 72]
	b	.L1412
.L1414:
	ldr	x1, [sp, 160]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 72]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 168]
	ldr	x0, [sp, 168]
	bl	_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport
	str	x0, [sp, 176]
	ldr	x0, [sp, 176]
	ldr	x0, [x0, 56]
	ldr	x0, [x0, 8]
	ldr	x0, [x0, 64]
	str	x0, [sp, 184]
	str	wzr, [sp, 80]
	str	wzr, [sp, 84]
	str	wzr, [sp, 88]
	str	wzr, [sp, 92]
	add	x0, sp, 248
	sub	x0, x0, #48
	adrp	x1, .LC158
	add	x1, x1, :lo12:.LC158
	ld1	{v0.16b - v1.16b}, [x1]
	st1	{v0.16b - v1.16b}, [x0]
	add	x0, sp, 200
	add	x3, x0, 16
	add	x2, sp, 200
	add	x1, sp, 88
	add	x0, sp, 80
	mov	x5, x3
	mov	x4, x2
	mov	x3, x1
	mov	x2, x0
	ldr	w1, [sp, 48]
	ldr	x0, [sp, 184]
	bl	_ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1413
	add	x1, sp, 80
	add	x0, sp, 56
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	ldr	s0, [sp, 52]
	str	s0, [sp, 76]
	ldr	x0, [sp, 184]
	ldr	x0, [x0, 8]
	str	x0, [sp, 192]
	ldr	x1, [sp, 192]
	ldr	x0, [sp, 176]
	bl	_ZN10ImDrawList13PushTextureIDEPv
	ldr	x19, [sp, 176]
	add	x0, sp, 104
	movi	v1.2s, #0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 104
	ldr	s0, [sp, 76]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	add	x1, sp, 112
	add	x0, sp, 96
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 120]
	str	s0, [sp, 124]
	add	x0, sp, 128
	movi	v1.2s, #0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 88
	add	x0, sp, 128
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	add	x0, sp, 136
	ldr	s0, [sp, 76]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 144]
	str	s0, [sp, 148]
	add	x1, sp, 144
	add	x0, sp, 96
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 152]
	str	s0, [sp, 156]
	add	x0, sp, 200
	add	x3, x0, 24
	add	x0, sp, 200
	add	x2, x0, 16
	add	x1, sp, 152
	add	x0, sp, 120
	ldr	w6, [sp, 36]
	mov	x5, x3
	mov	x4, x2
	mov	x3, x1
	mov	x2, x0
	ldr	x1, [sp, 192]
	mov	x0, x19
	bl	_ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j
	ldr	x19, [sp, 176]
	add	x0, sp, 104
	movi	v1.2s, #0
	fmov	s0, 2.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 104
	ldr	s0, [sp, 76]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	add	x1, sp, 112
	add	x0, sp, 96
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 120]
	str	s0, [sp, 124]
	add	x0, sp, 128
	movi	v1.2s, #0
	fmov	s0, 2.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 88
	add	x0, sp, 128
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	add	x0, sp, 136
	ldr	s0, [sp, 76]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 144]
	str	s0, [sp, 148]
	add	x1, sp, 144
	add	x0, sp, 96
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 152]
	str	s0, [sp, 156]
	add	x0, sp, 200
	add	x3, x0, 24
	add	x0, sp, 200
	add	x2, x0, 16
	add	x1, sp, 152
	add	x0, sp, 120
	ldr	w6, [sp, 36]
	mov	x5, x3
	mov	x4, x2
	mov	x3, x1
	mov	x2, x0
	ldr	x1, [sp, 192]
	mov	x0, x19
	bl	_ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j
	ldr	x19, [sp, 176]
	add	x0, sp, 88
	ldr	s0, [sp, 76]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 144]
	str	s0, [sp, 148]
	add	x1, sp, 144
	add	x0, sp, 96
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 152]
	str	s0, [sp, 156]
	add	x0, sp, 200
	add	x3, x0, 24
	add	x0, sp, 200
	add	x2, x0, 16
	add	x1, sp, 152
	add	x0, sp, 96
	ldr	w6, [sp, 40]
	mov	x5, x3
	mov	x4, x2
	mov	x3, x1
	mov	x2, x0
	ldr	x1, [sp, 192]
	mov	x0, x19
	bl	_ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j
	ldr	x19, [sp, 176]
	add	x0, sp, 88
	ldr	s0, [sp, 76]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 144]
	str	s0, [sp, 148]
	add	x1, sp, 144
	add	x0, sp, 96
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 152]
	str	s0, [sp, 156]
	add	x0, sp, 200
	add	x3, x0, 8
	add	x2, sp, 200
	add	x1, sp, 152
	add	x0, sp, 96
	ldr	w6, [sp, 44]
	mov	x5, x3
	mov	x4, x2
	mov	x3, x1
	mov	x2, x0
	ldr	x1, [sp, 192]
	mov	x0, x19
	bl	_ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j
	ldr	x0, [sp, 176]
	bl	_ZN10ImDrawList12PopTextureIDEv
.L1413:
	ldr	w0, [sp, 72]
	add	w0, w0, 1
	str	w0, [sp, 72]
.L1412:
	ldr	x0, [sp, 160]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 72]
	cmp	w1, w0
	blt	.L1414
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 232]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1415
	bl	__stack_chk_fail
.L1415:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 240
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1708:
	.size	_ZN5ImGui17RenderMouseCursorE6ImVec2fijjj, .-_ZN5ImGui17RenderMouseCursorE6ImVec2fijjj
	.section	.text._ZN19ImGuiWindowTempDataC2Ev,"axG",@progbits,_ZN19ImGuiWindowTempDataC5Ev,comdat
	.align	2
	.weak	_ZN19ImGuiWindowTempDataC2Ev
	.type	_ZN19ImGuiWindowTempDataC2Ev, %function
_ZN19ImGuiWindowTempDataC2Ev:
.LFB1711:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 32
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 40
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 48
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 68
	bl	_ZN6ImVec1C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 72
	bl	_ZN6ImVec1C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 76
	bl	_ZN6ImVec1C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 80
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 100
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 108
	bl	_ZN16ImGuiMenuColumnsC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 144
	bl	_ZN8ImVectorIP11ImGuiWindowEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 200
	bl	_ZN8ImVectorIfEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 216
	bl	_ZN8ImVectorIfEC1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1711:
	.size	_ZN19ImGuiWindowTempDataC2Ev, .-_ZN19ImGuiWindowTempDataC2Ev
	.weak	_ZN19ImGuiWindowTempDataC1Ev
	.set	_ZN19ImGuiWindowTempDataC1Ev,_ZN19ImGuiWindowTempDataC2Ev
	.section	.text._ZN19ImGuiWindowTempDataD2Ev,"axG",@progbits,_ZN19ImGuiWindowTempDataD5Ev,comdat
	.align	2
	.weak	_ZN19ImGuiWindowTempDataD2Ev
	.type	_ZN19ImGuiWindowTempDataD2Ev, %function
_ZN19ImGuiWindowTempDataD2Ev:
.LFB1714:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 216
	bl	_ZN8ImVectorIfED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 200
	bl	_ZN8ImVectorIfED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 144
	bl	_ZN8ImVectorIP11ImGuiWindowED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1714:
	.size	_ZN19ImGuiWindowTempDataD2Ev, .-_ZN19ImGuiWindowTempDataD2Ev
	.weak	_ZN19ImGuiWindowTempDataD1Ev
	.set	_ZN19ImGuiWindowTempDataD1Ev,_ZN19ImGuiWindowTempDataD2Ev
	.section	.rodata
	.align	3
.LC159:
	.string	"#MOVE"
	.text
	.align	2
	.global	_ZN11ImGuiWindowC2EP12ImGuiContextPKc
	.type	_ZN11ImGuiWindowC2EP12ImGuiContextPKc, %function
_ZN11ImGuiWindowC2EP12ImGuiContextPKc:
.LFB1716:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1716
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 56]
	add	x0, x0, 24
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 32
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 40
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 48
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 56
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 64
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 72
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 100
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 108
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 116
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 124
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 132
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 140
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 192
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 200
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjEC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 224
	bl	_ZN19ImGuiWindowTempDataC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 456
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 472
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 488
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 504
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 520
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 536
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 552
	bl	_ZN6ImRectC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 568
	bl	_ZN8ImVec2ihC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 572
	bl	_ZN8ImVec2ihC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 592
	bl	_ZN12ImGuiStorageC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 608
	bl	_ZN8ImVectorI15ImGuiOldColumnsEC1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 640
	mov	x1, 0
	bl	_ZN10ImDrawListC1EP20ImDrawListSharedData
	ldr	x0, [sp, 56]
	add	x0, x0, 1024
	sub	x0, x0, #120
	stp	xzr, xzr, [x0]
	stp	xzr, xzr, [x0, 16]
	mov	x2, 952
	mov	w1, 0
	ldr	x0, [sp, 56]
	bl	memset
	ldr	x0, [sp, 40]
.LEHB16:
	bl	_Z8ImStrdupPKc
	mov	x1, x0
	ldr	x0, [sp, 56]
	str	x1, [x0]
	ldr	x0, [sp, 40]
	bl	strlen
	add	w1, w0, 1
	ldr	x0, [sp, 56]
	str	w1, [x0, 88]
	mov	w2, 0
	mov	x1, 0
	ldr	x0, [sp, 40]
	bl	_Z9ImHashStrPKcmj
	mov	w1, w0
	ldr	x0, [sp, 56]
	str	w1, [x0, 8]
	ldr	x0, [sp, 56]
	add	x2, x0, 208
	ldr	x0, [sp, 56]
	add	x0, x0, 8
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIjE9push_backERKj
	mov	x2, 0
	adrp	x0, .LC159
	add	x1, x0, :lo12:.LC159
	ldr	x0, [sp, 56]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
.LEHE16:
	mov	w1, w0
	ldr	x0, [sp, 56]
	str	w1, [x0, 92]
	add	x0, sp, 64
	mov	w1, 2139095039
	fmov	s1, w1
	mov	w1, 2139095039
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 64]
	str	x1, [x0, 116]
	add	x0, sp, 64
	fmov	s1, 5.0e-1
	fmov	s0, 5.0e-1
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 64]
	str	x1, [x0, 124]
	ldr	x0, [sp, 56]
	mov	w1, -1
	strb	w1, [x0, 177]
	ldr	x0, [sp, 56]
	ldrsb	w1, [x0, 177]
	ldr	x0, [sp, 56]
	strb	w1, [x0, 176]
	ldr	x0, [sp, 56]
	mov	w1, -1
	str	w1, [x0, 180]
	ldr	x0, [sp, 56]
	mov	w1, 15
	strb	w1, [x0, 190]
	ldr	x0, [sp, 56]
	mov	w1, 15
	strb	w1, [x0, 189]
	ldr	x0, [sp, 56]
	ldrsb	w1, [x0, 189]
	ldr	x0, [sp, 56]
	strb	w1, [x0, 188]
	add	x0, sp, 64
	mov	w1, 2139095039
	fmov	s1, w1
	mov	w1, 2139095039
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 64]
	str	x1, [x0, 200]
	ldr	x0, [sp, 56]
	add	x1, x0, 200
	ldr	x0, [sp, 56]
	ldr	x1, [x1]
	str	x1, [x0, 192]
	ldr	x0, [sp, 56]
	mov	w1, -1
	str	w1, [x0, 576]
	ldr	x0, [sp, 56]
	fmov	s0, -1.0e+0
	str	s0, [x0, 580]
	ldr	x0, [sp, 56]
	fmov	s0, 1.0e+0
	str	s0, [x0, 624]
	ldr	x0, [sp, 56]
	mov	w1, -1
	str	w1, [x0, 628]
	ldr	x0, [sp, 56]
	add	x1, x0, 640
	ldr	x0, [sp, 56]
	str	x1, [x0, 632]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 632]
	ldr	x2, [sp, 48]
	mov	x1, 15368
	add	x1, x2, x1
	str	x1, [x0, 56]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 632]
	ldr	x1, [sp, 56]
	ldr	x1, [x1]
	str	x1, [x0, 64]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1421
	b	.L1423
.L1422:
	mov	x19, x0
	ldr	x0, [sp, 56]
	add	x0, x0, 640
	bl	_ZN10ImDrawListD1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 608
	bl	_ZN8ImVectorI15ImGuiOldColumnsED1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 592
	bl	_ZN12ImGuiStorageD1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 224
	bl	_ZN19ImGuiWindowTempDataD1Ev
	ldr	x0, [sp, 56]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjED1Ev
	mov	x0, x19
.LEHB17:
	bl	_Unwind_Resume
.LEHE17:
.L1423:
	bl	__stack_chk_fail
.L1421:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1716:
	.section	.gcc_except_table
.LLSDA1716:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1716-.LLSDACSB1716
.LLSDACSB1716:
	.uleb128 .LEHB16-.LFB1716
	.uleb128 .LEHE16-.LEHB16
	.uleb128 .L1422-.LFB1716
	.uleb128 0
	.uleb128 .LEHB17-.LFB1716
	.uleb128 .LEHE17-.LEHB17
	.uleb128 0
	.uleb128 0
.LLSDACSE1716:
	.text
	.size	_ZN11ImGuiWindowC2EP12ImGuiContextPKc, .-_ZN11ImGuiWindowC2EP12ImGuiContextPKc
	.global	_ZN11ImGuiWindowC1EP12ImGuiContextPKc
	.set	_ZN11ImGuiWindowC1EP12ImGuiContextPKc,_ZN11ImGuiWindowC2EP12ImGuiContextPKc
	.section	.rodata
	.align	3
.LC160:
	.string	"ImGuiWindow::~ImGuiWindow()"
	.align	3
.LC161:
	.string	"DrawList == &DrawListInst"
	.text
	.align	2
	.global	_ZN11ImGuiWindowD2Ev
	.type	_ZN11ImGuiWindowD2Ev, %function
_ZN11ImGuiWindowD2Ev:
.LFB1719:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1719
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 632]
	ldr	x0, [sp, 24]
	add	x0, x0, 640
	cmp	x1, x0
	beq	.L1425
	adrp	x0, .LC160
	add	x3, x0, :lo12:.LC160
	mov	w2, 3421
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC161
	add	x0, x0, :lo12:.LC161
	bl	__assert_fail
.L1425:
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	bl	_Z9IM_DELETEIcEvPT_
	ldr	x0, [sp, 24]
	add	x0, x0, 608
	bl	_ZN8ImVectorI15ImGuiOldColumnsE14clear_destructEv
	ldr	x0, [sp, 24]
	add	x0, x0, 640
	bl	_ZN10ImDrawListD1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 608
	bl	_ZN8ImVectorI15ImGuiOldColumnsED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 592
	bl	_ZN12ImGuiStorageD1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 224
	bl	_ZN19ImGuiWindowTempDataD1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1719:
	.section	.gcc_except_table
.LLSDA1719:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1719-.LLSDACSB1719
.LLSDACSB1719:
.LLSDACSE1719:
	.text
	.size	_ZN11ImGuiWindowD2Ev, .-_ZN11ImGuiWindowD2Ev
	.global	_ZN11ImGuiWindowD1Ev
	.set	_ZN11ImGuiWindowD1Ev,_ZN11ImGuiWindowD2Ev
	.align	2
	.global	_ZN11ImGuiWindow5GetIDEPKcS1_
	.type	_ZN11ImGuiWindow5GetIDEPKcS1_, %function
_ZN11ImGuiWindow5GetIDEPKcS1_:
.LFB1721:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjE4backEv
	ldr	w0, [x0]
	str	w0, [sp, 48]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L1427
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 32]
	sub	x0, x1, x0
	b	.L1428
.L1427:
	mov	x0, 0
.L1428:
	ldr	w2, [sp, 48]
	mov	x1, x0
	ldr	x0, [sp, 32]
	bl	_Z9ImHashStrPKcmj
	str	w0, [sp, 52]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 16084]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	bne	.L1429
	ldr	x3, [sp, 24]
	ldr	x2, [sp, 32]
	mov	w1, 11
	ldr	w0, [sp, 52]
	bl	_ZN5ImGui15DebugHookIdInfoEjiPKvS1_
.L1429:
	ldr	w0, [sp, 52]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1721:
	.size	_ZN11ImGuiWindow5GetIDEPKcS1_, .-_ZN11ImGuiWindow5GetIDEPKcS1_
	.align	2
	.global	_ZN11ImGuiWindow5GetIDEPKv
	.type	_ZN11ImGuiWindow5GetIDEPKv, %function
_ZN11ImGuiWindow5GetIDEPKv:
.LFB1722:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjE4backEv
	ldr	w0, [x0]
	str	w0, [sp, 32]
	add	x0, sp, 16
	ldr	w2, [sp, 32]
	mov	x1, 8
	bl	_Z10ImHashDataPKvmj
	str	w0, [sp, 36]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16084]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L1432
	ldr	x0, [sp, 16]
	mov	x3, 0
	mov	x2, x0
	mov	w1, 12
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui15DebugHookIdInfoEjiPKvS1_
.L1432:
	ldr	w0, [sp, 36]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1722:
	.size	_ZN11ImGuiWindow5GetIDEPKv, .-_ZN11ImGuiWindow5GetIDEPKv
	.align	2
	.global	_ZN11ImGuiWindow5GetIDEi
	.type	_ZN11ImGuiWindow5GetIDEi, %function
_ZN11ImGuiWindow5GetIDEi:
.LFB1723:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjE4backEv
	ldr	w0, [x0]
	str	w0, [sp, 32]
	add	x0, sp, 20
	ldr	w2, [sp, 32]
	mov	x1, 4
	bl	_Z10ImHashDataPKvmj
	str	w0, [sp, 36]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16084]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L1435
	ldr	w0, [sp, 20]
	sxtw	x0, w0
	mov	x3, 0
	mov	x2, x0
	mov	w1, 4
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui15DebugHookIdInfoEjiPKvS1_
.L1435:
	ldr	w0, [sp, 36]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1723:
	.size	_ZN11ImGuiWindow5GetIDEi, .-_ZN11ImGuiWindow5GetIDEi
	.align	2
	.global	_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect
	.type	_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect, %function
_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect:
.LFB1724:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 24]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjE4backEv
	ldr	w0, [x0]
	str	w0, [sp, 32]
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 40]
	str	s4, [sp, 44]
	str	s1, [sp, 48]
	str	s0, [sp, 52]
	add	x0, sp, 40
	ldr	w2, [sp, 32]
	mov	x1, 16
	bl	_Z10ImHashDataPKvmj
	str	w0, [sp, 36]
	ldr	w0, [sp, 36]
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 56]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L1439
	bl	__stack_chk_fail
.L1439:
	mov	w0, w1
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1724:
	.size	_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect, .-_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect
	.align	2
	.type	_ZL16SetCurrentWindowP11ImGuiWindow, %function
_ZL16SetCurrentWindowP11ImGuiWindow:
.LFB1725:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 24]
	str	x1, [x0, 16032]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L1441
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 400]
	cmn	w0, #1
	beq	.L1441
	ldr	x1, [sp, 40]
	mov	x0, 19184
	add	x2, x1, x0
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 400]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN6ImPoolI10ImGuiTableE10GetByIndexEi
	mov	x1, x0
	b	.L1442
.L1441:
	mov	x1, 0
.L1442:
	ldr	x0, [sp, 40]
	str	x1, [x0, 19152]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L1444
	ldr	x0, [sp, 24]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	ldr	x0, [sp, 40]
	str	s0, [x0, 15384]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 15384]
	ldr	x0, [sp, 40]
	str	s0, [x0, 15360]
.L1444:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1725:
	.size	_ZL16SetCurrentWindowP11ImGuiWindow, .-_ZL16SetCurrentWindowP11ImGuiWindow
	.align	2
	.global	_ZN5ImGui29GcCompactTransientMiscBuffersEv
	.type	_ZN5ImGui29GcCompactTransientMiscBuffersEv, %function
_ZN5ImGui29GcCompactTransientMiscBuffersEv:
.LFB1726:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x1, [sp, 24]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 18464
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiGroupDataE5clearEv
	bl	_ZN5ImGui22TableGcCompactSettingsEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1726:
	.size	_ZN5ImGui29GcCompactTransientMiscBuffersEv, .-_ZN5ImGui29GcCompactTransientMiscBuffersEv
	.align	2
	.global	_ZN5ImGui31GcCompactTransientWindowBuffersEP11ImGuiWindow
	.type	_ZN5ImGui31GcCompactTransientWindowBuffersEP11ImGuiWindow, %function
_ZN5ImGui31GcCompactTransientWindowBuffersEP11ImGuiWindow:
.LFB1727:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 948]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 632]
	ldr	w1, [x0, 20]
	ldr	x0, [sp, 24]
	str	w1, [x0, 940]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 632]
	ldr	w1, [x0, 36]
	ldr	x0, [sp, 24]
	str	w1, [x0, 944]
	ldr	x0, [sp, 24]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjE5clearEv
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 632]
	bl	_ZN10ImDrawList16_ClearFreeMemoryEv
	ldr	x0, [sp, 24]
	add	x0, x0, 368
	bl	_ZN8ImVectorIP11ImGuiWindowE5clearEv
	ldr	x0, [sp, 24]
	add	x0, x0, 424
	bl	_ZN8ImVectorIfE5clearEv
	ldr	x0, [sp, 24]
	add	x0, x0, 440
	bl	_ZN8ImVectorIfE5clearEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1727:
	.size	_ZN5ImGui31GcCompactTransientWindowBuffersEP11ImGuiWindow, .-_ZN5ImGui31GcCompactTransientWindowBuffersEP11ImGuiWindow
	.align	2
	.global	_ZN5ImGui29GcAwakeTransientWindowBuffersEP11ImGuiWindow
	.type	_ZN5ImGui29GcAwakeTransientWindowBuffersEP11ImGuiWindow, %function
_ZN5ImGui29GcAwakeTransientWindowBuffersEP11ImGuiWindow:
.LFB1728:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 948]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 632]
	add	x2, x0, 16
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 940]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorItE7reserveEi
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 632]
	add	x2, x0, 32
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 944]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI10ImDrawVertE7reserveEi
	ldr	x0, [sp, 24]
	str	wzr, [x0, 944]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 944]
	ldr	x0, [sp, 24]
	str	w1, [x0, 940]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1728:
	.size	_ZN5ImGui29GcAwakeTransientWindowBuffersEP11ImGuiWindow, .-_ZN5ImGui29GcAwakeTransientWindowBuffersEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC162:
	.string	"SetActiveID() cancel MovingWindow\n"
	.align	3
.LC163:
	.string	"SetActiveID() old:0x%08X (window \"%s\") -> new:0x%08X (window \"%s\")\n"
	.text
	.align	2
	.global	_ZN5ImGui11SetActiveIDEjP11ImGuiWindow
	.type	_ZN5ImGui11SetActiveIDEjP11ImGuiWindow, %function
_ZN5ImGui11SetActiveIDEjP11ImGuiWindow:
.LFB1729:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	x1, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16056]
	cmp	x0, 0
	beq	.L1449
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16056]
	ldr	w0, [x0, 92]
	cmp	w1, w0
	bne	.L1449
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L1450
	adrp	x0, .LC162
	add	x0, x0, :lo12:.LC162
	bl	_ZN5ImGui8DebugLogEPKcz
.L1450:
	ldr	x0, [sp, 40]
	str	xzr, [x0, 16056]
.L1449:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	strb	w1, [x0, 3832]
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3832]
	cmp	w0, 0
	beq	.L1451
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L1452
	ldr	x0, [sp, 40]
	ldr	w5, [x0, 16108]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16136]
	cmp	x0, 0
	beq	.L1453
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16136]
	ldr	x0, [x0]
	b	.L1454
.L1453:
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
.L1454:
	ldr	x1, [sp, 16]
	cmp	x1, 0
	beq	.L1455
	ldr	x1, [sp, 16]
	ldr	x1, [x1]
	b	.L1456
.L1455:
	adrp	x1, .LC67
	add	x1, x1, :lo12:.LC67
.L1456:
	mov	x4, x1
	ldr	w3, [sp, 28]
	mov	x2, x0
	mov	w1, w5
	adrp	x0, .LC163
	add	x0, x0, :lo12:.LC163
	bl	_ZN5ImGui8DebugLogEPKcz
.L1452:
	ldr	x0, [sp, 40]
	str	wzr, [x0, 16116]
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	strb	wzr, [x0, 3835]
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	strb	wzr, [x0, 3836]
	ldr	x0, [sp, 40]
	mov	w1, -1
	str	w1, [x0, 16148]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	beq	.L1451
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 28]
	str	w1, [x0, 16168]
	ldr	x0, [sp, 40]
	str	wzr, [x0, 16172]
.L1451:
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 28]
	str	w1, [x0, 16108]
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	strb	wzr, [x0, 3833]
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	strb	wzr, [x0, 3834]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 16]
	str	x1, [x0, 16136]
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	strb	wzr, [x0, 3837]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	beq	.L1457
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 28]
	str	w1, [x0, 16112]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2168]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	beq	.L1458
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2180]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	beq	.L1458
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2188]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bne	.L1459
.L1458:
	mov	w0, 5
	b	.L1460
.L1459:
	mov	w0, 1
.L1460:
	ldr	x1, [sp, 40]
	str	w0, [x1, 16144]
.L1457:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	wzr, [x0, 1784]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strb	wzr, [x0, 1788]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	wzr, [x0, 1792]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1729:
	.size	_ZN5ImGui11SetActiveIDEjP11ImGuiWindow, .-_ZN5ImGui11SetActiveIDEjP11ImGuiWindow
	.align	2
	.global	_ZN5ImGui13ClearActiveIDEv
	.type	_ZN5ImGui13ClearActiveIDEv, %function
_ZN5ImGui13ClearActiveIDEv:
.LFB1730:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	mov	x1, 0
	mov	w0, 0
	bl	_ZN5ImGui11SetActiveIDEjP11ImGuiWindow
	nop
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1730:
	.size	_ZN5ImGui13ClearActiveIDEv, .-_ZN5ImGui13ClearActiveIDEv
	.align	2
	.global	_ZN5ImGui12SetHoveredIDEj
	.type	_ZN5ImGui12SetHoveredIDEj, %function
_ZN5ImGui12SetHoveredIDEj:
.LFB1731:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 12]
	str	w1, [x0, 16088]
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	strb	wzr, [x0, 3808]
	ldr	w0, [sp, 12]
	cmp	w0, 0
	beq	.L1464
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16092]
	ldr	w1, [sp, 12]
	cmp	w1, w0
	beq	.L1464
	ldr	x0, [sp, 24]
	str	wzr, [x0, 16104]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 16104]
	ldr	x0, [sp, 24]
	str	s0, [x0, 16100]
.L1464:
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1731:
	.size	_ZN5ImGui12SetHoveredIDEj, .-_ZN5ImGui12SetHoveredIDEj
	.align	2
	.global	_ZN5ImGui12GetHoveredIDEv
	.type	_ZN5ImGui12GetHoveredIDEv, %function
_ZN5ImGui12GetHoveredIDEv:
.LFB1732:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	beq	.L1466
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16088]
	b	.L1468
.L1466:
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16092]
.L1468:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1732:
	.size	_ZN5ImGui12GetHoveredIDEv, .-_ZN5ImGui12GetHoveredIDEv
	.align	2
	.global	_ZN5ImGui11KeepAliveIDEj
	.type	_ZN5ImGui11KeepAliveIDEj, %function
_ZN5ImGui11KeepAliveIDEj:
.LFB1733:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 12]
	cmp	w1, w0
	bne	.L1470
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 12]
	str	w1, [x0, 16112]
.L1470:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16152]
	ldr	w1, [sp, 12]
	cmp	w1, w0
	bne	.L1472
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3868]
.L1472:
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1733:
	.size	_ZN5ImGui11KeepAliveIDEj, .-_ZN5ImGui11KeepAliveIDEj
	.section	.rodata
	.align	3
.LC164:
	.string	"void ImGui::MarkItemEdited(ImGuiID)"
	.align	3
.LC165:
	.string	"g.ActiveId == id || g.ActiveId == 0 || g.DragDropActive"
	.text
	.align	2
	.global	_ZN5ImGui14MarkItemEditedEj
	.type	_ZN5ImGui14MarkItemEditedEj, %function
_ZN5ImGui14MarkItemEditedEj:
.LFB1734:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	beq	.L1474
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L1474
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	bne	.L1474
	adrp	x0, .LC164
	add	x3, x0, :lo12:.LC164
	mov	w2, 3592
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC165
	add	x0, x0, :lo12:.LC165
	bl	__assert_fail
.L1474:
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3837]
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3836]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	orr	w1, w0, 4
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1734:
	.size	_ZN5ImGui14MarkItemEditedEj, .-_ZN5ImGui14MarkItemEditedEj
	.align	2
	.type	_ZL24IsWindowContentHoverableP11ImGuiWindowi, %function
_ZL24IsWindowContentHoverableP11ImGuiWindowi:
.LFB1735:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L1476
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0, 856]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L1476
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 151]
	cmp	w0, 0
	beq	.L1476
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	beq	.L1476
	strb	wzr, [sp, 47]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 134217728
	cmp	w0, 0
	beq	.L1477
	mov	w0, 1
	strb	w0, [sp, 47]
	b	.L1478
.L1477:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L1478
	ldr	w0, [sp, 20]
	and	w0, w0, 32
	cmp	w0, 0
	bne	.L1478
	mov	w0, 1
	strb	w0, [sp, 47]
.L1478:
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L1476
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 56]
	bl	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1476
	mov	w0, 0
	b	.L1479
.L1476:
	mov	w0, 1
.L1479:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1735:
	.size	_ZL24IsWindowContentHoverableP11ImGuiWindowi, .-_ZL24IsWindowContentHoverableP11ImGuiWindowi
	.section	.rodata
	.align	3
.LC166:
	.string	"bool ImGui::IsItemHovered(ImGuiHoveredFlags)"
	.align	3
.LC167:
	.string	"(flags & (ImGuiHoveredFlags_AnyWindow | ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_NoPopupHierarchy)) == 0"
	.text
	.align	2
	.global	_ZN5ImGui13IsItemHoveredEi
	.type	_ZN5ImGui13IsItemHoveredEi, %function
_ZN5ImGui13IsItemHoveredEi:
.LFB1736:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2219]
	cmp	w0, 0
	beq	.L1481
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1481
	ldr	w0, [sp, 28]
	and	w0, w0, 1024
	cmp	w0, 0
	bne	.L1481
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1832]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L1482
	ldr	w0, [sp, 28]
	and	w0, w0, 512
	cmp	w0, 0
	bne	.L1482
	mov	w0, 0
	b	.L1483
.L1482:
	bl	_ZN5ImGui13IsItemFocusedEv
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1485
	mov	w0, 0
	b	.L1483
.L1481:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	str	w0, [sp, 40]
	ldr	w0, [sp, 40]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L1486
	mov	w0, 0
	b	.L1483
.L1486:
	ldr	w0, [sp, 28]
	and	w0, w0, 15
	cmp	w0, 0
	beq	.L1487
	adrp	x0, .LC166
	add	x3, x0, :lo12:.LC166
	mov	w2, 3645
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC167
	add	x0, x0, :lo12:.LC167
	bl	__assert_fail
.L1487:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16040]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	beq	.L1488
	ldr	w0, [sp, 40]
	and	w0, w0, 128
	cmp	w0, 0
	bne	.L1488
	ldr	w0, [sp, 28]
	and	w0, w0, 256
	cmp	w0, 0
	bne	.L1488
	mov	w0, 0
	b	.L1483
.L1488:
	ldr	w0, [sp, 28]
	and	w0, w0, 128
	cmp	w0, 0
	bne	.L1489
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L1489
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	cmp	w1, w0
	beq	.L1489
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3833]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1489
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 92]
	cmp	w1, w0
	beq	.L1489
	mov	w0, 0
	b	.L1483
.L1489:
	ldr	w1, [sp, 28]
	ldr	x0, [sp, 56]
	bl	_ZL24IsWindowContentHoverableP11ImGuiWindowi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1490
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1832]
	and	w0, w0, 256
	cmp	w0, 0
	bne	.L1490
	mov	w0, 1
	b	.L1491
.L1490:
	mov	w0, 0
.L1491:
	cmp	w0, 0
	beq	.L1492
	mov	w0, 0
	b	.L1483
.L1492:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1832]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L1493
	ldr	w0, [sp, 28]
	and	w0, w0, 512
	cmp	w0, 0
	bne	.L1493
	mov	w0, 0
	b	.L1483
.L1493:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 1828]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 92]
	cmp	w1, w0
	bne	.L1485
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 152]
	cmp	w0, 0
	beq	.L1485
	mov	w0, 0
	b	.L1483
.L1485:
	ldr	w0, [sp, 28]
	and	w0, w0, 2048
	cmp	w0, 0
	beq	.L1494
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 68]
	str	s0, [sp, 36]
	b	.L1495
.L1494:
	ldr	w0, [sp, 28]
	and	w0, w0, 4096
	cmp	w0, 0
	beq	.L1496
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 72]
	str	s0, [sp, 36]
	b	.L1495
.L1496:
	str	wzr, [sp, 36]
.L1495:
	ldr	s0, [sp, 36]
	fcmpe	s0, #0.0
	bgt	.L1502
	b	.L1503
.L1502:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	cmp	w0, 0
	beq	.L1499
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	b	.L1500
.L1499:
	ldr	x1, [sp, 48]
	mov	x0, 18224
	add	x0, x1, x0
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect
.L1500:
	str	w0, [sp, 44]
	ldr	w0, [sp, 28]
	and	w0, w0, 8192
	cmp	w0, 0
	beq	.L1501
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2956]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	beq	.L1501
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	wzr, [x0, 2960]
.L1501:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [sp, 44]
	str	w1, [x0, 2952]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	s0, [x0, 2960]
	ldr	s1, [sp, 36]
	fcmpe	s1, s0
	cset	w0, ls
	and	w0, w0, 255
	b	.L1483
.L1503:
	mov	w0, 1
.L1483:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1736:
	.size	_ZN5ImGui13IsItemHoveredEi, .-_ZN5ImGui13IsItemHoveredEi
	.section	.rodata
	.align	3
.LC168:
	.string	"bool ImGui::ItemHoverable(const ImRect&, ImGuiID)"
	.text
	.align	2
	.global	_ZN5ImGui13ItemHoverableERK6ImRectj
	.type	_ZN5ImGui13ItemHoverableERK6ImRectj, %function
_ZN5ImGui13ItemHoverableERK6ImRectj:
.LFB1737:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	beq	.L1505
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16088]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	beq	.L1505
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3808]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1505
	mov	w0, 0
	b	.L1506
.L1505:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16040]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	beq	.L1507
	mov	w0, 0
	b	.L1506
.L1507:
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L1508
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	beq	.L1508
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3833]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1508
	mov	w0, 0
	b	.L1506
.L1508:
	ldr	x3, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	mov	w2, 1
	mov	x1, x0
	mov	x0, x3
	bl	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1509
	mov	w0, 0
	b	.L1506
.L1509:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	bne	.L1510
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1832]
	b	.L1511
.L1510:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1800]
.L1511:
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	and	w0, w0, 256
	cmp	w0, 0
	bne	.L1512
	mov	w1, 0
	ldr	x0, [sp, 56]
	bl	_ZL24IsWindowContentHoverableP11ImGuiWindowi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1512
	mov	w0, 1
	b	.L1513
.L1512:
	mov	w0, 0
.L1513:
	cmp	w0, 0
	beq	.L1514
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3809]
	mov	w0, 0
	b	.L1506
.L1514:
	ldr	w0, [sp, 20]
	cmp	w0, 0
	beq	.L1515
	ldr	w0, [sp, 20]
	bl	_ZN5ImGui12SetHoveredIDEj
.L1515:
	ldr	w0, [sp, 44]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L1516
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	bne	.L1517
	bl	_ZN5ImGui13ClearActiveIDEv
.L1517:
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3809]
	mov	w0, 0
	b	.L1506
.L1516:
	ldr	w0, [sp, 20]
	cmp	w0, 0
	beq	.L1518
	ldr	x0, [sp, 48]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3161]
	cmp	w0, 0
	beq	.L1519
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16092]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	bne	.L1519
	bl	_ZN5ImGui21GetForegroundDrawListEv
	mov	x5, x0
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711681
	mov	x2, x0
	mov	x0, x5
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L1519:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 7260]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	bne	.L1518
	adrp	x0, .LC168
	add	x3, x0, :lo12:.LC168
	mov	w2, 3745
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L1518:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2219]
	cmp	w0, 0
	beq	.L1520
	mov	w0, 0
	b	.L1506
.L1520:
	mov	w0, 1
.L1506:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1737:
	.size	_ZN5ImGui13ItemHoverableERK6ImRectj, .-_ZN5ImGui13ItemHoverableERK6ImRectj
	.align	2
	.global	_ZN5ImGui11IsClippedExERK6ImRectj
	.type	_ZN5ImGui11IsClippedExERK6ImRectj, %function
_ZN5ImGui11IsClippedExERK6ImRectj:
.LFB1738:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 536
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZNK6ImRect8OverlapsERKS_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1522
	ldr	w0, [sp, 20]
	cmp	w0, 0
	beq	.L1523
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	beq	.L1522
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	beq	.L1522
.L1523:
	ldr	x0, [sp, 32]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1522
	mov	w0, 1
	b	.L1524
.L1522:
	mov	w0, 0
.L1524:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1738:
	.size	_ZN5ImGui11IsClippedExERK6ImRectj, .-_ZN5ImGui11IsClippedExERK6ImRectj
	.align	2
	.global	_ZN5ImGui15SetLastItemDataEjiiRK6ImRect
	.type	_ZN5ImGui15SetLastItemDataEjiiRK6ImRect, %function
_ZN5ImGui15SetLastItemDataEjiiRK6ImRect:
.LFB1739:
	.cfi_startproc
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	str	x3, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 28]
	str	w1, [x0, 1828]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 24]
	str	w1, [x0, 1832]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 20]
	str	w1, [x0, 1836]
	ldr	x1, [sp, 40]
	mov	x0, 18432
	add	x2, x1, x0
	ldr	x0, [sp, 8]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2, -208]
	nop
	add	sp, sp, 48
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1739:
	.size	_ZN5ImGui15SetLastItemDataEjiiRK6ImRect, .-_ZN5ImGui15SetLastItemDataEjiiRK6ImRect
	.align	2
	.global	_ZN5ImGui19CalcWrapWidthForPosERK6ImVec2f
	.type	_ZN5ImGui19CalcWrapWidthForPosERK6ImVec2f, %function
_ZN5ImGui19CalcWrapWidthForPosERK6ImVec2f:
.LFB1740:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	s0, [sp, 20]
	ldr	s0, [sp, 20]
	fcmpe	s0, #0.0
	bmi	.L1533
	b	.L1535
.L1533:
	movi	v0.2s, #0
	b	.L1529
.L1535:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	s0, [sp, 20]
	fcmp	s0, #0.0
	bne	.L1530
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 512]
	str	s0, [sp, 20]
	b	.L1531
.L1530:
	ldr	s0, [sp, 20]
	fcmpe	s0, #0.0
	bgt	.L1534
	b	.L1531
.L1534:
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 100]
	fsub	s0, s1, s0
	ldr	s1, [sp, 20]
	fadd	s0, s1, s0
	str	s0, [sp, 20]
.L1531:
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	ldr	s1, [sp, 20]
	fsub	s0, s1, s0
	fmov	s1, 1.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	nop
.L1529:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1740:
	.size	_ZN5ImGui19CalcWrapWidthForPosERK6ImVec2f, .-_ZN5ImGui19CalcWrapWidthForPosERK6ImVec2f
	.align	2
	.global	_ZN5ImGui8MemAllocEm
	.type	_ZN5ImGui8MemAllocEm, %function
_ZN5ImGui8MemAllocEm:
.LFB1741:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L1537
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 244]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	str	w1, [x0, 244]
.L1537:
	adrp	x0, _ZL21GImAllocatorAllocFunc
	add	x0, x0, :lo12:_ZL21GImAllocatorAllocFunc
	ldr	x2, [x0]
	adrp	x0, _ZL20GImAllocatorUserData
	add	x0, x0, :lo12:_ZL20GImAllocatorUserData
	ldr	x0, [x0]
	mov	x1, x0
	ldr	x0, [sp, 24]
	blr	x2
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1741:
	.size	_ZN5ImGui8MemAllocEm, .-_ZN5ImGui8MemAllocEm
	.align	2
	.global	_ZN5ImGui7MemFreeEPv
	.type	_ZN5ImGui7MemFreeEPv, %function
_ZN5ImGui7MemFreeEPv:
.LFB1742:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L1540
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L1540
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 244]
	sub	w1, w0, #1
	ldr	x0, [sp, 40]
	str	w1, [x0, 244]
.L1540:
	adrp	x0, _ZL20GImAllocatorFreeFunc
	add	x0, x0, :lo12:_ZL20GImAllocatorFreeFunc
	ldr	x2, [x0]
	adrp	x0, _ZL20GImAllocatorUserData
	add	x0, x0, :lo12:_ZL20GImAllocatorUserData
	ldr	x0, [x0]
	mov	x1, x0
	ldr	x0, [sp, 24]
	blr	x2
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1742:
	.size	_ZN5ImGui7MemFreeEPv, .-_ZN5ImGui7MemFreeEPv
	.align	2
	.global	_ZN5ImGui16GetClipboardTextEv
	.type	_ZN5ImGui16GetClipboardTextEv, %function
_ZN5ImGui16GetClipboardTextEv:
.LFB1743:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 176]
	cmp	x0, 0
	beq	.L1543
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 176]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 192]
	blr	x1
	b	.L1545
.L1543:
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
.L1545:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1743:
	.size	_ZN5ImGui16GetClipboardTextEv, .-_ZN5ImGui16GetClipboardTextEv
	.align	2
	.global	_ZN5ImGui16SetClipboardTextEPKc
	.type	_ZN5ImGui16SetClipboardTextEPKc, %function
_ZN5ImGui16SetClipboardTextEPKc:
.LFB1744:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 184]
	cmp	x0, 0
	beq	.L1548
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 184]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 192]
	ldr	x1, [sp, 24]
	blr	x2
.L1548:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1744:
	.size	_ZN5ImGui16SetClipboardTextEPKc, .-_ZN5ImGui16SetClipboardTextEPKc
	.section	.rodata
	.align	3
.LC169:
	.string	"1.89.1 WIP"
	.text
	.align	2
	.global	_ZN5ImGui10GetVersionEv
	.type	_ZN5ImGui10GetVersionEv, %function
_ZN5ImGui10GetVersionEv:
.LFB1745:
	.cfi_startproc
	adrp	x0, .LC169
	add	x0, x0, :lo12:.LC169
	ret
	.cfi_endproc
.LFE1745:
	.size	_ZN5ImGui10GetVersionEv, .-_ZN5ImGui10GetVersionEv
	.align	2
	.global	_ZN5ImGui17GetCurrentContextEv
	.type	_ZN5ImGui17GetCurrentContextEv, %function
_ZN5ImGui17GetCurrentContextEv:
.LFB1746:
	.cfi_startproc
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ret
	.cfi_endproc
.LFE1746:
	.size	_ZN5ImGui17GetCurrentContextEv, .-_ZN5ImGui17GetCurrentContextEv
	.align	2
	.global	_ZN5ImGui17SetCurrentContextEP12ImGuiContext
	.type	_ZN5ImGui17SetCurrentContextEP12ImGuiContext, %function
_ZN5ImGui17SetCurrentContextEP12ImGuiContext:
.LFB1747:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x1, [sp, 8]
	str	x1, [x0]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1747:
	.size	_ZN5ImGui17SetCurrentContextEP12ImGuiContext, .-_ZN5ImGui17SetCurrentContextEP12ImGuiContext
	.align	2
	.global	_ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_
	.type	_ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_, %function
_ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_:
.LFB1748:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	x2, [sp, 8]
	adrp	x0, _ZL21GImAllocatorAllocFunc
	add	x0, x0, :lo12:_ZL21GImAllocatorAllocFunc
	ldr	x1, [sp, 24]
	str	x1, [x0]
	adrp	x0, _ZL20GImAllocatorFreeFunc
	add	x0, x0, :lo12:_ZL20GImAllocatorFreeFunc
	ldr	x1, [sp, 16]
	str	x1, [x0]
	adrp	x0, _ZL20GImAllocatorUserData
	add	x0, x0, :lo12:_ZL20GImAllocatorUserData
	ldr	x1, [sp, 8]
	str	x1, [x0]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1748:
	.size	_ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_, .-_ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_
	.align	2
	.global	_ZN5ImGui21GetAllocatorFunctionsEPPFPvmS0_EPPFvS0_S0_EPS0_
	.type	_ZN5ImGui21GetAllocatorFunctionsEPPFPvmS0_EPPFvS0_S0_EPS0_, %function
_ZN5ImGui21GetAllocatorFunctionsEPPFPvmS0_EPPFvS0_S0_EPS0_:
.LFB1749:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	str	x2, [sp, 8]
	adrp	x0, _ZL21GImAllocatorAllocFunc
	add	x0, x0, :lo12:_ZL21GImAllocatorAllocFunc
	ldr	x1, [x0]
	ldr	x0, [sp, 24]
	str	x1, [x0]
	adrp	x0, _ZL20GImAllocatorFreeFunc
	add	x0, x0, :lo12:_ZL20GImAllocatorFreeFunc
	ldr	x1, [x0]
	ldr	x0, [sp, 16]
	str	x1, [x0]
	adrp	x0, _ZL20GImAllocatorUserData
	add	x0, x0, :lo12:_ZL20GImAllocatorUserData
	ldr	x1, [x0]
	ldr	x0, [sp, 8]
	str	x1, [x0]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1749:
	.size	_ZN5ImGui21GetAllocatorFunctionsEPPFPvmS0_EPPFvS0_S0_EPS0_, .-_ZN5ImGui21GetAllocatorFunctionsEPPFPvmS0_EPPFvS0_S0_EPS0_
	.align	2
	.global	_ZN5ImGui13CreateContextEP11ImFontAtlas
	.type	_ZN5ImGui13CreateContextEP11ImFontAtlas, %function
_ZN5ImGui13CreateContextEP11ImFontAtlas:
.LFB1750:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1750
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	stp	x21, x22, [sp, 32]
	.cfi_offset 19, -64
	.cfi_offset 20, -56
	.cfi_offset 21, -48
	.cfi_offset 22, -40
	str	x0, [sp, 56]
	bl	_ZN5ImGui17GetCurrentContextEv
	str	x0, [sp, 64]
	mov	x0, 23984
.LEHB18:
	bl	_ZN5ImGui8MemAllocEm
.LEHE18:
	mov	x20, x0
	mov	x2, x20
	mov	w1, w19
	mov	x0, 23984
	bl	_Znwm12ImNewWrapperPv
	mov	x19, x0
	ldr	x1, [sp, 56]
	mov	x0, x19
.LEHB19:
	bl	_ZN12ImGuiContextC1EP11ImFontAtlas
.LEHE19:
	str	x19, [sp, 72]
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui17SetCurrentContextEP12ImGuiContext
.LEHB20:
	bl	_ZN5ImGui10InitializeEv
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L1557
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui17SetCurrentContextEP12ImGuiContext
.L1557:
	ldr	x0, [sp, 72]
	b	.L1561
.L1560:
	mov	x21, x0
	mov	x2, x20
	mov	w1, w22
	mov	x0, x19
	bl	_ZdlPv12ImNewWrapperS_
	mov	x0, x21
	bl	_Unwind_Resume
.LEHE20:
.L1561:
	ldp	x19, x20, [sp, 16]
	ldp	x21, x22, [sp, 32]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 21
	.cfi_restore 22
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1750:
	.section	.gcc_except_table
.LLSDA1750:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1750-.LLSDACSB1750
.LLSDACSB1750:
	.uleb128 .LEHB18-.LFB1750
	.uleb128 .LEHE18-.LEHB18
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB19-.LFB1750
	.uleb128 .LEHE19-.LEHB19
	.uleb128 .L1560-.LFB1750
	.uleb128 0
	.uleb128 .LEHB20-.LFB1750
	.uleb128 .LEHE20-.LEHB20
	.uleb128 0
	.uleb128 0
.LLSDACSE1750:
	.text
	.size	_ZN5ImGui13CreateContextEP11ImFontAtlas, .-_ZN5ImGui13CreateContextEP11ImFontAtlas
	.align	2
	.global	_ZN5ImGui14DestroyContextEP12ImGuiContext
	.type	_ZN5ImGui14DestroyContextEP12ImGuiContext, %function
_ZN5ImGui14DestroyContextEP12ImGuiContext:
.LFB1751:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	bl	_ZN5ImGui17GetCurrentContextEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L1563
	ldr	x0, [sp, 40]
	str	x0, [sp, 24]
.L1563:
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui17SetCurrentContextEP12ImGuiContext
	bl	_ZN5ImGui8ShutdownEv
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 24]
	cmp	x1, x0
	beq	.L1564
	ldr	x0, [sp, 40]
	b	.L1565
.L1564:
	mov	x0, 0
.L1565:
	bl	_ZN5ImGui17SetCurrentContextEP12ImGuiContext
	ldr	x0, [sp, 24]
	bl	_Z9IM_DELETEI12ImGuiContextEvPT_
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1751:
	.size	_ZN5ImGui14DestroyContextEP12ImGuiContext, .-_ZN5ImGui14DestroyContextEP12ImGuiContext
	.section	.rodata
	.align	3
.LC170:
	.string	"ImGuiID ImGui::AddContextHook(ImGuiContext*, const ImGuiContextHook*)"
	.align	3
.LC171:
	.string	"hook->Callback != __null && hook->HookId == 0 && hook->Type != ImGuiContextHookType_PendingRemoval_"
	.text
	.align	2
	.global	_ZN5ImGui14AddContextHookEP12ImGuiContextPK16ImGuiContextHook
	.type	_ZN5ImGui14AddContextHookEP12ImGuiContextPK16ImGuiContextHook, %function
_ZN5ImGui14AddContextHookEP12ImGuiContextPK16ImGuiContextHook:
.LFB1752:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	ldr	x0, [sp, 40]
	str	x0, [sp, 56]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16]
	cmp	x0, 0
	beq	.L1567
	ldr	x0, [sp, 32]
	ldr	w0, [x0]
	cmp	w0, 0
	bne	.L1567
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 4]
	cmp	w0, 7
	bne	.L1570
.L1567:
	adrp	x0, .LC170
	add	x3, x0, :lo12:.LC170
	mov	w2, 3893
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC171
	add	x0, x0, :lo12:.LC171
	bl	__assert_fail
.L1570:
	ldr	x1, [sp, 56]
	mov	x0, 23448
	add	x0, x1, x0
	ldr	x1, [sp, 32]
	bl	_ZN8ImVectorI16ImGuiContextHookE9push_backERKS0_
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 7080]
	add	w1, w0, 1
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 7080]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w19, [x0, 7080]
	ldr	x1, [sp, 56]
	mov	x0, 23448
	add	x0, x1, x0
	bl	_ZN8ImVectorI16ImGuiContextHookE4backEv
	str	w19, [x0]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 7080]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1752:
	.size	_ZN5ImGui14AddContextHookEP12ImGuiContextPK16ImGuiContextHook, .-_ZN5ImGui14AddContextHookEP12ImGuiContextPK16ImGuiContextHook
	.section	.rodata
	.align	3
.LC172:
	.string	"void ImGui::RemoveContextHook(ImGuiContext*, ImGuiID)"
	.align	3
.LC173:
	.string	"hook_id != 0"
	.text
	.align	2
	.global	_ZN5ImGui17RemoveContextHookEP12ImGuiContextj
	.type	_ZN5ImGui17RemoveContextHookEP12ImGuiContextj, %function
_ZN5ImGui17RemoveContextHookEP12ImGuiContextj:
.LFB1753:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	str	x0, [sp, 40]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	bne	.L1572
	adrp	x0, .LC172
	add	x3, x0, :lo12:.LC172
	mov	w2, 3903
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC173
	add	x0, x0, :lo12:.LC173
	bl	__assert_fail
.L1572:
	str	wzr, [sp, 36]
	b	.L1573
.L1575:
	ldr	x1, [sp, 40]
	mov	x0, 23448
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI16ImGuiContextHookEixEi
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1574
	ldr	x1, [sp, 40]
	mov	x0, 23448
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI16ImGuiContextHookEixEi
	mov	x1, x0
	mov	w0, 7
	str	w0, [x1, 4]
.L1574:
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L1573:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7064]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	blt	.L1575
	nop
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1753:
	.size	_ZN5ImGui17RemoveContextHookEP12ImGuiContextj, .-_ZN5ImGui17RemoveContextHookEP12ImGuiContextj
	.align	2
	.global	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	.type	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType, %function
_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType:
.LFB1754:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	ldr	x0, [sp, 40]
	str	x0, [sp, 56]
	str	wzr, [sp, 52]
	b	.L1577
.L1579:
	ldr	x1, [sp, 56]
	mov	x0, 23448
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorI16ImGuiContextHookEixEi
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1578
	ldr	x1, [sp, 56]
	mov	x0, 23448
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorI16ImGuiContextHookEixEi
	ldr	x19, [x0, 16]
	ldr	x1, [sp, 56]
	mov	x0, 23448
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorI16ImGuiContextHookEixEi
	mov	x1, x0
	ldr	x0, [sp, 56]
	blr	x19
.L1578:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L1577:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 7064]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	blt	.L1579
	nop
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1754:
	.size	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType, .-_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	.section	.rodata
	.align	3
.LC174:
	.string	"ImGuiIO& ImGui::GetIO()"
	.text
	.align	2
	.global	_ZN5ImGui5GetIOEv
	.type	_ZN5ImGui5GetIOEv, %function
_ZN5ImGui5GetIOEv:
.LFB1755:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	cmp	x0, 0
	bne	.L1581
	adrp	x0, .LC174
	add	x3, x0, :lo12:.LC174
	mov	w2, 3921
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC90
	add	x0, x0, :lo12:.LC90
	bl	__assert_fail
.L1581:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	add	x0, x0, 8
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1755:
	.size	_ZN5ImGui5GetIOEv, .-_ZN5ImGui5GetIOEv
	.align	2
	.global	_ZN5ImGui11GetDrawDataEv
	.type	_ZN5ImGui11GetDrawDataEv, %function
_ZN5ImGui11GetDrawDataEv:
.LFB1756:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 16]
	ldr	x1, [sp, 16]
	mov	x0, 18520
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 72]
	cmp	w0, 0
	beq	.L1584
	ldr	x0, [sp, 24]
	add	x0, x0, 72
	b	.L1586
.L1584:
	mov	x0, 0
.L1586:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1756:
	.size	_ZN5ImGui11GetDrawDataEv, .-_ZN5ImGui11GetDrawDataEv
	.align	2
	.global	_ZN5ImGui7GetTimeEv
	.type	_ZN5ImGui7GetTimeEv, %function
_ZN5ImGui7GetTimeEv:
.LFB1757:
	.cfi_startproc
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	d0, [x0, 15896]
	ret
	.cfi_endproc
.LFE1757:
	.size	_ZN5ImGui7GetTimeEv, .-_ZN5ImGui7GetTimeEv
	.align	2
	.global	_ZN5ImGui13GetFrameCountEv
	.type	_ZN5ImGui13GetFrameCountEv, %function
_ZN5ImGui13GetFrameCountEv:
.LFB1758:
	.cfi_startproc
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	w0, [x0, 15904]
	ret
	.cfi_endproc
.LFE1758:
	.size	_ZN5ImGui13GetFrameCountEv, .-_ZN5ImGui13GetFrameCountEv
	.section	.rodata
	.align	3
.LC175:
	.string	"ImDrawList* GetViewportDrawList(ImGuiViewportP*, size_t, const char*)"
	.align	3
.LC176:
	.string	"drawlist_no < ((int)(sizeof(viewport->DrawLists) / sizeof(*(viewport->DrawLists))))"
	.text
	.align	2
	.type	_ZL19GetViewportDrawListP14ImGuiViewportPmPKc, %function
_ZL19GetViewportDrawListP14ImGuiViewportPmPKc:
.LFB1759:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	x0, [sp, 48]
	cmp	x0, 1
	bls	.L1592
	adrp	x0, .LC175
	add	x3, x0, :lo12:.LC175
	mov	w2, 3947
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC176
	add	x0, x0, :lo12:.LC176
	bl	__assert_fail
.L1592:
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 48]
	add	x0, x0, 6
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x0, [x0, 8]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	cmp	x0, 0
	bne	.L1593
	mov	x0, 200
	bl	_ZN5ImGui8MemAllocEm
	mov	x2, x0
	mov	w1, w19
	mov	x0, 200
	bl	_Znwm12ImNewWrapperPv
	mov	x19, x0
	ldr	x1, [sp, 80]
	mov	x0, 15368
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawListC1EP20ImDrawListSharedData
	str	x19, [sp, 72]
	ldr	x0, [sp, 72]
	ldr	x1, [sp, 40]
	str	x1, [x0, 64]
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 48]
	add	x0, x0, 6
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 72]
	str	x1, [x0, 8]
.L1593:
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 48]
	add	x1, x1, 12
	ldr	w1, [x0, x1, lsl 2]
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	beq	.L1594
	ldr	x0, [sp, 72]
	bl	_ZN10ImDrawList17_ResetForNewFrameEv
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 88]
	ldr	x0, [x0, 8]
	mov	x1, x0
	ldr	x0, [sp, 72]
	bl	_ZN10ImDrawList13PushTextureIDEPv
	ldr	x19, [sp, 72]
	ldr	x0, [sp, 56]
	add	x20, x0, 4
	ldr	x0, [sp, 56]
	add	x2, x0, 4
	ldr	x0, [sp, 56]
	add	x0, x0, 12
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	add	x0, sp, 64
	mov	w3, 0
	mov	x2, x0
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList12PushClipRectERK6ImVec2S2_b
	ldr	x0, [sp, 80]
	ldr	w2, [x0, 15904]
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 48]
	add	x1, x1, 12
	str	w2, [x0, x1, lsl 2]
.L1594:
	ldr	x0, [sp, 72]
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 88]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L1596
	bl	__stack_chk_fail
.L1596:
	mov	x0, x1
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1759:
	.size	_ZL19GetViewportDrawListP14ImGuiViewportPmPKc, .-_ZL19GetViewportDrawListP14ImGuiViewportPmPKc
	.section	.rodata
	.align	3
.LC177:
	.string	"##Background"
	.text
	.align	2
	.global	_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport
	.type	_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport, %function
_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport:
.LFB1760:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, .LC177
	add	x2, x0, :lo12:.LC177
	mov	x1, 0
	ldr	x0, [sp, 24]
	bl	_ZL19GetViewportDrawListP14ImGuiViewportPmPKc
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1760:
	.size	_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport, .-_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport
	.align	2
	.global	_ZN5ImGui21GetBackgroundDrawListEv
	.type	_ZN5ImGui21GetBackgroundDrawListEv, %function
_ZN5ImGui21GetBackgroundDrawListEv:
.LFB1761:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x1, [sp, 24]
	mov	x0, 18520
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	bl	_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1761:
	.size	_ZN5ImGui21GetBackgroundDrawListEv, .-_ZN5ImGui21GetBackgroundDrawListEv
	.section	.rodata
	.align	3
.LC178:
	.string	"##Foreground"
	.text
	.align	2
	.global	_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport
	.type	_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport, %function
_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport:
.LFB1762:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, .LC178
	add	x2, x0, :lo12:.LC178
	mov	x1, 1
	ldr	x0, [sp, 24]
	bl	_ZL19GetViewportDrawListP14ImGuiViewportPmPKc
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1762:
	.size	_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport, .-_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport
	.align	2
	.global	_ZN5ImGui21GetForegroundDrawListEv
	.type	_ZN5ImGui21GetForegroundDrawListEv, %function
_ZN5ImGui21GetForegroundDrawListEv:
.LFB1763:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x1, [sp, 24]
	mov	x0, 18520
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	bl	_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1763:
	.size	_ZN5ImGui21GetForegroundDrawListEv, .-_ZN5ImGui21GetForegroundDrawListEv
	.align	2
	.global	_ZN5ImGui21GetDrawListSharedDataEv
	.type	_ZN5ImGui21GetDrawListSharedDataEv, %function
_ZN5ImGui21GetDrawListSharedDataEv:
.LFB1764:
	.cfi_startproc
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x1, [x0]
	mov	x0, 15368
	add	x0, x1, x0
	ret
	.cfi_endproc
.LFE1764:
	.size	_ZN5ImGui21GetDrawListSharedDataEv, .-_ZN5ImGui21GetDrawListSharedDataEv
	.align	2
	.global	_ZN5ImGui22StartMouseMovingWindowEP11ImGuiWindow
	.type	_ZN5ImGui22StartMouseMovingWindowEP11ImGuiWindow, %function
_ZN5ImGui22StartMouseMovingWindowEP11ImGuiWindow:
.LFB1765:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 92]
	ldr	x1, [sp, 40]
	bl	_ZN5ImGui11SetActiveIDEjP11ImGuiWindow
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2218]
	ldr	x1, [sp, 56]
	mov	x0, 14056
	add	x2, x1, x0
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 856]
	add	x0, x0, 24
	ldr	x19, [sp, 56]
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 16128]
	str	s0, [x19, 16132]
	ldr	x0, [sp, 56]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3834]
	bl	_ZN5ImGui31SetActiveIdUsingAllKeyboardKeysEv
	mov	w0, 1
	strb	w0, [sp, 55]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 4
	cmp	w0, 0
	bne	.L1608
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 856]
	ldr	w0, [x0, 12]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L1609
.L1608:
	strb	wzr, [sp, 55]
.L1609:
	ldrb	w0, [sp, 55]
	cmp	w0, 0
	beq	.L1611
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 40]
	str	x1, [x0, 16056]
.L1611:
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1765:
	.size	_ZN5ImGui22StartMouseMovingWindowEP11ImGuiWindow, .-_ZN5ImGui22StartMouseMovingWindowEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC179:
	.string	"void ImGui::UpdateMouseMovingWindowNewFrame()"
	.align	3
.LC180:
	.string	"g.MovingWindow && g.MovingWindow->RootWindow"
	.text
	.align	2
	.global	_ZN5ImGui31UpdateMouseMovingWindowNewFrameEv
	.type	_ZN5ImGui31UpdateMouseMovingWindowNewFrameEv, %function
_ZN5ImGui31UpdateMouseMovingWindowNewFrameEv:
.LFB1766:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16056]
	cmp	x0, 0
	beq	.L1613
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16108]
	bl	_ZN5ImGui11KeepAliveIDEj
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16056]
	cmp	x0, 0
	beq	.L1614
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16056]
	ldr	x0, [x0, 856]
	cmp	x0, 0
	bne	.L1621
.L1614:
	adrp	x0, .LC179
	add	x3, x0, :lo12:.LC179
	mov	w2, 4027
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC180
	add	x0, x0, :lo12:.LC180
	bl	__assert_fail
.L1621:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16056]
	ldr	x0, [x0, 856]
	str	x0, [sp, 32]
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 3588]
	cmp	w0, 0
	beq	.L1616
	ldr	x0, [sp, 24]
	add	x0, x0, 3580
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1616
	mov	w0, 1
	b	.L1617
.L1616:
	mov	w0, 0
.L1617:
	cmp	w0, 0
	beq	.L1618
	ldr	x0, [sp, 24]
	add	x2, x0, 3580
	ldr	x1, [sp, 24]
	mov	x0, 16128
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 16]
	str	s0, [sp, 20]
	add	x0, sp, 16
	mov	w2, 1
	mov	x1, x0
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16056]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	b	.L1622
.L1618:
	ldr	x0, [sp, 24]
	str	xzr, [x0, 16056]
	bl	_ZN5ImGui13ClearActiveIDEv
	b	.L1622
.L1613:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16136]
	cmp	x0, 0
	beq	.L1622
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16136]
	ldr	w1, [x0, 92]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16108]
	cmp	w1, w0
	bne	.L1622
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16108]
	bl	_ZN5ImGui11KeepAliveIDEj
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 3588]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1622
	bl	_ZN5ImGui13ClearActiveIDEv
.L1622:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1620
	bl	__stack_chk_fail
.L1620:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1766:
	.size	_ZN5ImGui31UpdateMouseMovingWindowNewFrameEv, .-_ZN5ImGui31UpdateMouseMovingWindowNewFrameEv
	.align	2
	.global	_ZN5ImGui31UpdateMouseMovingWindowEndFrameEv
	.type	_ZN5ImGui31UpdateMouseMovingWindowEndFrameEv, %function
_ZN5ImGui31UpdateMouseMovingWindowEndFrameEv:
.LFB1767:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	bne	.L1645
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	bne	.L1645
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L1627
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18536]
	ldrb	w0, [x0, 156]
	cmp	w0, 0
	bne	.L1646
.L1627:
	ldr	x0, [sp, 32]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1848]
	cmp	w0, 0
	beq	.L1628
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	beq	.L1629
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16040]
	ldr	x0, [x0, 856]
	b	.L1630
.L1629:
	mov	x0, 0
.L1630:
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L1631
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L1631
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 172]
	mov	w1, 256
	bl	_ZN5ImGui11IsPopupOpenEji
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1631
	mov	w0, 1
	b	.L1632
.L1631:
	mov	w0, 0
.L1632:
	strb	w0, [sp, 30]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L1633
	ldrb	w0, [sp, 30]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1633
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16040]
	bl	_ZN5ImGui22StartMouseMovingWindowEP11ImGuiWindow
	ldr	x0, [sp, 32]
	ldrb	w0, [x0, 127]
	cmp	w0, 0
	beq	.L1634
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L1634
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow12TitleBarRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 56]
	str	s4, [sp, 60]
	str	s1, [sp, 64]
	str	s0, [sp, 68]
	ldr	x1, [sp, 32]
	mov	x0, 14056
	add	x1, x1, x0
	add	x0, sp, 56
	bl	_ZNK6ImRect8ContainsERK6ImVec2
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1634
	ldr	x0, [sp, 32]
	str	xzr, [x0, 16056]
.L1634:
	ldr	x0, [sp, 32]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3809]
	cmp	w0, 0
	beq	.L1628
	ldr	x0, [sp, 32]
	str	xzr, [x0, 16056]
	b	.L1628
.L1633:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	bne	.L1637
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L1637
	bl	_ZN5ImGui20GetTopMostPopupModalEv
	cmp	x0, 0
	bne	.L1637
	mov	w0, 1
	b	.L1638
.L1637:
	mov	w0, 0
.L1638:
	cmp	w0, 0
	beq	.L1628
	mov	x0, 0
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
.L1628:
	ldr	x0, [sp, 32]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1849]
	cmp	w0, 0
	beq	.L1623
	bl	_ZN5ImGui20GetTopMostPopupModalEv
	str	x0, [sp, 48]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	beq	.L1639
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L1640
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16040]
	ldr	x1, [sp, 48]
	bl	_ZN5ImGui13IsWindowAboveEP11ImGuiWindowS1_
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1639
.L1640:
	mov	w0, 1
	b	.L1641
.L1639:
	mov	w0, 0
.L1641:
	strb	w0, [sp, 31]
	ldrb	w0, [sp, 31]
	cmp	w0, 0
	beq	.L1642
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16040]
	b	.L1643
.L1642:
	ldr	x0, [sp, 48]
.L1643:
	mov	w1, 1
	bl	_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb
	b	.L1623
.L1645:
	nop
	b	.L1623
.L1646:
	nop
.L1623:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1644
	bl	__stack_chk_fail
.L1644:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1767:
	.size	_ZN5ImGui31UpdateMouseMovingWindowEndFrameEv, .-_ZN5ImGui31UpdateMouseMovingWindowEndFrameEv
	.align	2
	.type	_ZL24IsWindowActiveAndVisibleP11ImGuiWindow, %function
_ZL24IsWindowActiveAndVisibleP11ImGuiWindow:
.LFB1768:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldrb	w0, [x0, 150]
	cmp	w0, 0
	beq	.L1648
	ldr	x0, [sp, 8]
	ldrb	w0, [x0, 157]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1648
	mov	w0, 1
	b	.L1649
.L1648:
	mov	w0, 0
.L1649:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1768:
	.size	_ZL24IsWindowActiveAndVisibleP11ImGuiWindow, .-_ZL24IsWindowActiveAndVisibleP11ImGuiWindow
	.section	.rodata
	.align	3
.LC181:
	.string	"void UpdateAliasKey(ImGuiKey, bool, float)"
	.align	3
.LC182:
	.string	"ImGui::IsAliasKey(key)"
	.text
	.align	2
	.type	_ZL14UpdateAliasKey8ImGuiKeybf, %function
_ZL14UpdateAliasKey8ImGuiKeybf:
.LFB1769:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	strb	w1, [sp, 27]
	str	s0, [sp, 20]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10IsAliasKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1652
	adrp	x0, .LC181
	add	x3, x0, :lo12:.LC181
	mov	w2, 4114
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC182
	add	x0, x0, :lo12:.LC182
	bl	__assert_fail
.L1652:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldrb	w1, [sp, 27]
	strb	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 20]
	str	s0, [x0, 12]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1769:
	.size	_ZL14UpdateAliasKey8ImGuiKeybf, .-_ZL14UpdateAliasKey8ImGuiKeybf
	.align	2
	.type	_ZL21UpdateKeyRoutingTableP20ImGuiKeyRoutingTable, %function
_ZL21UpdateKeyRoutingTableP20ImGuiKeyRoutingTable:
.LFB1770:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 40]
	add	x0, x0, 296
	mov	w1, 0
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataE6resizeEi
	mov	w0, 512
	str	w0, [sp, 56]
	b	.L1654
.L1665:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 296]
	str	w0, [sp, 68]
	ldr	w0, [sp, 56]
	sub	w1, w0, #512
	ldr	x0, [sp, 40]
	sxtw	x1, w1
	ldrsh	w0, [x0, x1, lsl 1]
	str	w0, [sp, 60]
	b	.L1655
.L1658:
	ldr	x0, [sp, 40]
	add	x0, x0, 280
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 80]
	str	w1, [x0, 8]
	ldr	x0, [sp, 80]
	mov	w1, -1
	str	w1, [x0, 12]
	ldr	x0, [sp, 80]
	mov	w1, -1
	strb	w1, [x0, 4]
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 8]
	cmn	w0, #1
	beq	.L1666
	ldr	x0, [sp, 40]
	add	x0, x0, 296
	ldr	x1, [sp, 80]
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_
	ldr	x0, [sp, 80]
	ldrh	w0, [x0, 2]
	mov	w1, w0
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 3608]
	cmp	w1, w0
	bne	.L1657
	ldr	w0, [sp, 56]
	bl	_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	ldr	w0, [x0]
	cmn	w0, #1
	bne	.L1657
	ldr	x0, [sp, 80]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 88]
	str	w1, [x0]
	b	.L1657
.L1666:
	nop
.L1657:
	ldr	x0, [sp, 80]
	ldrsh	w0, [x0]
	str	w0, [sp, 60]
.L1655:
	ldr	w0, [sp, 60]
	cmn	w0, #1
	bne	.L1658
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 296]
	ldr	w1, [sp, 68]
	cmp	w1, w0
	bge	.L1659
	ldr	w0, [sp, 68]
	sxth	w0, w0
	b	.L1660
.L1659:
	mov	w0, -1
.L1660:
	ldr	w1, [sp, 56]
	sub	w2, w1, #512
	ldr	x1, [sp, 40]
	sxtw	x2, w2
	strh	w0, [x1, x2, lsl 1]
	ldr	w0, [sp, 68]
	str	w0, [sp, 64]
	b	.L1661
.L1664:
	ldr	w0, [sp, 64]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 296]
	cmp	w1, w0
	bge	.L1662
	ldr	w0, [sp, 64]
	and	w0, w0, 65535
	add	w0, w0, 1
	and	w0, w0, 65535
	sxth	w19, w0
	b	.L1663
.L1662:
	mov	w19, -1
.L1663:
	ldr	x0, [sp, 40]
	add	x0, x0, 296
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi
	mov	w1, w19
	strh	w1, [x0]
	ldr	w0, [sp, 64]
	add	w0, w0, 1
	str	w0, [sp, 64]
.L1661:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 296]
	ldr	w1, [sp, 64]
	cmp	w1, w0
	blt	.L1664
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	str	w0, [sp, 56]
.L1654:
	ldr	w0, [sp, 56]
	cmp	w0, 651
	ble	.L1665
	ldr	x0, [sp, 40]
	add	x2, x0, 280
	ldr	x0, [sp, 40]
	add	x0, x0, 296
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataE4swapERS1_
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1770:
	.size	_ZL21UpdateKeyRoutingTableP20ImGuiKeyRoutingTable, .-_ZL21UpdateKeyRoutingTableP20ImGuiKeyRoutingTable
	.align	2
	.type	_ZL22GetMergedModsFromBoolsv, %function
_ZL22GetMergedModsFromBoolsv:
.LFB1771:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	str	wzr, [sp, 4]
	ldr	x0, [sp, 8]
	ldrb	w0, [x0, 3604]
	cmp	w0, 0
	beq	.L1668
	ldr	w0, [sp, 4]
	orr	w0, w0, 4096
	str	w0, [sp, 4]
.L1668:
	ldr	x0, [sp, 8]
	ldrb	w0, [x0, 3605]
	cmp	w0, 0
	beq	.L1669
	ldr	w0, [sp, 4]
	orr	w0, w0, 8192
	str	w0, [sp, 4]
.L1669:
	ldr	x0, [sp, 8]
	ldrb	w0, [x0, 3606]
	cmp	w0, 0
	beq	.L1670
	ldr	w0, [sp, 4]
	orr	w0, w0, 16384
	str	w0, [sp, 4]
.L1670:
	ldr	x0, [sp, 8]
	ldrb	w0, [x0, 3607]
	cmp	w0, 0
	beq	.L1671
	ldr	w0, [sp, 4]
	orr	w0, w0, 32768
	str	w0, [sp, 4]
.L1671:
	ldr	w0, [sp, 4]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1771:
	.size	_ZL22GetMergedModsFromBoolsv, .-_ZL22GetMergedModsFromBoolsv
	.section	.rodata
	.align	3
.LC183:
	.string	"void ImGui::UpdateKeyboardInputs()"
	.align	3
.LC184:
	.string	"(io.KeysDown[n] == false || IsKeyDown((ImGuiKey)n)) && \"Backend needs to either only use io.AddKeyEvent(), either only fill legacy io.KeysDown[] + io.KeyMap[]. Not both!\""
	.align	3
.LC185:
	.string	"g.IO.KeyMap[n] == -1 && \"Backend is not allowed to write to io.KeyMap[0..511]!\""
	.align	3
.LC186:
	.string	"IsLegacyKey((ImGuiKey)io.KeyMap[n])"
	.align	3
.LC187:
	.string	"io.KeyMap[n] == -1 || IsNamedKey(key)"
	.text
	.align	2
	.type	_ZN5ImGuiL20UpdateKeyboardInputsEv, %function
_ZN5ImGuiL20UpdateKeyboardInputsEv:
.LFB1772:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -96
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	add	x0, x0, 8
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	ldrsb	w0, [x0, 1954]
	cmp	w0, 0
	bne	.L1674
	str	wzr, [sp, 36]
	b	.L1675
.L1679:
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 36]
	add	x0, x1, x0
	ldrb	w0, [x0, 2856]
	cmp	w0, 0
	beq	.L1731
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1731
	adrp	x0, .LC183
	add	x3, x0, :lo12:.LC183
	mov	w2, 4182
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC184
	add	x0, x0, :lo12:.LC184
	bl	__assert_fail
.L1731:
	nop
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L1675:
	ldr	w0, [sp, 36]
	cmp	w0, 511
	ble	.L1679
	b	.L1680
.L1674:
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 15904]
	cmp	w0, 0
	bne	.L1681
	str	wzr, [sp, 40]
	b	.L1682
.L1684:
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 16]
	cmn	w0, #1
	beq	.L1683
	adrp	x0, .LC183
	add	x3, x0, :lo12:.LC183
	mov	w2, 4188
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC185
	add	x0, x0, :lo12:.LC185
	bl	__assert_fail
.L1683:
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
.L1682:
	ldr	w0, [sp, 40]
	cmp	w0, 511
	ble	.L1684
.L1681:
	mov	w0, 512
	str	w0, [sp, 44]
	b	.L1685
.L1688:
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	cmn	w0, #1
	beq	.L1686
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	bl	_ZN5ImGui11IsLegacyKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1687
	adrp	x0, .LC183
	add	x3, x0, :lo12:.LC183
	mov	w2, 4194
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC186
	add	x0, x0, :lo12:.LC186
	bl	__assert_fail
.L1687:
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 44]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	ldr	x1, [sp, 80]
	sxtw	x0, w0
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w1, [sp, 44]
	str	w1, [x0, 8]
.L1686:
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L1685:
	ldr	w0, [sp, 44]
	cmp	w0, 651
	ble	.L1688
	str	wzr, [sp, 48]
	b	.L1689
.L1696:
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 48]
	add	x0, x1, x0
	ldrb	w0, [x0, 2856]
	cmp	w0, 0
	bne	.L1690
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	ldrsb	w0, [x0, 1954]
	cmp	w0, 1
	bne	.L1691
.L1690:
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 48]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	cmn	w0, #1
	beq	.L1692
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 48]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	b	.L1693
.L1692:
	ldr	w0, [sp, 48]
.L1693:
	str	w0, [sp, 68]
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 48]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	cmn	w0, #1
	beq	.L1694
	ldr	w0, [sp, 68]
	bl	_ZN5ImGui10IsNamedKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1694
	adrp	x0, .LC183
	add	x3, x0, :lo12:.LC183
	mov	w2, 4203
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC187
	add	x0, x0, :lo12:.LC187
	bl	__assert_fail
.L1694:
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 48]
	add	x0, x1, x0
	ldrb	w2, [x0, 2856]
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 68]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	mov	w1, w2
	strb	w1, [x0, 4]
	ldr	w1, [sp, 68]
	ldr	w0, [sp, 48]
	cmp	w1, w0
	beq	.L1695
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 48]
	add	x0, x1, x0
	ldrb	w2, [x0, 2856]
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 68]
	add	x0, x1, x0
	mov	w1, w2
	strb	w1, [x0, 2856]
.L1695:
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 1954]
.L1691:
	ldr	w0, [sp, 48]
	add	w0, w0, 1
	str	w0, [sp, 48]
.L1689:
	ldr	w0, [sp, 48]
	cmp	w0, 511
	ble	.L1696
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	ldrsb	w0, [x0, 1954]
	cmp	w0, 1
	bne	.L1680
	ldr	x0, [sp, 80]
	ldrb	w19, [x0, 3596]
	mov	w0, 4096
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	mov	w1, w19
	strb	w1, [x0]
	ldr	x0, [sp, 80]
	ldrb	w19, [x0, 3597]
	mov	w0, 8192
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	mov	w1, w19
	strb	w1, [x0]
	ldr	x0, [sp, 80]
	ldrb	w19, [x0, 3598]
	mov	w0, 16384
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	mov	w1, w19
	strb	w1, [x0]
	ldr	x0, [sp, 80]
	ldrb	w19, [x0, 3599]
	mov	w0, 32768
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	mov	w1, w19
	strb	w1, [x0]
.L1680:
	ldr	x0, [sp, 80]
	ldr	w0, [x0]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L1697
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 4]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L1697
	mov	w0, 1
	b	.L1698
.L1697:
	mov	w0, 0
.L1698:
	strb	w0, [sp, 35]
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1955]
	cmp	w0, 0
	beq	.L1699
	ldrb	w0, [sp, 35]
	cmp	w0, 0
	beq	.L1699
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3508]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1268]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3508]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13568]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3512]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1236]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3512]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13536]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3520]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1220]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3520]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13520]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3516]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1252]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3516]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13552]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3524]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1284]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3524]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13584]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3528]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1300]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3528]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13600]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3532]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1316]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3532]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13616]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3536]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1332]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3536]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13632]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3556]
	fcmpe	s0, #0.0
	bgt	.L1700
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3564]
	fcmpe	s0, #0.0
	bgt	.L1700
	b	.L1728
.L1700:
	mov	w1, 1
	b	.L1703
.L1728:
	mov	w1, 0
.L1703:
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1348]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3556]
	ldr	x0, [sp, 80]
	ldr	s1, [x0, 3564]
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 80]
	str	s0, [x0, 13648]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3560]
	fcmpe	s0, #0.0
	bgt	.L1704
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3568]
	fcmpe	s0, #0.0
	bgt	.L1704
	b	.L1729
.L1704:
	mov	w1, 1
	b	.L1707
.L1729:
	mov	w1, 0
.L1707:
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1364]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3560]
	ldr	x0, [sp, 80]
	ldr	s1, [x0, 3568]
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 80]
	str	s0, [x0, 13664]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3540]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1444]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3540]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13744]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3544]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1460]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3544]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13760]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3548]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1476]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3548]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13776]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3552]
	fcmpe	s0, #0.0
	cset	w0, gt
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	w1, [x0, 1492]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3552]
	ldr	x0, [sp, 80]
	str	s0, [x0, 13792]
.L1699:
	bl	_ZL22GetMergedModsFromBoolsv
	mov	w1, w0
	ldr	x0, [sp, 80]
	str	w1, [x0, 3600]
	str	wzr, [sp, 52]
	b	.L1708
.L1711:
	ldr	w0, [sp, 52]
	bl	_ZN5ImGui16MouseButtonToKeyEi
	mov	w2, w0
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 52]
	add	x0, x1, x0
	ldrb	w3, [x0, 3580]
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 52]
	add	x0, x1, x0
	ldrb	w0, [x0, 3580]
	cmp	w0, 0
	beq	.L1709
	fmov	s0, 1.0e+0
	b	.L1710
.L1709:
	movi	v0.2s, #0
.L1710:
	mov	w1, w3
	mov	w0, w2
	bl	_ZL14UpdateAliasKey8ImGuiKeybf
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L1708:
	ldr	w0, [sp, 52]
	cmp	w0, 4
	ble	.L1711
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3592]
	fcmp	s0, #0.0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3592]
	mov	w0, 646
	bl	_ZL14UpdateAliasKey8ImGuiKeybf
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3588]
	fcmp	s0, #0.0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 3588]
	mov	w0, 647
	bl	_ZL14UpdateAliasKey8ImGuiKeybf
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 4]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L1712
	mov	w0, 617
	str	w0, [sp, 56]
	b	.L1713
.L1714:
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 56]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	strb	wzr, [x0, 4]
	ldr	x1, [sp, 80]
	ldrsw	x0, [sp, 56]
	add	x0, x0, 225
	lsl	x0, x0, 4
	add	x0, x1, x0
	str	wzr, [x0, 16]
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	str	w0, [sp, 56]
.L1713:
	ldr	w0, [sp, 56]
	cmp	w0, 640
	ble	.L1714
.L1712:
	str	wzr, [sp, 60]
	b	.L1715
.L1721:
	ldrsw	x0, [sp, 60]
	add	x0, x0, 225
	lsl	x0, x0, 4
	ldr	x1, [sp, 80]
	add	x0, x1, x0
	add	x0, x0, 4
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 104]
	str	s0, [x0, 8]
	ldr	x0, [sp, 104]
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L1716
	ldr	x0, [sp, 104]
	ldr	s0, [x0, 4]
	fcmpe	s0, #0.0
	bmi	.L1727
	b	.L1730
.L1727:
	movi	v0.2s, #0
	b	.L1720
.L1730:
	ldr	x0, [sp, 104]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 16]
	fadd	s0, s1, s0
	b	.L1720
.L1716:
	fmov	s0, -1.0e+0
.L1720:
	ldr	x0, [sp, 104]
	str	s0, [x0, 4]
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L1715:
	ldr	w0, [sp, 60]
	cmp	w0, 651
	ble	.L1721
	mov	w0, 512
	str	w0, [sp, 64]
	b	.L1722
.L1726:
	ldrsw	x0, [sp, 64]
	add	x0, x0, 225
	lsl	x0, x0, 4
	ldr	x1, [sp, 80]
	add	x0, x1, x0
	add	x0, x0, 4
	str	x0, [sp, 88]
	ldr	w0, [sp, 64]
	sub	w0, w0, #512
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x1, 16176
	add	x0, x0, x1
	ldr	x1, [sp, 72]
	add	x0, x1, x0
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 96]
	str	w1, [x0]
	ldr	x0, [sp, 88]
	ldrb	w0, [x0]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1723
	ldr	x0, [sp, 96]
	mov	w1, -1
	str	w1, [x0, 4]
.L1723:
	ldr	x0, [sp, 96]
	ldrb	w0, [x0, 9]
	cmp	w0, 0
	beq	.L1724
	ldr	x0, [sp, 88]
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L1724
	mov	w1, 1
	b	.L1725
.L1724:
	mov	w1, 0
.L1725:
	ldr	x0, [sp, 96]
	strb	w1, [x0, 9]
	ldr	x0, [sp, 96]
	ldrb	w1, [x0, 9]
	ldr	x0, [sp, 96]
	strb	w1, [x0, 8]
	ldr	w0, [sp, 64]
	add	w0, w0, 1
	str	w0, [sp, 64]
.L1722:
	ldr	w0, [sp, 64]
	cmp	w0, 651
	ble	.L1726
	ldr	x1, [sp, 72]
	mov	x0, 17856
	add	x0, x1, x0
	bl	_ZL21UpdateKeyRoutingTableP20ImGuiKeyRoutingTable
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1772:
	.size	_ZN5ImGuiL20UpdateKeyboardInputsEv, .-_ZN5ImGuiL20UpdateKeyboardInputsEv
	.align	2
	.type	_ZN5ImGuiL17UpdateMouseInputsEv, %function
_ZN5ImGuiL17UpdateMouseInputsEv:
.LFB1773:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	add	x0, x0, 8
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	add	x0, x0, 3572
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1733
	ldr	x0, [sp, 64]
	add	x0, x0, 3572
	ldr	x19, [sp, 56]
	bl	_ZL13ImFloorSignedRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	add	x0, x19, 16384
	str	s2, [x0, 2968]
	add	x0, x19, 16384
	str	s0, [x0, 2972]
	ldr	x1, [sp, 56]
	mov	x0, 19352
	add	x1, x1, x0
	ldr	x0, [sp, 64]
	add	x0, x0, 3584
	ldr	x1, [x1]
	str	x1, [x0, -12]
.L1733:
	ldr	x0, [sp, 64]
	add	x0, x0, 3572
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1734
	ldr	x1, [sp, 64]
	mov	x0, 14040
	add	x0, x1, x0
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1734
	mov	w0, 1
	b	.L1735
.L1734:
	mov	w0, 0
.L1735:
	cmp	w0, 0
	beq	.L1736
	ldr	x0, [sp, 64]
	add	x2, x0, 3572
	ldr	x1, [sp, 64]
	mov	x0, 14040
	add	x0, x1, x0
	ldr	x19, [sp, 64]
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 240]
	str	s0, [x19, 244]
	b	.L1737
.L1736:
	add	x0, sp, 48
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 64]
	ldr	x1, [sp, 48]
	str	x1, [x0, 240]
.L1737:
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 240]
	fcmp	s0, #0.0
	bne	.L1738
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 244]
	fcmp	s0, #0.0
	beq	.L1739
.L1738:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2219]
.L1739:
	ldr	x0, [sp, 64]
	ldr	x1, [sp, 64]
	add	x1, x1, 3584
	ldr	x1, [x1, -12]
	str	x1, [x0, 14040]
	str	wzr, [sp, 40]
	b	.L1740
.L1764:
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	ldrb	w0, [x0, 3580]
	cmp	w0, 0
	beq	.L1741
	ldr	x0, [sp, 64]
	ldrsw	x1, [sp, 40]
	add	x1, x1, 3544
	ldr	s0, [x0, x1, lsl 2]
	fcmpe	s0, #0.0
	bmi	.L1766
	b	.L1741
.L1766:
	mov	w2, 1
	b	.L1743
.L1741:
	mov	w2, 0
.L1743:
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	add	x0, x0, 12288
	mov	w1, w2
	strb	w1, [x0, 1840]
	ldr	x1, [sp, 64]
	ldrsw	x2, [sp, 40]
	mov	x0, 7064
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	strh	wzr, [x0, 10]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	ldrb	w0, [x0, 3580]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1744
	ldr	x0, [sp, 64]
	ldrsw	x1, [sp, 40]
	add	x1, x1, 3544
	ldr	s0, [x0, x1, lsl 2]
	fcmpe	s0, #0.0
	bge	.L1767
	b	.L1744
.L1767:
	mov	w2, 1
	b	.L1746
.L1744:
	mov	w2, 0
.L1746:
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	add	x0, x0, 12288
	mov	w1, w2
	strb	w1, [x0, 1870]
	ldr	x0, [sp, 64]
	ldrsw	x1, [sp, 40]
	add	x1, x1, 3544
	ldr	s0, [x0, x1, lsl 2]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 3548
	lsl	x0, x0, 2
	add	x0, x1, x0
	str	s0, [x0, 4]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	ldrb	w0, [x0, 3580]
	cmp	w0, 0
	beq	.L1747
	ldr	x0, [sp, 64]
	ldrsw	x1, [sp, 40]
	add	x1, x1, 3544
	ldr	s0, [x0, x1, lsl 2]
	fcmpe	s0, #0.0
	bmi	.L1768
	b	.L1770
.L1768:
	movi	v0.2s, #0
	b	.L1751
.L1770:
	ldr	x0, [sp, 64]
	ldrsw	x1, [sp, 40]
	add	x1, x1, 3544
	ldr	s1, [x0, x1, lsl 2]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 16]
	fadd	s0, s1, s0
	b	.L1751
.L1747:
	fmov	s0, -1.0e+0
.L1751:
	ldr	x0, [sp, 64]
	ldrsw	x1, [sp, 40]
	add	x1, x1, 3544
	str	s0, [x0, x1, lsl 2]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1840]
	cmp	w0, 0
	beq	.L1752
	strb	wzr, [sp, 39]
	ldr	x0, [sp, 56]
	ldr	d1, [x0, 15896]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 1760
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	d0, [x0, 8]
	fsub	d0, d1, d0
	fcvt	s1, d0
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 40]
	fcmpe	s1, s0
	bmi	.L1769
	b	.L1753
.L1769:
	ldr	x0, [sp, 64]
	add	x0, x0, 3572
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1755
	ldr	x0, [sp, 64]
	add	x2, x0, 3572
	ldrsw	x0, [sp, 40]
	add	x0, x0, 1756
	lsl	x0, x0, 3
	ldr	x1, [sp, 64]
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	b	.L1756
.L1755:
	add	x0, sp, 48
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
.L1756:
	add	x0, sp, 48
	bl	_ZL11ImLengthSqrRK6ImVec2
	fmov	s2, s0
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 44]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 44]
	fmul	s0, s1, s0
	fcmpe	s2, s0
	cset	w0, mi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1753
	mov	w0, 1
	strb	w0, [sp, 39]
.L1753:
	ldrb	w0, [sp, 39]
	cmp	w0, 0
	beq	.L1758
	ldr	x1, [sp, 64]
	ldrsw	x2, [sp, 40]
	mov	x0, 7072
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	ldrh	w0, [x0, 4]
	add	w0, w0, 1
	and	w3, w0, 65535
	ldr	x1, [sp, 64]
	ldrsw	x2, [sp, 40]
	mov	x0, 7072
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	mov	w1, w3
	strh	w1, [x0, 4]
	b	.L1759
.L1758:
	ldr	x1, [sp, 64]
	ldrsw	x2, [sp, 40]
	mov	x0, 7072
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	mov	w1, 1
	strh	w1, [x0, 4]
.L1759:
	ldr	x0, [sp, 56]
	ldr	d0, [x0, 15896]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 1760
	lsl	x0, x0, 3
	add	x0, x1, x0
	str	d0, [x0, 8]
	ldr	x0, [sp, 64]
	ldrsw	x1, [sp, 40]
	add	x1, x1, 1756
	ldr	x2, [sp, 64]
	add	x2, x2, 3584
	ldr	x2, [x2, -12]
	str	x2, [x0, x1, lsl 3]
	ldr	x1, [sp, 64]
	ldrsw	x2, [sp, 40]
	mov	x0, 7072
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	ldrh	w3, [x0, 4]
	ldr	x1, [sp, 64]
	ldrsw	x2, [sp, 40]
	mov	x0, 7064
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	mov	w1, w3
	strh	w1, [x0, 10]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 3552
	lsl	x0, x0, 2
	add	x0, x1, x0
	str	wzr, [x0, 8]
	b	.L1760
.L1752:
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	ldrb	w0, [x0, 3580]
	cmp	w0, 0
	beq	.L1760
	ldr	x0, [sp, 64]
	add	x0, x0, 3572
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1761
	ldr	x0, [sp, 64]
	add	x2, x0, 3572
	ldrsw	x0, [sp, 40]
	add	x0, x0, 1756
	lsl	x0, x0, 3
	ldr	x1, [sp, 64]
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	add	x0, sp, 48
	bl	_ZL11ImLengthSqrRK6ImVec2
	b	.L1762
.L1761:
	movi	v0.2s, #0
.L1762:
	str	s0, [sp, 44]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 3552
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	s0, [x0, 8]
	ldr	s1, [sp, 44]
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x0, 3552
	lsl	x0, x0, 2
	add	x0, x1, x0
	str	s0, [x0, 8]
.L1760:
	ldr	x1, [sp, 64]
	ldrsw	x2, [sp, 40]
	mov	x0, 7064
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	ldrh	w0, [x0, 10]
	cmp	w0, 2
	cset	w0, eq
	and	w2, w0, 255
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	add	x0, x0, 12288
	mov	w1, w2
	strb	w1, [x0, 1845]
	ldr	x1, [sp, 64]
	ldrsw	x0, [sp, 40]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1840]
	cmp	w0, 0
	beq	.L1763
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	strb	wzr, [x0, 2219]
.L1763:
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
.L1740:
	ldr	w0, [sp, 40]
	cmp	w0, 4
	ble	.L1764
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1765
	bl	__stack_chk_fail
.L1765:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1773:
	.size	_ZN5ImGuiL17UpdateMouseInputsEv, .-_ZN5ImGuiL17UpdateMouseInputsEv
	.section	.rodata
	.align	3
.LC188:
	.string	"NULL"
	.align	3
.LC189:
	.string	"LockWheelingWindow() \"%s\"\n"
	.text
	.align	2
	.type	_ZL18LockWheelingWindowP11ImGuiWindowf, %function
_ZL18LockWheelingWindowP11ImGuiWindowf:
.LFB1774:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -48
	str	x0, [sp, 40]
	str	s0, [sp, 36]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L1772
	ldr	x0, [sp, 56]
	ldr	s8, [x0, 16080]
	ldr	s0, [sp, 36]
	bl	_ZL5ImAbsf
	mov	w0, 13107
	movk	w0, 0x3f33, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	fadd	s0, s8, s0
	mov	w0, 13107
	movk	w0, 0x3f33, lsl 16
	fmov	s1, w0
	bl	_Z5ImMinIfET_S0_S0_
	ldr	x0, [sp, 56]
	str	s0, [x0, 16080]
	b	.L1773
.L1772:
	ldr	x0, [sp, 56]
	str	wzr, [x0, 16080]
.L1773:
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 16064]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	beq	.L1779
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L1776
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L1777
	ldr	x0, [sp, 40]
	ldr	x0, [x0]
	b	.L1778
.L1777:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L1778:
	mov	x1, x0
	adrp	x0, .LC189
	add	x0, x0, :lo12:.LC189
	bl	_ZN5ImGui8DebugLogEPKcz
.L1776:
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 40]
	str	x1, [x0, 16064]
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 56]
	add	x1, x1, 3584
	ldr	x1, [x1, -4]
	str	x1, [x0, 16072]
	b	.L1771
.L1779:
	nop
.L1771:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1774:
	.size	_ZL18LockWheelingWindowP11ImGuiWindowf, .-_ZL18LockWheelingWindowP11ImGuiWindowf
	.align	2
	.type	_ZN5ImGuiL16UpdateMouseWheelEv, %function
_ZN5ImGuiL16UpdateMouseWheelEv:
.LFB1775:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -144
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 128]
	ldr	x0, [sp, 128]
	ldr	x0, [x0, 16064]
	cmp	x0, 0
	beq	.L1781
	ldr	x0, [sp, 128]
	ldr	s1, [x0, 16080]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 24]
	fsub	s0, s1, s0
	ldr	x0, [sp, 128]
	str	s0, [x0, 16080]
	mov	x0, 0
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1782
	ldr	x0, [sp, 128]
	add	x2, x0, 3580
	ldr	x1, [sp, 128]
	mov	x0, 16072
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	add	x0, sp, 104
	bl	_ZL11ImLengthSqrRK6ImVec2
	fmov	s2, s0
	ldr	x0, [sp, 128]
	ldr	s1, [x0, 56]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 56]
	fmul	s0, s1, s0
	fcmpe	s2, s0
	bgt	.L1813
	b	.L1782
.L1813:
	mov	w0, 1
	b	.L1784
.L1782:
	mov	w0, 0
.L1784:
	cmp	w0, 0
	beq	.L1785
	ldr	x0, [sp, 128]
	str	wzr, [x0, 16080]
.L1785:
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 16080]
	fcmpe	s0, #0.0
	bls	.L1814
	b	.L1781
.L1814:
	movi	v0.2s, #0
	mov	x0, 0
	bl	_ZL18LockWheelingWindowP11ImGuiWindowf
.L1781:
	str	wzr, [sp, 72]
	str	wzr, [sp, 76]
	mov	w1, -1
	mov	w0, 646
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1787
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 3600]
	b	.L1788
.L1787:
	movi	v0.2s, #0
.L1788:
	str	s0, [sp, 72]
	mov	w1, -1
	mov	w0, 647
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1789
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 3596]
	b	.L1790
.L1789:
	movi	v0.2s, #0
.L1790:
	str	s0, [sp, 76]
	ldr	s0, [sp, 72]
	fcmp	s0, #0.0
	bne	.L1791
	ldr	s0, [sp, 76]
	fcmp	s0, #0.0
	beq	.L1815
.L1791:
	ldr	x0, [sp, 128]
	ldr	x0, [x0, 16064]
	cmp	x0, 0
	beq	.L1793
	ldr	x0, [sp, 128]
	ldr	x0, [x0, 16064]
	b	.L1794
.L1793:
	ldr	x0, [sp, 128]
	ldr	x0, [x0, 16040]
.L1794:
	str	x0, [sp, 136]
	ldr	x0, [sp, 136]
	cmp	x0, 0
	beq	.L1816
	ldr	x0, [sp, 136]
	ldrb	w0, [x0, 153]
	cmp	w0, 0
	bne	.L1816
	ldr	s0, [sp, 76]
	fcmp	s0, #0.0
	beq	.L1797
	ldr	x0, [sp, 128]
	ldrb	w0, [x0, 3604]
	cmp	w0, 0
	beq	.L1797
	ldr	x0, [sp, 128]
	ldrb	w0, [x0, 100]
	cmp	w0, 0
	beq	.L1797
	ldr	s0, [sp, 76]
	ldr	x0, [sp, 136]
	bl	_ZL18LockWheelingWindowP11ImGuiWindowf
	ldr	x0, [sp, 136]
	str	x0, [sp, 144]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 624]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 3596]
	mov	w0, 52429
	movk	w0, 0x3dcc, lsl 16
	fmov	s2, w0
	fmul	s0, s0, s2
	fadd	s0, s1, s0
	fmov	s2, 2.5e+0
	fmov	s1, 5.0e-1
	bl	_Z7ImClampIfET_S0_S0_S0_
	str	s0, [sp, 48]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 624]
	ldr	s1, [sp, 48]
	fdiv	s0, s1, s0
	str	s0, [sp, 52]
	ldr	x0, [sp, 144]
	ldr	s0, [sp, 48]
	str	s0, [x0, 624]
	ldr	x0, [sp, 144]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 144]
	cmp	x1, x0
	bne	.L1817
	ldr	x0, [sp, 144]
	add	x0, x0, 32
	fmov	s1, 1.0e+0
	ldr	s0, [sp, 52]
	fsub	s0, s1, s0
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	ldr	x0, [sp, 128]
	add	x2, x0, 3580
	ldr	x0, [sp, 144]
	add	x0, x0, 24
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	add	x1, sp, 96
	add	x0, sp, 88
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	ldr	x0, [sp, 144]
	add	x1, x0, 32
	add	x0, sp, 104
	bl	_ZdvRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	ldr	x0, [sp, 144]
	add	x0, x0, 24
	add	x1, sp, 80
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	add	x0, sp, 104
	mov	w2, 0
	mov	x1, x0
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
	ldr	x0, [sp, 144]
	add	x0, x0, 32
	ldr	s0, [sp, 52]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	ldr	x19, [sp, 144]
	add	x0, sp, 104
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 32]
	str	s0, [x19, 36]
	ldr	x0, [sp, 144]
	add	x0, x0, 40
	ldr	s0, [sp, 52]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	ldr	x19, [sp, 144]
	add	x0, sp, 104
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 40]
	str	s0, [x19, 44]
	b	.L1817
.L1797:
	ldr	x0, [sp, 128]
	ldrb	w0, [x0, 3604]
	cmp	w0, 0
	bne	.L1818
	ldr	x0, [sp, 128]
	ldrb	w0, [x0, 3605]
	cmp	w0, 0
	beq	.L1800
	ldr	x0, [sp, 128]
	ldrb	w0, [x0, 121]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1800
	mov	w0, 1
	b	.L1801
.L1800:
	mov	w0, 0
.L1801:
	strb	w0, [sp, 47]
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L1802
	ldr	s0, [sp, 76]
	str	s0, [sp, 72]
	str	wzr, [sp, 76]
.L1802:
	ldr	s0, [sp, 76]
	fcmp	s0, #0.0
	beq	.L1803
	ldr	x0, [sp, 136]
	str	x0, [sp, 112]
	b	.L1804
.L1806:
	ldr	x0, [sp, 112]
	ldr	x0, [x0, 840]
	str	x0, [sp, 112]
.L1804:
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L1805
	ldr	x0, [sp, 112]
	ldr	s0, [x0, 112]
	fcmp	s0, #0.0
	beq	.L1806
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 12]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1805
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 12]
	and	w0, w0, 512
	cmp	w0, 0
	beq	.L1806
.L1805:
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 12]
	and	w0, w0, 16
	cmp	w0, 0
	bne	.L1803
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 12]
	and	w0, w0, 512
	cmp	w0, 0
	bne	.L1803
	ldr	s0, [sp, 76]
	ldr	x0, [sp, 136]
	bl	_ZL18LockWheelingWindowP11ImGuiWindowf
	ldr	x0, [sp, 112]
	add	x0, x0, 472
	bl	_ZNK6ImRect9GetHeightEv
	mov	w0, 34079
	movk	w0, 0x3f2b, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	str	s0, [sp, 56]
	ldr	x0, [sp, 112]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	fmov	s1, s0
	fmov	s0, 5.0e+0
	fmul	s0, s1, s0
	ldr	s1, [sp, 56]
	bl	_Z5ImMinIfET_S0_S0_
	bl	_ZL7ImFloorf
	str	s0, [sp, 60]
	ldr	x0, [sp, 112]
	ldr	s1, [x0, 104]
	ldr	s2, [sp, 76]
	ldr	s0, [sp, 60]
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	ldr	x0, [sp, 112]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
.L1803:
	ldr	s0, [sp, 72]
	fcmp	s0, #0.0
	beq	.L1780
	ldr	x0, [sp, 136]
	str	x0, [sp, 120]
	b	.L1808
.L1810:
	ldr	x0, [sp, 120]
	ldr	x0, [x0, 840]
	str	x0, [sp, 120]
.L1808:
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L1809
	ldr	x0, [sp, 120]
	ldr	s0, [x0, 108]
	fcmp	s0, #0.0
	beq	.L1810
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 12]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1809
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 12]
	and	w0, w0, 512
	cmp	w0, 0
	beq	.L1810
.L1809:
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 12]
	and	w0, w0, 16
	cmp	w0, 0
	bne	.L1780
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 12]
	and	w0, w0, 512
	cmp	w0, 0
	bne	.L1780
	ldr	s0, [sp, 72]
	ldr	x0, [sp, 136]
	bl	_ZL18LockWheelingWindowP11ImGuiWindowf
	ldr	x0, [sp, 120]
	add	x0, x0, 472
	bl	_ZNK6ImRect8GetWidthEv
	mov	w0, 34079
	movk	w0, 0x3f2b, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	str	s0, [sp, 64]
	ldr	x0, [sp, 120]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	fadd	s0, s0, s0
	ldr	s1, [sp, 64]
	bl	_Z5ImMinIfET_S0_S0_
	bl	_ZL7ImFloorf
	str	s0, [sp, 68]
	ldr	x0, [sp, 120]
	ldr	s1, [x0, 100]
	ldr	s2, [sp, 72]
	ldr	s0, [sp, 68]
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	ldr	x0, [sp, 120]
	bl	_ZN5ImGui10SetScrollXEP11ImGuiWindowf
	b	.L1780
.L1815:
	nop
	b	.L1780
.L1816:
	nop
	b	.L1780
.L1817:
	nop
	b	.L1780
.L1818:
	nop
.L1780:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1812
	bl	__stack_chk_fail
.L1812:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1775:
	.size	_ZN5ImGuiL16UpdateMouseWheelEv, .-_ZN5ImGuiL16UpdateMouseWheelEv
	.align	2
	.global	_ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv
	.type	_ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv, %function
_ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv:
.LFB1776:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	add	x0, x0, 8
	str	x0, [sp, 72]
	ldr	x1, [sp, 64]
	mov	x0, 14404
	add	x20, x1, x0
	add	x0, sp, 56
	fmov	s1, 4.0e+0
	fmov	s0, 4.0e+0
	bl	_ZN6ImVec2C1Eff
	ldr	x1, [sp, 64]
	mov	x0, 15872
	add	x19, x1, x0
	add	x0, sp, 56
	mov	x1, x0
	mov	x0, x20
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 148]
	str	s0, [x19, 152]
	strb	wzr, [sp, 41]
	bl	_ZL17FindHoveredWindowv
	bl	_ZN5ImGui20GetTopMostPopupModalEv
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	cmp	x0, 0
	beq	.L1820
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	beq	.L1820
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16040]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 80]
	bl	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1820
	mov	w0, 1
	b	.L1821
.L1820:
	mov	w0, 0
.L1821:
	cmp	w0, 0
	beq	.L1822
	mov	w0, 1
	strb	w0, [sp, 41]
.L1822:
	ldr	x0, [sp, 72]
	ldr	w0, [x0]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1823
	mov	w0, 1
	strb	w0, [sp, 41]
.L1823:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	cmp	w0, 0
	cset	w0, gt
	strb	w0, [sp, 43]
	ldr	x0, [sp, 80]
	cmp	x0, 0
	cset	w0, ne
	strb	w0, [sp, 44]
	mov	w0, -1
	str	w0, [sp, 48]
	strb	wzr, [sp, 42]
	str	wzr, [sp, 52]
	b	.L1824
.L1835:
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 52]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1840]
	cmp	w0, 0
	beq	.L1825
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	bne	.L1826
	ldrb	w0, [sp, 43]
	cmp	w0, 0
	beq	.L1827
.L1826:
	mov	w2, 1
	b	.L1828
.L1827:
	mov	w2, 0
.L1828:
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 52]
	add	x0, x1, x0
	add	x0, x0, 12288
	mov	w1, w2
	strb	w1, [x0, 1875]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	bne	.L1829
	ldrb	w0, [sp, 44]
	cmp	w0, 0
	beq	.L1830
.L1829:
	mov	w2, 1
	b	.L1831
.L1830:
	mov	w2, 0
.L1831:
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 52]
	add	x0, x1, x0
	add	x0, x0, 12288
	mov	w1, w2
	strb	w1, [x0, 1880]
.L1825:
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 52]
	add	x0, x1, x0
	ldrb	w1, [x0, 3580]
	ldrb	w0, [sp, 42]
	orr	w0, w1, w0
	and	w0, w0, 255
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 42]
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 52]
	add	x0, x1, x0
	ldrb	w0, [x0, 3580]
	cmp	w0, 0
	beq	.L1832
	ldr	w0, [sp, 48]
	cmn	w0, #1
	beq	.L1833
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 52]
	add	x0, x0, 1760
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	d1, [x0, 8]
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 48]
	add	x0, x0, 1760
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	d0, [x0, 8]
	fcmpe	d1, d0
	bmi	.L1833
	b	.L1832
.L1833:
	ldr	w0, [sp, 52]
	str	w0, [sp, 48]
.L1832:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L1824:
	ldr	w0, [sp, 52]
	cmp	w0, 4
	ble	.L1835
	ldr	w0, [sp, 48]
	cmn	w0, #1
	beq	.L1836
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 48]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1875]
	cmp	w0, 0
	beq	.L1837
.L1836:
	mov	w0, 1
	b	.L1838
.L1837:
	mov	w0, 0
.L1838:
	strb	w0, [sp, 45]
	ldr	w0, [sp, 48]
	cmn	w0, #1
	beq	.L1839
	ldr	x1, [sp, 72]
	ldrsw	x0, [sp, 48]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1880]
	cmp	w0, 0
	beq	.L1840
.L1839:
	mov	w0, 1
	b	.L1841
.L1840:
	mov	w0, 0
.L1841:
	strb	w0, [sp, 46]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	beq	.L1842
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2584]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L1842
	mov	w0, 1
	b	.L1843
.L1842:
	mov	w0, 0
.L1843:
	strb	w0, [sp, 47]
	ldrb	w0, [sp, 45]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1844
	ldrb	w0, [sp, 47]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1844
	mov	w0, 1
	strb	w0, [sp, 41]
.L1844:
	ldrb	w0, [sp, 41]
	cmp	w0, 0
	beq	.L1845
	ldr	x0, [sp, 64]
	str	xzr, [x0, 16048]
	ldr	x0, [sp, 64]
	ldr	x1, [x0, 16048]
	ldr	x0, [sp, 64]
	str	x1, [x0, 16040]
.L1845:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7572]
	cmn	w0, #1
	beq	.L1846
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7572]
	cmp	w0, 0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 72]
	add	x0, x0, 12288
	strb	w1, [x0, 1748]
	ldr	x0, [sp, 72]
	add	x0, x0, 12288
	ldrb	w1, [x0, 1748]
	ldr	x0, [sp, 72]
	strb	w1, [x0, 208]
	b	.L1847
.L1846:
	ldrb	w0, [sp, 45]
	cmp	w0, 0
	beq	.L1848
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	bne	.L1849
	ldrb	w0, [sp, 42]
	cmp	w0, 0
	bne	.L1849
.L1848:
	ldrb	w0, [sp, 43]
	cmp	w0, 0
	beq	.L1850
.L1849:
	mov	w1, 1
	b	.L1851
.L1850:
	mov	w1, 0
.L1851:
	ldr	x0, [sp, 72]
	strb	w1, [x0, 208]
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L1852
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	bne	.L1853
	ldrb	w0, [sp, 42]
	cmp	w0, 0
	bne	.L1853
.L1852:
	ldrb	w0, [sp, 44]
	cmp	w0, 0
	beq	.L1854
.L1853:
	mov	w1, 1
	b	.L1855
.L1854:
	mov	w1, 0
.L1855:
	ldr	x0, [sp, 72]
	add	x0, x0, 12288
	strb	w1, [x0, 1748]
.L1847:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7576]
	cmn	w0, #1
	beq	.L1856
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7576]
	cmp	w0, 0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 72]
	strb	w1, [x0, 209]
	b	.L1857
.L1856:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	bne	.L1858
	ldr	x0, [sp, 80]
	cmp	x0, 0
	beq	.L1859
.L1858:
	mov	w1, 1
	b	.L1860
.L1859:
	mov	w1, 0
.L1860:
	ldr	x0, [sp, 72]
	strb	w1, [x0, 209]
.L1857:
	ldr	x0, [sp, 72]
	ldrb	w0, [x0, 213]
	cmp	w0, 0
	beq	.L1861
	ldr	x0, [sp, 72]
	ldr	w0, [x0]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L1861
	ldr	x0, [sp, 72]
	ldr	w0, [x0]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L1861
	ldr	x0, [sp, 72]
	mov	w1, 1
	strb	w1, [x0, 209]
.L1861:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7580]
	cmn	w0, #1
	beq	.L1862
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7580]
	cmp	w0, 0
	beq	.L1862
	mov	w1, 1
	b	.L1863
.L1862:
	mov	w1, 0
.L1863:
	ldr	x0, [sp, 72]
	strb	w1, [x0, 210]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1864
	bl	__stack_chk_fail
.L1864:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1776:
	.size	_ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv, .-_ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv
	.section	.rodata
	.align	3
.LC190:
	.string	"void ImGui::NewFrame()"
	.align	3
.LC191:
	.string	"g.Font->IsLoaded()"
	.align	3
.LC192:
	.string	"NewFrame(): ClearActiveID() because it isn't marked alive anymore!\n"
	.align	3
.LC193:
	.string	"g.WindowsFocusOrder.Size <= g.Windows.Size"
	.align	3
.LC194:
	.string	"Debug##Default"
	.align	3
.LC195:
	.string	"g.CurrentWindow->IsFallbackWindow == true"
	.text
	.align	2
	.global	_ZN5ImGui8NewFrameEv
	.type	_ZN5ImGui8NewFrameEv, %function
_ZN5ImGui8NewFrameEv:
.LFB1777:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x19, [sp, 16]
	str	d8, [sp, 24]
	.cfi_offset 19, -112
	.cfi_offset 72, -104
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	cmp	x0, 0
	bne	.L1866
	adrp	x0, .LC190
	add	x3, x0, :lo12:.LC190
	mov	w2, 4526
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC90
	add	x0, x0, :lo12:.LC90
	bl	__assert_fail
.L1866:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7064]
	sub	w0, w0, #1
	str	w0, [sp, 36]
	b	.L1867
.L1869:
	ldr	x1, [sp, 64]
	mov	x0, 23448
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI16ImGuiContextHookEixEi
	ldr	w0, [x0, 4]
	cmp	w0, 7
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1868
	ldr	x1, [sp, 64]
	mov	x0, 23448
	add	x19, x1, x0
	ldr	x1, [sp, 64]
	mov	x0, 23448
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI16ImGuiContextHookEixEi
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI16ImGuiContextHookE5eraseEPKS0_
.L1868:
	ldr	w0, [sp, 36]
	sub	w0, w0, #1
	str	w0, [sp, 36]
.L1867:
	ldr	w0, [sp, 36]
	cmp	w0, 0
	bge	.L1869
	mov	w1, 0
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	bl	_ZN5ImGuiL30ErrorCheckNewFrameSanityChecksEv
	bl	_ZN5ImGuiL14UpdateSettingsEv
	ldr	x0, [sp, 64]
	ldr	d1, [x0, 15896]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	fcvt	d0, s0
	fadd	d0, d1, d0
	ldr	x0, [sp, 64]
	str	d0, [x0, 15896]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3628]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15904]
	add	w1, w0, 1
	ldr	x0, [sp, 64]
	str	w1, [x0, 15904]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	strh	wzr, [x0, 6922]
	ldr	x0, [sp, 64]
	str	wzr, [x0, 16016]
	ldr	x1, [sp, 64]
	mov	x0, 23328
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIjE6resizeEi
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s1, [x0, 7568]
	ldr	x0, [sp, 64]
	ldr	s2, [x0, 24]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7560]
	ldr	x1, [sp, 64]
	sxtw	x2, w0
	mov	x0, 5924
	add	x0, x2, x0
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	s0, [x0, 8]
	fsub	s0, s2, s0
	fadd	s0, s1, s0
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	s0, [x0, 7568]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w2, [x0, 7560]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	ldr	x1, [sp, 64]
	sxtw	x2, w2
	mov	x0, 5924
	add	x0, x2, x0
	lsl	x0, x0, 2
	add	x0, x1, x0
	str	s0, [x0, 8]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7560]
	add	w1, w0, 1
	mov	w0, 34953
	movk	w0, 0x8888, lsl 16
	smull	x0, w1, w0
	lsr	x0, x0, 32
	add	w0, w1, w0
	asr	w2, w0, 5
	asr	w0, w1, 31
	sub	w2, w2, w0
	mov	w0, w2
	lsl	w0, w0, 4
	sub	w0, w0, w2
	lsl	w0, w0, 2
	sub	w2, w1, w0
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w2, [x0, 7560]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7564]
	add	w0, w0, 1
	mov	w1, 60
	bl	_Z5ImMinIiET_S0_S0_
	mov	w1, w0
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 7564]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s0, [x0, 7568]
	fcmpe	s0, #0.0
	bgt	.L1933
	b	.L1940
.L1933:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s1, [x0, 7568]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s0, [x0, 7564]
	scvtf	s0, s0
	fdiv	s0, s1, s0
	fmov	s1, 1.0e+0
	fdiv	s0, s1, s0
	b	.L1872
.L1940:
	mov	w0, 2139095039
	fmov	s0, w0
.L1872:
	ldr	x0, [sp, 64]
	str	s0, [x0, 224]
	bl	_ZN5ImGuiL23UpdateViewportsNewFrameEv
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 88]
	mov	w1, 1
	strb	w1, [x0, 24]
	bl	_ZN5ImGui14GetDefaultFontEv
	bl	_ZN5ImGui14SetCurrentFontEP6ImFont
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 15352]
	bl	_ZNK6ImFont8IsLoadedEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1873
	adrp	x0, .LC190
	add	x3, x0, :lo12:.LC190
	mov	w2, 4562
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC191
	add	x0, x0, :lo12:.LC191
	bl	__assert_fail
.L1873:
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 88]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 92]
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [sp, 96]
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [sp, 100]
	str	wzr, [sp, 40]
	b	.L1874
.L1875:
	ldr	x1, [sp, 64]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 40]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	bl	_ZNK14ImGuiViewportP11GetMainRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 104]
	str	s4, [sp, 108]
	str	s1, [sp, 112]
	str	s0, [sp, 116]
	add	x1, sp, 104
	add	x0, sp, 88
	bl	_ZN6ImRect3AddERKS_
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
.L1874:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 40]
	cmp	w1, w0
	blt	.L1875
	ldr	x1, [sp, 64]
	mov	x0, 15360
	add	x0, x1, x0
	add	x19, x0, 36
	add	x0, sp, 88
	bl	_ZNK6ImRect6ToVec4Ev
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [x19]
	str	s4, [x19, 4]
	str	s1, [x19, 8]
	str	s0, [x19, 12]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 14496]
	ldr	x0, [sp, 64]
	str	s0, [x0, 15388]
	ldr	x1, [sp, 64]
	mov	x0, 15368
	add	x1, x1, x0
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 14500]
	mov	x0, x1
	bl	_ZN20ImDrawListSharedData29SetCircleTessellationMaxErrorEf
	ldr	x0, [sp, 64]
	str	wzr, [x0, 15412]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	ldrb	w0, [x0, 2204]
	cmp	w0, 0
	beq	.L1876
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15412]
	orr	w1, w0, 1
	ldr	x0, [sp, 64]
	str	w1, [x0, 15412]
.L1876:
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	ldrb	w0, [x0, 2205]
	cmp	w0, 0
	beq	.L1877
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 15352]
	ldr	x0, [x0, 64]
	ldr	w0, [x0]
	and	w0, w0, 4
	cmp	w0, 0
	bne	.L1877
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15412]
	orr	w1, w0, 2
	ldr	x0, [sp, 64]
	str	w1, [x0, 15412]
.L1877:
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	ldrb	w0, [x0, 2206]
	cmp	w0, 0
	beq	.L1878
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15412]
	orr	w1, w0, 4
	ldr	x0, [sp, 64]
	str	w1, [x0, 15412]
.L1878:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 12]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L1879
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15412]
	orr	w1, w0, 8
	ldr	x0, [sp, 64]
	str	w1, [x0, 15412]
.L1879:
	str	wzr, [sp, 44]
	b	.L1880
.L1881:
	ldr	x1, [sp, 64]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	add	x0, x0, 72
	bl	_ZN10ImDrawData5ClearEv
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L1880:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	blt	.L1881
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	beq	.L1882
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w1, [x0, 2612]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	cmp	w1, w0
	bne	.L1882
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2612]
	bl	_ZN5ImGui11KeepAliveIDEj
.L1882:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16092]
	cmp	w0, 0
	bne	.L1883
	ldr	x0, [sp, 64]
	str	wzr, [x0, 16100]
.L1883:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16092]
	cmp	w0, 0
	beq	.L1884
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	beq	.L1885
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16088]
	cmp	w1, w0
	bne	.L1885
.L1884:
	ldr	x0, [sp, 64]
	str	wzr, [x0, 16104]
.L1885:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	beq	.L1886
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 16100]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	fadd	s0, s1, s0
	ldr	x0, [sp, 64]
	str	s0, [x0, 16100]
.L1886:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	beq	.L1887
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16088]
	cmp	w1, w0
	beq	.L1887
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 16104]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	fadd	s0, s1, s0
	ldr	x0, [sp, 64]
	str	s0, [x0, 16104]
.L1887:
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 16088]
	ldr	x0, [sp, 64]
	str	w1, [x0, 16092]
	ldr	x0, [sp, 64]
	str	wzr, [x0, 16088]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	strb	wzr, [x0, 3808]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	strb	wzr, [x0, 3809]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L1888
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 16112]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	cmp	w1, w0
	beq	.L1888
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 16152]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	cmp	w1, w0
	bne	.L1888
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L1889
	adrp	x0, .LC192
	add	x0, x0, :lo12:.LC192
	bl	_ZN5ImGui8DebugLogEPKcz
.L1889:
	bl	_ZN5ImGui13ClearActiveIDEv
.L1888:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L1890
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 16116]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	fadd	s0, s1, s0
	ldr	x0, [sp, 64]
	str	s0, [x0, 16116]
.L1890:
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 16172]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	fadd	s0, s1, s0
	ldr	x0, [sp, 64]
	str	s0, [x0, 16172]
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 64]
	str	w1, [x0, 16152]
	ldr	x0, [sp, 64]
	ldr	x1, [x0, 16136]
	ldr	x0, [sp, 64]
	str	x1, [x0, 16160]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	ldrb	w1, [x0, 3836]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	strb	w1, [x0, 3869]
	ldr	x0, [sp, 64]
	str	wzr, [x0, 16112]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	strb	wzr, [x0, 3837]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	strb	wzr, [x0, 3868]
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	strb	wzr, [x0, 3832]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 6808]
	cmp	w0, 0
	beq	.L1891
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 6808]
	cmp	w1, w0
	beq	.L1891
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 6808]
.L1891:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	bne	.L1892
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 1784]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	strb	wzr, [x0, 1788]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 1792]
.L1892:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	bne	.L1893
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 1792]
	b	.L1894
.L1893:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 1792]
	cmp	w0, 0
	beq	.L1894
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 1792]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L1895
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	mov	w2, 0
	mov	w1, w0
	mov	w0, 526
	bl	_ZN5ImGui11SetKeyOwnerE8ImGuiKeyji
.L1895:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 1792]
	and	w0, w0, -3
	cmp	w0, 0
	beq	.L1894
	adrp	x0, .LC190
	add	x3, x0, :lo12:.LC190
	mov	w2, 4645
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L1894:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w1, [x0, 2952]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 2956]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2952]
	cmp	w0, 0
	beq	.L1896
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s1, [x0, 2960]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	fadd	s0, s1, s0
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	s0, [x0, 2960]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 2964]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 2952]
	b	.L1897
.L1896:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s0, [x0, 2960]
	fcmpe	s0, #0.0
	bgt	.L1934
	b	.L1897
.L1934:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s1, [x0, 2964]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	fadd	s0, s1, s0
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	s0, [x0, 2964]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s8, [x0, 2964]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 24]
	fadd	s0, s0, s0
	fmov	s1, s0
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s0, w0
	bl	_Z5ImMaxIfET_S0_S0_
	fcmpe	s8, s0
	cset	w0, ge
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1897
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 2964]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s0, [x0, 2964]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	s0, [x0, 2960]
.L1897:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w1, [x0, 2692]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 2696]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 2692]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	mov	w1, 2139095039
	fmov	s0, w1
	str	s0, [x0, 2688]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	strb	wzr, [x0, 2581]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	strb	wzr, [x0, 2582]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 2704]
	ldr	x1, [sp, 64]
	mov	x0, 14288
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorI15ImGuiInputEventE6resizeEi
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 122]
	bl	_ZN5ImGui17UpdateInputEventsEb
	bl	_ZN5ImGuiL20UpdateKeyboardInputsEv
	bl	_ZN5ImGuiL9NavUpdateEv
	bl	_ZN5ImGuiL17UpdateMouseInputsEv
	bl	_ZN5ImGui34UpdateHoveredWindowAndCaptureFlagsEv
	bl	_ZN5ImGui31UpdateMouseMovingWindowNewFrameEv
	bl	_ZN5ImGui20GetTopMostPopupModalEv
	cmp	x0, 0
	bne	.L1899
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L1900
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s0, [x0, 2548]
	fcmpe	s0, #0.0
	bgt	.L1899
	b	.L1900
.L1899:
	mov	w0, 1
	b	.L1902
.L1900:
	mov	w0, 0
.L1902:
	cmp	w0, 0
	beq	.L1903
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s1, [x0, 2572]
	ldr	x0, [sp, 64]
	ldr	s2, [x0, 24]
	fmov	s0, 6.0e+0
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	fmov	s1, 1.0e+0
	bl	_Z5ImMinIfET_S0_S0_
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	s0, [x0, 2572]
	b	.L1904
.L1903:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s1, [x0, 2572]
	ldr	x0, [sp, 64]
	ldr	s2, [x0, 24]
	fmov	s0, 1.0e+1
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	movi	v1.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	s0, [x0, 2572]
.L1904:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 2576]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 7580]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w1, [x0, 7580]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 7576]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w1, [x0, 7576]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 7572]
	ldr	x1, [sp, 64]
	mov	x0, 23552
	add	x2, x1, x0
	ldr	x1, [sp, 64]
	mov	x0, 23552
	add	x0, x1, x0
	ldp	x0, x1, [x0, -208]
	stp	x0, x1, [x2, -192]
	ldr	x0, [sp, 64]
	add	x0, x0, 20480
	strb	wzr, [x0, 2864]
	bl	_ZN5ImGuiL16UpdateMouseWheelEv
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 15952]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15936]
	cmp	w1, w0
	ble	.L1905
	adrp	x0, .LC190
	add	x3, x0, :lo12:.LC190
	mov	w2, 4720
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC193
	add	x0, x0, :lo12:.LC193
	bl	__assert_fail
.L1905:
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3631]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1906
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 128]
	fcmpe	s0, #0.0
	cset	w0, mi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1906
	ldr	x0, [sp, 64]
	ldr	d0, [x0, 15896]
	fcvt	s1, d0
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 128]
	fsub	s0, s1, s0
	b	.L1907
.L1906:
	mov	w0, 2139095039
	fmov	s0, w0
.L1907:
	str	s0, [sp, 60]
	str	wzr, [sp, 48]
	b	.L1908
.L1911:
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 48]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	ldrb	w1, [x0, 150]
	ldr	x0, [sp, 72]
	strb	w1, [x0, 151]
	ldr	x0, [sp, 72]
	strb	wzr, [x0, 150]
	ldr	x0, [sp, 72]
	strb	wzr, [x0, 152]
	ldr	x0, [sp, 72]
	ldrsh	w1, [x0, 162]
	ldr	x0, [sp, 72]
	strh	w1, [x0, 164]
	ldr	x0, [sp, 72]
	strh	wzr, [x0, 162]
	ldr	x0, [sp, 72]
	ldrb	w0, [x0, 151]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1909
	ldr	x0, [sp, 72]
	ldrb	w0, [x0, 948]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1909
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 580]
	ldr	s1, [sp, 60]
	fcmpe	s1, s0
	bgt	.L1935
	b	.L1909
.L1935:
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui31GcCompactTransientWindowBuffersEP11ImGuiWindow
.L1909:
	ldr	w0, [sp, 48]
	add	w0, w0, 1
	str	w0, [sp, 48]
.L1908:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 48]
	cmp	w1, w0
	bne	.L1911
	str	wzr, [sp, 52]
	b	.L1912
.L1918:
	ldr	x1, [sp, 64]
	mov	x0, 19224
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIfEixEi
	ldr	s0, [x0]
	fcmpe	s0, #0.0
	bge	.L1936
	b	.L1913
.L1936:
	ldr	x1, [sp, 64]
	mov	x0, 19224
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIfEixEi
	ldr	s0, [x0]
	ldr	s1, [sp, 60]
	fcmpe	s1, s0
	bgt	.L1937
	b	.L1913
.L1937:
	mov	w0, 1
	b	.L1916
.L1913:
	mov	w0, 0
.L1916:
	cmp	w0, 0
	beq	.L1917
	ldr	x1, [sp, 64]
	mov	x0, 19184
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN6ImPoolI10ImGuiTableE10GetByIndexEi
	bl	_ZN5ImGui30TableGcCompactTransientBuffersEP10ImGuiTable
.L1917:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L1912:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2840]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	blt	.L1918
	str	wzr, [sp, 56]
	b	.L1919
.L1925:
	ldr	x1, [sp, 64]
	mov	x0, 19168
	add	x0, x1, x0
	ldr	w1, [sp, 56]
	bl	_ZN8ImVectorI18ImGuiTableTempDataEixEi
	ldr	s0, [x0, 4]
	fcmpe	s0, #0.0
	bge	.L1938
	b	.L1920
.L1938:
	ldr	x1, [sp, 64]
	mov	x0, 19168
	add	x0, x1, x0
	ldr	w1, [sp, 56]
	bl	_ZN8ImVectorI18ImGuiTableTempDataEixEi
	ldr	s0, [x0, 4]
	ldr	s1, [sp, 60]
	fcmpe	s1, s0
	bgt	.L1939
	b	.L1920
.L1939:
	mov	w0, 1
	b	.L1923
.L1920:
	mov	w0, 0
.L1923:
	cmp	w0, 0
	beq	.L1924
	ldr	x1, [sp, 64]
	mov	x0, 19168
	add	x0, x1, x0
	ldr	w1, [sp, 56]
	bl	_ZN8ImVectorI18ImGuiTableTempDataEixEi
	bl	_ZN5ImGui30TableGcCompactTransientBuffersEP18ImGuiTableTempData
.L1924:
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	str	w0, [sp, 56]
.L1919:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2784]
	ldr	w1, [sp, 56]
	cmp	w1, w0
	blt	.L1925
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3631]
	cmp	w0, 0
	beq	.L1926
	bl	_ZN5ImGui29GcCompactTransientMiscBuffersEv
.L1926:
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	strb	wzr, [x0, 3631]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L1927
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18536]
	ldrb	w0, [x0, 151]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1927
	mov	x1, 0
	mov	x0, 0
	bl	_ZN5ImGui26FocusTopMostWindowUnderOneEP11ImGuiWindowS1_
.L1927:
	ldr	x1, [sp, 64]
	mov	x0, 15984
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE6resizeEi
	ldr	x1, [sp, 64]
	mov	x0, 18496
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorI14ImGuiPopupDataE6resizeEi
	ldr	x1, [sp, 64]
	mov	x0, 18448
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIiE6resizeEi
	ldr	x1, [sp, 64]
	mov	x0, 18448
	add	x0, x1, x0
	str	wzr, [sp, 104]
	add	x1, sp, 104
	bl	_ZN8ImVectorIiE9push_backERKi
	ldr	x1, [sp, 64]
	mov	x0, 18464
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorI14ImGuiGroupDataE6resizeEi
	bl	_ZN5ImGuiL25UpdateDebugToolItemPickerEv
	bl	_ZN5ImGuiL27UpdateDebugToolStackQueriesEv
	ldr	x0, [sp, 64]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3160]
	cmp	w0, 0
	beq	.L1928
	ldr	x0, [sp, 64]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3160]
	sub	w0, w0, #1
	and	w1, w0, 255
	ldr	x0, [sp, 64]
	add	x0, x0, 20480
	strb	w1, [x0, 3160]
	ldr	x0, [sp, 64]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3160]
	cmp	w0, 0
	bne	.L1928
	mov	w0, 1
	b	.L1929
.L1928:
	mov	w0, 0
.L1929:
	cmp	w0, 0
	beq	.L1930
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 1804]
.L1930:
	ldr	x0, [sp, 64]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3629]
	add	x0, sp, 104
	mov	w1, 1137180672
	fmov	s1, w1
	mov	w1, 1137180672
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 104
	mov	w1, 4
	bl	_ZN5ImGui17SetNextWindowSizeERK6ImVec2i
	mov	w2, 0
	mov	x1, 0
	adrp	x0, .LC194
	add	x0, x0, :lo12:.LC194
	bl	_ZN5ImGui5BeginEPKcPbi
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16032]
	ldrb	w0, [x0, 158]
	cmp	w0, 1
	beq	.L1931
	adrp	x0, .LC190
	add	x3, x0, :lo12:.LC190
	mov	w2, 4771
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC195
	add	x0, x0, :lo12:.LC195
	bl	__assert_fail
.L1931:
	mov	w1, 1
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1932
	bl	__stack_chk_fail
.L1932:
	ldr	d8, [sp, 24]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1777:
	.size	_ZN5ImGui8NewFrameEv, .-_ZN5ImGui8NewFrameEv
	.section	.rodata
	.align	3
.LC196:
	.string	"Size column to fit###SizeOne"
	.align	3
.LC197:
	.string	"Size all columns to fit###SizeAll"
	.align	3
.LC198:
	.string	"Size all columns to default###SizeAll"
	.align	3
.LC199:
	.string	"Reset order###ResetOrder"
	.align	3
.LC200:
	.string	"(Main menu bar)"
	.align	3
.LC201:
	.string	"(Popup)"
	.align	3
.LC202:
	.string	"(Untitled)"
	.section	.data.rel.ro.local,"aw"
	.align	3
	.type	_ZL24GLocalizationEntriesEnUS, %object
	.size	_ZL24GLocalizationEntriesEnUS, 112
_ZL24GLocalizationEntriesEnUS:
	.word	0
	.zero	4
	.xword	.LC196
	.word	1
	.zero	4
	.xword	.LC197
	.word	2
	.zero	4
	.xword	.LC198
	.word	3
	.zero	4
	.xword	.LC199
	.word	4
	.zero	4
	.xword	.LC200
	.word	5
	.zero	4
	.xword	.LC201
	.word	6
	.zero	4
	.xword	.LC202
	.section	.rodata
	.align	3
.LC203:
	.string	"void ImGui::Initialize()"
	.align	3
.LC204:
	.string	"!g.Initialized && !g.SettingsLoaded"
	.align	3
.LC205:
	.string	"Window"
	.text
	.align	2
	.global	_ZN5ImGui10InitializeEv
	.type	_ZN5ImGui10InitializeEv, %function
_ZN5ImGui10InitializeEv:
.LFB1778:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -112
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldrb	w0, [x0]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1942
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	ldrb	w0, [x0, 2897]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1945
.L1942:
	adrp	x0, .LC203
	add	x3, x0, :lo12:.LC203
	mov	w2, 4791
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC204
	add	x0, x0, :lo12:.LC204
	bl	__assert_fail
.L1945:
	add	x0, sp, 48
	bl	_ZN20ImGuiSettingsHandlerC1Ev
	adrp	x0, .LC205
	add	x0, x0, :lo12:.LC205
	str	x0, [sp, 48]
	mov	w2, 0
	mov	x1, 0
	adrp	x0, .LC205
	add	x0, x0, :lo12:.LC205
	bl	_Z9ImHashStrPKcmj
	str	w0, [sp, 56]
	adrp	x0, _ZL30WindowSettingsHandler_ClearAllP12ImGuiContextP20ImGuiSettingsHandler
	add	x0, x0, :lo12:_ZL30WindowSettingsHandler_ClearAllP12ImGuiContextP20ImGuiSettingsHandler
	str	x0, [sp, 64]
	adrp	x0, _ZL30WindowSettingsHandler_ReadOpenP12ImGuiContextP20ImGuiSettingsHandlerPKc
	add	x0, x0, :lo12:_ZL30WindowSettingsHandler_ReadOpenP12ImGuiContextP20ImGuiSettingsHandlerPKc
	str	x0, [sp, 80]
	adrp	x0, _ZL30WindowSettingsHandler_ReadLineP12ImGuiContextP20ImGuiSettingsHandlerPvPKc
	add	x0, x0, :lo12:_ZL30WindowSettingsHandler_ReadLineP12ImGuiContextP20ImGuiSettingsHandlerPvPKc
	str	x0, [sp, 88]
	adrp	x0, _ZL30WindowSettingsHandler_ApplyAllP12ImGuiContextP20ImGuiSettingsHandler
	add	x0, x0, :lo12:_ZL30WindowSettingsHandler_ApplyAllP12ImGuiContextP20ImGuiSettingsHandler
	str	x0, [sp, 96]
	adrp	x0, _ZL30WindowSettingsHandler_WriteAllP12ImGuiContextP20ImGuiSettingsHandlerP15ImGuiTextBuffer
	add	x0, x0, :lo12:_ZL30WindowSettingsHandler_WriteAllP12ImGuiContextP20ImGuiSettingsHandlerP15ImGuiTextBuffer
	str	x0, [sp, 104]
	add	x0, sp, 48
	bl	_ZN5ImGui18AddSettingsHandlerEPK20ImGuiSettingsHandler
	bl	_ZN5ImGui31TableSettingsAddSettingsHandlerEv
	mov	w1, 7
	adrp	x0, _ZL24GLocalizationEntriesEnUS
	add	x0, x0, :lo12:_ZL24GLocalizationEntriesEnUS
	bl	_ZN5ImGui23LocalizeRegisterEntriesEPK13ImGuiLocEntryi
	mov	x0, 184
	bl	_ZN5ImGui8MemAllocEm
	mov	x2, x0
	mov	w1, w19
	mov	x0, 184
	bl	_Znwm12ImNewWrapperPv
	mov	x19, x0
	mov	x0, x19
	bl	_ZN14ImGuiViewportPC1Ev
	str	x19, [sp, 48]
	ldr	x1, [sp, 40]
	mov	x0, 18520
	add	x0, x1, x0
	add	x1, sp, 48
	bl	_ZN8ImVectorIP14ImGuiViewportPE9push_backERKS1_
	ldr	x1, [sp, 40]
	mov	x0, 23968
	add	x0, x1, x0
	strb	wzr, [sp, 39]
	add	x1, sp, 39
	mov	x2, x1
	mov	w1, 3073
	bl	_ZN8ImVectorIcE6resizeEiRKc
	ldr	x0, [sp, 40]
	mov	w1, 1
	strb	w1, [x0]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1944
	bl	__stack_chk_fail
.L1944:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1778:
	.size	_ZN5ImGui10InitializeEv, .-_ZN5ImGui10InitializeEv
	.align	2
	.global	_ZN5ImGui8ShutdownEv
	.type	_ZN5ImGui8ShutdownEv, %function
_ZN5ImGui8ShutdownEv:
.LFB1779:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 88]
	cmp	x0, 0
	beq	.L1947
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 1]
	cmp	w0, 0
	beq	.L1947
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 88]
	strb	wzr, [x0, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 88]
	bl	_Z9IM_DELETEI11ImFontAtlasEvPT_
.L1947:
	ldr	x0, [sp, 24]
	str	xzr, [x0, 88]
	ldr	x1, [sp, 24]
	mov	x0, 15416
	add	x0, x1, x0
	bl	_ZN8ImVectorI6ImVec2E5clearEv
	ldr	x0, [sp, 24]
	ldrb	w0, [x0]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1953
	ldr	x0, [sp, 24]
	add	x0, x0, 20480
	ldrb	w0, [x0, 2897]
	cmp	w0, 0
	beq	.L1950
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 32]
	cmp	x0, 0
	beq	.L1950
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 32]
	bl	_ZN5ImGui21SaveIniSettingsToDiskEPKc
.L1950:
	mov	w1, 6
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	ldr	x1, [sp, 24]
	mov	x0, 15936
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowE12clear_deleteEv
	ldr	x1, [sp, 24]
	mov	x0, 15952
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 15968
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowE5clearEv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 16032]
	ldr	x1, [sp, 24]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 16000
	add	x0, x1, x0
	bl	_ZN12ImGuiStorage5ClearEv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 18536]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 16048]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 16048]
	ldr	x0, [sp, 24]
	str	x1, [x0, 16040]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 16160]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 16160]
	ldr	x0, [sp, 24]
	str	x1, [x0, 16136]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 16056]
	ldr	x1, [sp, 24]
	mov	x0, 17856
	add	x0, x1, x0
	bl	_ZN20ImGuiKeyRoutingTable5ClearEv
	ldr	x1, [sp, 24]
	mov	x0, 18384
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiColorModE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 18400
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiStyleModE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 18416
	add	x0, x1, x0
	bl	_ZN8ImVectorIP6ImFontE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 18480
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 18496
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 18520
	add	x0, x1, x0
	bl	_ZN8ImVectorIP14ImGuiViewportPE12clear_deleteEv
	ldr	x1, [sp, 24]
	mov	x0, 19264
	add	x0, x1, x0
	bl	_ZN6ImPoolI11ImGuiTabBarE5ClearEv
	ldr	x1, [sp, 24]
	mov	x0, 19304
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiPtrOrIndexE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 19320
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiShrinkWidthItemE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 19136
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiListClipperDataE14clear_destructEv
	ldr	x1, [sp, 24]
	mov	x0, 19184
	add	x0, x1, x0
	bl	_ZN6ImPoolI10ImGuiTableE5ClearEv
	ldr	x1, [sp, 24]
	mov	x0, 19168
	add	x0, x1, x0
	bl	_ZN8ImVectorI18ImGuiTableTempDataE14clear_destructEv
	ldr	x1, [sp, 24]
	mov	x0, 19240
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImDrawChannelE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 23312
	add	x0, x1, x0
	bl	_ZN8ImVectorIcE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 23328
	add	x0, x1, x0
	bl	_ZN8ImVectorIjE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 19360
	add	x0, x1, x0
	bl	_ZN19ImGuiInputTextState15ClearFreeMemoryEv
	ldr	x1, [sp, 24]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 23400
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerE5clearEv
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 23536]
	cmp	x0, 0
	beq	.L1951
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 23536]
	adrp	x0, :got:stdout
	ldr	x0, [x0, #:got_lo12:stdout]
	ldr	x0, [x0]
	cmp	x1, x0
	beq	.L1952
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 23536]
	bl	_Z11ImFileCloseP8_IO_FILE
.L1952:
	ldr	x0, [sp, 24]
	str	xzr, [x0, 23536]
.L1951:
	ldr	x1, [sp, 24]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBuffer5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBuffer5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 23616
	add	x0, x1, x0
	bl	_ZN14ImGuiTextIndex5clearEv
	ldr	x0, [sp, 24]
	strb	wzr, [x0]
	b	.L1946
.L1953:
	nop
.L1946:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1779:
	.size	_ZN5ImGui8ShutdownEv, .-_ZN5ImGui8ShutdownEv
	.align	2
	.type	_ZL19ChildWindowComparerPKvS0_, %function
_ZL19ChildWindowComparerPKvS0_:
.LFB1780:
	.cfi_startproc
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp]
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 12]
	and	w1, w0, 67108864
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	sub	w0, w1, w0
	str	w0, [sp, 24]
	ldr	w0, [sp, 24]
	cmp	w0, 0
	beq	.L1955
	ldr	w0, [sp, 24]
	b	.L1956
.L1955:
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 12]
	and	w1, w0, 33554432
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 33554432
	sub	w0, w1, w0
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	beq	.L1957
	ldr	w0, [sp, 28]
	b	.L1956
.L1957:
	ldr	x0, [sp, 32]
	ldrsh	w0, [x0, 166]
	mov	w1, w0
	ldr	x0, [sp, 40]
	ldrsh	w0, [x0, 166]
	sub	w0, w1, w0
.L1956:
	add	sp, sp, 48
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1780:
	.size	_ZL19ChildWindowComparerPKvS0_, .-_ZL19ChildWindowComparerPKvS0_
	.align	2
	.type	_ZL21AddWindowToSortBufferP8ImVectorIP11ImGuiWindowES1_, %function
_ZL21AddWindowToSortBufferP8ImVectorIP11ImGuiWindowES1_:
.LFB1781:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	add	x0, sp, 16
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_
	ldr	x0, [sp, 16]
	ldrb	w0, [x0, 150]
	cmp	w0, 0
	beq	.L1963
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 368]
	str	w0, [sp, 36]
	ldr	x0, [sp, 16]
	ldr	x4, [x0, 376]
	ldrsw	x1, [sp, 36]
	adrp	x0, _ZL19ChildWindowComparerPKvS0_
	add	x3, x0, :lo12:_ZL19ChildWindowComparerPKvS0_
	mov	x2, 8
	mov	x0, x4
	bl	_ZL7ImQsortPvmmPFiPKvS1_E
	str	wzr, [sp, 32]
	b	.L1960
.L1962:
	ldr	x0, [sp, 16]
	add	x0, x0, 368
	ldr	w1, [sp, 32]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 150]
	cmp	w0, 0
	beq	.L1961
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_ZL21AddWindowToSortBufferP8ImVectorIP11ImGuiWindowES1_
.L1961:
	ldr	w0, [sp, 32]
	add	w0, w0, 1
	str	w0, [sp, 32]
.L1960:
	ldr	w1, [sp, 32]
	ldr	w0, [sp, 36]
	cmp	w1, w0
	blt	.L1962
.L1963:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1781:
	.size	_ZL21AddWindowToSortBufferP8ImVectorIP11ImGuiWindowES1_, .-_ZL21AddWindowToSortBufferP8ImVectorIP11ImGuiWindowES1_
	.section	.rodata
	.align	3
.LC206:
	.string	"void AddDrawListToDrawData(ImVector<ImDrawList*>*, ImDrawList*)"
	.align	3
.LC207:
	.string	"draw_list->VtxBuffer.Size == 0 || draw_list->_VtxWritePtr == draw_list->VtxBuffer.Data + draw_list->VtxBuffer.Size"
	.align	3
.LC208:
	.string	"draw_list->IdxBuffer.Size == 0 || draw_list->_IdxWritePtr == draw_list->IdxBuffer.Data + draw_list->IdxBuffer.Size"
	.align	3
.LC209:
	.string	"(int)draw_list->_VtxCurrentIdx == draw_list->VtxBuffer.Size"
	.align	3
.LC210:
	.string	"draw_list->_VtxCurrentIdx < (1 << 16) && \"Too many vertices in ImDrawList using 16-bit indices. Read comment above\""
	.text
	.align	2
	.type	_ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_, %function
_ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_:
.LFB1782:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 0
	beq	.L1974
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 1
	bne	.L1967
	ldr	x0, [sp, 16]
	mov	w1, 0
	bl	_ZN8ImVectorI9ImDrawCmdEixEi
	ldr	w0, [x0, 32]
	cmp	w0, 0
	bne	.L1967
	ldr	x0, [sp, 16]
	mov	w1, 0
	bl	_ZN8ImVectorI9ImDrawCmdEixEi
	ldr	x0, [x0, 40]
	cmp	x0, 0
	bne	.L1967
	mov	w0, 1
	b	.L1968
.L1967:
	mov	w0, 0
.L1968:
	cmp	w0, 0
	bne	.L1975
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 32]
	cmp	w0, 0
	beq	.L1970
	ldr	x0, [sp, 16]
	ldr	x2, [x0, 72]
	ldr	x0, [sp, 16]
	ldr	x3, [x0, 40]
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 32]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x3, x0
	cmp	x2, x0
	beq	.L1970
	adrp	x0, .LC206
	add	x3, x0, :lo12:.LC206
	mov	w2, 4935
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC207
	add	x0, x0, :lo12:.LC207
	bl	__assert_fail
.L1970:
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 16]
	cmp	w0, 0
	beq	.L1971
	ldr	x0, [sp, 16]
	ldr	x1, [x0, 80]
	ldr	x0, [sp, 16]
	ldr	x2, [x0, 24]
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 16]
	sxtw	x0, w0
	lsl	x0, x0, 1
	add	x0, x2, x0
	cmp	x1, x0
	beq	.L1971
	adrp	x0, .LC206
	add	x3, x0, :lo12:.LC206
	mov	w2, 4936
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC208
	add	x0, x0, :lo12:.LC208
	bl	__assert_fail
.L1971:
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 48]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L1972
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 52]
	mov	w1, w0
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 32]
	cmp	w1, w0
	beq	.L1972
	adrp	x0, .LC206
	add	x3, x0, :lo12:.LC206
	mov	w2, 4938
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC209
	add	x0, x0, :lo12:.LC209
	bl	__assert_fail
.L1972:
	ldr	x0, [sp, 16]
	ldr	w1, [x0, 52]
	mov	w0, 65535
	cmp	w1, w0
	bls	.L1973
	adrp	x0, .LC206
	add	x3, x0, :lo12:.LC206
	mov	w2, 4956
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC210
	add	x0, x0, :lo12:.LC210
	bl	__assert_fail
.L1973:
	add	x0, sp, 16
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP10ImDrawListE9push_backERKS1_
	b	.L1964
.L1974:
	nop
	b	.L1964
.L1975:
	nop
.L1964:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1782:
	.size	_ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_, .-_ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_
	.align	2
	.type	_ZL19AddWindowToDrawDataP11ImGuiWindowi, %function
_ZL19AddWindowToDrawDataP11ImGuiWindowi:
.LFB1783:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	mov	x0, 18520
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 236]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	str	w1, [x0, 236]
	ldrsw	x0, [sp, 20]
	add	x0, x0, 7
	lsl	x0, x0, 4
	ldr	x1, [sp, 48]
	add	x0, x1, x0
	add	x2, x0, 8
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 632]
	mov	x1, x0
	mov	x0, x2
	bl	_ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_
	str	wzr, [sp, 36]
	b	.L1977
.L1979:
	ldr	x0, [sp, 24]
	add	x0, x0, 368
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	bl	_ZL24IsWindowActiveAndVisibleP11ImGuiWindow
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L1978
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 56]
	bl	_ZL19AddWindowToDrawDataP11ImGuiWindowi
.L1978:
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L1977:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 368]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	blt	.L1979
	nop
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1783:
	.size	_ZL19AddWindowToDrawDataP11ImGuiWindowi, .-_ZL19AddWindowToDrawDataP11ImGuiWindowi
	.align	2
	.type	_ZL21GetWindowDisplayLayerP11ImGuiWindow, %function
_ZL21GetWindowDisplayLayerP11ImGuiWindow:
.LFB1784:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 12]
	asr	w0, w0, 25
	and	w0, w0, 1
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1784:
	.size	_ZL21GetWindowDisplayLayerP11ImGuiWindow, .-_ZL21GetWindowDisplayLayerP11ImGuiWindow
	.align	2
	.type	_ZL23AddRootWindowToDrawDataP11ImGuiWindow, %function
_ZL23AddRootWindowToDrawDataP11ImGuiWindow:
.LFB1785:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZL21GetWindowDisplayLayerP11ImGuiWindow
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZL19AddWindowToDrawDataP11ImGuiWindowi
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1785:
	.size	_ZL23AddRootWindowToDrawDataP11ImGuiWindow, .-_ZL23AddRootWindowToDrawDataP11ImGuiWindow
	.align	2
	.global	_ZN17ImDrawDataBuilder22FlattenIntoSingleLayerEv
	.type	_ZN17ImDrawDataBuilder22FlattenIntoSingleLayerEv, %function
_ZN17ImDrawDataBuilder22FlattenIntoSingleLayerEv:
.LFB1786:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	str	w0, [sp, 56]
	ldr	w0, [sp, 56]
	str	w0, [sp, 60]
	mov	w0, 1
	str	w0, [sp, 64]
	b	.L1984
.L1985:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 64]
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldr	w0, [x0]
	ldr	w1, [sp, 60]
	add	w0, w1, w0
	str	w0, [sp, 60]
	ldr	w0, [sp, 64]
	add	w0, w0, 1
	str	w0, [sp, 64]
.L1984:
	ldr	w0, [sp, 64]
	cmp	w0, 1
	ble	.L1985
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIP10ImDrawListE6resizeEi
	mov	w0, 1
	str	w0, [sp, 68]
	b	.L1986
.L1989:
	ldrsw	x0, [sp, 68]
	lsl	x0, x0, 4
	ldr	x1, [sp, 40]
	add	x0, x1, x0
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	bl	_ZNK8ImVectorIP10ImDrawListE5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L1990
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 56]
	bl	_ZN8ImVectorIP10ImDrawListEixEi
	mov	x19, x0
	mov	w1, 0
	ldr	x0, [sp, 72]
	bl	_ZN8ImVectorIP10ImDrawListEixEi
	mov	x1, x0
	ldr	x0, [sp, 72]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x0, x19
	bl	memcpy
	ldr	x0, [sp, 72]
	ldr	w0, [x0]
	ldr	w1, [sp, 56]
	add	w0, w1, w0
	str	w0, [sp, 56]
	mov	w1, 0
	ldr	x0, [sp, 72]
	bl	_ZN8ImVectorIP10ImDrawListE6resizeEi
	b	.L1988
.L1990:
	nop
.L1988:
	ldr	w0, [sp, 68]
	add	w0, w0, 1
	str	w0, [sp, 68]
.L1986:
	ldr	w0, [sp, 68]
	cmp	w0, 1
	ble	.L1989
	nop
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1786:
	.size	_ZN17ImDrawDataBuilder22FlattenIntoSingleLayerEv, .-_ZN17ImDrawDataBuilder22FlattenIntoSingleLayerEv
	.align	2
	.type	_ZL21SetupViewportDrawDataP14ImGuiViewportPP8ImVectorIP10ImDrawListE, %function
_ZL21SetupViewportDrawDataP14ImGuiViewportPP8ImVectorIP10ImDrawListE:
.LFB1787:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	bl	_ZN5ImGui5GetIOEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	add	x0, x0, 72
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	mov	w1, 1
	strb	w1, [x0]
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 0
	ble	.L1992
	ldr	x0, [sp, 16]
	ldr	x0, [x0, 8]
	b	.L1993
.L1992:
	mov	x0, 0
.L1993:
	ldr	x1, [sp, 48]
	str	x0, [x1, 16]
	ldr	x0, [sp, 16]
	ldr	w1, [x0]
	ldr	x0, [sp, 48]
	str	w1, [x0, 4]
	ldr	x0, [sp, 48]
	str	wzr, [x0, 8]
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 48]
	str	w1, [x0, 12]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 24]
	ldr	x1, [x1, 4]
	str	x1, [x0, 24]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 24]
	ldr	x1, [x1, 12]
	str	x1, [x0, 32]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 40]
	ldr	x1, [x1, 104]
	str	x1, [x0, 40]
	str	wzr, [sp, 36]
	b	.L1994
.L1995:
	ldr	x0, [sp, 16]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 36]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	bl	_ZN10ImDrawList17_PopUnusedDrawCmdEv
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 32]
	add	w1, w1, w0
	ldr	x0, [sp, 48]
	str	w1, [x0, 12]
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 16]
	add	w1, w1, w0
	ldr	x0, [sp, 48]
	str	w1, [x0, 8]
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L1994:
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	blt	.L1995
	nop
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1787:
	.size	_ZL21SetupViewportDrawDataP14ImGuiViewportPP8ImVectorIP10ImDrawListE, .-_ZL21SetupViewportDrawDataP14ImGuiViewportPP8ImVectorIP10ImDrawListE
	.align	2
	.global	_ZN5ImGui12PushClipRectERK6ImVec2S2_b
	.type	_ZN5ImGui12PushClipRectERK6ImVec2S2_b, %function
_ZN5ImGui12PushClipRectERK6ImVec2S2_b:
.LFB1788:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	strb	w2, [sp, 31]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 632]
	ldrb	w3, [sp, 31]
	ldr	x2, [sp, 32]
	ldr	x1, [sp, 40]
	bl	_ZN10ImDrawList12PushClipRectERK6ImVec2S2_b
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 632]
	add	x0, x0, 88
	bl	_ZN8ImVectorI6ImVec4E4backEv
	mov	x1, x0
	add	x0, sp, 56
	bl	_ZN6ImRectC1ERK6ImVec4
	ldr	x0, [sp, 48]
	add	x2, x0, 512
	ldp	x0, x1, [sp, 56]
	stp	x0, x1, [x2, 24]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1997
	bl	__stack_chk_fail
.L1997:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1788:
	.size	_ZN5ImGui12PushClipRectERK6ImVec2S2_b, .-_ZN5ImGui12PushClipRectERK6ImVec2S2_b
	.align	2
	.global	_ZN5ImGui11PopClipRectEv
	.type	_ZN5ImGui11PopClipRectEv, %function
_ZN5ImGui11PopClipRectEv:
.LFB1789:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 16]
	ldr	x0, [sp, 16]
	ldr	x0, [x0, 632]
	bl	_ZN10ImDrawList11PopClipRectEv
	ldr	x0, [sp, 16]
	ldr	x0, [x0, 632]
	add	x0, x0, 88
	bl	_ZN8ImVectorI6ImVec4E4backEv
	mov	x1, x0
	add	x0, sp, 24
	bl	_ZN6ImRectC1ERK6ImVec4
	ldr	x0, [sp, 16]
	add	x2, x0, 512
	ldp	x0, x1, [sp, 24]
	stp	x0, x1, [x2, 24]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L1999
	bl	__stack_chk_fail
.L1999:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1789:
	.size	_ZN5ImGui11PopClipRectEv, .-_ZN5ImGui11PopClipRectEv
	.section	.rodata
	.align	3
.LC211:
	.string	"void ImGui::RenderDimmedBackgroundBehindWindow(ImGuiWindow*, ImU32)"
	.align	3
.LC212:
	.string	"cmd.ElemCount == 6"
	.text
	.align	2
	.type	_ZN5ImGuiL34RenderDimmedBackgroundBehindWindowEP11ImGuiWindowj, %function
_ZN5ImGuiL34RenderDimmedBackgroundBehindWindowEP11ImGuiWindowj:
.LFB1790:
	.cfi_startproc
	stp	x29, x30, [sp, -176]!
	.cfi_def_cfa_offset 176
	.cfi_offset 29, -176
	.cfi_offset 30, -168
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -160
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 168]
	mov	x1, 0
	ldr	w0, [sp, 36]
	and	w0, w0, -16777216
	cmp	w0, 0
	beq	.L2006
	bl	_ZN5ImGui15GetMainViewportEv
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	bl	_ZNK14ImGuiViewportP11GetMainRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 96]
	str	s4, [sp, 100]
	str	s1, [sp, 104]
	str	s0, [sp, 108]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 856]
	ldr	x0, [x0, 632]
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	ldr	w0, [x0]
	cmp	w0, 0
	bne	.L2003
	ldr	x0, [sp, 88]
	bl	_ZN10ImDrawList10AddDrawCmdEv
.L2003:
	ldr	x19, [sp, 88]
	add	x0, sp, 56
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 56
	add	x0, sp, 96
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	add	x0, sp, 72
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 96
	add	x0, x0, 8
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	add	x1, sp, 112
	add	x0, sp, 64
	mov	w3, 0
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList12PushClipRectERK6ImVec2S2_b
	add	x0, sp, 96
	add	x1, x0, 8
	add	x0, sp, 96
	mov	w4, 0
	movi	v0.2s, #0
	ldr	w3, [sp, 36]
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 88]
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
	ldr	x0, [sp, 88]
	bl	_ZN8ImVectorI9ImDrawCmdE4backEv
	mov	x1, x0
	add	x0, sp, 112
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	ldr	q0, [x1, 32]
	str	q0, [x0, 32]
	ldr	x1, [x1, 48]
	str	x1, [x0, 48]
	ldr	w0, [sp, 144]
	cmp	w0, 6
	beq	.L2004
	adrp	x0, .LC211
	add	x3, x0, :lo12:.LC211
	mov	w2, 5063
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC212
	add	x0, x0, :lo12:.LC212
	bl	__assert_fail
.L2004:
	ldr	x0, [sp, 88]
	bl	_ZN8ImVectorI9ImDrawCmdE8pop_backEv
	ldr	x0, [sp, 88]
	add	x1, sp, 112
	bl	_ZN8ImVectorI9ImDrawCmdE10push_frontERKS0_
	ldr	x0, [sp, 88]
	bl	_ZN10ImDrawList11PopClipRectEv
	ldr	x0, [sp, 88]
	bl	_ZN10ImDrawList10AddDrawCmdEv
	b	.L2000
.L2006:
	nop
.L2000:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 168]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2005
	bl	__stack_chk_fail
.L2005:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 176
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1790:
	.size	_ZN5ImGuiL34RenderDimmedBackgroundBehindWindowEP11ImGuiWindowj, .-_ZN5ImGuiL34RenderDimmedBackgroundBehindWindowEP11ImGuiWindowj
	.align	2
	.global	_ZN5ImGui43FindBottomMostVisibleWindowWithinBeginStackEP11ImGuiWindow
	.type	_ZN5ImGui43FindBottomMostVisibleWindowWithinBeginStackEP11ImGuiWindow, %function
_ZN5ImGui43FindBottomMostVisibleWindowWithinBeginStackEP11ImGuiWindow:
.LFB1791:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 40]
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow
	str	w0, [sp, 52]
	b	.L2008
.L2015:
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2017
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2018
	ldr	x0, [sp, 72]
	bl	_ZL24IsWindowActiveAndVisibleP11ImGuiWindow
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2013
	ldr	x0, [sp, 72]
	bl	_ZL21GetWindowDisplayLayerP11ImGuiWindow
	mov	w19, w0
	ldr	x0, [sp, 40]
	bl	_ZL21GetWindowDisplayLayerP11ImGuiWindow
	cmp	w19, w0
	bgt	.L2013
	mov	w0, 1
	b	.L2014
.L2013:
	mov	w0, 0
.L2014:
	cmp	w0, 0
	beq	.L2010
	ldr	x0, [sp, 72]
	str	x0, [sp, 56]
	b	.L2010
.L2017:
	nop
.L2010:
	ldr	w0, [sp, 52]
	sub	w0, w0, #1
	str	w0, [sp, 52]
.L2008:
	ldr	w0, [sp, 52]
	cmp	w0, 0
	bge	.L2015
	b	.L2012
.L2018:
	nop
.L2012:
	ldr	x0, [sp, 56]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1791:
	.size	_ZN5ImGui43FindBottomMostVisibleWindowWithinBeginStackEP11ImGuiWindow, .-_ZN5ImGui43FindBottomMostVisibleWindowWithinBeginStackEP11ImGuiWindow
	.align	2
	.type	_ZN5ImGuiL23RenderDimmedBackgroundsEv, %function
_ZN5ImGuiL23RenderDimmedBackgroundsEv:
.LFB1792:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -96
	.cfi_offset 20, -88
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	bl	_ZN5ImGui30GetTopMostAndVisiblePopupModalEv
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	s0, [x0, 2572]
	fcmpe	s0, #0.0
	bls	.L2035
	b	.L2020
.L2035:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	s0, [x0, 2548]
	fcmpe	s0, #0.0
	bls	.L2038
.L2020:
	ldr	x0, [sp, 56]
	cmp	x0, 0
	cset	w0, ne
	strb	w0, [sp, 34]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18912]
	cmp	x0, 0
	beq	.L2024
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18912]
	ldrb	w0, [x0, 150]
	cmp	w0, 0
	beq	.L2024
	mov	w0, 1
	b	.L2025
.L2024:
	mov	w0, 0
.L2025:
	strb	w0, [sp, 35]
	ldrb	w0, [sp, 34]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2026
	ldrb	w0, [sp, 35]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2039
.L2026:
	ldrb	w0, [sp, 34]
	cmp	w0, 0
	beq	.L2027
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui43FindBottomMostVisibleWindowWithinBeginStackEP11ImGuiWindow
	str	x0, [sp, 80]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	s0, [x0, 2572]
	mov	w0, 52
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w1, w0
	ldr	x0, [sp, 80]
	bl	_ZN5ImGuiL34RenderDimmedBackgroundBehindWindowEP11ImGuiWindowj
	b	.L2019
.L2027:
	ldrb	w0, [sp, 35]
	cmp	w0, 0
	beq	.L2019
	ldr	x0, [sp, 48]
	ldr	x19, [x0, 18912]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	s0, [x0, 2572]
	mov	w0, 51
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w1, w0
	mov	x0, x19
	bl	_ZN5ImGuiL34RenderDimmedBackgroundBehindWindowEP11ImGuiWindowj
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18912]
	str	x0, [sp, 64]
	bl	_ZN5ImGui15GetMainViewportEv
	str	x0, [sp, 72]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 15360]
	str	s0, [sp, 36]
	ldr	x0, [sp, 64]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 88]
	str	s4, [sp, 92]
	str	s1, [sp, 96]
	str	s0, [sp, 100]
	add	x0, sp, 88
	ldr	s0, [sp, 36]
	bl	_ZN6ImRect6ExpandEf
	add	x0, sp, 88
	bl	_ZNK6ImRect8GetWidthEv
	fmov	s1, s0
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 12]
	fcmpe	s1, s0
	bge	.L2036
	b	.L2028
.L2036:
	add	x0, sp, 88
	bl	_ZNK6ImRect9GetHeightEv
	fmov	s1, s0
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 16]
	fcmpe	s1, s0
	bge	.L2037
	b	.L2028
.L2037:
	mov	w0, 1
	b	.L2031
.L2028:
	mov	w0, 0
.L2031:
	cmp	w0, 0
	beq	.L2032
	ldr	s0, [sp, 36]
	fneg	s1, s0
	fmov	s0, 1.0e+0
	fsub	s0, s1, s0
	add	x0, sp, 88
	bl	_ZN6ImRect6ExpandEf
.L2032:
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 632]
	ldr	w0, [x0]
	cmp	w0, 0
	bne	.L2033
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 632]
	bl	_ZN10ImDrawList10AddDrawCmdEv
.L2033:
	ldr	x0, [sp, 64]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 72]
	add	x20, x0, 4
	ldr	x0, [sp, 72]
	add	x2, x0, 4
	ldr	x0, [sp, 72]
	add	x0, x0, 12
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 40]
	str	s0, [sp, 44]
	add	x0, sp, 40
	mov	w3, 0
	mov	x2, x0
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList12PushClipRectERK6ImVec2S2_b
	ldr	x0, [sp, 64]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	s0, [x0, 2548]
	mov	w0, 50
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 80]
	add	x0, sp, 88
	add	x1, x0, 8
	add	x0, sp, 88
	fmov	s1, 3.0e+0
	mov	w4, 0
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 632]
	bl	_ZN10ImDrawList11PopClipRectEv
	b	.L2019
.L2038:
	nop
	b	.L2019
.L2039:
	nop
.L2019:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2034
	bl	__stack_chk_fail
.L2034:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1792:
	.size	_ZN5ImGuiL23RenderDimmedBackgroundsEv, .-_ZN5ImGuiL23RenderDimmedBackgroundsEv
	.section	.rodata
	.align	3
.LC213:
	.string	"void ImGui::EndFrame()"
	.align	3
.LC214:
	.string	"g.Initialized"
	.align	3
.LC215:
	.string	"g.WithinFrameScope && \"Forgot to call ImGui::NewFrame()?\""
	.align	3
.LC216:
	.string	"..."
	.align	3
.LC217:
	.string	"g.Windows.Size == g.WindowsTempSortBuffer.Size"
	.text
	.align	2
	.global	_ZN5ImGui8EndFrameEv
	.type	_ZN5ImGui8EndFrameEv, %function
_ZN5ImGui8EndFrameEv:
.LFB1793:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L2041
	adrp	x0, .LC213
	add	x3, x0, :lo12:.LC213
	mov	w2, 5130
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC214
	add	x0, x0, :lo12:.LC214
	bl	__assert_fail
.L2041:
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 15908]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	beq	.L2058
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3628]
	cmp	w0, 0
	bne	.L2044
	adrp	x0, .LC213
	add	x3, x0, :lo12:.LC213
	mov	w2, 5135
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC215
	add	x0, x0, :lo12:.LC215
	bl	__assert_fail
.L2044:
	mov	w1, 2
	ldr	x0, [sp, 48]
	bl	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	bl	_ZN5ImGuiL30ErrorCheckEndFrameSanityChecksEv
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 200]
	cmp	x0, 0
	beq	.L2045
	ldr	x1, [sp, 48]
	mov	x0, 23344
	add	x3, x1, x0
	ldr	x1, [sp, 48]
	mov	x0, 23360
	add	x0, x1, x0
	mov	x2, 16
	mov	x1, x0
	mov	x0, x3
	bl	memcmp
	cmp	w0, 0
	beq	.L2045
	ldr	x0, [sp, 48]
	ldr	x19, [x0, 200]
	bl	_ZN5ImGui15GetMainViewportEv
	mov	x2, x0
	ldr	x1, [sp, 48]
	mov	x0, 23344
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	blr	x19
.L2045:
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	strb	wzr, [x0, 3629]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	cmp	x0, 0
	beq	.L2046
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	ldrb	w0, [x0, 152]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2046
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	strb	wzr, [x0, 150]
.L2046:
	bl	_ZN5ImGui3EndEv
	bl	_ZN5ImGuiL11NavEndFrameEv
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	beq	.L2047
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2658]
	strb	w0, [sp, 42]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2620]
	add	w1, w0, 1
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	bge	.L2048
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2584]
	and	w0, w0, 32
	cmp	w0, 0
	bne	.L2049
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2592]
	bl	_ZN5ImGui11IsMouseDownEi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2048
.L2049:
	mov	w0, 1
	b	.L2050
.L2048:
	mov	w0, 0
.L2050:
	strb	w0, [sp, 43]
	ldrb	w0, [sp, 42]
	cmp	w0, 0
	bne	.L2051
	ldrb	w0, [sp, 43]
	cmp	w0, 0
	beq	.L2047
.L2051:
	bl	_ZN5ImGui13ClearDragDropEv
.L2047:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	beq	.L2052
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 2588]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	bge	.L2052
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2584]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L2052
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2581]
	adrp	x0, .LC216
	add	x0, x0, :lo12:.LC216
	bl	_ZN5ImGui10SetTooltipEPKcz
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	strb	wzr, [x0, 2581]
.L2052:
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	strb	wzr, [x0, 3628]
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 15904]
	ldr	x0, [sp, 48]
	str	w1, [x0, 15908]
	bl	_ZN5ImGui31UpdateMouseMovingWindowEndFrameEv
	ldr	x1, [sp, 48]
	mov	x0, 15968
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP11ImGuiWindowE6resizeEi
	ldr	x1, [sp, 48]
	mov	x0, 15968
	add	x2, x1, x0
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 15936]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowE7reserveEi
	str	wzr, [sp, 44]
	b	.L2053
.L2056:
	ldr	x1, [sp, 48]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 150]
	cmp	w0, 0
	beq	.L2054
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2059
.L2054:
	ldr	x1, [sp, 48]
	mov	x0, 15968
	add	x0, x1, x0
	ldr	x1, [sp, 56]
	bl	_ZL21AddWindowToSortBufferP8ImVectorIP11ImGuiWindowES1_
	b	.L2055
.L2059:
	nop
.L2055:
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L2053:
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	bne	.L2056
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 15936]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 15968]
	cmp	w1, w0
	beq	.L2057
	adrp	x0, .LC213
	add	x3, x0, :lo12:.LC213
	mov	w2, 5191
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC217
	add	x0, x0, :lo12:.LC217
	bl	__assert_fail
.L2057:
	ldr	x1, [sp, 48]
	mov	x0, 15936
	add	x2, x1, x0
	ldr	x1, [sp, 48]
	mov	x0, 15968
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowE4swapERS2_
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 16016]
	ldr	x0, [sp, 48]
	str	w1, [x0, 240]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 88]
	strb	wzr, [x0, 24]
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	strb	wzr, [x0, 1960]
	ldr	x0, [sp, 48]
	str	wzr, [x0, 3600]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 3600]
	ldr	x0, [sp, 48]
	str	s0, [x0, 3596]
	ldr	x1, [sp, 48]
	mov	x0, 14256
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorItE6resizeEi
	mov	w1, 3
	ldr	x0, [sp, 48]
	bl	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	b	.L2040
.L2058:
	nop
.L2040:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1793:
	.size	_ZN5ImGui8EndFrameEv, .-_ZN5ImGui8EndFrameEv
	.section	.rodata
	.align	3
.LC218:
	.string	"void ImGui::Render()"
	.text
	.align	2
	.global	_ZN5ImGui6RenderEv
	.type	_ZN5ImGui6RenderEv, %function
_ZN5ImGui6RenderEv:
.LFB1794:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -112
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L2061
	adrp	x0, .LC218
	add	x3, x0, :lo12:.LC218
	mov	w2, 5212
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC214
	add	x0, x0, :lo12:.LC214
	bl	__assert_fail
.L2061:
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 15908]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	beq	.L2062
	bl	_ZN5ImGui8EndFrameEv
.L2062:
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 15912]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	cset	w0, ne
	strb	w0, [sp, 47]
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 15904]
	ldr	x0, [sp, 64]
	str	w1, [x0, 15912]
	ldr	x0, [sp, 64]
	str	wzr, [x0, 236]
	mov	w1, 4
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	str	wzr, [sp, 48]
	b	.L2063
.L2065:
	ldr	x1, [sp, 64]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 48]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	add	x0, x0, 120
	bl	_ZN17ImDrawDataBuilder5ClearEv
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 56]
	cmp	x0, 0
	beq	.L2064
	ldr	x0, [sp, 96]
	add	x19, x0, 120
	ldr	x0, [sp, 96]
	bl	_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport
	mov	x1, x0
	mov	x0, x19
	bl	_ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_
.L2064:
	ldr	w0, [sp, 48]
	add	w0, w0, 1
	str	w0, [sp, 48]
.L2063:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 48]
	cmp	w1, w0
	bne	.L2065
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L2066
	bl	_ZN5ImGuiL23RenderDimmedBackgroundsEv
.L2066:
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L2067
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	ldr	w0, [x0, 12]
	and	w0, w0, 8192
	cmp	w0, 0
	bne	.L2067
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	ldr	x0, [x0, 856]
	b	.L2068
.L2067:
	mov	x0, 0
.L2068:
	str	x0, [sp, 104]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L2069
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18920]
	b	.L2070
.L2069:
	mov	x0, 0
.L2070:
	str	x0, [sp, 112]
	str	wzr, [sp, 52]
	b	.L2071
.L2075:
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	bl	_ZL24IsWindowActiveAndVisibleP11ImGuiWindow
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2072
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2072
	ldr	x0, [sp, 104]
	ldr	x1, [sp, 88]
	cmp	x1, x0
	beq	.L2072
	ldr	x0, [sp, 112]
	ldr	x1, [sp, 88]
	cmp	x1, x0
	beq	.L2072
	mov	w0, 1
	b	.L2073
.L2072:
	mov	w0, 0
.L2073:
	cmp	w0, 0
	beq	.L2074
	ldr	x0, [sp, 88]
	bl	_ZL23AddRootWindowToDrawDataP11ImGuiWindow
.L2074:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L2071:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	bne	.L2075
	str	wzr, [sp, 56]
	b	.L2076
.L2080:
	ldrsw	x0, [sp, 56]
	lsl	x0, x0, 3
	add	x1, sp, 104
	ldr	x0, [x1, x0]
	cmp	x0, 0
	beq	.L2077
	ldrsw	x0, [sp, 56]
	lsl	x0, x0, 3
	add	x1, sp, 104
	ldr	x0, [x1, x0]
	bl	_ZL24IsWindowActiveAndVisibleP11ImGuiWindow
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2077
	mov	w0, 1
	b	.L2078
.L2077:
	mov	w0, 0
.L2078:
	cmp	w0, 0
	beq	.L2079
	ldrsw	x0, [sp, 56]
	lsl	x0, x0, 3
	add	x1, sp, 104
	ldr	x0, [x1, x0]
	bl	_ZL23AddRootWindowToDrawDataP11ImGuiWindow
.L2079:
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	str	w0, [sp, 56]
.L2076:
	ldr	w0, [sp, 56]
	cmp	w0, 1
	ble	.L2080
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 120]
	cmp	w0, 0
	beq	.L2081
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L2081
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2576]
	cmn	w0, #1
	beq	.L2081
	ldr	x0, [sp, 64]
	ldr	s2, [x0, 14488]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w4, [x0, 2576]
	ldr	x0, [sp, 64]
	add	x0, x0, 3584
	ldr	s0, [x0, -4]
	ldr	s1, [x0]
	mov	w3, 805306368
	mov	w2, -16777216
	mov	w1, -1
	mov	w0, w4
	bl	_ZN5ImGui17RenderMouseCursorE6ImVec2fijjj
.L2081:
	ldr	x0, [sp, 64]
	str	wzr, [x0, 232]
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 232]
	ldr	x0, [sp, 64]
	str	w1, [x0, 228]
	str	wzr, [sp, 60]
	b	.L2082
.L2084:
	ldr	x1, [sp, 64]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	add	x0, x0, 120
	bl	_ZN17ImDrawDataBuilder22FlattenIntoSingleLayerEv
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 64]
	cmp	x0, 0
	beq	.L2083
	ldr	x0, [sp, 72]
	add	x19, x0, 120
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport
	mov	x1, x0
	mov	x0, x19
	bl	_ZL21AddDrawListToDrawDataP8ImVectorIP10ImDrawListES1_
.L2083:
	ldr	x0, [sp, 72]
	add	x0, x0, 120
	mov	x1, x0
	ldr	x0, [sp, 72]
	bl	_ZL21SetupViewportDrawDataP14ImGuiViewportPP8ImVectorIP10ImDrawListE
	ldr	x0, [sp, 72]
	add	x0, x0, 72
	str	x0, [sp, 80]
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 228]
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 12]
	add	w1, w1, w0
	ldr	x0, [sp, 64]
	str	w1, [x0, 228]
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 232]
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 8]
	add	w1, w1, w0
	ldr	x0, [sp, 64]
	str	w1, [x0, 232]
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L2082:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	blt	.L2084
	mov	w1, 5
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui16CallContextHooksEP12ImGuiContext20ImGuiContextHookType
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2085
	bl	__stack_chk_fail
.L2085:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1794:
	.size	_ZN5ImGui6RenderEv, .-_ZN5ImGui6RenderEv
	.align	2
	.global	_ZN5ImGui12CalcTextSizeEPKcS1_bf
	.type	_ZN5ImGui12CalcTextSizeEPKcS1_bf, %function
_ZN5ImGui12CalcTextSizeEPKcS1_bf:
.LFB1795:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	strb	w2, [sp, 31]
	str	s0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldrb	w0, [sp, 31]
	cmp	w0, 0
	beq	.L2087
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui19FindRenderedTextEndEPKcS1_
	str	x0, [sp, 64]
	b	.L2088
.L2087:
	ldr	x0, [sp, 32]
	str	x0, [sp, 64]
.L2088:
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 15352]
	str	x0, [sp, 80]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 15360]
	str	s0, [sp, 52]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 64]
	cmp	x1, x0
	bne	.L2089
	add	x0, sp, 56
	ldr	s1, [sp, 52]
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 56]
	b	.L2091
.L2089:
	mov	x3, 0
	ldr	x2, [sp, 64]
	ldr	x1, [sp, 40]
	ldr	s2, [sp, 24]
	mov	w0, 2139095039
	fmov	s1, w0
	ldr	s0, [sp, 52]
	ldr	x0, [sp, 80]
	bl	_ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	ldr	s0, [sp, 56]
	mov	w0, 65368
	movk	w0, 0x3f7f, lsl 16
	fmov	s1, w0
	fadd	s0, s0, s1
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 56]
	ldr	x0, [sp, 56]
.L2091:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2092
	bl	__stack_chk_fail
.L2092:
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1795:
	.size	_ZN5ImGui12CalcTextSizeEPKcS1_bf, .-_ZN5ImGui12CalcTextSizeEPKcS1_bf
	.align	2
	.type	_ZL17FindHoveredWindowv, %function
_ZL17FindHoveredWindowv:
.LFB1796:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 88]
	str	xzr, [sp, 72]
	str	xzr, [sp, 80]
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 16056]
	cmp	x0, 0
	beq	.L2094
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 16056]
	ldr	w0, [x0, 12]
	and	w0, w0, 512
	cmp	w0, 0
	bne	.L2094
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 16056]
	str	x0, [sp, 72]
.L2094:
	ldr	x1, [sp, 88]
	mov	x0, 14336
	add	x0, x1, x0
	ldr	x0, [x0, 68]
	str	x0, [sp, 32]
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 126]
	cmp	w0, 0
	beq	.L2095
	ldr	x1, [sp, 88]
	mov	x0, 16020
	add	x0, x1, x0
	b	.L2096
.L2095:
	add	x0, sp, 32
.L2096:
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 15936]
	sub	w0, w0, #1
	str	w0, [sp, 28]
	b	.L2097
.L2113:
	ldr	x1, [sp, 88]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldrb	w0, [x0, 150]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2115
	ldr	x0, [sp, 96]
	ldrb	w0, [x0, 157]
	cmp	w0, 0
	bne	.L2115
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 12]
	and	w0, w0, 512
	cmp	w0, 0
	bne	.L2116
	ldr	x0, [sp, 96]
	add	x0, x0, 512
	ldp	x0, x1, [x0, -56]
	stp	x0, x1, [sp, 104]
	ldr	x0, [sp, 96]
	ldr	w1, [x0, 12]
	mov	w0, 66
	movk	w0, 0x100, lsl 16
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L2102
	add	x1, sp, 32
	add	x0, sp, 104
	bl	_ZN6ImRect6ExpandERK6ImVec2
	b	.L2103
.L2102:
	add	x1, sp, 40
	add	x0, sp, 104
	bl	_ZN6ImRect6ExpandERK6ImVec2
.L2103:
	ldr	x0, [sp, 88]
	add	x1, x0, 3580
	add	x0, sp, 104
	bl	_ZNK6ImRect8ContainsERK6ImVec2
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2117
	ldr	x0, [sp, 96]
	ldrsh	w0, [x0, 568]
	cmp	w0, 0
	beq	.L2105
	ldr	x0, [sp, 96]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 96]
	ldrsh	w0, [x0, 572]
	scvtf	s0, w0
	fadd	s2, s1, s0
	ldr	x0, [sp, 96]
	ldr	s1, [x0, 28]
	ldr	x0, [sp, 96]
	ldrsh	w0, [x0, 574]
	scvtf	s0, w0
	fadd	s0, s1, s0
	add	x0, sp, 48
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 96]
	ldrsh	w0, [x0, 568]
	scvtf	s0, w0
	ldr	x0, [sp, 96]
	ldrsh	w0, [x0, 570]
	scvtf	s1, w0
	add	x0, sp, 56
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 56
	add	x0, sp, 48
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	add	x2, sp, 64
	add	x1, sp, 48
	add	x0, sp, 120
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	x0, [sp, 88]
	add	x1, x0, 3580
	add	x0, sp, 120
	bl	_ZNK6ImRect8ContainsERK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2118
.L2105:
	ldr	x0, [sp, 72]
	cmp	x0, 0
	bne	.L2107
	ldr	x0, [sp, 96]
	str	x0, [sp, 72]
.L2107:
	ldr	x0, [sp, 80]
	cmp	x0, 0
	bne	.L2108
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 16056]
	cmp	x0, 0
	beq	.L2109
	ldr	x0, [sp, 96]
	ldr	x1, [x0, 856]
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 16056]
	ldr	x0, [x0, 856]
	cmp	x1, x0
	beq	.L2108
.L2109:
	ldr	x0, [sp, 96]
	str	x0, [sp, 80]
.L2108:
	ldr	x0, [sp, 72]
	cmp	x0, 0
	beq	.L2112
	ldr	x0, [sp, 80]
	cmp	x0, 0
	bne	.L2119
	b	.L2112
.L2115:
	nop
	b	.L2112
.L2116:
	nop
	b	.L2112
.L2117:
	nop
	b	.L2112
.L2118:
	nop
.L2112:
	ldr	w0, [sp, 28]
	sub	w0, w0, #1
	str	w0, [sp, 28]
.L2097:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bge	.L2113
	b	.L2111
.L2119:
	nop
.L2111:
	ldr	x0, [sp, 88]
	ldr	x1, [sp, 72]
	str	x1, [x0, 16040]
	ldr	x0, [sp, 88]
	ldr	x1, [sp, 80]
	str	x1, [x0, 16048]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2114
	bl	__stack_chk_fail
.L2114:
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1796:
	.size	_ZL17FindHoveredWindowv, .-_ZL17FindHoveredWindowv
	.align	2
	.global	_ZN5ImGui12IsItemActiveEv
	.type	_ZN5ImGui12IsItemActiveEv, %function
_ZN5ImGui12IsItemActiveEv:
.LFB1797:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L2121
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	cmp	w1, w0
	cset	w0, eq
	and	w0, w0, 255
	b	.L2122
.L2121:
	mov	w0, 0
.L2122:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1797:
	.size	_ZN5ImGui12IsItemActiveEv, .-_ZN5ImGui12IsItemActiveEv
	.align	2
	.global	_ZN5ImGui15IsItemActivatedEv
	.type	_ZN5ImGui15IsItemActivatedEv, %function
_ZN5ImGui15IsItemActivatedEv:
.LFB1798:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L2124
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	cmp	w1, w0
	bne	.L2124
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 16152]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	cmp	w1, w0
	beq	.L2124
	mov	w0, 1
	b	.L2125
.L2124:
	mov	w0, 0
.L2125:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1798:
	.size	_ZN5ImGui15IsItemActivatedEv, .-_ZN5ImGui15IsItemActivatedEv
	.align	2
	.global	_ZN5ImGui17IsItemDeactivatedEv
	.type	_ZN5ImGui17IsItemDeactivatedEv, %function
_ZN5ImGui17IsItemDeactivatedEv:
.LFB1799:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L2127
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	and	w0, w0, 64
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	b	.L2128
.L2127:
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 16152]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	cmp	w1, w0
	bne	.L2129
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16152]
	cmp	w0, 0
	beq	.L2129
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	cmp	w1, w0
	beq	.L2129
	mov	w0, 1
	b	.L2131
.L2129:
	mov	w0, 0
.L2131:
	nop
.L2128:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1799:
	.size	_ZN5ImGui17IsItemDeactivatedEv, .-_ZN5ImGui17IsItemDeactivatedEv
	.align	2
	.global	_ZN5ImGui26IsItemDeactivatedAfterEditEv
	.type	_ZN5ImGui26IsItemDeactivatedAfterEditEv, %function
_ZN5ImGui26IsItemDeactivatedAfterEditEv:
.LFB1800:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	bl	_ZN5ImGui17IsItemDeactivatedEv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2133
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3869]
	cmp	w0, 0
	bne	.L2134
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	bne	.L2133
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3836]
	cmp	w0, 0
	beq	.L2133
.L2134:
	mov	w0, 1
	b	.L2135
.L2133:
	mov	w0, 0
.L2135:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1800:
	.size	_ZN5ImGui26IsItemDeactivatedAfterEditEv, .-_ZN5ImGui26IsItemDeactivatedAfterEditEv
	.align	2
	.global	_ZN5ImGui13IsItemFocusedEv
	.type	_ZN5ImGui13IsItemFocusedEv, %function
_ZN5ImGui13IsItemFocusedEv:
.LFB1801:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w1, [x0, 2160]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	cmp	w1, w0
	bne	.L2138
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w0, 0
	bne	.L2139
.L2138:
	mov	w0, 0
	b	.L2140
.L2139:
	mov	w0, 1
.L2140:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1801:
	.size	_ZN5ImGui13IsItemFocusedEv, .-_ZN5ImGui13IsItemFocusedEv
	.align	2
	.global	_ZN5ImGui13IsItemClickedEi
	.type	_ZN5ImGui13IsItemClickedEi, %function
_ZN5ImGui13IsItemClickedEi:
.LFB1802:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	mov	w1, 0
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui14IsMouseClickedEib
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2142
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2142
	mov	w0, 1
	b	.L2143
.L2142:
	mov	w0, 0
.L2143:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1802:
	.size	_ZN5ImGui13IsItemClickedEi, .-_ZN5ImGui13IsItemClickedEi
	.align	2
	.global	_ZN5ImGui17IsItemToggledOpenEv
	.type	_ZN5ImGui17IsItemToggledOpenEv, %function
_ZN5ImGui17IsItemToggledOpenEv:
.LFB1803:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	asr	w0, w0, 4
	and	w0, w0, 1
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1803:
	.size	_ZN5ImGui17IsItemToggledOpenEv, .-_ZN5ImGui17IsItemToggledOpenEv
	.align	2
	.global	_ZN5ImGui22IsItemToggledSelectionEv
	.type	_ZN5ImGui22IsItemToggledSelectionEv, %function
_ZN5ImGui22IsItemToggledSelectionEv:
.LFB1804:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	asr	w0, w0, 3
	and	w0, w0, 1
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1804:
	.size	_ZN5ImGui22IsItemToggledSelectionEv, .-_ZN5ImGui22IsItemToggledSelectionEv
	.align	2
	.global	_ZN5ImGui16IsAnyItemHoveredEv
	.type	_ZN5ImGui16IsAnyItemHoveredEv, %function
_ZN5ImGui16IsAnyItemHoveredEv:
.LFB1805:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	bne	.L2150
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16092]
	cmp	w0, 0
	beq	.L2151
.L2150:
	mov	w0, 1
	b	.L2152
.L2151:
	mov	w0, 0
.L2152:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1805:
	.size	_ZN5ImGui16IsAnyItemHoveredEv, .-_ZN5ImGui16IsAnyItemHoveredEv
	.align	2
	.global	_ZN5ImGui15IsAnyItemActiveEv
	.type	_ZN5ImGui15IsAnyItemActiveEv, %function
_ZN5ImGui15IsAnyItemActiveEv:
.LFB1806:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1806:
	.size	_ZN5ImGui15IsAnyItemActiveEv, .-_ZN5ImGui15IsAnyItemActiveEv
	.align	2
	.global	_ZN5ImGui16IsAnyItemFocusedEv
	.type	_ZN5ImGui16IsAnyItemFocusedEv, %function
_ZN5ImGui16IsAnyItemFocusedEv:
.LFB1807:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w0, 0
	beq	.L2157
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2157
	mov	w0, 1
	b	.L2158
.L2157:
	mov	w0, 0
.L2158:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1807:
	.size	_ZN5ImGui16IsAnyItemFocusedEv, .-_ZN5ImGui16IsAnyItemFocusedEv
	.align	2
	.global	_ZN5ImGui13IsItemVisibleEv
	.type	_ZN5ImGui13IsItemVisibleEv, %function
_ZN5ImGui13IsItemVisibleEv:
.LFB1808:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	and	w0, w0, 512
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1808:
	.size	_ZN5ImGui13IsItemVisibleEv, .-_ZN5ImGui13IsItemVisibleEv
	.align	2
	.global	_ZN5ImGui12IsItemEditedEv
	.type	_ZN5ImGui12IsItemEditedEv, %function
_ZN5ImGui12IsItemEditedEv:
.LFB1809:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	and	w0, w0, 4
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1809:
	.size	_ZN5ImGui12IsItemEditedEv, .-_ZN5ImGui12IsItemEditedEv
	.align	2
	.global	_ZN5ImGui19SetItemAllowOverlapEv
	.type	_ZN5ImGui19SetItemAllowOverlapEv, %function
_ZN5ImGui19SetItemAllowOverlapEv:
.LFB1810:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	str	w0, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16088]
	ldr	w1, [sp, 4]
	cmp	w1, w0
	bne	.L2165
	ldr	x0, [sp, 8]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3808]
.L2165:
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 4]
	cmp	w1, w0
	bne	.L2167
	ldr	x0, [sp, 8]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3833]
.L2167:
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1810:
	.size	_ZN5ImGui19SetItemAllowOverlapEv, .-_ZN5ImGui19SetItemAllowOverlapEv
	.section	.rodata
	.align	3
.LC219:
	.string	"void ImGui::SetActiveIdUsingAllKeyboardKeys()"
	.align	3
.LC220:
	.string	"g.ActiveId != 0"
	.text
	.align	2
	.global	_ZN5ImGui31SetActiveIdUsingAllKeyboardKeysEv
	.type	_ZN5ImGui31SetActiveIdUsingAllKeyboardKeysEv, %function
_ZN5ImGui31SetActiveIdUsingAllKeyboardKeysEv:
.LFB1811:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	bne	.L2169
	adrp	x0, .LC219
	add	x3, x0, :lo12:.LC219
	mov	w2, 5463
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC220
	add	x0, x0, :lo12:.LC220
	bl	__assert_fail
.L2169:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	mov	w1, 15
	str	w1, [x0, 1784]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 1788]
	bl	_ZN5ImGui20NavMoveRequestCancelEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1811:
	.size	_ZN5ImGui31SetActiveIdUsingAllKeyboardKeysEv, .-_ZN5ImGui31SetActiveIdUsingAllKeyboardKeysEv
	.align	2
	.global	_ZN5ImGui14GetItemRectMinEv
	.type	_ZN5ImGui14GetItemRectMinEv, %function
_ZN5ImGui14GetItemRectMinEv:
.LFB1812:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 18224]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1812:
	.size	_ZN5ImGui14GetItemRectMinEv, .-_ZN5ImGui14GetItemRectMinEv
	.align	2
	.global	_ZN5ImGui14GetItemRectMaxEv
	.type	_ZN5ImGui14GetItemRectMaxEv, %function
_ZN5ImGui14GetItemRectMaxEv:
.LFB1813:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 18232]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1813:
	.size	_ZN5ImGui14GetItemRectMaxEv, .-_ZN5ImGui14GetItemRectMaxEv
	.align	2
	.global	_ZN5ImGui15GetItemRectSizeEv
	.type	_ZN5ImGui15GetItemRectSizeEv, %function
_ZN5ImGui15GetItemRectSizeEv:
.LFB1814:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x1, [sp, 24]
	mov	x0, 18224
	add	x0, x1, x0
	bl	_ZNK6ImRect7GetSizeEv
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1814:
	.size	_ZN5ImGui15GetItemRectSizeEv, .-_ZN5ImGui15GetItemRectSizeEv
	.section	.rodata
	.align	3
.LC221:
	.string	"%s/%s_%08X"
	.align	3
.LC222:
	.string	"%s/%08X"
	.text
	.align	2
	.global	_ZN5ImGui12BeginChildExEPKcjRK6ImVec2bi
	.type	_ZN5ImGui12BeginChildExEPKcjRK6ImVec2bi, %function
_ZN5ImGui12BeginChildExEPKcjRK6ImVec2bi:
.LFB1815:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	strb	w3, [sp, 35]
	str	w4, [sp, 20]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 104]
	ldr	w1, [sp, 20]
	mov	w0, 259
	movk	w0, 0x100, lsl 16
	orr	w0, w1, w0
	str	w0, [sp, 20]
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 12]
	and	w0, w0, 4
	ldr	w1, [sp, 20]
	orr	w0, w1, w0
	str	w0, [sp, 20]
	bl	_ZN5ImGui21GetContentRegionAvailEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	ldr	x0, [sp, 24]
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	ldr	s0, [sp, 80]
	fcmp	s0, #0.0
	bne	.L2177
	mov	w1, 1
	b	.L2178
.L2177:
	mov	w1, 0
.L2178:
	ldr	s0, [sp, 84]
	fcmp	s0, #0.0
	bne	.L2179
	mov	w0, 2
	b	.L2180
.L2179:
	mov	w0, 0
.L2180:
	orr	w0, w1, w0
	str	w0, [sp, 64]
	ldr	s0, [sp, 80]
	fcmpe	s0, #0.0
	bls	.L2193
	b	.L2181
.L2193:
	ldr	s1, [sp, 72]
	ldr	s0, [sp, 80]
	fadd	s0, s1, s0
	fmov	s1, 4.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 80]
.L2181:
	ldr	s0, [sp, 84]
	fcmpe	s0, #0.0
	bls	.L2194
	b	.L2183
.L2194:
	ldr	s1, [sp, 76]
	ldr	s0, [sp, 84]
	fadd	s0, s1, s0
	fmov	s1, 4.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 84]
.L2183:
	add	x0, sp, 80
	mov	w1, 0
	bl	_ZN5ImGui17SetNextWindowSizeERK6ImVec2i
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L2185
	ldr	x0, [sp, 104]
	ldr	x0, [x0]
	add	x6, sp, 88
	ldr	w5, [sp, 36]
	ldr	x4, [sp, 40]
	mov	x3, x0
	adrp	x0, .LC221
	add	x2, x0, :lo12:.LC221
	mov	x1, 0
	mov	x0, x6
	bl	_Z26ImFormatStringToTempBufferPPKcS1_S0_z
	b	.L2186
.L2185:
	ldr	x0, [sp, 104]
	ldr	x0, [x0]
	add	x5, sp, 88
	ldr	w4, [sp, 36]
	mov	x3, x0
	adrp	x0, .LC222
	add	x2, x0, :lo12:.LC222
	mov	x1, 0
	mov	x0, x5
	bl	_Z26ImFormatStringToTempBufferPPKcS1_S0_z
.L2186:
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 14352]
	str	s0, [sp, 68]
	ldrb	w0, [sp, 35]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2187
	ldr	x0, [sp, 96]
	str	wzr, [x0, 14352]
.L2187:
	ldr	x0, [sp, 88]
	ldr	w2, [sp, 20]
	mov	x1, 0
	bl	_ZN5ImGui5BeginEPKcPbi
	and	w0, w0, 255
	strb	w0, [sp, 63]
	ldr	x0, [sp, 96]
	ldr	s0, [sp, 68]
	str	s0, [x0, 14352]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	ldr	w1, [sp, 36]
	str	w1, [x0, 96]
	ldr	w0, [sp, 64]
	sxtb	w1, w0
	ldr	x0, [sp, 112]
	strb	w1, [x0, 178]
	ldr	x0, [sp, 112]
	ldrsh	w0, [x0, 162]
	cmp	w0, 1
	bne	.L2188
	ldr	x0, [sp, 104]
	ldr	x1, [sp, 112]
	ldr	x1, [x1, 24]
	str	x1, [x0, 224]
.L2188:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2168]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L2189
	ldr	w0, [sp, 20]
	and	w0, w0, 8388608
	cmp	w0, 0
	bne	.L2189
	ldr	x0, [sp, 112]
	ldrsh	w0, [x0, 316]
	cmp	w0, 0
	bne	.L2190
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 321]
	cmp	w0, 0
	beq	.L2189
.L2190:
	ldr	x0, [sp, 112]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	mov	w1, 0
	ldr	x0, [sp, 112]
	bl	_ZN5ImGui13NavInitWindowEP11ImGuiWindowb
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	ldr	x1, [sp, 112]
	bl	_ZN5ImGui11SetActiveIDEjP11ImGuiWindow
	ldr	x0, [sp, 96]
	mov	w1, 5
	str	w1, [x0, 16144]
.L2189:
	ldrb	w0, [sp, 63]
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 120]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L2192
	bl	__stack_chk_fail
.L2192:
	mov	w0, w1
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1815:
	.size	_ZN5ImGui12BeginChildExEPKcjRK6ImVec2bi, .-_ZN5ImGui12BeginChildExEPKcjRK6ImVec2bi
	.align	2
	.global	_ZN5ImGui10BeginChildEPKcRK6ImVec2bi
	.type	_ZN5ImGui10BeginChildEPKcRK6ImVec2bi, %function
_ZN5ImGui10BeginChildEPKcRK6ImVec2bi:
.LFB1816:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	strb	w2, [sp, 31]
	str	w3, [sp, 24]
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 56]
	mov	x2, 0
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 56]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	ldr	w4, [sp, 24]
	ldrb	w3, [sp, 31]
	ldr	x2, [sp, 32]
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui12BeginChildExEPKcjRK6ImVec2bi
	and	w0, w0, 255
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1816:
	.size	_ZN5ImGui10BeginChildEPKcRK6ImVec2bi, .-_ZN5ImGui10BeginChildEPKcRK6ImVec2bi
	.section	.rodata
	.align	3
.LC223:
	.string	"bool ImGui::BeginChild(ImGuiID, const ImVec2&, bool, ImGuiWindowFlags)"
	.align	3
.LC224:
	.string	"id != 0"
	.text
	.align	2
	.global	_ZN5ImGui10BeginChildEjRK6ImVec2bi
	.type	_ZN5ImGui10BeginChildEjRK6ImVec2bi, %function
_ZN5ImGui10BeginChildEjRK6ImVec2bi:
.LFB1817:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 44]
	str	x1, [sp, 32]
	strb	w2, [sp, 43]
	str	w3, [sp, 28]
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bne	.L2198
	adrp	x0, .LC223
	add	x3, x0, :lo12:.LC223
	mov	w2, 5546
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC224
	add	x0, x0, :lo12:.LC224
	bl	__assert_fail
.L2198:
	ldr	w4, [sp, 28]
	ldrb	w3, [sp, 43]
	ldr	x2, [sp, 32]
	ldr	w1, [sp, 44]
	mov	x0, 0
	bl	_ZN5ImGui12BeginChildExEPKcjRK6ImVec2bi
	and	w0, w0, 255
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1817:
	.size	_ZN5ImGui10BeginChildEjRK6ImVec2bi, .-_ZN5ImGui10BeginChildEjRK6ImVec2bi
	.section	.rodata
	.align	3
.LC225:
	.string	"void ImGui::EndChild()"
	.align	3
.LC226:
	.string	"g.WithinEndChild == false"
	.align	3
.LC227:
	.string	"window->Flags & ImGuiWindowFlags_ChildWindow"
	.text
	.align	2
	.global	_ZN5ImGui8EndChildEv
	.type	_ZN5ImGui8EndChildEv, %function
_ZN5ImGui8EndChildEv:
.LFB1818:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -128
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 88]
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3630]
	cmp	w0, 0
	beq	.L2201
	adrp	x0, .LC225
	add	x3, x0, :lo12:.LC225
	mov	w2, 5555
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC226
	add	x0, x0, :lo12:.LC226
	bl	__assert_fail
.L2201:
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2202
	adrp	x0, .LC225
	add	x3, x0, :lo12:.LC225
	mov	w2, 5556
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC227
	add	x0, x0, :lo12:.LC227
	bl	__assert_fail
.L2202:
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3630]
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 162]
	cmp	w0, 1
	ble	.L2203
	bl	_ZN5ImGui3EndEv
	b	.L2204
.L2203:
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 32]
	str	x0, [sp, 40]
	ldr	x0, [sp, 88]
	ldrsb	w0, [x0, 178]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2205
	ldr	s0, [sp, 40]
	fmov	s1, s0
	fmov	s0, 4.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 40]
.L2205:
	ldr	x0, [sp, 88]
	ldrsb	w0, [x0, 178]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L2206
	ldr	s0, [sp, 44]
	fmov	s1, s0
	fmov	s0, 4.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 44]
.L2206:
	bl	_ZN5ImGui3EndEv
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	add	x19, x0, 224
	ldr	x0, [sp, 96]
	add	x0, x0, 224
	add	x1, sp, 40
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 120]
	str	s0, [sp, 124]
	add	x1, sp, 120
	add	x0, sp, 104
	mov	x2, x1
	mov	x1, x19
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x0, sp, 40
	fmov	s0, -1.0e+0
	bl	_ZN5ImGui8ItemSizeERK6ImVec2f
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 316]
	cmp	w0, 0
	bne	.L2207
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 321]
	cmp	w0, 0
	beq	.L2208
.L2207:
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 12]
	and	w0, w0, 8388608
	cmp	w0, 0
	bne	.L2208
	ldr	x0, [sp, 88]
	ldr	w1, [x0, 96]
	add	x0, sp, 104
	mov	w3, 0
	mov	x2, 0
	bl	_ZN5ImGui7ItemAddERK6ImRectjPS1_i
	ldr	x0, [sp, 88]
	ldr	w1, [x0, 96]
	add	x0, sp, 104
	mov	w2, 1
	bl	_ZN5ImGui18RenderNavHighlightERK6ImRectji
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 316]
	cmp	w0, 0
	bne	.L2213
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 88]
	cmp	x1, x0
	bne	.L2213
	add	x0, sp, 48
	fmov	s1, 2.0e+0
	fmov	s0, 2.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 48
	add	x0, sp, 104
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	add	x0, sp, 64
	fmov	s1, 2.0e+0
	fmov	s0, 2.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 64
	add	x0, sp, 104
	add	x0, x0, 8
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	add	x2, sp, 72
	add	x1, sp, 56
	add	x0, sp, 120
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	ldr	w1, [x0, 2160]
	add	x0, sp, 120
	mov	w2, 2
	bl	_ZN5ImGui18RenderNavHighlightERK6ImRectji
	b	.L2213
.L2208:
	add	x0, sp, 104
	mov	w3, 0
	mov	x2, 0
	mov	w1, 0
	bl	_ZN5ImGui7ItemAddERK6ImRectjPS1_i
	b	.L2210
.L2213:
	nop
.L2210:
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 16040]
	ldr	x1, [sp, 88]
	cmp	x1, x0
	bne	.L2204
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	orr	w1, w0, 128
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
.L2204:
	ldr	x0, [sp, 80]
	add	x0, x0, 12288
	strb	wzr, [x0, 3630]
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [x0, 7192]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2212
	bl	__stack_chk_fail
.L2212:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1818:
	.size	_ZN5ImGui8EndChildEv, .-_ZN5ImGui8EndChildEv
	.align	2
	.global	_ZN5ImGui15BeginChildFrameEjRK6ImVec2i
	.type	_ZN5ImGui15BeginChildFrameEjRK6ImVec2i, %function
_ZN5ImGui15BeginChildFrameEjRK6ImVec2i:
.LFB1819:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	str	x1, [sp, 16]
	str	w2, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x1, [sp, 48]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	add	x0, x0, 312
	mov	x1, x0
	mov	w0, 3
	bl	_ZN5ImGui14PushStyleColorEiRK6ImVec4
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 68]
	mov	w0, 7
	bl	_ZN5ImGui12PushStyleVarEif
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 72]
	mov	w0, 8
	bl	_ZN5ImGui12PushStyleVarEif
	ldr	x0, [sp, 56]
	add	x0, x0, 60
	mov	x1, x0
	mov	w0, 2
	bl	_ZN5ImGui12PushStyleVarEiRK6ImVec2
	ldr	w1, [sp, 24]
	mov	w0, 4
	movk	w0, 0x1, lsl 16
	orr	w0, w1, w0
	mov	w3, w0
	mov	w2, 1
	ldr	x1, [sp, 16]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10BeginChildEjRK6ImVec2bi
	and	w0, w0, 255
	strb	w0, [sp, 47]
	mov	w0, 3
	bl	_ZN5ImGui11PopStyleVarEi
	mov	w0, 1
	bl	_ZN5ImGui13PopStyleColorEi
	ldrb	w0, [sp, 47]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1819:
	.size	_ZN5ImGui15BeginChildFrameEjRK6ImVec2i, .-_ZN5ImGui15BeginChildFrameEjRK6ImVec2i
	.align	2
	.global	_ZN5ImGui13EndChildFrameEv
	.type	_ZN5ImGui13EndChildFrameEv, %function
_ZN5ImGui13EndChildFrameEv:
.LFB1820:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	bl	_ZN5ImGui8EndChildEv
	nop
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1820:
	.size	_ZN5ImGui13EndChildFrameEv, .-_ZN5ImGui13EndChildFrameEv
	.align	2
	.type	_ZL28SetWindowConditionAllowFlagsP11ImGuiWindowib, %function
_ZL28SetWindowConditionAllowFlagsP11ImGuiWindowib:
.LFB1821:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	strb	w2, [sp, 3]
	ldrb	w0, [sp, 3]
	cmp	w0, 0
	beq	.L2218
	ldr	x0, [sp, 8]
	ldrsb	w1, [x0, 188]
	ldr	w0, [sp, 4]
	sxtb	w0, w0
	orr	w0, w1, w0
	sxtb	w0, w0
	b	.L2219
.L2218:
	ldr	x0, [sp, 8]
	ldrsb	w1, [x0, 188]
	ldr	w0, [sp, 4]
	sxtb	w0, w0
	mvn	w0, w0
	sxtb	w0, w0
	and	w0, w1, w0
	sxtb	w0, w0
.L2219:
	ldr	x1, [sp, 8]
	strb	w0, [x1, 188]
	ldrb	w0, [sp, 3]
	cmp	w0, 0
	beq	.L2220
	ldr	x0, [sp, 8]
	ldrsb	w1, [x0, 189]
	ldr	w0, [sp, 4]
	sxtb	w0, w0
	orr	w0, w1, w0
	sxtb	w0, w0
	b	.L2221
.L2220:
	ldr	x0, [sp, 8]
	ldrsb	w1, [x0, 189]
	ldr	w0, [sp, 4]
	sxtb	w0, w0
	mvn	w0, w0
	sxtb	w0, w0
	and	w0, w1, w0
	sxtb	w0, w0
.L2221:
	ldr	x1, [sp, 8]
	strb	w0, [x1, 189]
	ldrb	w0, [sp, 3]
	cmp	w0, 0
	beq	.L2222
	ldr	x0, [sp, 8]
	ldrsb	w1, [x0, 190]
	ldr	w0, [sp, 4]
	sxtb	w0, w0
	orr	w0, w1, w0
	sxtb	w0, w0
	b	.L2223
.L2222:
	ldr	x0, [sp, 8]
	ldrsb	w1, [x0, 190]
	ldr	w0, [sp, 4]
	sxtb	w0, w0
	mvn	w0, w0
	sxtb	w0, w0
	and	w0, w1, w0
	sxtb	w0, w0
.L2223:
	ldr	x1, [sp, 8]
	strb	w0, [x1, 190]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1821:
	.size	_ZL28SetWindowConditionAllowFlagsP11ImGuiWindowib, .-_ZL28SetWindowConditionAllowFlagsP11ImGuiWindowib
	.align	2
	.global	_ZN5ImGui14FindWindowByIDEj
	.type	_ZN5ImGui14FindWindowByIDEj, %function
_ZN5ImGui14FindWindowByIDEj:
.LFB1822:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	mov	x0, 16000
	add	x0, x1, x0
	ldr	w1, [sp, 28]
	bl	_ZNK12ImGuiStorage10GetVoidPtrEj
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1822:
	.size	_ZN5ImGui14FindWindowByIDEj, .-_ZN5ImGui14FindWindowByIDEj
	.align	2
	.global	_ZN5ImGui16FindWindowByNameEPKc
	.type	_ZN5ImGui16FindWindowByNameEPKc, %function
_ZN5ImGui16FindWindowByNameEPKc:
.LFB1823:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	mov	w2, 0
	mov	x1, 0
	ldr	x0, [sp, 24]
	bl	_Z9ImHashStrPKcmj
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	bl	_ZN5ImGui14FindWindowByIDEj
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1823:
	.size	_ZN5ImGui16FindWindowByNameEPKc, .-_ZN5ImGui16FindWindowByNameEPKc
	.align	2
	.type	_ZL19ApplyWindowSettingsP11ImGuiWindowP19ImGuiWindowSettings, %function
_ZL19ApplyWindowSettingsP11ImGuiWindowP19ImGuiWindowSettings:
.LFB1824:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 32]
	ldrsh	w0, [x0, 4]
	scvtf	s0, w0
	ldr	x0, [sp, 32]
	ldrsh	w0, [x0, 6]
	scvtf	s1, w0
	add	x0, sp, 48
	bl	_ZN6ImVec2C1Eff
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	ldr	x0, [sp, 32]
	ldrsh	w0, [x0, 8]
	cmp	w0, 0
	ble	.L2229
	ldr	x0, [sp, 32]
	ldrsh	w0, [x0, 10]
	cmp	w0, 0
	ble	.L2229
	ldr	x0, [sp, 32]
	ldrsh	w0, [x0, 8]
	scvtf	s0, w0
	ldr	x0, [sp, 32]
	ldrsh	w0, [x0, 10]
	scvtf	s1, w0
	add	x0, sp, 48
	bl	_ZN6ImVec2C1Eff
	ldr	x19, [sp, 40]
	add	x0, sp, 48
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 40]
	str	s0, [x19, 44]
	ldr	x0, [sp, 40]
	add	x1, x0, 40
	ldr	x0, [sp, 40]
	ldr	x1, [x1]
	str	x1, [x0, 32]
.L2229:
	ldr	x0, [sp, 32]
	ldrb	w1, [x0, 12]
	ldr	x0, [sp, 40]
	strb	w1, [x0, 153]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2230
	bl	__stack_chk_fail
.L2230:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1824:
	.size	_ZL19ApplyWindowSettingsP11ImGuiWindowP19ImGuiWindowSettings, .-_ZL19ApplyWindowSettingsP11ImGuiWindowP19ImGuiWindowSettings
	.section	.rodata
	.align	3
.LC228:
	.string	"void UpdateWindowInFocusOrderList(ImGuiWindow*, bool, ImGuiWindowFlags)"
	.align	3
.LC229:
	.string	"!g.WindowsFocusOrder.contains(window)"
	.align	3
.LC230:
	.string	"g.WindowsFocusOrder[window->FocusOrder] == window"
	.text
	.align	2
	.type	_ZL28UpdateWindowInFocusOrderListP11ImGuiWindowbi, %function
_ZL28UpdateWindowInFocusOrderListP11ImGuiWindowbi:
.LFB1825:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	strb	w1, [sp, 23]
	str	w2, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 16]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2232
	ldr	w0, [sp, 16]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2233
	ldr	w0, [sp, 16]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L2232
.L2233:
	mov	w0, 1
	b	.L2234
.L2232:
	mov	w0, 0
.L2234:
	strb	w0, [sp, 34]
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 159]
	ldrb	w1, [sp, 34]
	cmp	w1, w0
	cset	w0, ne
	strb	w0, [sp, 35]
	ldrb	w0, [sp, 23]
	cmp	w0, 0
	bne	.L2235
	ldrb	w0, [sp, 35]
	cmp	w0, 0
	beq	.L2236
.L2235:
	ldrb	w0, [sp, 34]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2236
	ldr	x1, [sp, 40]
	mov	x0, 15952
	add	x0, x1, x0
	add	x1, sp, 24
	bl	_ZNK8ImVectorIP11ImGuiWindowE8containsERKS1_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2237
	adrp	x0, .LC228
	add	x3, x0, :lo12:.LC228
	mov	w2, 5651
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC229
	add	x0, x0, :lo12:.LC229
	bl	__assert_fail
.L2237:
	ldr	x1, [sp, 40]
	mov	x0, 15952
	add	x0, x1, x0
	add	x1, sp, 24
	bl	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 15952]
	and	w0, w0, 65535
	sub	w0, w0, #1
	and	w1, w0, 65535
	ldr	x0, [sp, 24]
	sxth	w1, w1
	strh	w1, [x0, 170]
	b	.L2238
.L2236:
	ldrb	w0, [sp, 23]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2238
	ldrb	w0, [sp, 35]
	cmp	w0, 0
	beq	.L2238
	ldrb	w0, [sp, 34]
	cmp	w0, 0
	beq	.L2238
	ldr	x1, [sp, 40]
	mov	x0, 15952
	add	x2, x1, x0
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 170]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x1, [x0]
	ldr	x0, [sp, 24]
	cmp	x1, x0
	beq	.L2239
	adrp	x0, .LC228
	add	x3, x0, :lo12:.LC228
	mov	w2, 5657
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC230
	add	x0, x0, :lo12:.LC230
	bl	__assert_fail
.L2239:
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 170]
	add	w0, w0, 1
	str	w0, [sp, 36]
	b	.L2240
.L2241:
	ldr	x1, [sp, 40]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldrsh	w1, [x0, 170]
	and	w1, w1, 65535
	sub	w1, w1, #1
	and	w1, w1, 65535
	sxth	w1, w1
	strh	w1, [x0, 170]
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L2240:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 15952]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	blt	.L2241
	ldr	x1, [sp, 40]
	mov	x0, 15952
	add	x2, x1, x0
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 15960]
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 170]
	sxth	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowE5eraseEPKS1_
	ldr	x0, [sp, 24]
	mov	w1, -1
	strh	w1, [x0, 170]
.L2238:
	ldr	x0, [sp, 24]
	ldrb	w1, [sp, 34]
	strb	w1, [x0, 159]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1825:
	.size	_ZL28UpdateWindowInFocusOrderListP11ImGuiWindowbi, .-_ZL28UpdateWindowInFocusOrderListP11ImGuiWindowbi
	.align	2
	.type	_ZL15CreateNewWindowPKci, %function
_ZL15CreateNewWindowPKci:
.LFB1826:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA1826
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	stp	x21, x22, [sp, 32]
	.cfi_offset 19, -96
	.cfi_offset 20, -88
	.cfi_offset 21, -80
	.cfi_offset 22, -72
	str	x0, [sp, 56]
	str	w1, [sp, 52]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 80]
	mov	x0, 952
.LEHB21:
	bl	_ZN5ImGui8MemAllocEm
.LEHE21:
	mov	x20, x0
	mov	x2, x20
	mov	w1, w19
	mov	x0, 952
	bl	_Znwm12ImNewWrapperPv
	mov	x19, x0
	ldr	x2, [sp, 56]
	ldr	x1, [sp, 80]
	mov	x0, x19
.LEHB22:
	bl	_ZN11ImGuiWindowC1EP12ImGuiContextPKc
.LEHE22:
	str	x19, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	w1, [sp, 52]
	str	w1, [x0, 12]
	ldr	x1, [sp, 80]
	mov	x0, 16000
	add	x3, x1, x0
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 8]
	ldr	x1, [sp, 64]
	mov	x2, x1
	mov	w1, w0
	mov	x0, x3
.LEHB23:
	bl	_ZN12ImGuiStorage10SetVoidPtrEjPv
	bl	_ZN5ImGui15GetMainViewportEv
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	add	x20, x0, 4
	add	x0, sp, 72
	mov	w1, 1114636288
	fmov	s1, w1
	mov	w1, 1114636288
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	ldr	x19, [sp, 64]
	add	x0, sp, 72
	mov	x1, x0
	mov	x0, x20
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	ldr	w0, [sp, 52]
	and	w0, w0, 256
	cmp	w0, 0
	bne	.L2243
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 8]
	bl	_ZN5ImGui18FindWindowSettingsEj
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	cmp	x0, 0
	beq	.L2243
	ldr	x1, [sp, 80]
	mov	x0, 23416
	add	x0, x1, x0
	ldr	x19, [sp, 64]
	ldr	x1, [sp, 96]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_
	str	w0, [x19, 628]
	ldr	x0, [sp, 64]
	mov	w2, 0
	mov	w1, 4
	bl	_ZL28SetWindowConditionAllowFlagsP11ImGuiWindowib
	ldr	x0, [sp, 64]
	ldr	x1, [sp, 96]
	bl	_ZL19ApplyWindowSettingsP11ImGuiWindowP19ImGuiWindowSettings
.L2243:
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x1, [x1, 24]
	str	x1, [x0, 256]
	ldr	x0, [sp, 64]
	add	x1, x0, 256
	ldr	x0, [sp, 64]
	ldr	x1, [x1]
	str	x1, [x0, 248]
	ldr	x0, [sp, 64]
	add	x1, x0, 248
	ldr	x0, [sp, 64]
	ldr	x1, [x1]
	str	x1, [x0, 240]
	ldr	w0, [sp, 52]
	and	w0, w0, 64
	cmp	w0, 0
	beq	.L2244
	ldr	x0, [sp, 64]
	mov	w1, 2
	strb	w1, [x0, 177]
	ldr	x1, [sp, 64]
	ldrsb	w0, [x0, 177]
	strb	w0, [x1, 176]
	ldr	x0, [sp, 64]
	strb	wzr, [x0, 179]
	b	.L2245
.L2244:
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 32]
	fcmpe	s0, #0.0
	bls	.L2259
	b	.L2246
.L2259:
	ldr	x0, [sp, 64]
	mov	w1, 2
	strb	w1, [x0, 176]
.L2246:
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 36]
	fcmpe	s0, #0.0
	bls	.L2260
	b	.L2248
.L2260:
	ldr	x0, [sp, 64]
	mov	w1, 2
	strb	w1, [x0, 177]
.L2248:
	ldr	x0, [sp, 64]
	ldrsb	w0, [x0, 176]
	cmp	w0, 0
	bgt	.L2250
	ldr	x0, [sp, 64]
	ldrsb	w0, [x0, 177]
	cmp	w0, 0
	ble	.L2251
.L2250:
	mov	w1, 1
	b	.L2252
.L2251:
	mov	w1, 0
.L2252:
	ldr	x0, [sp, 64]
	strb	w1, [x0, 179]
.L2245:
	ldr	w0, [sp, 52]
	and	w0, w0, 8192
	cmp	w0, 0
	beq	.L2253
	ldr	x1, [sp, 80]
	mov	x0, 15936
	add	x0, x1, x0
	add	x1, sp, 64
	bl	_ZN8ImVectorIP11ImGuiWindowE10push_frontERKS1_
	b	.L2254
.L2253:
	ldr	x1, [sp, 80]
	mov	x0, 15936
	add	x0, x1, x0
	add	x1, sp, 64
	bl	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_
.L2254:
	ldr	x0, [sp, 64]
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 104]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L2257
	b	.L2261
.L2258:
	mov	x21, x0
	mov	x2, x20
	mov	w1, w22
	mov	x0, x19
	bl	_ZdlPv12ImNewWrapperS_
	mov	x0, x21
	bl	_Unwind_Resume
.LEHE23:
.L2261:
	bl	__stack_chk_fail
.L2257:
	mov	x0, x1
	ldp	x19, x20, [sp, 16]
	ldp	x21, x22, [sp, 32]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 21
	.cfi_restore 22
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1826:
	.section	.gcc_except_table
.LLSDA1826:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE1826-.LLSDACSB1826
.LLSDACSB1826:
	.uleb128 .LEHB21-.LFB1826
	.uleb128 .LEHE21-.LEHB21
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB22-.LFB1826
	.uleb128 .LEHE22-.LEHB22
	.uleb128 .L2258-.LFB1826
	.uleb128 0
	.uleb128 .LEHB23-.LFB1826
	.uleb128 .LEHE23-.LEHB23
	.uleb128 0
	.uleb128 0
.LLSDACSE1826:
	.text
	.size	_ZL15CreateNewWindowPKci, .-_ZL15CreateNewWindowPKci
	.section	.text._ZN21ImGuiSizeCallbackDataC2Ev,"axG",@progbits,_ZN21ImGuiSizeCallbackDataC5Ev,comdat
	.align	2
	.weak	_ZN21ImGuiSizeCallbackDataC2Ev
	.type	_ZN21ImGuiSizeCallbackDataC2Ev, %function
_ZN21ImGuiSizeCallbackDataC2Ev:
.LFB1829:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN6ImVec2C1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	bl	_ZN6ImVec2C1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1829:
	.size	_ZN21ImGuiSizeCallbackDataC2Ev, .-_ZN21ImGuiSizeCallbackDataC2Ev
	.weak	_ZN21ImGuiSizeCallbackDataC1Ev
	.set	_ZN21ImGuiSizeCallbackDataC1Ev,_ZN21ImGuiSizeCallbackDataC2Ev
	.text
	.align	2
	.type	_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2, %function
_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2:
.LFB1827:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -128
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 32]
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L2264
	ldr	x1, [sp, 72]
	mov	x0, 18432
	add	x0, x1, x0
	sub	x0, x0, #100
	ldp	x0, x1, [x0]
	stp	x0, x1, [sp, 88]
	ldr	s0, [sp, 88]
	fcmpe	s0, #0.0
	bge	.L2277
	b	.L2265
.L2277:
	ldr	s0, [sp, 96]
	fcmpe	s0, #0.0
	bge	.L2278
	b	.L2265
.L2278:
	ldr	s0, [sp, 64]
	ldr	s1, [sp, 88]
	ldr	s2, [sp, 96]
	bl	_Z7ImClampIfET_S0_S0_S0_
	b	.L2268
.L2265:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 40]
.L2268:
	str	s0, [sp, 64]
	ldr	s0, [sp, 92]
	fcmpe	s0, #0.0
	bge	.L2279
	b	.L2269
.L2279:
	ldr	s0, [sp, 100]
	fcmpe	s0, #0.0
	bge	.L2280
	b	.L2269
.L2280:
	ldr	s0, [sp, 68]
	ldr	s1, [sp, 92]
	ldr	s2, [sp, 100]
	bl	_Z7ImClampIfET_S0_S0_S0_
	b	.L2272
.L2269:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 44]
.L2272:
	str	s0, [sp, 68]
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 18352]
	cmp	x0, 0
	beq	.L2273
	add	x0, sp, 104
	bl	_ZN21ImGuiSizeCallbackDataC1Ev
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 18360]
	str	x0, [sp, 104]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 24]
	str	x0, [sp, 112]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 40]
	str	x0, [sp, 120]
	ldr	x0, [sp, 64]
	str	x0, [sp, 128]
	ldr	x0, [sp, 72]
	ldr	x1, [x0, 18352]
	add	x0, sp, 104
	blr	x1
	ldr	x0, [sp, 128]
	str	x0, [sp, 64]
.L2273:
	ldr	s0, [sp, 64]
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 64]
	ldr	s0, [sp, 68]
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 68]
.L2264:
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 12]
	mov	w0, 64
	movk	w0, 0x100, lsl 16
	and	w0, w1, w0
	cmp	w0, 0
	bne	.L2274
	ldr	x0, [sp, 40]
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	fmov	s8, s0
	ldr	x0, [sp, 80]
	bl	_ZNK11ImGuiWindow13MenuBarHeightEv
	fadd	s0, s8, s0
	str	s0, [sp, 60]
	ldr	x1, [sp, 72]
	mov	x0, 14328
	add	x1, x1, x0
	add	x0, sp, 64
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	ldr	s8, [sp, 68]
	ldr	x0, [sp, 72]
	ldr	s1, [x0, 14320]
	fmov	s0, 1.0e+0
	fsub	s0, s1, s0
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	fmov	s1, s0
	ldr	s0, [sp, 60]
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s8
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 68]
.L2274:
	ldr	x0, [sp, 64]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2276
	bl	__stack_chk_fail
.L2276:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1827:
	.size	_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2, .-_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2
	.align	2
	.type	_ZL22CalcWindowContentSizesP11ImGuiWindowP6ImVec2S2_, %function
_ZL22CalcWindowContentSizesP11ImGuiWindowP6ImVec2S2_:
.LFB1831:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	strb	wzr, [sp, 63]
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 153]
	cmp	w0, 0
	beq	.L2282
	ldr	x0, [sp, 40]
	ldrsb	w0, [x0, 176]
	cmp	w0, 0
	bgt	.L2282
	ldr	x0, [sp, 40]
	ldrsb	w0, [x0, 177]
	cmp	w0, 0
	bgt	.L2282
	mov	w0, 1
	strb	w0, [sp, 63]
	b	.L2283
.L2282:
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 157]
	cmp	w0, 0
	beq	.L2283
	ldr	x0, [sp, 40]
	ldrsb	w0, [x0, 185]
	cmp	w0, 0
	bne	.L2283
	ldr	x0, [sp, 40]
	ldrsb	w0, [x0, 184]
	cmp	w0, 0
	ble	.L2283
	mov	w0, 1
	strb	w0, [sp, 63]
.L2283:
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L2284
	ldr	x0, [sp, 32]
	ldr	x1, [sp, 40]
	ldr	x1, [x1, 48]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	ldr	x1, [x1, 56]
	str	x1, [x0]
	b	.L2281
.L2284:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 64]
	fcmp	s0, #0.0
	beq	.L2286
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 64]
	b	.L2287
.L2286:
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 248]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 240]
	fsub	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
.L2287:
	ldr	x0, [sp, 32]
	str	s0, [x0]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 68]
	fcmp	s0, #0.0
	beq	.L2288
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 68]
	b	.L2289
.L2288:
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 252]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 244]
	fsub	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
.L2289:
	ldr	x0, [sp, 32]
	str	s0, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 64]
	fcmp	s0, #0.0
	beq	.L2290
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 64]
	b	.L2291
.L2290:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 248]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 256]
	bl	_Z5ImMaxIfET_S0_S0_
	fmov	s1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 240]
	fsub	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
.L2291:
	ldr	x0, [sp, 24]
	str	s0, [x0]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 68]
	fcmp	s0, #0.0
	beq	.L2292
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 68]
	b	.L2293
.L2292:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 252]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 260]
	bl	_Z5ImMaxIfET_S0_S0_
	fmov	s1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 244]
	fsub	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
.L2293:
	ldr	x0, [sp, 24]
	str	s0, [x0, 4]
.L2281:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1831:
	.size	_ZL22CalcWindowContentSizesP11ImGuiWindowP6ImVec2S2_, .-_ZL22CalcWindowContentSizesP11ImGuiWindowP6ImVec2S2_
	.align	2
	.type	_ZL21CalcWindowAutoFitSizeP11ImGuiWindowRK6ImVec2, %function
_ZL21CalcWindowAutoFitSizeP11ImGuiWindowRK6ImVec2:
.LFB1832:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -128
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 120]
	ldr	x1, [sp, 120]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 128]
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	fmov	s8, s0
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow13MenuBarHeightEv
	fadd	s0, s8, s0
	str	s0, [sp, 60]
	ldr	x0, [sp, 40]
	add	x0, x0, 72
	fmov	s0, 2.0e+0
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	add	x0, sp, 64
	mov	x1, x0
	ldr	x0, [sp, 32]
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	add	x0, sp, 112
	ldr	s1, [sp, 60]
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 112
	add	x0, sp, 104
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 33554432
	cmp	w0, 0
	beq	.L2295
	ldr	x0, [sp, 72]
	b	.L2311
.L2295:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 268435456
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 57]
	ldr	x0, [sp, 128]
	ldr	x0, [x0, 24]
	str	x0, [sp, 80]
	ldrb	w0, [sp, 56]
	cmp	w0, 0
	bne	.L2297
	ldrb	w0, [sp, 57]
	cmp	w0, 0
	beq	.L2298
.L2297:
	add	x0, sp, 112
	fmov	s1, 4.0e+0
	fmov	s0, 4.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 112
	add	x0, sp, 80
	bl	_ZL5ImMinRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
.L2298:
	bl	_ZN5ImGui15GetMainViewportEv
	ldr	x0, [x0, 28]
	str	x0, [sp, 88]
	ldr	x0, [sp, 128]
	add	x0, x0, 176
	fmov	s0, 2.0e+0
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	add	x1, sp, 104
	add	x0, sp, 88
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	add	x1, sp, 112
	add	x0, sp, 80
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w2, w1, 0
	lsr	x0, x0, 32
	fmov	s1, w0
	add	x1, sp, 80
	add	x0, sp, 72
	fmov	s0, w2
	bl	_ZL7ImClampRK6ImVec2S1_S_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	add	x0, sp, 96
	mov	x1, x0
	ldr	x0, [sp, 40]
	bl	_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	ldr	s1, [sp, 112]
	ldr	s0, [sp, 64]
	fsub	s1, s1, s0
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	fcmpe	s1, s0
	bmi	.L2313
	b	.L2299
.L2313:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L2299
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 2048
	cmp	w0, 0
	bne	.L2301
.L2299:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 32768
	cmp	w0, 0
	beq	.L2302
.L2301:
	mov	w0, 1
	b	.L2303
.L2302:
	mov	w0, 0
.L2303:
	strb	w0, [sp, 58]
	ldr	s1, [sp, 116]
	ldr	s0, [sp, 68]
	fsub	s1, s1, s0
	ldr	s0, [sp, 60]
	fsub	s1, s1, s0
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 4]
	fcmpe	s1, s0
	bmi	.L2314
	b	.L2304
.L2314:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L2306
.L2304:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 16384
	cmp	w0, 0
	beq	.L2307
.L2306:
	mov	w0, 1
	b	.L2308
.L2307:
	mov	w0, 0
.L2308:
	strb	w0, [sp, 59]
	ldrb	w0, [sp, 58]
	cmp	w0, 0
	beq	.L2309
	ldr	s1, [sp, 100]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 116]
	fadd	s0, s1, s0
	str	s0, [sp, 100]
.L2309:
	ldrb	w0, [sp, 59]
	cmp	w0, 0
	beq	.L2310
	ldr	s1, [sp, 96]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 116]
	fadd	s0, s1, s0
	str	s0, [sp, 96]
.L2310:
	ldr	x0, [sp, 96]
.L2311:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2312
	bl	__stack_chk_fail
.L2312:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1832:
	.size	_ZL21CalcWindowAutoFitSizeP11ImGuiWindowRK6ImVec2, .-_ZL21CalcWindowAutoFitSizeP11ImGuiWindowRK6ImVec2
	.align	2
	.global	_ZN5ImGui25CalcWindowNextAutoFitSizeEP11ImGuiWindow
	.type	_ZN5ImGui25CalcWindowNextAutoFitSizeEP11ImGuiWindow, %function
_ZN5ImGui25CalcWindowNextAutoFitSizeEP11ImGuiWindow:
.LFB1833:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	str	wzr, [sp, 40]
	str	wzr, [sp, 44]
	str	wzr, [sp, 48]
	str	wzr, [sp, 52]
	add	x1, sp, 48
	add	x0, sp, 40
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZL22CalcWindowContentSizesP11ImGuiWindowP6ImVec2S2_
	add	x0, sp, 48
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZL21CalcWindowAutoFitSizeP11ImGuiWindowRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	add	x0, sp, 56
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	ldr	x0, [sp, 64]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2317
	bl	__stack_chk_fail
.L2317:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1833:
	.size	_ZN5ImGui25CalcWindowNextAutoFitSizeEP11ImGuiWindow, .-_ZN5ImGui25CalcWindowNextAutoFitSizeEP11ImGuiWindow
	.align	2
	.type	_ZL19GetWindowBgColorIdxP11ImGuiWindow, %function
_ZL19GetWindowBgColorIdxP11ImGuiWindow:
.LFB1834:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 12]
	and	w0, w0, 100663296
	cmp	w0, 0
	beq	.L2319
	mov	w0, 4
	b	.L2320
.L2319:
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2321
	mov	w0, 3
	b	.L2320
.L2321:
	mov	w0, 2
.L2320:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1834:
	.size	_ZL19GetWindowBgColorIdxP11ImGuiWindow, .-_ZL19GetWindowBgColorIdxP11ImGuiWindow
	.align	2
	.type	_ZL30CalcResizePosSizeFromAnyCornerP11ImGuiWindowRK6ImVec2S3_PS1_S4_, %function
_ZL30CalcResizePosSizeFromAnyCornerP11ImGuiWindowRK6ImVec2S3_PS1_S4_:
.LFB1835:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	str	x3, [sp, 32]
	str	x4, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	ldr	x0, [sp, 56]
	add	x0, x0, 24
	ldr	x2, [sp, 40]
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZL6ImLerpRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	ldr	x0, [sp, 56]
	add	x2, x0, 24
	ldr	x0, [sp, 56]
	add	x0, x0, 32
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	add	x0, sp, 96
	ldr	x2, [sp, 40]
	ldr	x1, [sp, 48]
	bl	_ZL6ImLerpRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x1, sp, 72
	add	x0, sp, 80
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	add	x0, sp, 88
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	ldr	x0, [sp, 32]
	ldr	x1, [sp, 72]
	str	x1, [x0]
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
	fcmp	s0, #0.0
	bne	.L2323
	ldr	x0, [sp, 32]
	ldr	s1, [x0]
	ldr	s2, [sp, 96]
	ldr	s0, [sp, 88]
	fsub	s0, s2, s0
	fsub	s0, s1, s0
	ldr	x0, [sp, 32]
	str	s0, [x0]
.L2323:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fcmp	s0, #0.0
	bne	.L2324
	ldr	x0, [sp, 32]
	ldr	s1, [x0, 4]
	ldr	s2, [sp, 100]
	ldr	s0, [sp, 92]
	fsub	s0, s2, s0
	fsub	s0, s1, s0
	ldr	x0, [sp, 32]
	str	s0, [x0, 4]
.L2324:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 96]
	str	x1, [x0]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2325
	bl	__stack_chk_fail
.L2325:
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1835:
	.size	_ZL30CalcResizePosSizeFromAnyCornerP11ImGuiWindowRK6ImVec2S3_PS1_S4_, .-_ZL30CalcResizePosSizeFromAnyCornerP11ImGuiWindowRK6ImVec2S3_PS1_S4_
	.section	.rodata
	.align	3
	.type	_ZL15resize_grip_def, %object
	.size	_ZL15resize_grip_def, 96
_ZL15resize_grip_def:
	.word	1065353216
	.word	1065353216
	.word	-1082130432
	.word	-1082130432
	.word	0
	.word	3
	.word	0
	.word	1065353216
	.word	1065353216
	.word	-1082130432
	.word	3
	.word	6
	.word	0
	.word	0
	.word	1065353216
	.word	1065353216
	.word	6
	.word	9
	.word	1065353216
	.word	0
	.word	-1082130432
	.word	1065353216
	.word	9
	.word	12
	.align	3
	.type	_ZL17resize_border_def, %object
	.size	_ZL17resize_border_def, 112
_ZL17resize_border_def:
	.word	1065353216
	.word	0
	.word	0
	.word	1065353216
	.word	0
	.word	0
	.word	1078530011
	.word	-1082130432
	.word	0
	.word	1065353216
	.word	0
	.word	1065353216
	.word	1065353216
	.word	0
	.word	0
	.word	1065353216
	.word	0
	.word	0
	.word	1065353216
	.word	0
	.word	1083624420
	.word	0
	.word	-1082130432
	.word	1065353216
	.word	1065353216
	.word	0
	.word	1065353216
	.word	1070141403
	.align	3
.LC231:
	.string	"ImRect GetResizeBorderRect(ImGuiWindow*, int, float, float)"
	.text
	.align	2
	.type	_ZL19GetResizeBorderRectP11ImGuiWindowiff, %function
_ZL19GetResizeBorderRectP11ImGuiWindowiff:
.LFB1836:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	s0, [sp, 32]
	str	s1, [sp, 28]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 56]
	str	s4, [sp, 60]
	str	s1, [sp, 64]
	str	s0, [sp, 68]
	ldr	s0, [sp, 28]
	fcmp	s0, #0.0
	bne	.L2327
	add	x0, sp, 72
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 56
	add	x0, x0, 8
	bl	_ZmIR6ImVec2RKS_
.L2327:
	ldr	w0, [sp, 36]
	cmp	w0, 0
	bne	.L2328
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 28]
	fsub	s4, s1, s0
	ldr	s1, [sp, 60]
	ldr	s0, [sp, 32]
	fadd	s5, s1, s0
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 28]
	fadd	s2, s1, s0
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 32]
	fsub	s0, s1, s0
	add	x0, sp, 72
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 72]
	b	.L2333
.L2328:
	ldr	w0, [sp, 36]
	cmp	w0, 1
	bne	.L2330
	ldr	s1, [sp, 64]
	ldr	s0, [sp, 28]
	fsub	s4, s1, s0
	ldr	s1, [sp, 60]
	ldr	s0, [sp, 32]
	fadd	s5, s1, s0
	ldr	s1, [sp, 64]
	ldr	s0, [sp, 28]
	fadd	s2, s1, s0
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 32]
	fsub	s0, s1, s0
	add	x0, sp, 72
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 72]
	b	.L2333
.L2330:
	ldr	w0, [sp, 36]
	cmp	w0, 2
	bne	.L2331
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 32]
	fadd	s4, s1, s0
	ldr	s1, [sp, 60]
	ldr	s0, [sp, 28]
	fsub	s5, s1, s0
	ldr	s1, [sp, 64]
	ldr	s0, [sp, 32]
	fsub	s2, s1, s0
	ldr	s1, [sp, 60]
	ldr	s0, [sp, 28]
	fadd	s0, s1, s0
	add	x0, sp, 72
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 72]
	b	.L2333
.L2331:
	ldr	w0, [sp, 36]
	cmp	w0, 3
	bne	.L2332
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 32]
	fadd	s4, s1, s0
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 28]
	fsub	s5, s1, s0
	ldr	s1, [sp, 64]
	ldr	s0, [sp, 32]
	fsub	s2, s1, s0
	ldr	s1, [sp, 68]
	ldr	s0, [sp, 28]
	fadd	s0, s1, s0
	add	x0, sp, 72
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 72]
	b	.L2333
.L2332:
	adrp	x0, .LC231
	add	x3, x0, :lo12:.LC231
	mov	w2, 5877
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L2333:
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2334
	bl	__stack_chk_fail
.L2334:
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1836:
	.size	_ZL19GetResizeBorderRectP11ImGuiWindowiff, .-_ZL19GetResizeBorderRectP11ImGuiWindowiff
	.section	.rodata
	.align	3
.LC232:
	.string	"ImGuiID ImGui::GetWindowResizeCornerID(ImGuiWindow*, int)"
	.align	3
.LC233:
	.string	"n >= 0 && n < 4"
	.align	3
.LC234:
	.string	"#RESIZE"
	.text
	.align	2
	.global	_ZN5ImGui23GetWindowResizeCornerIDEP11ImGuiWindowi
	.type	_ZN5ImGui23GetWindowResizeCornerIDEP11ImGuiWindowi, %function
_ZN5ImGui23GetWindowResizeCornerIDEP11ImGuiWindowi:
.LFB1837:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L2336
	ldr	w0, [sp, 20]
	cmp	w0, 3
	ble	.L2339
.L2336:
	adrp	x0, .LC232
	add	x3, x0, :lo12:.LC232
	mov	w2, 5884
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC233
	add	x0, x0, :lo12:.LC233
	bl	__assert_fail
.L2339:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 8]
	str	w0, [sp, 44]
	ldr	w2, [sp, 44]
	mov	x1, 0
	adrp	x0, .LC234
	add	x0, x0, :lo12:.LC234
	bl	_Z9ImHashStrPKcmj
	str	w0, [sp, 44]
	add	x0, sp, 20
	ldr	w2, [sp, 44]
	mov	x1, 4
	bl	_Z10ImHashDataPKvmj
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1837:
	.size	_ZN5ImGui23GetWindowResizeCornerIDEP11ImGuiWindowi, .-_ZN5ImGui23GetWindowResizeCornerIDEP11ImGuiWindowi
	.section	.rodata
	.align	3
.LC235:
	.string	"ImGuiID ImGui::GetWindowResizeBorderID(ImGuiWindow*, ImGuiDir)"
	.align	3
.LC236:
	.string	"dir >= 0 && dir < 4"
	.text
	.align	2
	.global	_ZN5ImGui23GetWindowResizeBorderIDEP11ImGuiWindowi
	.type	_ZN5ImGui23GetWindowResizeBorderIDEP11ImGuiWindowi, %function
_ZN5ImGui23GetWindowResizeBorderIDEP11ImGuiWindowi:
.LFB1838:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L2341
	ldr	w0, [sp, 20]
	cmp	w0, 3
	ble	.L2345
.L2341:
	adrp	x0, .LC235
	add	x3, x0, :lo12:.LC235
	mov	w2, 5894
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC236
	add	x0, x0, :lo12:.LC236
	bl	__assert_fail
.L2345:
	ldr	w0, [sp, 20]
	add	w0, w0, 4
	str	w0, [sp, 32]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 8]
	str	w0, [sp, 36]
	ldr	w2, [sp, 36]
	mov	x1, 0
	adrp	x0, .LC234
	add	x0, x0, :lo12:.LC234
	bl	_Z9ImHashStrPKcmj
	str	w0, [sp, 36]
	add	x0, sp, 32
	ldr	w2, [sp, 36]
	mov	x1, 4
	bl	_Z10ImHashDataPKvmj
	str	w0, [sp, 36]
	ldr	w0, [sp, 36]
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 40]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L2344
	bl	__stack_chk_fail
.L2344:
	mov	w0, w1
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1838:
	.size	_ZN5ImGui23GetWindowResizeBorderIDEP11ImGuiWindowi, .-_ZN5ImGui23GetWindowResizeBorderIDEP11ImGuiWindowi
	.align	2
	.type	_ZN5ImGuiL24UpdateWindowManualResizeEP11ImGuiWindowRK6ImVec2PiiPjRK6ImRect, %function
_ZN5ImGuiL24UpdateWindowManualResizeEP11ImGuiWindowRK6ImVec2PiiPjRK6ImRect:
.LFB1839:
	.cfi_startproc
	stp	x29, x30, [sp, -288]!
	.cfi_def_cfa_offset 288
	.cfi_offset 29, -288
	.cfi_offset 30, -280
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	str	d8, [sp, 32]
	.cfi_offset 19, -272
	.cfi_offset 20, -264
	.cfi_offset 72, -256
	str	x0, [sp, 88]
	str	x1, [sp, 80]
	str	x2, [sp, 72]
	str	w3, [sp, 68]
	str	x4, [sp, 56]
	str	x5, [sp, 48]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 280]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 240]
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 12]
	str	w0, [sp, 120]
	ldr	w0, [sp, 120]
	and	w0, w0, 2
	cmp	w0, 0
	bne	.L2347
	ldr	w0, [sp, 120]
	and	w0, w0, 64
	cmp	w0, 0
	bne	.L2347
	ldr	x0, [sp, 88]
	ldrsb	w0, [x0, 176]
	cmp	w0, 0
	bgt	.L2347
	ldr	x0, [sp, 88]
	ldrsb	w0, [x0, 177]
	cmp	w0, 0
	ble	.L2348
.L2347:
	mov	w0, 0
	b	.L2408
.L2348:
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 151]
	cmp	w0, 0
	bne	.L2350
	mov	w0, 0
	b	.L2408
.L2350:
	strb	wzr, [sp, 111]
	ldr	x0, [sp, 240]
	ldrb	w0, [x0, 126]
	cmp	w0, 0
	beq	.L2351
	mov	w0, 4
	b	.L2352
.L2351:
	mov	w0, 0
.L2352:
	str	w0, [sp, 124]
	ldr	x0, [sp, 240]
	ldr	s0, [x0, 15360]
	mov	w0, 52429
	movk	w0, 0x3fac, lsl 16
	fmov	s1, w0
	fmul	s2, s0, s1
	ldr	x0, [sp, 88]
	ldr	s1, [x0, 80]
	fmov	s0, 1.0e+0
	fadd	s1, s1, s0
	ldr	x0, [sp, 240]
	ldr	s0, [x0, 15360]
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s3, w0
	fmul	s0, s0, s3
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 128]
	ldr	s1, [sp, 128]
	fmov	s0, 7.5e-1
	fmul	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 132]
	ldr	x0, [sp, 240]
	ldrb	w0, [x0, 126]
	cmp	w0, 0
	beq	.L2353
	fmov	s0, 4.0e+0
	b	.L2354
.L2353:
	movi	v0.2s, #0
.L2354:
	str	s0, [sp, 136]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 160]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 164]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 168]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 172]
	ldr	x0, [sp, 88]
	mov	w1, 1
	str	w1, [x0, 312]
	adrp	x0, .LC234
	add	x0, x0, :lo12:.LC234
	bl	_ZN5ImGui6PushIDEPKc
	str	wzr, [sp, 112]
	b	.L2355
.L2380:
	ldrsw	x1, [sp, 112]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	adrp	x1, _ZL15resize_grip_def
	add	x1, x1, :lo12:_ZL15resize_grip_def
	add	x0, x0, x1
	str	x0, [sp, 256]
	ldr	x0, [sp, 88]
	add	x19, x0, 24
	ldr	x0, [sp, 88]
	add	x2, x0, 24
	ldr	x0, [sp, 88]
	add	x0, x0, 32
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 264]
	str	s0, [sp, 268]
	ldr	x1, [sp, 256]
	add	x0, sp, 264
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZL6ImLerpRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 176]
	str	s0, [sp, 180]
	ldr	x0, [sp, 256]
	add	x0, x0, 8
	ldr	s0, [sp, 136]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 208]
	str	s0, [sp, 212]
	add	x1, sp, 208
	add	x0, sp, 176
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 216]
	str	s0, [sp, 220]
	ldr	x0, [sp, 256]
	add	x0, x0, 8
	ldr	s0, [sp, 132]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 224]
	str	s0, [sp, 228]
	add	x1, sp, 224
	add	x0, sp, 176
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 232]
	str	s0, [sp, 236]
	add	x2, sp, 232
	add	x1, sp, 216
	add	x0, sp, 264
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	s1, [sp, 264]
	ldr	s0, [sp, 272]
	fcmpe	s1, s0
	bgt	.L2410
	b	.L2356
.L2410:
	add	x0, sp, 264
	add	x1, x0, 8
	add	x0, sp, 264
	bl	_Z6ImSwapIfEvRT_S1_
.L2356:
	ldr	s1, [sp, 268]
	ldr	s0, [sp, 276]
	fcmpe	s1, s0
	bgt	.L2411
	b	.L2358
.L2411:
	add	x0, sp, 264
	add	x1, x0, 12
	add	x0, sp, 264
	add	x0, x0, 4
	bl	_Z6ImSwapIfEvRT_S1_
.L2358:
	ldr	w1, [sp, 112]
	ldr	x0, [sp, 88]
	bl	_ZN11ImGuiWindow5GetIDEi
	str	w0, [sp, 156]
	add	x0, sp, 264
	mov	w3, 8
	mov	x2, 0
	ldr	w1, [sp, 156]
	bl	_ZN5ImGui7ItemAddERK6ImRectjPS1_i
	add	x2, sp, 110
	add	x1, sp, 109
	add	x0, sp, 264
	mov	w4, 2048
	movk	w4, 0x4, lsl 16
	mov	x3, x2
	mov	x2, x1
	ldr	w1, [sp, 156]
	bl	_ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i
	ldrb	w0, [sp, 109]
	cmp	w0, 0
	bne	.L2360
	ldrb	w0, [sp, 110]
	cmp	w0, 0
	beq	.L2361
.L2360:
	ldr	w0, [sp, 112]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2362
	mov	w0, 5
	b	.L2363
.L2362:
	mov	w0, 6
.L2363:
	ldr	x1, [sp, 240]
	add	x1, x1, 16384
	str	w0, [x1, 2576]
.L2361:
	ldrb	w0, [sp, 110]
	cmp	w0, 0
	beq	.L2364
	ldr	x0, [sp, 240]
	add	x0, x0, 8192
	ldrh	w0, [x0, 5954]
	cmp	w0, 2
	bne	.L2364
	ldr	w0, [sp, 112]
	cmp	w0, 0
	bne	.L2364
	ldr	x1, [sp, 80]
	ldr	x0, [sp, 88]
	bl	_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 168]
	str	s0, [sp, 172]
	mov	w0, 1
	strb	w0, [sp, 111]
	bl	_ZN5ImGui13ClearActiveIDEv
	b	.L2365
.L2364:
	ldrb	w0, [sp, 110]
	cmp	w0, 0
	beq	.L2365
	ldr	x0, [sp, 256]
	ldr	s1, [x0]
	fmov	s0, 1.0e+0
	fcmp	s1, s0
	bne	.L2366
	ldr	x0, [sp, 48]
	ldr	s0, [x0]
	b	.L2367
.L2366:
	mvni	v0.2s, 0x80, lsl 16
.L2367:
	ldr	x0, [sp, 256]
	ldr	s2, [x0, 4]
	fmov	s1, 1.0e+0
	fcmp	s2, s1
	bne	.L2368
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 4]
	b	.L2369
.L2368:
	mvni	v1.2s, 0x80, lsl 16
.L2369:
	add	x0, sp, 184
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 256]
	ldr	s0, [x0]
	fcmp	s0, #0.0
	bne	.L2370
	ldr	x0, [sp, 48]
	ldr	s2, [x0, 8]
	b	.L2371
.L2370:
	mov	w0, 2139095039
	fmov	s2, w0
.L2371:
	ldr	x0, [sp, 256]
	ldr	s0, [x0, 4]
	fcmp	s0, #0.0
	bne	.L2372
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 12]
	b	.L2373
.L2372:
	mov	w0, 2139095039
	fmov	s0, w0
.L2373:
	add	x0, sp, 192
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 240]
	add	x2, x0, 3580
	ldr	x1, [sp, 240]
	mov	x0, 16128
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 208]
	str	s0, [sp, 212]
	ldr	x0, [sp, 256]
	add	x0, x0, 8
	ldr	s0, [sp, 136]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 216]
	str	s0, [sp, 220]
	ldr	x0, [sp, 256]
	add	x0, x0, 8
	ldr	s0, [sp, 132]
	fneg	s0, s0
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 224]
	str	s0, [sp, 228]
	ldr	x2, [sp, 256]
	add	x1, sp, 224
	add	x0, sp, 216
	bl	_ZL6ImLerpRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 232]
	str	s0, [sp, 236]
	add	x1, sp, 232
	add	x0, sp, 208
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 200]
	str	s0, [sp, 204]
	ldr	s0, [sp, 192]
	ldr	s1, [sp, 196]
	add	x1, sp, 184
	add	x0, sp, 200
	bl	_ZL7ImClampRK6ImVec2S1_S_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 200]
	str	s0, [sp, 204]
	ldr	x1, [sp, 256]
	add	x3, sp, 168
	add	x2, sp, 160
	add	x0, sp, 200
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 88]
	bl	_ZL30CalcResizePosSizeFromAnyCornerP11ImGuiWindowRK6ImVec2S3_PS1_S4_
.L2365:
	ldr	w0, [sp, 112]
	cmp	w0, 0
	beq	.L2374
	ldrb	w0, [sp, 110]
	cmp	w0, 0
	bne	.L2374
	ldrb	w0, [sp, 109]
	cmp	w0, 0
	beq	.L2375
.L2374:
	ldrb	w0, [sp, 110]
	cmp	w0, 0
	beq	.L2376
	mov	w0, 32
	b	.L2377
.L2376:
	ldrb	w0, [sp, 109]
	cmp	w0, 0
	beq	.L2378
	mov	w0, 31
	b	.L2377
.L2378:
	mov	w0, 30
.L2377:
	ldrsw	x1, [sp, 112]
	lsl	x1, x1, 2
	ldr	x2, [sp, 56]
	add	x19, x2, x1
	fmov	s0, 1.0e+0
	bl	_ZN5ImGui11GetColorU32Eif
	str	w0, [x19]
.L2375:
	ldr	w0, [sp, 112]
	add	w0, w0, 1
	str	w0, [sp, 112]
.L2355:
	ldr	w1, [sp, 112]
	ldr	w0, [sp, 68]
	cmp	w1, w0
	blt	.L2380
	str	wzr, [sp, 116]
	b	.L2381
.L2398:
	ldrsw	x1, [sp, 116]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 2
	adrp	x1, _ZL17resize_border_def
	add	x1, x1, :lo12:_ZL17resize_border_def
	add	x0, x0, x1
	str	x0, [sp, 248]
	ldr	w0, [sp, 116]
	cmp	w0, 0
	beq	.L2382
	ldr	w0, [sp, 116]
	cmp	w0, 1
	beq	.L2382
	mov	w0, 1
	b	.L2383
.L2382:
	mov	w0, 0
.L2383:
	str	w0, [sp, 148]
	fmov	s1, 4.0e+0
	ldr	s0, [sp, 132]
	ldr	w1, [sp, 116]
	ldr	x0, [sp, 88]
	bl	_ZL19GetResizeBorderRectP11ImGuiWindowiff
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 264]
	str	s4, [sp, 268]
	str	s1, [sp, 272]
	str	s0, [sp, 276]
	ldr	w0, [sp, 116]
	add	w0, w0, 4
	mov	w1, w0
	ldr	x0, [sp, 88]
	bl	_ZN11ImGuiWindow5GetIDEi
	str	w0, [sp, 152]
	add	x0, sp, 264
	mov	w3, 8
	mov	x2, 0
	ldr	w1, [sp, 152]
	bl	_ZN5ImGui7ItemAddERK6ImRectjPS1_i
	add	x2, sp, 200
	add	x1, sp, 192
	add	x0, sp, 264
	mov	w4, 2048
	movk	w4, 0x4, lsl 16
	mov	x3, x2
	mov	x2, x1
	ldr	w1, [sp, 152]
	bl	_ZN5ImGui14ButtonBehaviorERK6ImRectjPbS3_i
	ldrb	w0, [sp, 192]
	cmp	w0, 0
	beq	.L2384
	ldr	x0, [sp, 240]
	ldr	s0, [x0, 16100]
	mov	w0, 55050
	movk	w0, 0x3d23, lsl 16
	fmov	s1, w0
	fcmpe	s0, s1
	bgt	.L2385
.L2384:
	ldrb	w0, [sp, 200]
	cmp	w0, 0
	beq	.L2386
.L2385:
	ldr	w0, [sp, 148]
	cmp	w0, 0
	bne	.L2387
	mov	w0, 4
	b	.L2388
.L2387:
	mov	w0, 3
.L2388:
	ldr	x1, [sp, 240]
	add	x1, x1, 16384
	str	w0, [x1, 2576]
	ldrb	w0, [sp, 200]
	cmp	w0, 0
	beq	.L2386
	ldr	x0, [sp, 72]
	ldr	w1, [sp, 116]
	str	w1, [x0]
.L2386:
	ldrb	w0, [sp, 200]
	cmp	w0, 0
	beq	.L2389
	ldr	w0, [sp, 116]
	cmp	w0, 1
	bne	.L2390
	ldr	x0, [sp, 48]
	ldr	s0, [x0]
	b	.L2391
.L2390:
	mvni	v0.2s, 0x80, lsl 16
.L2391:
	ldr	w0, [sp, 116]
	cmp	w0, 3
	bne	.L2392
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 4]
	b	.L2393
.L2392:
	mvni	v1.2s, 0x80, lsl 16
.L2393:
	add	x0, sp, 208
	bl	_ZN6ImVec2C1Eff
	ldr	w0, [sp, 116]
	cmp	w0, 0
	bne	.L2394
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 8]
	b	.L2395
.L2394:
	mov	w0, 2139095039
	fmov	s0, w0
.L2395:
	ldr	w0, [sp, 116]
	cmp	w0, 2
	bne	.L2396
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 12]
	b	.L2397
.L2396:
	mov	w0, 2139095039
	fmov	s1, w0
.L2397:
	add	x0, sp, 216
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 24]
	str	x0, [sp, 224]
	ldr	x0, [sp, 240]
	add	x0, x0, 3580
	ldrsw	x1, [sp, 148]
	bl	_ZN6ImVec2ixEm
	ldr	s8, [x0]
	ldr	x1, [sp, 240]
	mov	x0, 16128
	add	x0, x1, x0
	ldrsw	x1, [sp, 148]
	bl	_ZN6ImVec2ixEm
	ldr	s0, [x0]
	fsub	s1, s8, s0
	fmov	s0, 4.0e+0
	fadd	s8, s1, s0
	ldrsw	x1, [sp, 148]
	add	x0, sp, 224
	bl	_ZN6ImVec2ixEm
	str	s8, [x0]
	ldr	s0, [sp, 216]
	ldr	s1, [sp, 220]
	add	x1, sp, 208
	add	x0, sp, 224
	bl	_ZL7ImClampRK6ImVec2S1_S_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 224]
	str	s0, [sp, 228]
	ldr	x0, [sp, 248]
	add	x2, x0, 8
	ldr	x0, [sp, 248]
	add	x0, x0, 16
	mov	x1, x0
	mov	x0, x2
	bl	_ZL5ImMinRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 232]
	str	s0, [sp, 236]
	add	x3, sp, 168
	add	x2, sp, 160
	add	x1, sp, 232
	add	x0, sp, 224
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 88]
	bl	_ZL30CalcResizePosSizeFromAnyCornerP11ImGuiWindowRK6ImVec2S3_PS1_S4_
.L2389:
	ldr	w0, [sp, 116]
	add	w0, w0, 1
	str	w0, [sp, 116]
.L2381:
	ldr	w1, [sp, 116]
	ldr	w0, [sp, 124]
	cmp	w1, w0
	blt	.L2398
	bl	_ZN5ImGui5PopIDEv
	ldr	x0, [sp, 88]
	str	wzr, [x0, 312]
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L2399
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18904]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 88]
	cmp	x1, x0
	bne	.L2399
	str	wzr, [sp, 224]
	str	wzr, [sp, 228]
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 2
	bne	.L2400
	ldr	x0, [sp, 240]
	ldrb	w0, [x0, 3605]
	cmp	w0, 0
	beq	.L2400
	mov	w3, 516
	mov	w2, 515
	mov	w1, 514
	mov	w0, 513
	bl	_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 224]
	str	s0, [sp, 228]
.L2400:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 3
	bne	.L2401
	mov	w3, 626
	mov	w2, 625
	mov	w1, 624
	mov	w0, 623
	bl	_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 224]
	str	s0, [sp, 228]
.L2401:
	ldr	s0, [sp, 224]
	fcmp	s0, #0.0
	bne	.L2402
	ldr	s0, [sp, 228]
	fcmp	s0, #0.0
	beq	.L2399
.L2402:
	mov	w0, 1142292480
	fmov	s0, w0
	str	s0, [sp, 140]
	ldr	x0, [sp, 240]
	ldr	s0, [x0, 24]
	mov	w0, 1142292480
	fmov	s1, w0
	fmul	s8, s0, s1
	ldr	x0, [sp, 240]
	ldr	s0, [x0, 112]
	ldr	x0, [sp, 240]
	ldr	s1, [x0, 116]
	bl	_Z5ImMinIfET_S0_S0_
	fmul	s0, s8, s0
	str	s0, [sp, 144]
	add	x0, sp, 224
	ldr	s0, [sp, 144]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 264]
	str	s0, [sp, 268]
	ldr	x1, [sp, 240]
	mov	x0, 18948
	add	x0, x1, x0
	add	x1, sp, 264
	bl	_ZpLR6ImVec2RKS_
	ldr	x1, [sp, 240]
	mov	x0, 18948
	add	x20, x1, x0
	ldr	x2, [sp, 48]
	ldr	x0, [sp, 88]
	add	x0, x0, 24
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 232]
	str	s0, [sp, 236]
	ldr	x0, [sp, 88]
	add	x1, x0, 32
	add	x0, sp, 232
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 264]
	str	s0, [sp, 268]
	ldr	x1, [sp, 240]
	mov	x0, 18944
	add	x19, x1, x0
	add	x0, sp, 264
	mov	x1, x0
	mov	x0, x20
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 4]
	str	s0, [x19, 8]
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	strb	wzr, [x0, 2552]
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2219]
	fmov	s0, 1.0e+0
	mov	w0, 32
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w1, w0
	ldr	x0, [sp, 56]
	str	w1, [x0]
	ldr	x1, [sp, 240]
	mov	x0, 18948
	add	x0, x1, x0
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 232]
	str	s0, [sp, 236]
	ldr	s0, [sp, 232]
	fcmp	s0, #0.0
	bne	.L2404
	ldr	s0, [sp, 236]
	fcmp	s0, #0.0
	beq	.L2399
.L2404:
	ldr	x0, [sp, 88]
	add	x0, x0, 40
	add	x1, sp, 232
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 264]
	str	s0, [sp, 268]
	add	x0, sp, 264
	mov	x1, x0
	ldr	x0, [sp, 88]
	bl	_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 168]
	str	s0, [sp, 172]
	ldr	x1, [sp, 240]
	mov	x0, 18948
	add	x0, x1, x0
	add	x1, sp, 232
	bl	_ZmIR6ImVec2RKS_
.L2399:
	ldr	s0, [sp, 168]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmp	s0, s1
	beq	.L2406
	ldr	x0, [sp, 88]
	ldr	x1, [sp, 168]
	str	x1, [x0, 40]
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow
.L2406:
	ldr	s0, [sp, 160]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmp	s0, s1
	beq	.L2407
	ldr	x19, [sp, 88]
	add	x0, sp, 160
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow
.L2407:
	ldr	x0, [sp, 88]
	ldr	x1, [sp, 88]
	ldr	x1, [x1, 40]
	str	x1, [x0, 32]
	ldrb	w0, [sp, 111]
.L2408:
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 280]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L2409
	bl	__stack_chk_fail
.L2409:
	mov	w0, w1
	ldr	d8, [sp, 32]
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 288
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1839:
	.size	_ZN5ImGuiL24UpdateWindowManualResizeEP11ImGuiWindowRK6ImVec2PiiPjRK6ImRect, .-_ZN5ImGuiL24UpdateWindowManualResizeEP11ImGuiWindowRK6ImVec2PiiPjRK6ImRect
	.align	2
	.type	_ZL14ClampWindowPosP11ImGuiWindowRK6ImRect, %function
_ZL14ClampWindowPosP11ImGuiWindowRK6ImRect:
.LFB1840:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -64
	.cfi_offset 20, -56
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 32]
	str	x0, [sp, 48]
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 127]
	cmp	w0, 0
	beq	.L2413
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L2413
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	str	s0, [sp, 52]
.L2413:
	ldr	x0, [sp, 40]
	add	x20, x0, 24
	ldr	x0, [sp, 32]
	add	x1, sp, 48
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	ldr	x19, [sp, 40]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 8]
	ldr	s1, [x0, 12]
	add	x0, sp, 56
	mov	x1, x0
	mov	x0, x20
	bl	_ZL7ImClampRK6ImVec2S1_S_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2414
	bl	__stack_chk_fail
.L2414:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1840:
	.size	_ZL14ClampWindowPosP11ImGuiWindowRK6ImRect, .-_ZL14ClampWindowPosP11ImGuiWindowRK6ImRect
	.align	2
	.type	_ZN5ImGuiL24RenderWindowOuterBordersEP11ImGuiWindow, %function
_ZN5ImGuiL24RenderWindowOuterBordersEP11ImGuiWindow:
.LFB1841:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	str	d8, [sp, 32]
	.cfi_offset 19, -144
	.cfi_offset 20, -136
	.cfi_offset 72, -128
	str	x0, [sp, 56]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 120]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 80]
	str	s0, [sp, 64]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 84]
	str	s0, [sp, 68]
	ldr	s0, [sp, 68]
	fcmpe	s0, #0.0
	bgt	.L2422
	b	.L2416
.L2422:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 128
	cmp	w0, 0
	bne	.L2416
	ldr	x0, [sp, 56]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 56]
	add	x20, x0, 24
	ldr	x0, [sp, 56]
	add	x2, x0, 24
	ldr	x0, [sp, 56]
	add	x0, x0, 32
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	fmov	s0, 1.0e+0
	mov	w0, 5
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w1, w0
	add	x0, sp, 136
	ldr	s1, [sp, 68]
	mov	w4, 0
	ldr	s0, [sp, 64]
	mov	w3, w1
	mov	x2, x0
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L2416:
	ldr	x0, [sp, 56]
	ldrsb	w0, [x0, 161]
	str	w0, [sp, 72]
	ldr	w0, [sp, 72]
	cmn	w0, #1
	beq	.L2418
	ldrsw	x1, [sp, 72]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 2
	adrp	x1, _ZL17resize_border_def
	add	x1, x1, :lo12:_ZL17resize_border_def
	add	x0, x0, x1
	str	x0, [sp, 128]
	movi	v1.2s, #0
	ldr	s0, [sp, 64]
	ldr	w1, [sp, 72]
	ldr	x0, [sp, 56]
	bl	_ZL19GetResizeBorderRectP11ImGuiWindowiff
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 136]
	str	s4, [sp, 140]
	str	s1, [sp, 144]
	str	s0, [sp, 148]
	ldr	x0, [sp, 56]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 128]
	add	x2, x0, 8
	add	x0, sp, 136
	add	x1, x0, 8
	add	x0, sp, 136
	bl	_ZL6ImLerpRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 88
	fmov	s1, 5.0e-1
	fmov	s0, 5.0e-1
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 88
	add	x0, sp, 80
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	ldr	x0, [sp, 128]
	ldr	s0, [sp, 64]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	add	x1, sp, 104
	add	x0, sp, 96
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 24]
	mov	w0, 4059
	movk	w0, 0x3f49, lsl 16
	fmov	s1, w0
	fsub	s0, s0, s1
	ldr	x0, [sp, 128]
	ldr	s1, [x0, 24]
	add	x0, sp, 112
	mov	w2, 0
	fmov	s2, s1
	fmov	s1, s0
	ldr	s0, [sp, 64]
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList9PathArcToERK6ImVec2fffi
	ldr	x0, [sp, 56]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 128]
	add	x2, x0, 16
	add	x0, sp, 136
	add	x1, x0, 8
	add	x0, sp, 136
	bl	_ZL6ImLerpRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 88
	fmov	s1, 5.0e-1
	fmov	s0, 5.0e-1
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 88
	add	x0, sp, 80
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	ldr	x0, [sp, 128]
	ldr	s0, [sp, 64]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	add	x1, sp, 104
	add	x0, sp, 96
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	ldr	x0, [sp, 128]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 24]
	mov	w0, 4059
	movk	w0, 0x3f49, lsl 16
	fmov	s2, w0
	fadd	s0, s0, s2
	add	x0, sp, 112
	mov	w2, 0
	fmov	s2, s0
	ldr	s0, [sp, 64]
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList9PathArcToERK6ImVec2fffi
	ldr	x0, [sp, 56]
	ldr	x19, [x0, 632]
	fmov	s0, 1.0e+0
	mov	w0, 29
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w20, w0
	ldr	s1, [sp, 68]
	fmov	s0, 2.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	mov	w2, 0
	mov	w1, w20
	mov	x0, x19
	bl	_ZN10ImDrawList10PathStrokeEjif
.L2418:
	ldr	x0, [sp, 120]
	ldr	s0, [x0, 14376]
	fcmpe	s0, #0.0
	bgt	.L2423
	b	.L2424
.L2423:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L2424
	ldr	x0, [sp, 56]
	ldr	s8, [x0, 28]
	ldr	x0, [sp, 56]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	fadd	s1, s8, s0
	fmov	s0, 1.0e+0
	fsub	s0, s1, s0
	str	s0, [sp, 76]
	ldr	x0, [sp, 56]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 24]
	ldr	s0, [sp, 68]
	fadd	s0, s1, s0
	add	x0, sp, 112
	ldr	s1, [sp, 76]
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 32]
	fadd	s1, s1, s0
	ldr	s0, [sp, 68]
	fsub	s0, s1, s0
	add	x0, sp, 136
	ldr	s1, [sp, 76]
	bl	_ZN6ImVec2C1Eff
	fmov	s0, 1.0e+0
	mov	w0, 5
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	ldr	x0, [sp, 120]
	ldr	s0, [x0, 14376]
	add	x1, sp, 136
	add	x0, sp, 112
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddLineERK6ImVec2S2_jf
.L2424:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2421
	bl	__stack_chk_fail
.L2421:
	ldr	d8, [sp, 32]
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1841:
	.size	_ZN5ImGuiL24RenderWindowOuterBordersEP11ImGuiWindow, .-_ZN5ImGuiL24RenderWindowOuterBordersEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC237:
	.string	"void ImGui::RenderWindowDecorations(ImGuiWindow*, const ImRect&, bool, int, const ImU32*, float)"
	.align	3
.LC238:
	.string	"window->BeginCount == 0"
	.text
	.align	2
	.type	_ZN5ImGuiL23RenderWindowDecorationsEP11ImGuiWindowRK6ImRectbiPKjf, %function
_ZN5ImGuiL23RenderWindowDecorationsEP11ImGuiWindowRK6ImRectbiPKjf:
.LFB1842:
	.cfi_startproc
	stp	x29, x30, [sp, -208]!
	.cfi_def_cfa_offset 208
	.cfi_offset 29, -208
	.cfi_offset 30, -200
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -192
	.cfi_offset 20, -184
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	strb	w2, [sp, 63]
	str	w3, [sp, 56]
	str	x4, [sp, 48]
	str	s0, [sp, 44]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 200]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 144]
	ldr	x1, [sp, 144]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 152]
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 12]
	str	w0, [sp, 96]
	ldr	x0, [sp, 72]
	ldrsh	w0, [x0, 162]
	cmp	w0, 0
	beq	.L2426
	adrp	x0, .LC237
	add	x3, x0, :lo12:.LC237
	mov	w2, 6086
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC238
	add	x0, x0, :lo12:.LC238
	bl	__assert_fail
.L2426:
	ldr	x0, [sp, 72]
	strb	wzr, [x0, 155]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 80]
	str	s0, [sp, 100]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 84]
	str	s0, [sp, 104]
	ldr	x0, [sp, 72]
	ldrb	w0, [x0, 153]
	cmp	w0, 0
	beq	.L2427
	ldr	x0, [sp, 152]
	ldr	s0, [x0, 72]
	str	s0, [sp, 112]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 84]
	ldr	x0, [sp, 144]
	str	s0, [x0, 14376]
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L2428
	ldr	x0, [sp, 144]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2428
	mov	w0, 11
	b	.L2429
.L2428:
	mov	w0, 12
.L2429:
	fmov	s0, 1.0e+0
	bl	_ZN5ImGui11GetColorU32Eif
	str	w0, [sp, 116]
	ldr	x0, [sp, 64]
	ldr	s2, [x0, 8]
	ldr	s3, [x0, 12]
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	ldr	s1, [x0, 4]
	ldr	s4, [sp, 100]
	mov	w1, 1
	ldr	w0, [sp, 116]
	bl	_ZN5ImGui11RenderFrameE6ImVec2S0_jbf
	ldr	x0, [sp, 144]
	ldr	s0, [sp, 112]
	str	s0, [x0, 14376]
	b	.L2457
.L2427:
	ldr	w0, [sp, 96]
	and	w0, w0, 128
	cmp	w0, 0
	bne	.L2431
	ldr	x0, [sp, 72]
	bl	_ZL19GetWindowBgColorIdxP11ImGuiWindow
	fmov	s0, 1.0e+0
	bl	_ZN5ImGui11GetColorU32Eif
	str	w0, [sp, 84]
	strb	wzr, [sp, 83]
	fmov	s0, 1.0e+0
	str	s0, [sp, 88]
	ldr	x0, [sp, 144]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 64
	cmp	w0, 0
	beq	.L2432
	ldr	x0, [sp, 144]
	add	x0, x0, 16384
	ldr	s0, [x0, 1984]
	str	s0, [sp, 88]
	mov	w0, 1
	strb	w0, [sp, 83]
.L2432:
	ldrb	w0, [sp, 83]
	cmp	w0, 0
	beq	.L2433
	ldr	w0, [sp, 84]
	and	w19, w0, 16777215
	ldr	s0, [sp, 88]
	bl	_ZL10ImSaturatef
	mov	w0, 1132396544
	fmov	s1, w0
	fmul	s1, s0, s1
	fmov	s0, 5.0e-1
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	fmov	w0, s0
	lsl	w0, w0, 24
	orr	w0, w19, w0
	str	w0, [sp, 84]
.L2433:
	ldr	x0, [sp, 72]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 72]
	add	x20, x0, 24
	ldr	x0, [sp, 72]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	add	x0, sp, 136
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 136
	mov	x1, x0
	mov	x0, x20
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 168]
	str	s0, [sp, 172]
	ldr	x0, [sp, 72]
	add	x2, x0, 24
	ldr	x0, [sp, 72]
	add	x0, x0, 32
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 184]
	str	s0, [sp, 188]
	ldr	w0, [sp, 96]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2434
	mov	w0, 0
	b	.L2435
.L2434:
	mov	w0, 192
.L2435:
	add	x2, sp, 184
	add	x1, sp, 168
	mov	w4, w0
	ldr	s0, [sp, 100]
	ldr	w3, [sp, 84]
	mov	x0, x19
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
.L2431:
	ldr	w0, [sp, 96]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L2436
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L2437
	mov	w0, 11
	b	.L2438
.L2437:
	mov	w0, 10
.L2438:
	fmov	s0, 1.0e+0
	bl	_ZN5ImGui11GetColorU32Eif
	str	w0, [sp, 108]
	ldr	x0, [sp, 72]
	ldr	x5, [x0, 632]
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 64]
	add	x0, x0, 8
	mov	w4, 48
	ldr	s0, [sp, 100]
	ldr	w3, [sp, 108]
	mov	x2, x0
	mov	x0, x5
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
.L2436:
	ldr	w0, [sp, 96]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L2439
	ldr	x0, [sp, 72]
	bl	_ZNK11ImGuiWindow11MenuBarRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 168]
	str	s4, [sp, 172]
	str	s1, [sp, 176]
	str	s0, [sp, 180]
	ldr	x0, [sp, 72]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 184]
	str	s4, [sp, 188]
	str	s1, [sp, 192]
	str	s0, [sp, 196]
	add	x1, sp, 184
	add	x0, sp, 168
	bl	_ZN6ImRect8ClipWithERKS_
	ldr	x0, [sp, 72]
	ldr	x19, [x0, 632]
	add	x0, sp, 120
	movi	v1.2s, #0
	ldr	s0, [sp, 104]
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 120
	add	x0, sp, 168
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 128]
	str	s0, [sp, 132]
	add	x0, sp, 136
	movi	v1.2s, #0
	ldr	s0, [sp, 104]
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 136
	add	x0, sp, 168
	add	x0, x0, 8
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 184]
	str	s0, [sp, 188]
	fmov	s0, 1.0e+0
	mov	w0, 13
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	ldr	w0, [sp, 96]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2440
	ldr	s0, [sp, 100]
	b	.L2441
.L2440:
	movi	v0.2s, #0
.L2441:
	add	x1, sp, 184
	add	x0, sp, 128
	mov	w4, 48
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
	ldr	x0, [sp, 152]
	ldr	s0, [x0, 72]
	fcmpe	s0, #0.0
	bgt	.L2455
	b	.L2439
.L2455:
	ldr	s1, [sp, 180]
	ldr	x0, [sp, 72]
	ldr	s2, [x0, 28]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 36]
	fadd	s0, s2, s0
	fcmpe	s1, s0
	bmi	.L2456
	b	.L2439
.L2456:
	ldr	x0, [sp, 72]
	ldr	x19, [x0, 632]
	add	x0, sp, 168
	bl	_ZNK6ImRect5GetBLEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	add	x0, sp, 168
	bl	_ZNK6ImRect5GetBREv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 184]
	str	s0, [sp, 188]
	fmov	s0, 1.0e+0
	mov	w0, 5
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	ldr	x0, [sp, 152]
	ldr	s0, [x0, 72]
	add	x1, sp, 184
	add	x0, sp, 136
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddLineERK6ImVec2S2_jf
.L2439:
	ldr	x0, [sp, 72]
	ldrb	w0, [x0, 148]
	cmp	w0, 0
	beq	.L2445
	mov	w0, 0
	bl	_ZN5ImGui9ScrollbarE9ImGuiAxis
.L2445:
	ldr	x0, [sp, 72]
	ldrb	w0, [x0, 149]
	cmp	w0, 0
	beq	.L2446
	mov	w0, 1
	bl	_ZN5ImGui9ScrollbarE9ImGuiAxis
.L2446:
	ldr	w0, [sp, 96]
	and	w0, w0, 2
	cmp	w0, 0
	bne	.L2447
	str	wzr, [sp, 92]
	b	.L2448
.L2453:
	ldrsw	x1, [sp, 92]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	adrp	x1, _ZL15resize_grip_def
	add	x1, x1, :lo12:_ZL15resize_grip_def
	add	x0, x0, x1
	str	x0, [sp, 160]
	ldr	x0, [sp, 72]
	add	x19, x0, 24
	ldr	x0, [sp, 72]
	add	x2, x0, 24
	ldr	x0, [sp, 72]
	add	x0, x0, 32
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 184]
	str	s0, [sp, 188]
	ldr	x1, [sp, 160]
	add	x0, sp, 184
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZL6ImLerpRK6ImVec2S1_S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 128]
	str	s0, [sp, 132]
	ldr	x0, [sp, 72]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 160]
	add	x20, x0, 8
	ldr	w0, [sp, 92]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2449
	add	x0, sp, 136
	ldr	s1, [sp, 44]
	ldr	s0, [sp, 104]
	bl	_ZN6ImVec2C1Eff
	b	.L2450
.L2449:
	add	x0, sp, 136
	ldr	s1, [sp, 104]
	ldr	s0, [sp, 44]
	bl	_ZN6ImVec2C1Eff
.L2450:
	add	x0, sp, 136
	mov	x1, x0
	mov	x0, x20
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 168]
	str	s0, [sp, 172]
	add	x1, sp, 168
	add	x0, sp, 128
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 184]
	str	s0, [sp, 188]
	add	x0, sp, 184
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList10PathLineToERK6ImVec2
	ldr	x0, [sp, 72]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 160]
	add	x20, x0, 8
	ldr	w0, [sp, 92]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2451
	add	x0, sp, 136
	ldr	s1, [sp, 104]
	ldr	s0, [sp, 44]
	bl	_ZN6ImVec2C1Eff
	b	.L2452
.L2451:
	add	x0, sp, 136
	ldr	s1, [sp, 44]
	ldr	s0, [sp, 104]
	bl	_ZN6ImVec2C1Eff
.L2452:
	add	x0, sp, 136
	mov	x1, x0
	mov	x0, x20
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 168]
	str	s0, [sp, 172]
	add	x1, sp, 168
	add	x0, sp, 128
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 184]
	str	s0, [sp, 188]
	add	x0, sp, 184
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList10PathLineToERK6ImVec2
	ldr	x0, [sp, 72]
	ldr	x19, [x0, 632]
	ldr	s1, [sp, 128]
	ldr	x0, [sp, 160]
	ldr	s2, [x0, 8]
	ldr	s3, [sp, 100]
	ldr	s0, [sp, 104]
	fadd	s0, s3, s0
	fmul	s0, s2, s0
	fadd	s4, s1, s0
	ldr	s1, [sp, 132]
	ldr	x0, [sp, 160]
	ldr	s2, [x0, 12]
	ldr	s3, [sp, 100]
	ldr	s0, [sp, 104]
	fadd	s0, s3, s0
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	add	x0, sp, 184
	fmov	s1, s0
	fmov	s0, s4
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 160]
	ldr	w1, [x0, 16]
	ldr	x0, [sp, 160]
	ldr	w2, [x0, 20]
	add	x0, sp, 184
	mov	w3, w2
	mov	w2, w1
	ldr	s0, [sp, 100]
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList13PathArcToFastERK6ImVec2fii
	ldr	x0, [sp, 72]
	ldr	x2, [x0, 632]
	ldrsw	x0, [sp, 92]
	lsl	x0, x0, 2
	ldr	x1, [sp, 48]
	add	x0, x1, x0
	ldr	w0, [x0]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN10ImDrawList14PathFillConvexEj
	ldr	w0, [sp, 92]
	add	w0, w0, 1
	str	w0, [sp, 92]
.L2448:
	ldr	w1, [sp, 92]
	ldr	w0, [sp, 56]
	cmp	w1, w0
	blt	.L2453
.L2447:
	ldr	x0, [sp, 72]
	bl	_ZN5ImGuiL24RenderWindowOuterBordersEP11ImGuiWindow
.L2457:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 200]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2454
	bl	__stack_chk_fail
.L2454:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 208
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1842:
	.size	_ZN5ImGuiL23RenderWindowDecorationsEP11ImGuiWindowRK6ImRectbiPKjf, .-_ZN5ImGuiL23RenderWindowDecorationsEP11ImGuiWindowRK6ImRectbiPKjf
	.section	.rodata
	.align	3
.LC239:
	.string	"#COLLAPSE"
	.align	3
.LC240:
	.string	"#CLOSE"
	.text
	.align	2
	.type	_ZN5ImGuiL28RenderWindowTitleBarContentsEP11ImGuiWindowRK6ImRectPKcPb, %function
_ZN5ImGuiL28RenderWindowTitleBarContentsEP11ImGuiWindowRK6ImRectPKcPb:
.LFB1843:
	.cfi_startproc
	stp	x29, x30, [sp, -208]!
	.cfi_def_cfa_offset 208
	.cfi_offset 29, -208
	.cfi_offset 30, -200
	mov	x29, sp
	str	x19, [sp, 16]
	stp	d8, d9, [sp, 32]
	.cfi_offset 19, -192
	.cfi_offset 72, -176
	.cfi_offset 73, -168
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	str	x2, [sp, 56]
	str	x3, [sp, 48]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 200]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 152]
	ldr	x1, [sp, 152]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 160]
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 12]
	str	w0, [sp, 96]
	ldr	x0, [sp, 48]
	cmp	x0, 0
	cset	w0, ne
	strb	w0, [sp, 86]
	ldr	w0, [sp, 96]
	and	w0, w0, 32
	cmp	w0, 0
	bne	.L2459
	ldr	x0, [sp, 160]
	ldr	w0, [x0, 40]
	cmn	w0, #1
	beq	.L2459
	mov	w0, 1
	b	.L2460
.L2459:
	mov	w0, 0
.L2460:
	strb	w0, [sp, 87]
	ldr	x0, [sp, 152]
	add	x0, x0, 16384
	ldr	w0, [x0, 1800]
	str	w0, [sp, 100]
	ldr	x0, [sp, 152]
	add	x0, x0, 16384
	ldr	w0, [x0, 1800]
	orr	w1, w0, 16
	ldr	x0, [sp, 152]
	add	x0, x0, 16384
	str	w1, [x0, 1800]
	ldr	x0, [sp, 72]
	mov	w1, 1
	str	w1, [x0, 312]
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 60]
	str	s0, [sp, 88]
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 60]
	str	s0, [sp, 92]
	ldr	x0, [sp, 152]
	ldr	s0, [x0, 15360]
	str	s0, [sp, 104]
	str	wzr, [sp, 120]
	str	wzr, [sp, 124]
	str	wzr, [sp, 128]
	str	wzr, [sp, 132]
	ldrb	w0, [sp, 86]
	cmp	w0, 0
	beq	.L2461
	ldr	s1, [sp, 92]
	ldr	s0, [sp, 104]
	fadd	s0, s1, s0
	str	s0, [sp, 92]
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 92]
	fsub	s1, s1, s0
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 60]
	fsub	s0, s1, s0
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 4]
	add	x0, sp, 184
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 184]
	str	x0, [sp, 120]
.L2461:
	ldrb	w0, [sp, 87]
	cmp	w0, 0
	beq	.L2462
	ldr	x0, [sp, 160]
	ldr	w0, [x0, 40]
	cmp	w0, 1
	bne	.L2462
	ldr	s1, [sp, 92]
	ldr	s0, [sp, 104]
	fadd	s0, s1, s0
	str	s0, [sp, 92]
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 92]
	fsub	s1, s1, s0
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 60]
	fsub	s0, s1, s0
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 4]
	add	x0, sp, 184
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 184]
	str	x0, [sp, 128]
.L2462:
	ldrb	w0, [sp, 87]
	cmp	w0, 0
	beq	.L2463
	ldr	x0, [sp, 160]
	ldr	w0, [x0, 40]
	cmp	w0, 0
	bne	.L2463
	ldr	x0, [sp, 64]
	ldr	s1, [x0]
	ldr	s0, [sp, 88]
	fadd	s1, s1, s0
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 60]
	fsub	s0, s1, s0
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 4]
	add	x0, sp, 184
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 184]
	str	x0, [sp, 128]
	ldr	s1, [sp, 88]
	ldr	s0, [sp, 104]
	fadd	s0, s1, s0
	str	s0, [sp, 88]
.L2463:
	ldrb	w0, [sp, 87]
	cmp	w0, 0
	beq	.L2464
	mov	x2, 0
	adrp	x0, .LC239
	add	x1, x0, :lo12:.LC239
	ldr	x0, [sp, 72]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	mov	w2, w0
	add	x0, sp, 128
	mov	x1, x0
	mov	w0, w2
	bl	_ZN5ImGui14CollapseButtonEjRK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2464
	ldr	x0, [sp, 72]
	mov	w1, 1
	strb	w1, [x0, 154]
.L2464:
	ldrb	w0, [sp, 86]
	cmp	w0, 0
	beq	.L2465
	mov	x2, 0
	adrp	x0, .LC240
	add	x1, x0, :lo12:.LC240
	ldr	x0, [sp, 72]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	mov	w2, w0
	add	x0, sp, 120
	mov	x1, x0
	mov	w0, w2
	bl	_ZN5ImGui11CloseButtonEjRK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2465
	ldr	x0, [sp, 48]
	strb	wzr, [x0]
.L2465:
	ldr	x0, [sp, 72]
	str	wzr, [x0, 312]
	ldr	x0, [sp, 152]
	add	x0, x0, 16384
	ldr	w1, [sp, 100]
	str	w1, [x0, 1800]
	ldr	w0, [sp, 96]
	and	w0, w0, 1048576
	cmp	w0, 0
	beq	.L2466
	ldr	s0, [sp, 104]
	mov	w0, 52429
	movk	w0, 0x3f4c, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	b	.L2467
.L2466:
	movi	v0.2s, #0
.L2467:
	str	s0, [sp, 108]
	fmov	s0, -1.0e+0
	mov	w2, 1
	mov	x1, 0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui12CalcTextSizeEPKcS1_bf
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 168]
	str	s0, [sp, 172]
	add	x0, sp, 184
	movi	v1.2s, #0
	ldr	s0, [sp, 108]
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 184
	add	x0, sp, 168
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 60]
	ldr	s1, [sp, 88]
	fcmpe	s1, s0
	bgt	.L2479
	b	.L2468
.L2479:
	ldr	x0, [sp, 152]
	ldr	s0, [x0, 14388]
	ldr	s1, [sp, 88]
	fadd	s0, s1, s0
	str	s0, [sp, 88]
.L2468:
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 60]
	ldr	s1, [sp, 92]
	fcmpe	s1, s0
	bgt	.L2480
	b	.L2470
.L2480:
	ldr	x0, [sp, 152]
	ldr	s0, [x0, 14388]
	ldr	s1, [sp, 92]
	fadd	s0, s1, s0
	str	s0, [sp, 92]
.L2470:
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 32]
	fcmpe	s0, #0.0
	bgt	.L2481
	b	.L2472
.L2481:
	ldr	x0, [sp, 160]
	ldr	s1, [x0, 32]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	bmi	.L2482
	b	.L2472
.L2482:
	ldr	x0, [sp, 160]
	ldr	s1, [x0, 32]
	fmov	s0, 5.0e-1
	fsub	s0, s1, s0
	fabs	s0, s0
	fadd	s0, s0, s0
	fmov	s1, 1.0e+0
	fsub	s0, s1, s0
	bl	_ZL10ImSaturatef
	str	s0, [sp, 112]
	ldr	s1, [sp, 92]
	ldr	s0, [sp, 88]
	bl	_Z5ImMaxIfET_S0_S0_
	fmov	s8, s0
	ldr	x0, [sp, 64]
	bl	_ZNK6ImRect8GetWidthEv
	fmov	s1, s0
	ldr	s0, [sp, 88]
	fsub	s1, s1, s0
	ldr	s0, [sp, 92]
	fsub	s1, s1, s0
	ldr	s0, [sp, 136]
	fsub	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s8
	bl	_Z5ImMinIfET_S0_S0_
	str	s0, [sp, 116]
	ldr	s1, [sp, 116]
	ldr	s0, [sp, 112]
	fmul	s0, s1, s0
	fmov	s1, s0
	ldr	s0, [sp, 88]
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 88]
	ldr	s1, [sp, 116]
	ldr	s0, [sp, 112]
	fmul	s0, s1, s0
	fmov	s1, s0
	ldr	s0, [sp, 92]
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 92]
.L2472:
	ldr	x0, [sp, 64]
	ldr	s1, [x0]
	ldr	s0, [sp, 88]
	fadd	s4, s1, s0
	ldr	x0, [sp, 64]
	ldr	s5, [x0, 4]
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 92]
	fsub	s0, s1, s0
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 12]
	add	x0, sp, 168
	fmov	s3, s1
	fmov	s2, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldr	s8, [sp, 168]
	ldr	s9, [sp, 172]
	ldr	s1, [sp, 176]
	ldr	x0, [sp, 152]
	ldr	s0, [x0, 14388]
	fadd	s0, s1, s0
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 8]
	bl	_Z5ImMinIfET_S0_S0_
	fmov	s1, s0
	ldr	s0, [sp, 180]
	add	x0, sp, 184
	fmov	s3, s0
	fmov	s2, s1
	fmov	s1, s9
	fmov	s0, s8
	bl	_ZN6ImRectC1Effff
	ldr	w0, [sp, 96]
	and	w0, w0, 1048576
	cmp	w0, 0
	beq	.L2475
	str	wzr, [sp, 144]
	str	wzr, [sp, 148]
	ldr	s8, [sp, 168]
	add	x0, sp, 168
	bl	_ZNK6ImRect8GetWidthEv
	fmov	s1, s0
	ldr	s0, [sp, 136]
	fsub	s1, s1, s0
	ldr	x0, [sp, 160]
	ldr	s0, [x0, 32]
	fmul	s0, s1, s0
	fadd	s1, s8, s0
	ldr	s0, [sp, 136]
	fadd	s0, s1, s0
	ldr	s1, [sp, 168]
	ldr	s2, [sp, 176]
	bl	_Z7ImClampIfET_S0_S0_S0_
	str	s0, [sp, 144]
	ldr	s1, [sp, 172]
	ldr	s0, [sp, 180]
	fadd	s1, s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	str	s0, [sp, 148]
	ldr	s1, [sp, 144]
	ldr	s0, [sp, 168]
	fcmpe	s1, s0
	bgt	.L2483
	b	.L2475
.L2483:
	ldr	x0, [sp, 72]
	ldr	x19, [x0, 632]
	fmov	s0, 1.0e+0
	mov	w0, 0
	bl	_ZN5ImGui11GetColorU32Eif
	ldr	s0, [sp, 144]
	ldr	s1, [sp, 148]
	mov	w1, w0
	mov	x0, x19
	bl	_ZN5ImGui12RenderBulletEP10ImDrawList6ImVec2j
	ldr	s3, [sp, 192]
	ldr	s1, [sp, 144]
	ldr	s2, [sp, 108]
	fmov	s0, 5.0e-1
	fmul	s0, s2, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	fsub	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s3
	bl	_Z5ImMinIfET_S0_S0_
	str	s0, [sp, 192]
.L2475:
	ldr	x0, [sp, 160]
	add	x3, x0, 32
	add	x4, sp, 184
	add	x2, sp, 136
	add	x0, sp, 168
	add	x1, x0, 8
	add	x0, sp, 168
	mov	x6, x4
	mov	x5, x3
	mov	x4, x2
	mov	x3, 0
	ldr	x2, [sp, 56]
	bl	_ZN5ImGui17RenderTextClippedERK6ImVec2S2_PKcS4_PS1_S2_PK6ImRect
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 200]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2478
	bl	__stack_chk_fail
.L2478:
	ldp	d8, d9, [sp, 32]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 208
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_restore 73
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1843:
	.size	_ZN5ImGuiL28RenderWindowTitleBarContentsEP11ImGuiWindowRK6ImRectPKcPb, .-_ZN5ImGuiL28RenderWindowTitleBarContentsEP11ImGuiWindowRK6ImRectPKcPb
	.section	.rodata
	.align	3
.LC241:
	.string	"void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow*, ImGuiWindowFlags, ImGuiWindow*)"
	.align	3
.LC242:
	.string	"window->RootWindowForNav->ParentWindow != __null"
	.text
	.align	2
	.global	_ZN5ImGui30UpdateWindowParentAndRootLinksEP11ImGuiWindowiS1_
	.type	_ZN5ImGui30UpdateWindowParentAndRootLinksEP11ImGuiWindowiS1_, %function
_ZN5ImGui30UpdateWindowParentAndRootLinksEP11ImGuiWindowiS1_:
.LFB1844:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 24]
	str	x1, [x0, 840]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 40]
	str	x1, [x0, 880]
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 880]
	ldr	x0, [sp, 40]
	str	x1, [x0, 872]
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 872]
	ldr	x0, [sp, 40]
	str	x1, [x0, 864]
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 864]
	ldr	x0, [sp, 40]
	str	x1, [x0, 856]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2485
	ldr	w0, [sp, 36]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2485
	ldr	w0, [sp, 36]
	and	w0, w0, 33554432
	cmp	w0, 0
	bne	.L2485
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 856]
	ldr	x0, [sp, 40]
	str	x1, [x0, 856]
.L2485:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2486
	ldr	w0, [sp, 36]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2486
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 864]
	ldr	x0, [sp, 40]
	str	x1, [x0, 864]
.L2486:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2488
	ldr	w0, [sp, 36]
	and	w0, w0, 134217728
	cmp	w0, 0
	bne	.L2488
	ldr	w1, [sp, 36]
	mov	w0, 83886080
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L2488
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 872]
	ldr	x0, [sp, 40]
	str	x1, [x0, 872]
	b	.L2488
.L2490:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 880]
	ldr	x0, [x0, 840]
	cmp	x0, 0
	bne	.L2489
	adrp	x0, .LC241
	add	x3, x0, :lo12:.LC241
	mov	w2, 6263
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC242
	add	x0, x0, :lo12:.LC242
	bl	__assert_fail
.L2489:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 880]
	ldr	x1, [x0, 840]
	ldr	x0, [sp, 40]
	str	x1, [x0, 880]
.L2488:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 880]
	ldr	w0, [x0, 12]
	and	w0, w0, 8388608
	cmp	w0, 0
	bne	.L2490
	nop
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1844:
	.size	_ZN5ImGui30UpdateWindowParentAndRootLinksEP11ImGuiWindowiS1_, .-_ZN5ImGui30UpdateWindowParentAndRootLinksEP11ImGuiWindowiS1_
	.align	2
	.type	_ZN5ImGuiL17FindBlockingModalEP11ImGuiWindow, %function
_ZN5ImGuiL17FindBlockingModalEP11ImGuiWindow:
.LFB1845:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	cmp	w0, 0
	bgt	.L2492
	mov	x0, 0
	b	.L2493
.L2492:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	sub	w0, w0, #1
	str	w0, [sp, 36]
	b	.L2494
.L2504:
	ldr	x0, [sp, 48]
	ldr	x2, [x0, 18488]
	ldrsw	x1, [sp, 36]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldr	x0, [x0, 8]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L2505
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 134217728
	cmp	w0, 0
	beq	.L2505
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 150]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2498
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 151]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2506
.L2498:
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2507
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 848]
	ldr	x0, [x0, 856]
	str	x0, [sp, 40]
	b	.L2501
.L2503:
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2502
	ldr	x0, [sp, 56]
	b	.L2493
.L2502:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 848]
	ldr	x0, [x0, 856]
	str	x0, [sp, 40]
.L2501:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	bne	.L2503
	b	.L2497
.L2505:
	nop
	b	.L2497
.L2506:
	nop
.L2497:
	ldr	w0, [sp, 36]
	sub	w0, w0, #1
	str	w0, [sp, 36]
.L2494:
	ldr	w0, [sp, 36]
	cmp	w0, 0
	bge	.L2504
	b	.L2500
.L2507:
	nop
.L2500:
	mov	x0, 0
.L2493:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1845:
	.size	_ZN5ImGuiL17FindBlockingModalEP11ImGuiWindow, .-_ZN5ImGuiL17FindBlockingModalEP11ImGuiWindow
	.section	.text._ZN20ImGuiWindowStackDataC2Ev,"axG",@progbits,_ZN20ImGuiWindowStackDataC5Ev,comdat
	.align	2
	.weak	_ZN20ImGuiWindowStackDataC2Ev
	.type	_ZN20ImGuiWindowStackDataC2Ev, %function
_ZN20ImGuiWindowStackDataC2Ev:
.LFB1848:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN17ImGuiLastItemDataC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 68
	bl	_ZN15ImGuiStackSizesC1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1848:
	.size	_ZN20ImGuiWindowStackDataC2Ev, .-_ZN20ImGuiWindowStackDataC2Ev
	.weak	_ZN20ImGuiWindowStackDataC1Ev
	.set	_ZN20ImGuiWindowStackDataC1Ev,_ZN20ImGuiWindowStackDataC2Ev
	.section	.rodata
	.align	3
.LC243:
	.string	"bool ImGui::Begin(const char*, bool*, ImGuiWindowFlags)"
	.align	3
.LC244:
	.string	"name != __null && name[0] != '\\0'"
	.align	3
.LC245:
	.string	"g.WithinFrameScope"
	.align	3
.LC246:
	.string	"g.FrameCountEnded != g.FrameCount"
	.align	3
.LC247:
	.string	"flags & ImGuiWindowFlags_ChildWindow"
	.align	3
.LC248:
	.string	"parent_window != __null || !(flags & ImGuiWindowFlags_ChildWindow)"
	.align	3
.LC249:
	.string	"parent_window && parent_window->Active"
	.align	3
.LC250:
	.string	"blocking_modal != __null"
	.align	3
.LC251:
	.string	"window->DrawList->CmdBuffer.Size == 1 && window->DrawList->CmdBuffer[0].ElemCount == 0"
	.align	3
.LC252:
	.string	"(flags & ImGuiWindowFlags_NoTitleBar) != 0"
	.text
	.align	2
	.global	_ZN5ImGui5BeginEPKcPbi
	.type	_ZN5ImGui5BeginEPKcPbi, %function
_ZN5ImGui5BeginEPKcPbi:
.LFB1846:
	.cfi_startproc
	sub	sp, sp, #512
	.cfi_def_cfa_offset 512
	stp	x29, x30, [sp]
	.cfi_offset 29, -512
	.cfi_offset 30, -504
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	str	d8, [sp, 32]
	.cfi_offset 19, -496
	.cfi_offset 20, -488
	.cfi_offset 72, -480
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	str	w2, [sp, 60]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 504]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 168]
	ldr	x1, [sp, 168]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 176]
	ldr	x0, [sp, 72]
	cmp	x0, 0
	beq	.L2510
	ldr	x0, [sp, 72]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L2734
.L2510:
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6311
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC244
	add	x0, x0, :lo12:.LC244
	bl	__assert_fail
.L2734:
	ldr	x0, [sp, 168]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3628]
	cmp	w0, 0
	bne	.L2512
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6312
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC245
	add	x0, x0, :lo12:.LC245
	bl	__assert_fail
.L2512:
	ldr	x0, [sp, 168]
	ldr	w1, [x0, 15908]
	ldr	x0, [sp, 168]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	bne	.L2513
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6313
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC246
	add	x0, x0, :lo12:.LC246
	bl	__assert_fail
.L2513:
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui16FindWindowByNameEPKc
	str	x0, [sp, 144]
	ldr	x0, [sp, 144]
	cmp	x0, 0
	cset	w0, eq
	strb	w0, [sp, 92]
	ldrb	w0, [sp, 92]
	cmp	w0, 0
	beq	.L2514
	ldr	w1, [sp, 60]
	ldr	x0, [sp, 72]
	bl	_ZL15CreateNewWindowPKci
	str	x0, [sp, 144]
.L2514:
	ldr	w1, [sp, 60]
	mov	w0, 512
	movk	w0, 0xc, lsl 16
	and	w1, w1, w0
	mov	w0, 512
	movk	w0, 0xc, lsl 16
	cmp	w1, w0
	bne	.L2515
	ldr	w0, [sp, 60]
	orr	w0, w0, 6
	str	w0, [sp, 60]
.L2515:
	ldr	w0, [sp, 60]
	and	w0, w0, 8388608
	cmp	w0, 0
	beq	.L2516
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2516
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6326
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC247
	add	x0, x0, :lo12:.LC247
	bl	__assert_fail
.L2516:
	ldr	x0, [sp, 168]
	ldr	w0, [x0, 15904]
	str	w0, [sp, 108]
	ldr	x0, [sp, 144]
	ldr	w0, [x0, 576]
	ldr	w1, [sp, 108]
	cmp	w1, w0
	cset	w0, ne
	strb	w0, [sp, 93]
	ldr	x0, [sp, 168]
	ldr	w0, [x0, 15984]
	cmp	w0, 0
	bne	.L2517
	ldr	x0, [sp, 168]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3629]
	cmp	w0, 0
	beq	.L2517
	mov	w1, 1
	b	.L2518
.L2517:
	mov	w1, 0
.L2518:
	ldr	x0, [sp, 144]
	strb	w1, [x0, 158]
	ldr	x0, [sp, 144]
	ldr	w1, [x0, 576]
	ldr	w0, [sp, 108]
	sub	w0, w0, #1
	cmp	w1, w0
	cset	w0, lt
	strb	w0, [sp, 82]
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2519
	ldr	x1, [sp, 168]
	mov	x0, 18480
	add	x2, x1, x0
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	str	x0, [sp, 184]
	ldrb	w0, [sp, 82]
	ldr	x1, [sp, 144]
	ldr	w2, [x1, 172]
	ldr	x1, [sp, 184]
	ldr	w1, [x1]
	cmp	w2, w1
	cset	w1, ne
	and	w1, w1, 255
	orr	w0, w0, w1
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 82]
	ldrb	w0, [sp, 82]
	ldr	x1, [sp, 184]
	ldr	x2, [x1, 8]
	ldr	x1, [sp, 144]
	cmp	x2, x1
	cset	w1, ne
	and	w1, w1, 255
	orr	w0, w0, w1
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 82]
.L2519:
	ldr	x0, [sp, 144]
	ldrb	w1, [sp, 82]
	strb	w1, [x0, 156]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 156]
	cmp	w0, 0
	beq	.L2520
	ldr	x0, [sp, 144]
	mov	w2, 1
	mov	w1, 8
	bl	_ZL28SetWindowConditionAllowFlagsP11ImGuiWindowib
.L2520:
	ldrb	w0, [sp, 93]
	cmp	w0, 0
	beq	.L2521
	ldr	x0, [sp, 144]
	ldr	w2, [sp, 60]
	ldrb	w1, [sp, 92]
	bl	_ZL28UpdateWindowInFocusOrderListP11ImGuiWindowbi
	ldr	x0, [sp, 144]
	ldr	w1, [sp, 60]
	str	w1, [x0, 12]
	ldr	x0, [sp, 144]
	ldr	w1, [sp, 108]
	str	w1, [x0, 576]
	ldr	x0, [sp, 168]
	ldr	d0, [x0, 15896]
	ldr	x0, [sp, 144]
	fcvt	s0, d0
	str	s0, [x0, 580]
	ldr	x0, [sp, 144]
	strh	wzr, [x0, 166]
	ldr	x0, [sp, 168]
	ldr	w0, [x0, 16016]
	add	w2, w0, 1
	ldr	x1, [sp, 168]
	str	w2, [x1, 16016]
	ldr	x1, [sp, 144]
	sxth	w0, w0
	strh	w0, [x1, 168]
	b	.L2522
.L2521:
	ldr	x0, [sp, 144]
	ldr	w0, [x0, 12]
	str	w0, [sp, 60]
.L2522:
	ldr	x1, [sp, 168]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZNK8ImVectorI20ImGuiWindowStackDataE5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2523
	mov	x0, 0
	b	.L2524
.L2523:
	ldr	x1, [sp, 168]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE4backEv
	ldr	x0, [x0]
.L2524:
	str	x0, [sp, 192]
	ldrb	w0, [sp, 93]
	cmp	w0, 0
	beq	.L2525
	ldr	w1, [sp, 60]
	mov	w0, 83886080
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L2526
	ldr	x0, [sp, 192]
	b	.L2528
.L2526:
	mov	x0, 0
	b	.L2528
.L2525:
	ldr	x0, [sp, 144]
	ldr	x0, [x0, 840]
.L2528:
	str	x0, [sp, 200]
	ldr	x0, [sp, 200]
	cmp	x0, 0
	bne	.L2529
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2529
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6362
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC248
	add	x0, x0, :lo12:.LC248
	bl	__assert_fail
.L2529:
	ldr	x0, [sp, 144]
	ldr	w0, [x0, 208]
	cmp	w0, 0
	bne	.L2530
	ldr	x0, [sp, 144]
	add	x2, x0, 208
	ldr	x0, [sp, 144]
	add	x0, x0, 8
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIjE9push_backERKj
.L2530:
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 168]
	str	x1, [x0, 16032]
	add	x0, sp, 400
	bl	_ZN20ImGuiWindowStackDataC1Ev
	ldr	x0, [sp, 144]
	str	x0, [sp, 400]
	ldr	x1, [sp, 168]
	mov	x0, 18432
	add	x0, x1, x0
	sub	x1, x0, #220
	add	x0, sp, 408
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	ldr	q0, [x1, 32]
	str	q0, [x0, 32]
	ldr	q0, [x1, 44]
	str	q0, [x0, 44]
	add	x0, sp, 400
	add	x0, x0, 68
	bl	_ZN15ImGuiStackSizes17SetToCurrentStateEv
	ldr	x1, [sp, 168]
	mov	x0, 15984
	add	x0, x1, x0
	add	x1, sp, 400
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE9push_backERKS0_
	ldr	w0, [sp, 60]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L2531
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 2128]
	add	w1, w0, 1
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	str	w1, [x0, 2128]
.L2531:
	ldrb	w0, [sp, 93]
	cmp	w0, 0
	beq	.L2532
	ldr	x0, [sp, 144]
	ldr	x2, [sp, 200]
	ldr	w1, [sp, 60]
	bl	_ZN5ImGui30UpdateWindowParentAndRootLinksEP11ImGuiWindowiS1_
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 192]
	str	x1, [x0, 848]
.L2532:
	ldr	x0, [sp, 144]
	ldr	w0, [x0, 8]
	bl	_ZN5ImGui14PushFocusScopeEj
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 168]
	add	x1, x1, 16384
	ldr	w1, [x1, 1796]
	str	w1, [x0, 936]
	ldr	x0, [sp, 168]
	str	xzr, [x0, 16032]
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2533
	ldr	x1, [sp, 168]
	mov	x0, 18480
	add	x2, x1, x0
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	str	x0, [sp, 208]
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 208]
	str	x1, [x0, 8]
	ldr	x0, [sp, 192]
	ldr	w0, [x0, 312]
	mov	w1, w0
	ldr	x0, [sp, 208]
	str	w1, [x0, 24]
	ldr	x1, [sp, 168]
	mov	x0, 18496
	add	x0, x1, x0
	ldr	x1, [sp, 208]
	bl	_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 208]
	ldr	w1, [x1]
	str	w1, [x0, 172]
.L2533:
	strb	wzr, [sp, 83]
	strb	wzr, [sp, 84]
	strb	wzr, [sp, 85]
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2534
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 188]
	mov	w1, w0
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1892]
	and	w0, w1, w0
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 83]
	ldrb	w0, [sp, 83]
	cmp	w0, 0
	beq	.L2535
	ldr	x1, [sp, 168]
	mov	x0, 18296
	add	x0, x1, x0
	bl	_ZL11ImLengthSqrRK6ImVec2
	mov	w0, 50604
	movk	w0, 0x3727, lsl 16
	fmov	s1, w0
	fcmpe	s0, s1
	bgt	.L2722
	b	.L2535
.L2722:
	mov	w0, 1
	b	.L2537
.L2535:
	mov	w0, 0
.L2537:
	cmp	w0, 0
	beq	.L2538
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 168]
	ldr	x1, [x1, 18288]
	str	x1, [x0, 192]
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 168]
	ldr	x1, [x1, 18296]
	str	x1, [x0, 200]
	ldr	x0, [sp, 144]
	ldrsb	w1, [x0, 188]
	ldr	x0, [sp, 144]
	and	w1, w1, -15
	sxtb	w1, w1
	strb	w1, [x0, 188]
	b	.L2534
.L2538:
	ldr	x3, [sp, 144]
	ldr	x1, [sp, 168]
	mov	x0, 18288
	add	x1, x1, x0
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1892]
	mov	w2, w0
	mov	x0, x3
	bl	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
.L2534:
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L2539
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 189]
	mov	w1, w0
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1896]
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L2540
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	s0, [x0, 1920]
	fcmpe	s0, #0.0
	bgt	.L2723
	b	.L2540
.L2723:
	mov	w0, 1
	b	.L2542
.L2540:
	mov	w0, 0
.L2542:
	strb	w0, [sp, 84]
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 189]
	mov	w1, w0
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1896]
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L2543
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	s0, [x0, 1924]
	fcmpe	s0, #0.0
	bgt	.L2724
	b	.L2543
.L2724:
	mov	w0, 1
	b	.L2545
.L2543:
	mov	w0, 0
.L2545:
	strb	w0, [sp, 85]
	ldr	x3, [sp, 144]
	ldr	x1, [sp, 168]
	mov	x0, 18304
	add	x1, x1, x0
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1896]
	mov	w2, w0
	mov	x0, x3
	bl	_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i
.L2539:
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 128
	cmp	w0, 0
	beq	.L2546
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	s0, [x0, 1936]
	fcmpe	s0, #0.0
	bge	.L2725
	b	.L2547
.L2725:
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 168]
	add	x1, x1, 16384
	ldr	s0, [x1, 1936]
	str	s0, [x0, 116]
	ldr	x0, [sp, 144]
	str	wzr, [x0, 124]
.L2547:
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	s0, [x0, 1940]
	fcmpe	s0, #0.0
	bge	.L2726
	b	.L2546
.L2726:
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 168]
	add	x1, x1, 16384
	ldr	s0, [x1, 1940]
	str	s0, [x0, 120]
	ldr	x0, [sp, 144]
	str	wzr, [x0, 128]
.L2546:
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L2550
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 168]
	ldr	x1, [x1, 18312]
	str	x1, [x0, 64]
	b	.L2551
.L2550:
	ldrb	w0, [sp, 93]
	cmp	w0, 0
	beq	.L2551
	add	x0, sp, 384
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 384]
	str	x1, [x0, 64]
.L2551:
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L2552
	ldr	x3, [sp, 144]
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldrb	w1, [x0, 1944]
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1900]
	mov	w2, w0
	mov	x0, x3
	bl	_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi
.L2552:
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L2553
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
.L2553:
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 156]
	cmp	w0, 0
	beq	.L2554
	ldr	x0, [sp, 144]
	mov	w2, 0
	mov	w1, 8
	bl	_ZL28SetWindowConditionAllowFlagsP11ImGuiWindowib
.L2554:
	ldrb	w0, [sp, 93]
	cmp	w0, 0
	beq	.L2555
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2556
	ldr	w0, [sp, 60]
	and	w0, w0, 33554432
	cmp	w0, 0
	beq	.L2556
	mov	w0, 1
	b	.L2557
.L2556:
	mov	w0, 0
.L2557:
	strb	w0, [sp, 94]
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 185]
	cmp	w0, 0
	cset	w0, gt
	strb	w0, [sp, 95]
	ldr	x0, [sp, 144]
	mov	w1, 1
	strb	w1, [x0, 150]
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 64]
	cmp	x1, 0
	cset	w1, ne
	and	w1, w1, 255
	strb	w1, [x0, 160]
	add	x0, sp, 368
	mov	w1, 2139095039
	fmov	s3, w1
	mov	w1, 2139095039
	fmov	s2, w1
	mvni	v1.2s, 0x80, lsl 16
	mvni	v0.2s, 0x80, lsl 16
	bl	_ZN6ImVec4C1Effff
	add	x1, sp, 368
	add	x0, sp, 384
	bl	_ZN6ImRectC1ERK6ImVec4
	ldr	x0, [sp, 144]
	add	x2, x0, 512
	ldp	x0, x1, [sp, 384]
	stp	x0, x1, [x2, 24]
	ldr	x0, [sp, 144]
	add	x0, x0, 208
	mov	w1, 1
	bl	_ZN8ImVectorIjE6resizeEi
	ldr	x0, [sp, 144]
	ldr	x0, [x0, 632]
	bl	_ZN10ImDrawList17_ResetForNewFrameEv
	ldr	x0, [sp, 144]
	mov	w1, -1
	str	w1, [x0, 400]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 948]
	cmp	w0, 0
	beq	.L2558
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui29GcAwakeTransientWindowBuffersEP11ImGuiWindow
.L2558:
	strb	wzr, [sp, 86]
	ldr	x0, [sp, 168]
	ldr	x0, [x0, 18920]
	cmp	x0, 0
	beq	.L2559
	ldr	x0, [sp, 144]
	ldr	w0, [x0, 12]
	and	w0, w0, 524288
	cmp	w0, 0
	bne	.L2559
	mov	w0, 1
	strb	w0, [sp, 86]
.L2559:
	ldrb	w0, [sp, 86]
	cmp	w0, 0
	beq	.L2560
	ldrb	w0, [sp, 92]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2560
	ldr	x0, [sp, 144]
	ldr	x0, [x0]
	mov	x1, x0
	ldr	x0, [sp, 72]
	bl	strcmp
	cmp	w0, 0
	beq	.L2560
	ldr	x0, [sp, 144]
	ldr	w0, [x0, 88]
	sxtw	x0, w0
	str	x0, [sp, 384]
	ldr	x0, [sp, 144]
	ldr	x0, [x0]
	ldr	x19, [sp, 144]
	add	x1, sp, 384
	ldr	x2, [sp, 72]
	bl	_Z11ImStrdupcpyPcPmPKc
	str	x0, [x19]
	ldr	x1, [sp, 384]
	ldr	x0, [sp, 144]
	str	w1, [x0, 88]
.L2560:
	ldr	x3, [sp, 144]
	ldr	x0, [sp, 144]
	add	x1, x0, 48
	ldr	x0, [sp, 144]
	add	x0, x0, 56
	mov	x2, x0
	mov	x0, x3
	bl	_ZL22CalcWindowContentSizesP11ImGuiWindowP6ImVec2S2_
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 184]
	cmp	w0, 0
	ble	.L2561
	ldr	x0, [sp, 144]
	ldrsb	w1, [x0, 184]
	and	w1, w1, 255
	sub	w1, w1, #1
	and	w1, w1, 255
	sxtb	w1, w1
	strb	w1, [x0, 184]
.L2561:
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 185]
	cmp	w0, 0
	ble	.L2562
	ldr	x0, [sp, 144]
	ldrsb	w1, [x0, 185]
	and	w1, w1, 255
	sub	w1, w1, #1
	and	w1, w1, 255
	sxtb	w1, w1
	strb	w1, [x0, 185]
.L2562:
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 186]
	cmp	w0, 0
	ble	.L2563
	ldr	x0, [sp, 144]
	ldrsb	w1, [x0, 186]
	and	w1, w1, 255
	sub	w1, w1, #1
	and	w1, w1, 255
	sxtb	w1, w1
	strb	w1, [x0, 186]
.L2563:
	ldrb	w0, [sp, 92]
	cmp	w0, 0
	beq	.L2564
	ldrb	w0, [sp, 84]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2565
	ldrb	w0, [sp, 85]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2564
.L2565:
	ldr	x0, [sp, 144]
	mov	w1, 1
	strb	w1, [x0, 185]
.L2564:
	ldrb	w0, [sp, 82]
	cmp	w0, 0
	beq	.L2566
	ldr	w0, [sp, 60]
	and	w0, w0, 100663296
	cmp	w0, 0
	beq	.L2566
	ldr	x0, [sp, 144]
	mov	w1, 1
	strb	w1, [x0, 185]
	ldr	w0, [sp, 60]
	and	w0, w0, 64
	cmp	w0, 0
	beq	.L2566
	ldrb	w0, [sp, 84]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2567
	ldr	x0, [sp, 144]
	str	wzr, [x0, 40]
	ldr	x1, [sp, 144]
	ldr	s0, [x0, 40]
	str	s0, [x1, 32]
.L2567:
	ldrb	w0, [sp, 85]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2568
	ldr	x0, [sp, 144]
	str	wzr, [x0, 44]
	ldr	x1, [sp, 144]
	ldr	s0, [x0, 44]
	str	s0, [x1, 36]
.L2568:
	add	x0, sp, 384
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 384]
	str	x1, [x0, 56]
	ldr	x0, [sp, 144]
	add	x1, x0, 56
	ldr	x0, [sp, 144]
	ldr	x1, [x1]
	str	x1, [x0, 48]
.L2566:
	bl	_ZN5ImGui15GetMainViewportEv
	str	x0, [sp, 216]
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 216]
	bl	_ZN5ImGui17SetWindowViewportEP11ImGuiWindowP14ImGuiViewportP
	ldr	x0, [sp, 144]
	bl	_ZL16SetCurrentWindowP11ImGuiWindow
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2569
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 176]
	ldr	s0, [x1, 48]
	str	s0, [x0, 84]
	b	.L2570
.L2569:
	ldr	w0, [sp, 60]
	and	w0, w0, 100663296
	cmp	w0, 0
	beq	.L2571
	ldr	w0, [sp, 60]
	and	w0, w0, 134217728
	cmp	w0, 0
	bne	.L2571
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 56]
	b	.L2572
.L2571:
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 20]
.L2572:
	ldr	x0, [sp, 144]
	str	s0, [x0, 84]
.L2570:
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 176]
	ldr	x1, [x1, 8]
	str	x1, [x0, 72]
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2573
	ldr	w1, [sp, 60]
	mov	w0, 67174400
	and	w0, w1, w0
	cmp	w0, 0
	bne	.L2573
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 84]
	fcmp	s0, #0.0
	bne	.L2573
	ldr	w0, [sp, 60]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L2574
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 12]
	b	.L2575
.L2574:
	movi	v0.2s, #0
.L2575:
	add	x0, sp, 384
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 384]
	str	x1, [x0, 72]
.L2573:
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 72]
	ldr	x0, [sp, 176]
	ldr	s1, [x0, 76]
	bl	_Z5ImMaxIfET_S0_S0_
	fmov	s2, s0
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	s0, [x0, 1988]
	ldr	x19, [sp, 144]
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [x19, 324]
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 168]
	add	x1, x1, 16384
	ldr	s0, [x1, 1992]
	str	s0, [x0, 328]
	ldrb	w0, [sp, 92]
	strb	w0, [sp, 87]
	ldrb	w0, [sp, 92]
	strb	w0, [sp, 88]
	ldr	w0, [sp, 60]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L2576
	ldr	w0, [sp, 60]
	and	w0, w0, 32
	cmp	w0, 0
	bne	.L2576
	ldr	x0, [sp, 144]
	bl	_ZNK11ImGuiWindow12TitleBarRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	ldr	x0, [sp, 168]
	ldr	x1, [x0, 16040]
	ldr	x0, [sp, 144]
	cmp	x1, x0
	bne	.L2577
	ldr	x0, [sp, 168]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	bne	.L2577
	ldr	x0, [sp, 168]
	ldr	w0, [x0, 16092]
	cmp	w0, 0
	bne	.L2577
	add	x0, sp, 384
	add	x1, x0, 8
	add	x0, sp, 384
	mov	w2, 1
	bl	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2577
	ldr	x0, [sp, 168]
	add	x0, x0, 8192
	ldrh	w0, [x0, 5954]
	cmp	w0, 2
	bne	.L2577
	mov	w0, 1
	b	.L2578
.L2577:
	mov	w0, 0
.L2578:
	cmp	w0, 0
	beq	.L2579
	ldr	x0, [sp, 144]
	mov	w1, 1
	strb	w1, [x0, 154]
.L2579:
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 154]
	cmp	w0, 0
	beq	.L2737
	ldr	x0, [sp, 144]
	ldrb	w1, [x0, 153]
	ldr	x0, [sp, 144]
	eor	w1, w1, 1
	and	w1, w1, 255
	strb	w1, [x0, 153]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 153]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2581
	mov	w0, 1
	strb	w0, [sp, 88]
.L2581:
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow
	b	.L2737
.L2576:
	ldr	x0, [sp, 144]
	strb	wzr, [x0, 153]
	b	.L2582
.L2737:
	nop
.L2582:
	ldr	x0, [sp, 144]
	strb	wzr, [x0, 154]
	ldr	x2, [sp, 144]
	ldr	x0, [sp, 144]
	add	x0, x0, 56
	mov	x1, x0
	mov	x0, x2
	bl	_ZL21CalcWindowAutoFitSizeP11ImGuiWindowRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 152]
	str	s0, [sp, 156]
	ldr	w0, [sp, 60]
	and	w0, w0, 64
	cmp	w0, 0
	beq	.L2583
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 153]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2583
	ldrb	w0, [sp, 84]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2584
	ldr	x0, [sp, 144]
	ldr	s0, [sp, 152]
	str	s0, [x0, 40]
	mov	w0, 1
	strb	w0, [sp, 87]
.L2584:
	ldrb	w0, [sp, 85]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2586
	ldr	x0, [sp, 144]
	ldr	s0, [sp, 156]
	str	s0, [x0, 44]
	mov	w0, 1
	strb	w0, [sp, 88]
	b	.L2586
.L2583:
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 176]
	cmp	w0, 0
	bgt	.L2587
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 177]
	cmp	w0, 0
	ble	.L2586
.L2587:
	ldrb	w0, [sp, 84]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2588
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 176]
	cmp	w0, 0
	ble	.L2588
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 179]
	cmp	w0, 0
	beq	.L2589
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 40]
	ldr	s1, [sp, 152]
	bl	_Z5ImMaxIfET_S0_S0_
	b	.L2590
.L2589:
	ldr	s0, [sp, 152]
.L2590:
	ldr	x0, [sp, 144]
	str	s0, [x0, 40]
	mov	w0, 1
	strb	w0, [sp, 87]
.L2588:
	ldrb	w0, [sp, 85]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2591
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 177]
	cmp	w0, 0
	ble	.L2591
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 179]
	cmp	w0, 0
	beq	.L2592
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 44]
	ldr	s1, [sp, 156]
	bl	_Z5ImMaxIfET_S0_S0_
	b	.L2593
.L2592:
	ldr	s0, [sp, 156]
.L2593:
	ldr	x0, [sp, 144]
	str	s0, [x0, 44]
	mov	w0, 1
	strb	w0, [sp, 88]
.L2591:
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 153]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2586
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow
.L2586:
	ldr	x2, [sp, 144]
	ldr	x0, [sp, 144]
	add	x0, x0, 40
	ldr	x19, [sp, 144]
	mov	x1, x0
	mov	x0, x2
	bl	_ZL29CalcWindowSizeAfterConstraintP11ImGuiWindowRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 40]
	str	s0, [x19, 44]
	ldr	x19, [sp, 144]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 153]
	cmp	w0, 0
	beq	.L2594
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2594
	ldr	x0, [sp, 144]
	bl	_ZNK11ImGuiWindow12TitleBarRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	add	x0, sp, 384
	bl	_ZNK6ImRect7GetSizeEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 32]
	str	s0, [x19, 36]
	b	.L2595
.L2594:
	ldr	x0, [sp, 144]
	ldr	x0, [x0, 40]
	str	x0, [x19, 32]
.L2595:
	ldr	x0, [sp, 144]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	fmov	s8, s0
	ldr	x0, [sp, 144]
	bl	_ZNK11ImGuiWindow13MenuBarHeightEv
	fadd	s0, s8, s0
	str	s0, [sp, 112]
	ldrb	w0, [sp, 82]
	cmp	w0, 0
	beq	.L2596
	ldr	x0, [sp, 144]
	mov	w1, -1
	str	w1, [x0, 180]
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2596
	ldr	w0, [sp, 60]
	and	w0, w0, 134217728
	cmp	w0, 0
	bne	.L2596
	ldrb	w0, [sp, 83]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2596
	ldr	x1, [sp, 168]
	mov	x0, 18496
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataE4backEv
	mov	x1, x0
	ldr	x0, [sp, 144]
	ldr	x1, [x1, 36]
	str	x1, [x0, 24]
.L2596:
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2597
	ldr	x0, [sp, 200]
	cmp	x0, 0
	beq	.L2598
	ldr	x0, [sp, 200]
	ldrb	w0, [x0, 150]
	cmp	w0, 0
	bne	.L2735
.L2598:
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6612
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC249
	add	x0, x0, :lo12:.LC249
	bl	__assert_fail
.L2735:
	ldr	x0, [sp, 200]
	ldr	w1, [x0, 368]
	ldr	x0, [sp, 144]
	sxth	w1, w1
	strh	w1, [x0, 166]
	ldr	x0, [sp, 200]
	add	x0, x0, 368
	add	x1, sp, 144
	bl	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	bne	.L2597
	ldrb	w0, [sp, 83]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2597
	ldrb	w0, [sp, 94]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2597
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 200]
	ldr	x1, [x1, 224]
	str	x1, [x0, 24]
.L2597:
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 192]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmp	s0, s1
	beq	.L2600
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 185]
	cmp	w0, 0
	bne	.L2600
	mov	w0, 1
	b	.L2601
.L2600:
	mov	w0, 0
.L2601:
	strb	w0, [sp, 96]
	ldrb	w0, [sp, 96]
	cmp	w0, 0
	beq	.L2602
	ldr	x19, [sp, 144]
	ldr	x0, [sp, 144]
	add	x20, x0, 192
	ldr	x0, [sp, 144]
	add	x2, x0, 32
	ldr	x0, [sp, 144]
	add	x0, x0, 200
	mov	x1, x0
	mov	x0, x2
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 368]
	str	s0, [sp, 372]
	add	x0, sp, 368
	mov	x1, x0
	mov	x0, x20
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 384]
	str	s0, [sp, 388]
	add	x0, sp, 384
	mov	w2, 0
	mov	x1, x0
	mov	x0, x19
	bl	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
	b	.L2603
.L2602:
	ldr	w0, [sp, 60]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L2604
	ldr	x0, [sp, 144]
	ldr	x19, [sp, 144]
	bl	_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	b	.L2603
.L2604:
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2605
	ldrb	w0, [sp, 83]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2605
	ldrb	w0, [sp, 95]
	cmp	w0, 0
	beq	.L2605
	ldr	x0, [sp, 144]
	ldr	x19, [sp, 144]
	bl	_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	b	.L2603
.L2605:
	ldr	w0, [sp, 60]
	and	w0, w0, 33554432
	cmp	w0, 0
	beq	.L2603
	ldrb	w0, [sp, 83]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2603
	ldrb	w0, [sp, 94]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2603
	ldr	x0, [sp, 144]
	ldr	x19, [sp, 144]
	bl	_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
.L2603:
	ldr	x0, [sp, 216]
	bl	_ZNK14ImGuiViewportP11GetMainRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 272]
	str	s4, [sp, 276]
	str	s1, [sp, 280]
	str	s0, [sp, 284]
	ldr	x0, [sp, 216]
	bl	_ZNK14ImGuiViewportP11GetWorkRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 288]
	str	s4, [sp, 292]
	str	s1, [sp, 296]
	str	s0, [sp, 300]
	ldr	x0, [sp, 176]
	add	x2, x0, 168
	ldr	x0, [sp, 176]
	add	x0, x0, 176
	mov	x1, x0
	mov	x0, x2
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 160]
	str	s0, [sp, 164]
	add	x1, sp, 160
	add	x0, sp, 288
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 368]
	str	s0, [sp, 372]
	add	x1, sp, 160
	add	x0, sp, 288
	add	x0, x0, 8
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 384]
	str	s0, [sp, 388]
	add	x2, sp, 384
	add	x1, sp, 368
	add	x0, sp, 304
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldrb	w0, [sp, 83]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2606
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2606
	add	x0, sp, 272
	bl	_ZNK6ImRect8GetWidthEv
	fcmpe	s0, #0.0
	bgt	.L2727
	b	.L2607
.L2727:
	add	x0, sp, 272
	bl	_ZNK6ImRect9GetHeightEv
	fcmpe	s0, #0.0
	bgt	.L2728
	b	.L2607
.L2728:
	mov	w0, 1
	b	.L2610
.L2607:
	mov	w0, 0
.L2610:
	cmp	w0, 0
	beq	.L2606
	ldr	x0, [sp, 144]
	add	x1, sp, 304
	bl	_ZL14ClampWindowPosP11ImGuiWindowRK6ImRect
.L2606:
	ldr	x0, [sp, 144]
	add	x0, x0, 24
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2611
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 44]
	b	.L2612
.L2611:
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2613
	ldr	w0, [sp, 60]
	and	w0, w0, 134217728
	cmp	w0, 0
	bne	.L2613
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 52]
	b	.L2612
.L2613:
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 16]
.L2612:
	ldr	x0, [sp, 144]
	str	s0, [x0, 80]
	strb	wzr, [sp, 89]
	ldrb	w0, [sp, 82]
	cmp	w0, 0
	beq	.L2615
	ldr	w0, [sp, 60]
	and	w0, w0, 4096
	cmp	w0, 0
	bne	.L2615
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2616
	mov	w0, 1
	strb	w0, [sp, 89]
	b	.L2617
.L2616:
	ldr	w0, [sp, 60]
	and	w0, w0, 50331648
	cmp	w0, 0
	bne	.L2617
	mov	w0, 1
	strb	w0, [sp, 89]
.L2617:
	bl	_ZN5ImGui20GetTopMostPopupModalEv
	str	x0, [sp, 224]
	ldr	x0, [sp, 224]
	cmp	x0, 0
	beq	.L2618
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 224]
	bl	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2618
	mov	w0, 1
	b	.L2619
.L2618:
	mov	w0, 0
.L2619:
	cmp	w0, 0
	beq	.L2615
	strb	wzr, [sp, 89]
	ldr	x0, [sp, 144]
	ldr	x1, [x0, 856]
	ldr	x0, [sp, 144]
	cmp	x1, x0
	bne	.L2615
	ldr	x0, [sp, 144]
	bl	_ZN5ImGuiL17FindBlockingModalEP11ImGuiWindow
	str	x0, [sp, 232]
	ldr	x0, [sp, 232]
	cmp	x0, 0
	bne	.L2620
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6671
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC250
	add	x0, x0, :lo12:.LC250
	bl	__assert_fail
.L2620:
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 232]
	bl	_ZN5ImGui26BringWindowToDisplayBehindEP11ImGuiWindowS1_
.L2615:
	mov	w0, -1
	str	w0, [sp, 104]
	add	x0, sp, 512
	stp	xzr, xzr, [x0, -24]
	ldr	x0, [sp, 168]
	ldrb	w0, [x0, 126]
	cmp	w0, 0
	beq	.L2621
	mov	w0, 2
	b	.L2622
.L2621:
	mov	w0, 1
.L2622:
	str	w0, [sp, 116]
	ldr	x0, [sp, 168]
	ldr	s0, [x0, 15360]
	mov	w0, 52429
	movk	w0, 0x3f8c, lsl 16
	fmov	s1, w0
	fmul	s2, s0, s1
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 80]
	fmov	s0, 1.0e+0
	fadd	s1, s1, s0
	ldr	x0, [sp, 168]
	ldr	s0, [x0, 15360]
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s3, w0
	fmul	s0, s0, s3
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 120]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 153]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2623
	ldr	x0, [sp, 144]
	add	x4, sp, 304
	add	x3, sp, 488
	add	x2, sp, 104
	add	x1, sp, 152
	mov	x5, x4
	mov	x4, x3
	ldr	w3, [sp, 116]
	bl	_ZN5ImGuiL24UpdateWindowManualResizeEP11ImGuiWindowRK6ImVec2PiiPjRK6ImRect
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2623
	mov	w0, 1
	strb	w0, [sp, 88]
	ldrb	w0, [sp, 88]
	strb	w0, [sp, 87]
.L2623:
	ldr	w1, [sp, 104]
	ldr	x0, [sp, 144]
	sxtb	w1, w1
	strb	w1, [x0, 161]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 153]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2624
	ldr	x0, [sp, 144]
	ldr	s2, [x0, 40]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 44]
	ldr	s0, [sp, 112]
	fsub	s0, s1, s0
	add	x0, sp, 336
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	add	x0, x0, 472
	bl	_ZNK6ImRect7GetSizeEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 384]
	str	s0, [sp, 388]
	ldr	x0, [sp, 144]
	add	x1, x0, 140
	add	x0, sp, 384
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 352]
	str	s0, [sp, 356]
	ldrb	w0, [sp, 92]
	cmp	w0, 0
	beq	.L2625
	add	x0, sp, 368
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	b	.L2626
.L2625:
	ldr	x0, [sp, 144]
	add	x19, x0, 48
	ldr	x0, [sp, 144]
	add	x0, x0, 72
	fmov	s0, 2.0e+0
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 384]
	str	s0, [sp, 388]
	add	x0, sp, 384
	mov	x1, x0
	mov	x0, x19
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 368]
	str	s0, [sp, 372]
.L2626:
	ldrb	w0, [sp, 87]
	cmp	w0, 0
	beq	.L2627
	ldr	s0, [sp, 336]
	b	.L2628
.L2627:
	ldr	s0, [sp, 352]
.L2628:
	str	s0, [sp, 124]
	ldrb	w0, [sp, 88]
	cmp	w0, 0
	beq	.L2629
	ldr	s0, [sp, 340]
	b	.L2630
.L2629:
	ldr	s0, [sp, 356]
.L2630:
	str	s0, [sp, 128]
	ldr	w0, [sp, 60]
	and	w0, w0, 16384
	cmp	w0, 0
	bne	.L2631
	ldr	s0, [sp, 372]
	ldr	s1, [sp, 128]
	fcmpe	s1, s0
	bmi	.L2729
	b	.L2632
.L2729:
	ldr	w0, [sp, 60]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L2632
.L2631:
	mov	w1, 1
	b	.L2634
.L2632:
	mov	w1, 0
.L2634:
	ldr	x0, [sp, 144]
	strb	w1, [x0, 149]
	ldr	w0, [sp, 60]
	and	w0, w0, 32768
	cmp	w0, 0
	bne	.L2635
	ldr	s1, [sp, 368]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 149]
	cmp	w0, 0
	beq	.L2636
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 116]
	b	.L2637
.L2636:
	movi	v0.2s, #0
.L2637:
	ldr	s2, [sp, 124]
	fsub	s0, s2, s0
	fcmpe	s1, s0
	bgt	.L2730
	b	.L2638
.L2730:
	ldr	w0, [sp, 60]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L2638
	ldr	w0, [sp, 60]
	and	w0, w0, 2048
	cmp	w0, 0
	beq	.L2638
.L2635:
	mov	w1, 1
	b	.L2640
.L2638:
	mov	w1, 0
.L2640:
	ldr	x0, [sp, 144]
	strb	w1, [x0, 148]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 148]
	cmp	w0, 0
	beq	.L2641
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 149]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2641
	ldr	s0, [sp, 372]
	ldr	s1, [sp, 128]
	fcmpe	s1, s0
	bmi	.L2731
	b	.L2642
.L2731:
	ldr	w0, [sp, 60]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L2642
	mov	w1, 1
	b	.L2644
.L2642:
	mov	w1, 0
.L2644:
	ldr	x0, [sp, 144]
	strb	w1, [x0, 149]
.L2641:
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 149]
	cmp	w0, 0
	beq	.L2645
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 116]
	b	.L2646
.L2645:
	movi	v0.2s, #0
.L2646:
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 148]
	cmp	w0, 0
	beq	.L2647
	ldr	x0, [sp, 176]
	ldr	s1, [x0, 116]
	b	.L2648
.L2647:
	movi	v1.2s, #0
.L2648:
	add	x0, sp, 384
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 384]
	str	x1, [x0, 140]
.L2624:
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2649
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	bne	.L2649
	ldrb	w0, [sp, 94]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2649
	ldr	x0, [sp, 200]
	add	x0, x0, 536
	b	.L2650
.L2649:
	add	x0, sp, 272
.L2650:
	ldp	x0, x1, [x0]
	stp	x0, x1, [sp, 320]
	ldr	x0, [sp, 144]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 336]
	str	s4, [sp, 340]
	str	s1, [sp, 344]
	str	s0, [sp, 348]
	ldr	x0, [sp, 144]
	bl	_ZNK11ImGuiWindow12TitleBarRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 352]
	str	s4, [sp, 356]
	str	s1, [sp, 360]
	str	s0, [sp, 364]
	ldr	x0, [sp, 144]
	add	x2, x0, 512
	ldp	x0, x1, [sp, 336]
	stp	x0, x1, [x2, -56]
	ldr	x0, [sp, 144]
	add	x0, x0, 456
	add	x1, sp, 320
	bl	_ZN6ImRect8ClipWithERKS_
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	ldr	s0, [x1, 24]
	str	s0, [x0, 472]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 28]
	ldr	x0, [sp, 144]
	ldr	s0, [sp, 112]
	fadd	s0, s1, s0
	str	s0, [x0, 476]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 32]
	fadd	s1, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 140]
	ldr	x0, [sp, 144]
	fsub	s0, s1, s0
	str	s0, [x0, 480]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 28]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 36]
	fadd	s1, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 144]
	ldr	x0, [sp, 144]
	fsub	s0, s1, s0
	str	s0, [x0, 484]
	ldr	w0, [sp, 60]
	and	w0, w0, 1024
	cmp	w0, 0
	bne	.L2651
	ldr	w0, [sp, 60]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L2652
.L2651:
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 72]
	b	.L2653
.L2652:
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 84]
.L2653:
	str	s0, [sp, 132]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 472]
	fmov	s0, 5.0e-1
	fadd	s8, s1, s0
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 72]
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	fmov	s2, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 84]
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
	fadd	s0, s8, s0
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorf
	str	s0, [x19, 488]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 476]
	fmov	s0, 5.0e-1
	fadd	s1, s1, s0
	ldr	s0, [sp, 132]
	fadd	s0, s1, s0
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorf
	str	s0, [x19, 492]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 480]
	fmov	s0, 5.0e-1
	fadd	s8, s1, s0
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 72]
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	fmov	s2, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 84]
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
	fsub	s0, s8, s0
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorf
	str	s0, [x19, 496]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 484]
	fmov	s0, 5.0e-1
	fadd	s1, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 84]
	fsub	s0, s1, s0
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorf
	str	s0, [x19, 500]
	ldr	x0, [sp, 144]
	add	x0, x0, 488
	add	x1, sp, 320
	bl	_ZN6ImRect12ClipWithFullERKS_
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 32]
	fcmpe	s0, #0.0
	bgt	.L2732
	b	.L2654
.L2732:
	ldr	w0, [sp, 60]
	and	w0, w0, 33554432
	cmp	w0, 0
	bne	.L2654
	ldr	w0, [sp, 60]
	and	w0, w0, 64
	cmp	w0, 0
	bne	.L2654
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 32]
	mov	w0, 26214
	movk	w0, 0x3f26, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorf
	str	s0, [x19, 584]
	b	.L2656
.L2654:
	ldr	x0, [sp, 168]
	ldr	s1, [x0, 15360]
	fmov	s0, 1.6e+1
	fmul	s0, s1, s0
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorf
	str	s0, [x19, 584]
.L2656:
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 48]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 72]
	fadd	s0, s0, s0
	fadd	s8, s1, s0
	ldr	x0, [sp, 144]
	add	x0, x0, 472
	bl	_ZNK6ImRect8GetWidthEv
	fsub	s0, s8, s0
	ldr	x19, [sp, 144]
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [x19, 108]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 52]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 76]
	fadd	s0, s0, s0
	fadd	s8, s1, s0
	ldr	x0, [sp, 144]
	add	x0, x0, 472
	bl	_ZNK6ImRect9GetHeightEv
	fsub	s0, s8, s0
	ldr	x19, [sp, 144]
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [x19, 112]
	ldr	x0, [sp, 144]
	ldr	x19, [sp, 144]
	bl	_ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindow
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 100]
	str	s0, [x19, 104]
	add	x0, sp, 384
	mov	w1, 2139095039
	fmov	s1, w1
	mov	w1, 2139095039
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 384]
	str	x1, [x0, 116]
	ldr	x0, [sp, 144]
	ldr	x0, [x0, 632]
	ldr	w0, [x0]
	cmp	w0, 1
	bne	.L2657
	ldr	x0, [sp, 144]
	ldr	x0, [x0, 632]
	mov	w1, 0
	bl	_ZN8ImVectorI9ImDrawCmdEixEi
	ldr	w0, [x0, 32]
	cmp	w0, 0
	beq	.L2736
.L2657:
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6780
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC251
	add	x0, x0, :lo12:.LC251
	bl	__assert_fail
.L2736:
	ldr	x0, [sp, 144]
	ldr	x2, [x0, 632]
	ldr	x0, [sp, 168]
	ldr	x0, [x0, 15352]
	ldr	x0, [x0, 64]
	ldr	x0, [x0, 8]
	mov	x1, x0
	mov	x0, x2
	bl	_ZN10ImDrawList13PushTextureIDEPv
	add	x0, sp, 320
	add	x1, x0, 8
	add	x0, sp, 320
	mov	w2, 0
	bl	_ZN5ImGui12PushClipRectERK6ImVec2S2_b
	strb	wzr, [sp, 90]
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2659
	ldr	w0, [sp, 60]
	and	w0, w0, 67108864
	cmp	w0, 0
	bne	.L2659
	ldrb	w0, [sp, 94]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2659
	ldr	x0, [sp, 200]
	ldr	w0, [x0, 368]
	cmp	w0, 1
	ble	.L2660
	ldr	x0, [sp, 200]
	add	x2, x0, 368
	ldr	x0, [sp, 200]
	ldr	w0, [x0, 368]
	sub	w0, w0, #2
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	b	.L2661
.L2660:
	mov	x0, 0
.L2661:
	str	x0, [sp, 240]
	ldr	x0, [sp, 240]
	cmp	x0, 0
	beq	.L2662
	ldr	x0, [sp, 240]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 368]
	str	s4, [sp, 372]
	str	s1, [sp, 376]
	str	s0, [sp, 380]
	ldr	x0, [sp, 144]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	add	x1, sp, 384
	add	x0, sp, 368
	bl	_ZNK6ImRect8OverlapsERKS_
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2662
	mov	w0, 1
	b	.L2663
.L2662:
	mov	w0, 0
.L2663:
	strb	w0, [sp, 97]
	ldr	x0, [sp, 200]
	ldr	x0, [x0, 632]
	ldr	w0, [x0, 32]
	cmp	w0, 0
	cset	w0, gt
	strb	w0, [sp, 98]
	ldr	x0, [sp, 144]
	ldr	x0, [x0, 632]
	bl	_ZN8ImVectorI9ImDrawCmdE4backEv
	ldr	w0, [x0, 32]
	cmp	w0, 0
	bne	.L2664
	ldrb	w0, [sp, 98]
	cmp	w0, 0
	beq	.L2664
	ldrb	w0, [sp, 97]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2664
	mov	w0, 1
	b	.L2665
.L2664:
	mov	w0, 0
.L2665:
	cmp	w0, 0
	beq	.L2659
	mov	w0, 1
	strb	w0, [sp, 90]
.L2659:
	ldrb	w0, [sp, 90]
	cmp	w0, 0
	beq	.L2666
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 200]
	ldr	x1, [x1, 632]
	str	x1, [x0, 632]
.L2666:
	ldr	x0, [sp, 168]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L2667
	ldr	x0, [sp, 168]
	ldr	x0, [x0, 18904]
	b	.L2668
.L2667:
	ldr	x0, [sp, 168]
	ldr	x0, [x0, 18536]
.L2668:
	str	x0, [sp, 248]
	ldrb	w0, [sp, 89]
	cmp	w0, 0
	bne	.L2669
	ldr	x0, [sp, 248]
	cmp	x0, 0
	beq	.L2670
	ldr	x0, [sp, 144]
	ldr	x1, [x0, 872]
	ldr	x0, [sp, 248]
	ldr	x0, [x0, 872]
	cmp	x1, x0
	bne	.L2670
.L2669:
	mov	w0, 1
	b	.L2671
.L2670:
	mov	w0, 0
.L2671:
	strb	w0, [sp, 99]
	ldr	x0, [sp, 144]
	add	x2, sp, 488
	add	x1, sp, 352
	ldr	s0, [sp, 120]
	mov	x4, x2
	ldr	w3, [sp, 116]
	ldrb	w2, [sp, 99]
	bl	_ZN5ImGuiL23RenderWindowDecorationsEP11ImGuiWindowRK6ImRectbiPKjf
	ldrb	w0, [sp, 90]
	cmp	w0, 0
	beq	.L2672
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	add	x1, x1, 640
	str	x1, [x0, 632]
.L2672:
	ldr	w0, [sp, 60]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L2673
	ldr	w0, [sp, 60]
	and	w0, w0, 2048
	cmp	w0, 0
	beq	.L2673
	mov	w0, 1
	b	.L2674
.L2673:
	mov	w0, 0
.L2674:
	strb	w0, [sp, 100]
	ldr	w0, [sp, 60]
	and	w0, w0, 8
	cmp	w0, 0
	cset	w0, eq
	strb	w0, [sp, 101]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 64]
	fcmp	s0, #0.0
	beq	.L2675
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 64]
	b	.L2676
.L2675:
	ldrb	w0, [sp, 100]
	cmp	w0, 0
	beq	.L2677
	ldr	x0, [sp, 144]
	ldr	s2, [x0, 48]
	b	.L2678
.L2677:
	movi	v2.2s, #0
.L2678:
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 32]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 72]
	fadd	s0, s0, s0
	fsub	s1, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 140]
	fsub	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
.L2676:
	str	s0, [sp, 136]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 68]
	fcmp	s0, #0.0
	beq	.L2679
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 68]
	b	.L2680
.L2679:
	ldrb	w0, [sp, 101]
	cmp	w0, 0
	beq	.L2681
	ldr	x0, [sp, 144]
	ldr	s2, [x0, 52]
	b	.L2682
.L2681:
	movi	v2.2s, #0
.L2682:
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 36]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 76]
	fadd	s0, s0, s0
	fsub	s1, s1, s0
	ldr	s0, [sp, 112]
	fsub	s1, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 144]
	fsub	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
.L2680:
	str	s0, [sp, 140]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 472]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 100]
	fsub	s8, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 72]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 84]
	bl	_Z5ImMaxIfET_S0_S0_
	fadd	s0, s8, s0
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorf
	str	s0, [x19, 504]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 476]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 104]
	fsub	s8, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 76]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 84]
	bl	_Z5ImMaxIfET_S0_S0_
	fadd	s0, s8, s0
	ldr	x19, [sp, 144]
	bl	_ZL7ImFloorf
	str	s0, [x19, 508]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 504]
	ldr	x0, [sp, 144]
	ldr	s0, [sp, 136]
	fadd	s0, s1, s0
	str	s0, [x0, 512]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 508]
	ldr	x0, [sp, 144]
	ldr	s0, [sp, 140]
	fadd	s0, s1, s0
	str	s0, [x0, 516]
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 144]
	add	x2, x1, 512
	add	x0, x0, 512
	ldp	x0, x1, [x0, -8]
	stp	x0, x1, [x2, 8]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 100]
	fsub	s1, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 72]
	ldr	x0, [sp, 144]
	fadd	s0, s1, s0
	str	s0, [x0, 552]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 28]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 104]
	fsub	s1, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 76]
	fadd	s1, s1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [sp, 112]
	fadd	s0, s1, s0
	str	s0, [x0, 556]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 552]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 64]
	fcmp	s0, #0.0
	beq	.L2683
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 64]
	b	.L2684
.L2683:
	ldr	x0, [sp, 144]
	ldr	s2, [x0, 32]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 72]
	fadd	s0, s0, s0
	fsub	s2, s2, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 140]
	fsub	s0, s2, s0
.L2684:
	ldr	x0, [sp, 144]
	fadd	s0, s0, s1
	str	s0, [x0, 560]
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 556]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 68]
	fcmp	s0, #0.0
	beq	.L2685
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 68]
	b	.L2686
.L2685:
	ldr	x0, [sp, 144]
	ldr	s2, [x0, 36]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 76]
	fadd	s0, s0, s0
	fsub	s2, s2, s0
	ldr	s0, [sp, 112]
	fsub	s2, s2, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 144]
	fsub	s0, s2, s0
.L2686:
	ldr	x0, [sp, 144]
	fadd	s0, s0, s1
	str	s0, [x0, 564]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 72]
	movi	v1.2s, #0
	fadd	s1, s0, s1
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 100]
	ldr	x0, [sp, 144]
	fsub	s0, s1, s0
	str	s0, [x0, 292]
	ldr	x0, [sp, 144]
	str	wzr, [x0, 300]
	ldr	x0, [sp, 144]
	str	wzr, [x0, 296]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 24]
	fcvt	d1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 72]
	fcvt	d0, s0
	fadd	d1, d1, d0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 100]
	fcvt	d0, s0
	fsub	d1, d1, d0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 296]
	fcvt	d0, s0
	fadd	d0, d1, d0
	str	d0, [sp, 256]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 28]
	fcvt	d1, s0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 76]
	fcvt	d0, s0
	fadd	d1, d1, d0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 104]
	fcvt	d0, s0
	fsub	d1, d1, d0
	ldr	s0, [sp, 112]
	fcvt	d0, s0
	fadd	d0, d1, d0
	str	d0, [sp, 264]
	ldr	d0, [sp, 256]
	fcvt	s2, d0
	ldr	d0, [sp, 264]
	fcvt	s0, d0
	add	x0, sp, 384
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 384]
	str	x1, [x0, 240]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 240]
	fcvt	d0, s0
	ldr	d1, [sp, 256]
	fsub	d0, d1, d0
	fcvt	s2, d0
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 244]
	fcvt	d0, s0
	ldr	d1, [sp, 264]
	fsub	d0, d1, d0
	fcvt	s0, d0
	add	x0, sp, 384
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 384]
	str	x1, [x0, 304]
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	ldr	x1, [x1, 240]
	str	x1, [x0, 224]
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	ldr	x1, [x1, 224]
	str	x1, [x0, 232]
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	ldr	x1, [x1, 240]
	str	x1, [x0, 248]
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	ldr	x1, [x1, 240]
	str	x1, [x0, 256]
	add	x0, sp, 384
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 144]
	ldr	x1, [sp, 384]
	str	x1, [x0, 272]
	ldr	x0, [sp, 144]
	add	x1, x0, 272
	ldr	x0, [sp, 144]
	ldr	x1, [x1]
	str	x1, [x0, 264]
	ldr	x0, [sp, 144]
	str	wzr, [x0, 284]
	ldr	x1, [sp, 144]
	ldr	s0, [x0, 284]
	str	s0, [x1, 280]
	ldr	x0, [sp, 144]
	strb	wzr, [x0, 289]
	ldr	x1, [sp, 144]
	ldrb	w0, [x0, 289]
	strb	w0, [x1, 288]
	ldr	x0, [sp, 144]
	str	wzr, [x0, 312]
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	ldrsh	w1, [x1, 318]
	strh	w1, [x0, 316]
	ldr	x0, [sp, 144]
	strh	wzr, [x0, 318]
	ldr	x0, [sp, 144]
	strb	wzr, [x0, 320]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 112]
	ldr	x0, [sp, 144]
	fcmpe	s0, #0.0
	cset	w1, gt
	and	w1, w1, 255
	strb	w1, [x0, 321]
	ldr	x0, [sp, 144]
	strb	wzr, [x0, 322]
	ldr	x0, [sp, 144]
	add	x2, x0, 332
	ldr	x0, [sp, 176]
	ldr	s0, [x0, 76]
	ldrb	w1, [sp, 82]
	mov	x0, x2
	bl	_ZN16ImGuiMenuColumns6UpdateEfb
	ldr	x0, [sp, 144]
	str	wzr, [x0, 360]
	ldr	x0, [sp, 144]
	str	wzr, [x0, 364]
	ldr	x0, [sp, 144]
	add	x0, x0, 368
	mov	w1, 0
	bl	_ZN8ImVectorIP11ImGuiWindowE6resizeEi
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	add	x1, x1, 592
	str	x1, [x0, 384]
	ldr	x0, [sp, 144]
	str	xzr, [x0, 392]
	ldr	x0, [sp, 144]
	mov	w1, 1
	str	w1, [x0, 404]
	ldr	x0, [sp, 200]
	cmp	x0, 0
	beq	.L2687
	ldr	x0, [sp, 200]
	ldr	w0, [x0, 404]
	b	.L2688
.L2687:
	mov	w0, 1
.L2688:
	ldr	x1, [sp, 144]
	str	w0, [x1, 408]
	ldr	x1, [sp, 144]
	ldr	x0, [sp, 144]
	ldr	s0, [x1, 584]
	str	s0, [x0, 412]
	ldr	x0, [sp, 144]
	fmov	s0, -1.0e+0
	str	s0, [x0, 416]
	ldr	x0, [sp, 144]
	add	x0, x0, 424
	mov	w1, 0
	bl	_ZN8ImVectorIfE6resizeEi
	ldr	x0, [sp, 144]
	add	x0, x0, 440
	mov	w1, 0
	bl	_ZN8ImVectorIfE6resizeEi
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 176]
	cmp	w0, 0
	ble	.L2689
	ldr	x0, [sp, 144]
	ldrsb	w1, [x0, 176]
	and	w1, w1, 255
	sub	w1, w1, #1
	and	w1, w1, 255
	sxtb	w1, w1
	strb	w1, [x0, 176]
.L2689:
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 177]
	cmp	w0, 0
	ble	.L2690
	ldr	x0, [sp, 144]
	ldrsb	w1, [x0, 177]
	and	w1, w1, 255
	sub	w1, w1, #1
	and	w1, w1, 255
	sxtb	w1, w1
	strb	w1, [x0, 177]
.L2690:
	ldrb	w0, [sp, 89]
	cmp	w0, 0
	beq	.L2691
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	ldr	x0, [sp, 144]
	mov	w1, 0
	bl	_ZN5ImGui13NavInitWindowEP11ImGuiWindowb
.L2691:
	ldr	w0, [sp, 60]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L2692
	ldr	x19, [sp, 144]
	ldr	s1, [sp, 352]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 84]
	fadd	s4, s1, s0
	ldr	s5, [sp, 356]
	ldr	s1, [sp, 360]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 84]
	fsub	s0, s1, s0
	ldr	s1, [sp, 364]
	add	x0, sp, 384
	fmov	s3, s1
	fmov	s2, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	add	x0, sp, 384
	ldr	x3, [sp, 64]
	ldr	x2, [sp, 72]
	mov	x1, x0
	mov	x0, x19
	bl	_ZN5ImGuiL28RenderWindowTitleBarContentsEP11ImGuiWindowRK6ImRectPKcPb
.L2692:
	ldr	x0, [sp, 144]
	strh	wzr, [x0, 570]
	ldr	x1, [sp, 144]
	ldrsh	w0, [x0, 570]
	strh	w0, [x1, 568]
	ldr	x0, [sp, 144]
	ldr	w19, [x0, 92]
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w20, [x0, 1800]
	add	x0, sp, 352
	add	x1, x0, 8
	add	x0, sp, 352
	mov	w2, 0
	bl	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2693
	mov	w0, 1
	b	.L2694
.L2693:
	mov	w0, 0
.L2694:
	add	x1, sp, 352
	mov	x3, x1
	mov	w2, w0
	mov	w1, w20
	mov	w0, w19
	bl	_ZN5ImGui15SetLastItemDataEjiiRK6ImRect
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1804]
	cmp	w0, 0
	beq	.L2697
	ldr	x0, [sp, 144]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1804]
	cmp	w1, w0
	beq	.L2696
	ldr	x0, [sp, 144]
	ldr	w1, [x0, 92]
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldr	w0, [x0, 1804]
	cmp	w1, w0
	bne	.L2697
.L2696:
	bl	_ZN5ImGui34DebugLocateItemResolveWithLastItemEv
	b	.L2697
.L2555:
	ldr	x0, [sp, 144]
	bl	_ZL16SetCurrentWindowP11ImGuiWindow
.L2697:
	ldr	x0, [sp, 144]
	add	x3, x0, 488
	ldr	x0, [sp, 144]
	add	x0, x0, 496
	mov	w2, 1
	mov	x1, x0
	mov	x0, x3
	bl	_ZN5ImGui12PushClipRectERK6ImVec2S2_b
	ldr	x0, [sp, 144]
	strb	wzr, [x0, 152]
	ldr	x0, [sp, 144]
	ldrsh	w1, [x0, 162]
	and	w1, w1, 65535
	add	w1, w1, 1
	and	w1, w1, 65535
	sxth	w1, w1
	strh	w1, [x0, 162]
	ldr	x1, [sp, 168]
	mov	x0, 18272
	add	x0, x1, x0
	bl	_ZN19ImGuiNextWindowData10ClearFlagsEv
	ldrb	w0, [sp, 93]
	cmp	w0, 0
	beq	.L2698
	ldr	w0, [sp, 60]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2699
	ldr	w0, [sp, 60]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L2700
	adrp	x0, .LC243
	add	x3, x0, :lo12:.LC243
	mov	w2, 6943
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC252
	add	x0, x0, :lo12:.LC252
	bl	__assert_fail
.L2700:
	ldr	w0, [sp, 60]
	and	w0, w0, 64
	cmp	w0, 0
	bne	.L2701
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 176]
	cmp	w0, 0
	bgt	.L2701
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 177]
	cmp	w0, 0
	bgt	.L2701
	ldr	w0, [sp, 60]
	and	w0, w0, 8388608
	cmp	w0, 0
	beq	.L2702
	ldr	x0, [sp, 168]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2220]
	cmp	w0, 0
	beq	.L2702
	ldr	x0, [sp, 168]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L2702
	ldr	x0, [sp, 168]
	ldr	x0, [x0, 18536]
	ldr	x1, [x0, 880]
	ldr	x0, [sp, 144]
	ldr	x0, [x0, 880]
	cmp	x1, x0
	bne	.L2702
	mov	w0, 1
	b	.L2703
.L2702:
	mov	w0, 0
.L2703:
	strb	w0, [sp, 102]
	ldr	x0, [sp, 168]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2701
	ldrb	w0, [sp, 102]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2701
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 456]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 464]
	fcmpe	s1, s0
	bge	.L2704
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 460]
	ldr	x0, [sp, 144]
	ldr	s0, [x0, 468]
	fcmpe	s1, s0
	bge	.L2704
	b	.L2701
.L2704:
	ldr	x0, [sp, 144]
	mov	w1, 1
	strb	w1, [x0, 184]
.L2701:
	ldr	x0, [sp, 200]
	cmp	x0, 0
	beq	.L2706
	ldr	x0, [sp, 200]
	ldrb	w0, [x0, 153]
	cmp	w0, 0
	bne	.L2707
	ldr	x0, [sp, 200]
	ldrsb	w0, [x0, 184]
	cmp	w0, 0
	ble	.L2706
.L2707:
	ldr	x0, [sp, 144]
	mov	w1, 1
	strb	w1, [x0, 184]
.L2706:
	ldr	x0, [sp, 200]
	cmp	x0, 0
	beq	.L2699
	ldr	x0, [sp, 200]
	ldrb	w0, [x0, 153]
	cmp	w0, 0
	bne	.L2708
	ldr	x0, [sp, 200]
	ldrsb	w0, [x0, 185]
	cmp	w0, 0
	ble	.L2699
.L2708:
	ldr	x0, [sp, 144]
	mov	w1, 1
	strb	w1, [x0, 185]
.L2699:
	ldr	x0, [sp, 176]
	ldr	s0, [x0]
	fcmpe	s0, #0.0
	bls	.L2733
	b	.L2709
.L2733:
	ldr	x0, [sp, 144]
	mov	w1, 1
	strb	w1, [x0, 184]
.L2709:
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 184]
	cmp	w0, 0
	bgt	.L2711
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 185]
	cmp	w0, 0
	ble	.L2712
.L2711:
	mov	w0, 1
	b	.L2713
.L2712:
	mov	w0, 0
.L2713:
	strb	w0, [sp, 103]
	ldrb	w0, [sp, 103]
	cmp	w0, 0
	bne	.L2714
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 186]
	cmp	w0, 0
	ble	.L2715
.L2714:
	mov	w1, 1
	b	.L2716
.L2715:
	mov	w1, 0
.L2716:
	ldr	x0, [sp, 144]
	strb	w1, [x0, 157]
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 187]
	cmp	w0, 0
	ble	.L2717
	ldr	x0, [sp, 144]
	ldrsb	w1, [x0, 187]
	and	w1, w1, 255
	sub	w1, w1, #1
	and	w1, w1, 255
	sxtb	w1, w1
	strb	w1, [x0, 187]
	ldr	x0, [sp, 144]
	ldr	w2, [x0, 12]
	ldr	x0, [sp, 144]
	mov	w1, 512
	movk	w1, 0xc, lsl 16
	orr	w1, w2, w1
	str	w1, [x0, 12]
.L2717:
	strb	wzr, [sp, 91]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 153]
	cmp	w0, 0
	bne	.L2718
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 150]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2718
	ldrb	w0, [sp, 103]
	cmp	w0, 0
	beq	.L2719
.L2718:
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 176]
	cmp	w0, 0
	bgt	.L2719
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 177]
	cmp	w0, 0
	bgt	.L2719
	ldr	x0, [sp, 144]
	ldrsb	w0, [x0, 185]
	cmp	w0, 0
	bgt	.L2719
	mov	w0, 1
	strb	w0, [sp, 91]
.L2719:
	ldr	x0, [sp, 144]
	ldrb	w1, [sp, 91]
	strb	w1, [x0, 155]
.L2698:
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 155]
	eor	w0, w0, 1
	and	w0, w0, 255
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 504]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L2721
	bl	__stack_chk_fail
.L2721:
	mov	w0, w1
	ldr	d8, [sp, 32]
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp]
	add	sp, sp, 512
	.cfi_restore 29
	.cfi_restore 30
	.cfi_restore 19
	.cfi_restore 20
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1846:
	.size	_ZN5ImGui5BeginEPKcPbi, .-_ZN5ImGui5BeginEPKcPbi
	.section	.rodata
	.align	3
.LC253:
	.string	"void ImGui::End()"
	.align	3
.LC254:
	.string	"(g.CurrentWindowStack.Size > 1) && \"Calling End() too many times!\""
	.align	3
.LC255:
	.string	"g.CurrentWindowStack.Size > 0"
	.align	3
.LC256:
	.string	"(g.WithinEndChild) && \"Must call EndChild() and not End()!\""
	.text
	.align	2
	.global	_ZN5ImGui3EndEv
	.type	_ZN5ImGui3EndEv, %function
_ZN5ImGui3EndEv:
.LFB1850:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 16]
	ldr	x0, [sp, 16]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 24]
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 15984]
	cmp	w0, 1
	bgt	.L2739
	ldr	x0, [sp, 16]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3629]
	cmp	w0, 0
	beq	.L2739
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 15984]
	cmp	w0, 1
	bgt	.L2751
	adrp	x0, .LC253
	add	x3, x0, :lo12:.LC253
	mov	w2, 6993
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC254
	add	x0, x0, :lo12:.LC254
	bl	__assert_fail
.L2739:
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 15984]
	cmp	w0, 0
	bgt	.L2742
	adrp	x0, .LC253
	add	x3, x0, :lo12:.LC253
	mov	w2, 6996
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC255
	add	x0, x0, :lo12:.LC255
	bl	__assert_fail
.L2742:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L2743
	ldr	x0, [sp, 16]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3630]
	cmp	w0, 0
	bne	.L2743
	adrp	x0, .LC253
	add	x3, x0, :lo12:.LC253
	mov	w2, 7000
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC256
	add	x0, x0, :lo12:.LC256
	bl	__assert_fail
.L2743:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 392]
	cmp	x0, 0
	beq	.L2744
	bl	_ZN5ImGui10EndColumnsEv
.L2744:
	bl	_ZN5ImGui11PopClipRectEv
	bl	_ZN5ImGui13PopFocusScopeEv
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2745
	bl	_ZN5ImGui9LogFinishEv
.L2745:
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 289]
	cmp	w0, 0
	beq	.L2746
	bl	_ZN5ImGui51ErrorCheckUsingSetCursorPosToExtendParentBoundariesEv
.L2746:
	ldr	x1, [sp, 16]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE4backEv
	mov	x2, x0
	ldr	x1, [sp, 16]
	mov	x0, 18432
	add	x0, x1, x0
	sub	x0, x0, #220
	add	x1, x2, 8
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	ldr	q0, [x1, 32]
	str	q0, [x0, 32]
	ldr	q0, [x1, 44]
	str	q0, [x0, 44]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L2747
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2128]
	sub	w1, w0, #1
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	str	w1, [x0, 2128]
.L2747:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L2748
	ldr	x1, [sp, 16]
	mov	x0, 18496
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataE8pop_backEv
.L2748:
	ldr	x1, [sp, 16]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE4backEv
	add	x0, x0, 68
	bl	_ZN15ImGuiStackSizes23CompareWithCurrentStateEv
	ldr	x1, [sp, 16]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE8pop_backEv
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 15984]
	cmp	w0, 0
	beq	.L2749
	ldr	x1, [sp, 16]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE4backEv
	ldr	x0, [x0]
	b	.L2750
.L2749:
	mov	x0, 0
.L2750:
	bl	_ZL16SetCurrentWindowP11ImGuiWindow
	b	.L2738
.L2751:
	nop
.L2738:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1850:
	.size	_ZN5ImGui3EndEv, .-_ZN5ImGui3EndEv
	.section	.rodata
	.align	3
.LC257:
	.string	"void ImGui::BringWindowToFocusFront(ImGuiWindow*)"
	.align	3
.LC258:
	.string	"window == window->RootWindow"
	.align	3
.LC259:
	.string	"g.WindowsFocusOrder[cur_order] == window"
	.align	3
.LC260:
	.string	"g.WindowsFocusOrder[n]->FocusOrder == n"
	.text
	.align	2
	.global	_ZN5ImGui23BringWindowToFocusFrontEP11ImGuiWindow
	.type	_ZN5ImGui23BringWindowToFocusFrontEP11ImGuiWindow, %function
_ZN5ImGui23BringWindowToFocusFrontEP11ImGuiWindow:
.LFB1851:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	beq	.L2753
	adrp	x0, .LC257
	add	x3, x0, :lo12:.LC257
	mov	w2, 7029
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC258
	add	x0, x0, :lo12:.LC258
	bl	__assert_fail
.L2753:
	ldr	x0, [sp, 40]
	ldrsh	w0, [x0, 170]
	str	w0, [sp, 64]
	ldr	x1, [sp, 72]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	beq	.L2754
	adrp	x0, .LC257
	add	x3, x0, :lo12:.LC257
	mov	w2, 7032
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC259
	add	x0, x0, :lo12:.LC259
	bl	__assert_fail
.L2754:
	ldr	x1, [sp, 72]
	mov	x0, 15952
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowE4backEv
	ldr	x0, [x0]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2760
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 15952]
	sub	w0, w0, #1
	str	w0, [sp, 68]
	ldr	w0, [sp, 64]
	str	w0, [sp, 60]
	b	.L2757
.L2759:
	ldr	x1, [sp, 72]
	mov	x0, 15952
	add	x2, x1, x0
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x19, [x0]
	ldr	x1, [sp, 72]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	str	x19, [x0]
	ldr	x1, [sp, 72]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldrsh	w1, [x0, 170]
	and	w1, w1, 65535
	sub	w1, w1, #1
	and	w1, w1, 65535
	sxth	w1, w1
	strh	w1, [x0, 170]
	ldr	x1, [sp, 72]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldrsh	w0, [x0, 170]
	mov	w1, w0
	ldr	w0, [sp, 60]
	cmp	w0, w1
	beq	.L2758
	adrp	x0, .LC257
	add	x3, x0, :lo12:.LC257
	mov	w2, 7041
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC260
	add	x0, x0, :lo12:.LC260
	bl	__assert_fail
.L2758:
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L2757:
	ldr	w1, [sp, 60]
	ldr	w0, [sp, 68]
	cmp	w1, w0
	blt	.L2759
	ldr	x19, [sp, 40]
	ldr	x1, [sp, 72]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 68]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	str	x19, [x0]
	ldr	w0, [sp, 68]
	sxth	w1, w0
	ldr	x0, [sp, 40]
	strh	w1, [x0, 170]
	b	.L2752
.L2760:
	nop
.L2752:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1851:
	.size	_ZN5ImGui23BringWindowToFocusFrontEP11ImGuiWindow, .-_ZN5ImGui23BringWindowToFocusFrontEP11ImGuiWindow
	.align	2
	.global	_ZN5ImGui25BringWindowToDisplayFrontEP11ImGuiWindow
	.type	_ZN5ImGui25BringWindowToDisplayFrontEP11ImGuiWindow, %function
_ZN5ImGui25BringWindowToDisplayFrontEP11ImGuiWindow:
.LFB1852:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowE4backEv
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 40]
	cmp	x1, x0
	beq	.L2768
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	beq	.L2768
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15936]
	sub	w0, w0, #2
	str	w0, [sp, 60]
	b	.L2765
.L2767:
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2766
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	mov	x19, x0
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x2, x1, x0
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	mov	x3, x0
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 15936]
	ldr	w0, [sp, 60]
	sub	w0, w1, w0
	sub	w0, w0, #1
	sxtw	x0, w0
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x3
	mov	x0, x19
	bl	memmove
	ldr	x19, [sp, 40]
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x2, x1, x0
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15936]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	str	x19, [x0]
	b	.L2761
.L2766:
	ldr	w0, [sp, 60]
	sub	w0, w0, #1
	str	w0, [sp, 60]
.L2765:
	ldr	w0, [sp, 60]
	cmp	w0, 0
	bge	.L2767
	b	.L2761
.L2768:
	nop
.L2761:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1852:
	.size	_ZN5ImGui25BringWindowToDisplayFrontEP11ImGuiWindow, .-_ZN5ImGui25BringWindowToDisplayFrontEP11ImGuiWindow
	.align	2
	.global	_ZN5ImGui24BringWindowToDisplayBackEP11ImGuiWindow
	.type	_ZN5ImGui24BringWindowToDisplayBackEP11ImGuiWindow, %function
_ZN5ImGui24BringWindowToDisplayBackEP11ImGuiWindow:
.LFB1853:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2775
	str	wzr, [sp, 52]
	b	.L2772
.L2774:
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2773
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	mov	w1, 1
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	mov	x19, x0
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	mov	x1, x0
	ldrsw	x0, [sp, 52]
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x0, x19
	bl	memmove
	ldr	x19, [sp, 40]
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	str	x19, [x0]
	b	.L2769
.L2773:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L2772:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	blt	.L2774
	b	.L2769
.L2775:
	nop
.L2769:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1853:
	.size	_ZN5ImGui24BringWindowToDisplayBackEP11ImGuiWindow, .-_ZN5ImGui24BringWindowToDisplayBackEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC261:
	.string	"void ImGui::BringWindowToDisplayBehind(ImGuiWindow*, ImGuiWindow*)"
	.align	3
.LC262:
	.string	"window != __null && behind_window != __null"
	.text
	.align	2
	.global	_ZN5ImGui26BringWindowToDisplayBehindEP11ImGuiWindowS1_
	.type	_ZN5ImGui26BringWindowToDisplayBehindEP11ImGuiWindowS1_, %function
_ZN5ImGui26BringWindowToDisplayBehindEP11ImGuiWindowS1_:
.LFB1854:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L2777
	ldr	x0, [sp, 32]
	cmp	x0, 0
	bne	.L2781
.L2777:
	adrp	x0, .LC261
	add	x3, x0, :lo12:.LC261
	mov	w2, 7078
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC262
	add	x0, x0, :lo12:.LC262
	bl	__assert_fail
.L2781:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 856]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 856]
	str	x0, [sp, 32]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow
	str	w0, [sp, 48]
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow
	str	w0, [sp, 52]
	ldr	w1, [sp, 48]
	ldr	w0, [sp, 52]
	cmp	w1, w0
	bge	.L2779
	ldr	w1, [sp, 52]
	ldr	w0, [sp, 48]
	sub	w0, w1, w0
	sub	w0, w0, #1
	sxtw	x0, w0
	lsl	x0, x0, 3
	str	x0, [sp, 72]
	ldr	x0, [sp, 56]
	ldr	x1, [x0, 15944]
	ldrsw	x0, [sp, 48]
	lsl	x0, x0, 3
	add	x3, x1, x0
	ldr	x0, [sp, 56]
	ldr	x1, [x0, 15944]
	ldrsw	x0, [sp, 48]
	add	x0, x0, 1
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x2, [sp, 72]
	mov	x1, x0
	mov	x0, x3
	bl	memmove
	ldr	x19, [sp, 40]
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x2, x1, x0
	ldr	w0, [sp, 52]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	str	x19, [x0]
	b	.L2782
.L2779:
	ldr	w1, [sp, 48]
	ldr	w0, [sp, 52]
	sub	w0, w1, w0
	sxtw	x0, w0
	lsl	x0, x0, 3
	str	x0, [sp, 64]
	ldr	x0, [sp, 56]
	ldr	x1, [x0, 15944]
	ldrsw	x0, [sp, 52]
	add	x0, x0, 1
	lsl	x0, x0, 3
	add	x3, x1, x0
	ldr	x0, [sp, 56]
	ldr	x1, [x0, 15944]
	ldrsw	x0, [sp, 52]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x2, [sp, 64]
	mov	x1, x0
	mov	x0, x3
	bl	memmove
	ldr	x19, [sp, 40]
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	str	x19, [x0]
.L2782:
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1854:
	.size	_ZN5ImGui26BringWindowToDisplayBehindEP11ImGuiWindowS1_, .-_ZN5ImGui26BringWindowToDisplayBehindEP11ImGuiWindowS1_
	.align	2
	.global	_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow
	.type	_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow, %function
_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow:
.LFB1855:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x19, x1, x0
	ldr	x1, [sp, 56]
	mov	x0, 15936
	add	x0, x1, x0
	add	x1, sp, 40
	bl	_ZN8ImVectorIP11ImGuiWindowE4findERKS1_
	mov	x1, x0
	mov	x0, x19
	bl	_ZNK8ImVectorIP11ImGuiWindowE14index_from_ptrEPKS1_
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1855:
	.size	_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow, .-_ZN5ImGui22FindWindowDisplayIndexEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC263:
	.string	"void ImGui::FocusWindow(ImGuiWindow*)"
	.align	3
.LC264:
	.string	"window == __null || window->RootWindow != __null"
	.text
	.align	2
	.global	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	.type	_ZN5ImGui11FocusWindowEP11ImGuiWindow, %function
_ZN5ImGui11FocusWindowEP11ImGuiWindow:
.LFB1856:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L2786
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui12SetNavWindowEP11ImGuiWindow
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2787
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2219]
	cmp	w0, 0
	beq	.L2787
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2217]
.L2787:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2788
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 896]
	b	.L2789
.L2788:
	mov	w0, 0
.L2789:
	ldr	x1, [sp, 40]
	add	x1, x1, 16384
	str	w0, [x1, 2160]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	wzr, [x0, 2212]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2790
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 936]
	b	.L2791
.L2790:
	mov	w0, 0
.L2791:
	ldr	x1, [sp, 40]
	add	x1, x1, 16384
	str	w0, [x1, 2164]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strb	wzr, [x0, 2216]
	mov	w1, 0
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb
.L2786:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2792
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 856]
	cmp	x0, 0
	bne	.L2792
	adrp	x0, .LC263
	add	x3, x0, :lo12:.LC263
	mov	w2, 7124
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC264
	add	x0, x0, :lo12:.LC264
	bl	__assert_fail
.L2792:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2793
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 856]
	b	.L2794
.L2793:
	mov	x0, 0
.L2794:
	str	x0, [sp, 48]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2795
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 856]
	b	.L2796
.L2795:
	mov	x0, 0
.L2796:
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L2797
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16136]
	cmp	x0, 0
	beq	.L2797
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16136]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 48]
	cmp	x1, x0
	beq	.L2797
	ldr	x0, [sp, 40]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3834]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2797
	bl	_ZN5ImGui13ClearActiveIDEv
.L2797:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2800
	ldr	x0, [sp, 48]
	bl	_ZN5ImGui23BringWindowToFocusFrontEP11ImGuiWindow
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	orr	w0, w1, w0
	and	w0, w0, 8192
	cmp	w0, 0
	bne	.L2785
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui25BringWindowToDisplayFrontEP11ImGuiWindow
	b	.L2785
.L2800:
	nop
.L2785:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1856:
	.size	_ZN5ImGui11FocusWindowEP11ImGuiWindow, .-_ZN5ImGui11FocusWindowEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC265:
	.string	"void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow*, ImGuiWindow*)"
	.text
	.align	2
	.global	_ZN5ImGui26FocusTopMostWindowUnderOneEP11ImGuiWindowS1_
	.type	_ZN5ImGui26FocusTopMostWindowUnderOneEP11ImGuiWindowS1_, %function
_ZN5ImGui26FocusTopMostWindowUnderOneEP11ImGuiWindowS1_:
.LFB1857:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 15952]
	sub	w0, w0, #1
	str	w0, [sp, 44]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2802
	mov	w0, -1
	str	w0, [sp, 48]
	b	.L2803
.L2804:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 840]
	str	x0, [sp, 24]
	str	wzr, [sp, 48]
.L2803:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L2804
	ldr	x0, [sp, 24]
	bl	_ZN5ImGuiL20FindWindowFocusIndexEP11ImGuiWindow
	mov	w1, w0
	ldr	w0, [sp, 48]
	add	w0, w0, w1
	str	w0, [sp, 44]
.L2802:
	ldr	w0, [sp, 44]
	str	w0, [sp, 52]
	b	.L2805
.L2809:
	ldr	x1, [sp, 56]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 64]
	cmp	x1, x0
	beq	.L2806
	adrp	x0, .LC265
	add	x3, x0, :lo12:.LC265
	mov	w2, 7164
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC258
	add	x0, x0, :lo12:.LC258
	bl	__assert_fail
.L2806:
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 16]
	cmp	x1, x0
	beq	.L2807
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 151]
	cmp	w0, 0
	beq	.L2807
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 12]
	mov	w0, 512
	movk	w0, 0x4, lsl 16
	and	w1, w1, w0
	mov	w0, 512
	movk	w0, 0x4, lsl 16
	cmp	w1, w0
	beq	.L2807
	ldr	x0, [sp, 64]
	bl	_ZN5ImGuiL28NavRestoreLastChildNavWindowEP11ImGuiWindow
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	b	.L2801
.L2807:
	ldr	w0, [sp, 52]
	sub	w0, w0, #1
	str	w0, [sp, 52]
.L2805:
	ldr	w0, [sp, 52]
	cmp	w0, 0
	bge	.L2809
	mov	x0, 0
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
.L2801:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1857:
	.size	_ZN5ImGui26FocusTopMostWindowUnderOneEP11ImGuiWindowS1_, .-_ZN5ImGui26FocusTopMostWindowUnderOneEP11ImGuiWindowS1_
	.section	.rodata
	.align	3
.LC266:
	.string	"void ImGui::SetCurrentFont(ImFont*)"
	.align	3
.LC267:
	.string	"font && font->IsLoaded()"
	.align	3
.LC268:
	.string	"font->Scale > 0.0f"
	.text
	.align	2
	.global	_ZN5ImGui14SetCurrentFontEP6ImFont
	.type	_ZN5ImGui14SetCurrentFontEP6ImFont, %function
_ZN5ImGui14SetCurrentFontEP6ImFont:
.LFB1858:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2811
	ldr	x0, [sp, 24]
	bl	_ZNK6ImFont8IsLoadedEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2816
.L2811:
	adrp	x0, .LC266
	add	x3, x0, :lo12:.LC266
	mov	w2, 7180
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC267
	add	x0, x0, :lo12:.LC267
	bl	__assert_fail
.L2816:
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 92]
	fcmpe	s0, #0.0
	bgt	.L2813
	adrp	x0, .LC266
	add	x3, x0, :lo12:.LC266
	mov	w2, 7181
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC268
	add	x0, x0, :lo12:.LC268
	bl	__assert_fail
.L2813:
	ldr	x0, [sp, 32]
	ldr	x1, [sp, 24]
	str	x1, [x0, 15352]
	ldr	x0, [sp, 32]
	ldr	s1, [x0, 96]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 15352]
	ldr	s0, [x0, 20]
	fmul	s1, s1, s0
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 15352]
	ldr	s0, [x0, 92]
	fmul	s0, s1, s0
	fmov	s1, s0
	fmov	s0, 1.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 32]
	str	s0, [x0, 15364]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	cmp	x0, 0
	beq	.L2814
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	b	.L2815
.L2814:
	movi	v0.2s, #0
.L2815:
	ldr	x0, [sp, 32]
	str	s0, [x0, 15360]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 15352]
	ldr	x0, [x0, 64]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	ldr	x1, [sp, 40]
	ldr	x1, [x1, 64]
	str	x1, [x0, 15368]
	ldr	x0, [sp, 40]
	add	x1, x0, 120
	ldr	x0, [sp, 32]
	str	x1, [x0, 15888]
	ldr	x0, [sp, 32]
	ldr	x1, [x0, 15352]
	ldr	x0, [sp, 32]
	str	x1, [x0, 15376]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 15360]
	ldr	x0, [sp, 32]
	str	s0, [x0, 15384]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1858:
	.size	_ZN5ImGui14SetCurrentFontEP6ImFont, .-_ZN5ImGui14SetCurrentFontEP6ImFont
	.align	2
	.global	_ZN5ImGui8PushFontEP6ImFont
	.type	_ZN5ImGui8PushFontEP6ImFont, %function
_ZN5ImGui8PushFontEP6ImFont:
.LFB1859:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L2818
	bl	_ZN5ImGui14GetDefaultFontEv
	str	x0, [sp, 24]
.L2818:
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui14SetCurrentFontEP6ImFont
	ldr	x1, [sp, 40]
	mov	x0, 18416
	add	x0, x1, x0
	add	x1, sp, 24
	bl	_ZN8ImVectorIP6ImFontE9push_backERKS1_
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	ldr	x2, [x0, 632]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 64]
	ldr	x0, [x0, 8]
	mov	x1, x0
	mov	x0, x2
	bl	_ZN10ImDrawList13PushTextureIDEPv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1859:
	.size	_ZN5ImGui8PushFontEP6ImFont, .-_ZN5ImGui8PushFontEP6ImFont
	.align	2
	.global	_ZN5ImGui7PopFontEv
	.type	_ZN5ImGui7PopFontEv, %function
_ZN5ImGui7PopFontEv:
.LFB1860:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16032]
	ldr	x0, [x0, 632]
	bl	_ZN10ImDrawList12PopTextureIDEv
	ldr	x1, [sp, 24]
	mov	x0, 18416
	add	x0, x1, x0
	bl	_ZN8ImVectorIP6ImFontE8pop_backEv
	ldr	x1, [sp, 24]
	mov	x0, 18416
	add	x0, x1, x0
	bl	_ZNK8ImVectorIP6ImFontE5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2820
	bl	_ZN5ImGui14GetDefaultFontEv
	b	.L2821
.L2820:
	ldr	x1, [sp, 24]
	mov	x0, 18416
	add	x0, x1, x0
	bl	_ZN8ImVectorIP6ImFontE4backEv
	ldr	x0, [x0]
.L2821:
	bl	_ZN5ImGui14SetCurrentFontEP6ImFont
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1860:
	.size	_ZN5ImGui7PopFontEv, .-_ZN5ImGui7PopFontEv
	.section	.rodata
	.align	3
.LC269:
	.string	"void ImGui::PushItemFlag(ImGuiItemFlags, bool)"
	.align	3
.LC270:
	.string	"item_flags == g.ItemFlagsStack.back()"
	.text
	.align	2
	.global	_ZN5ImGui12PushItemFlagEib
	.type	_ZN5ImGui12PushItemFlagEib, %function
_ZN5ImGui12PushItemFlagEib:
.LFB1861:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	strb	w1, [sp, 27]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1800]
	str	w0, [sp, 44]
	ldr	x1, [sp, 48]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiE4backEv
	ldr	w1, [x0]
	ldr	w0, [sp, 44]
	cmp	w1, w0
	beq	.L2823
	adrp	x0, .LC269
	add	x3, x0, :lo12:.LC269
	mov	w2, 7215
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC270
	add	x0, x0, :lo12:.LC270
	bl	__assert_fail
.L2823:
	ldrb	w0, [sp, 27]
	cmp	w0, 0
	beq	.L2824
	ldr	w1, [sp, 44]
	ldr	w0, [sp, 28]
	orr	w0, w1, w0
	str	w0, [sp, 44]
	b	.L2825
.L2824:
	ldr	w0, [sp, 28]
	mvn	w1, w0
	ldr	w0, [sp, 44]
	and	w0, w1, w0
	str	w0, [sp, 44]
.L2825:
	ldr	w1, [sp, 44]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1800]
	ldr	x1, [sp, 48]
	mov	x0, 18448
	add	x0, x1, x0
	add	x1, sp, 44
	bl	_ZN8ImVectorIiE9push_backERKi
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2826
	bl	__stack_chk_fail
.L2826:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1861:
	.size	_ZN5ImGui12PushItemFlagEib, .-_ZN5ImGui12PushItemFlagEib
	.section	.rodata
	.align	3
.LC271:
	.string	"void ImGui::PopItemFlag()"
	.align	3
.LC272:
	.string	"g.ItemFlagsStack.Size > 1"
	.text
	.align	2
	.global	_ZN5ImGui11PopItemFlagEv
	.type	_ZN5ImGui11PopItemFlagEv, %function
_ZN5ImGui11PopItemFlagEv:
.LFB1862:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2064]
	cmp	w0, 1
	bgt	.L2828
	adrp	x0, .LC271
	add	x3, x0, :lo12:.LC271
	mov	w2, 7227
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC272
	add	x0, x0, :lo12:.LC272
	bl	__assert_fail
.L2828:
	ldr	x1, [sp, 24]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiE8pop_backEv
	ldr	x1, [sp, 24]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiE4backEv
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	w1, [x0, 1800]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1862:
	.size	_ZN5ImGui11PopItemFlagEv, .-_ZN5ImGui11PopItemFlagEv
	.align	2
	.global	_ZN5ImGui13BeginDisabledEb
	.type	_ZN5ImGui13BeginDisabledEb, %function
_ZN5ImGui13BeginDisabledEb:
.LFB1863:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	strb	w0, [sp, 31]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 1800]
	and	w0, w0, 4
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 39]
	ldrb	w0, [sp, 39]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2830
	ldrb	w0, [sp, 31]
	cmp	w0, 0
	beq	.L2830
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 14304]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	s0, [x0, 6916]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 14304]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 14308]
	fmul	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 14304]
.L2830:
	ldrb	w0, [sp, 39]
	cmp	w0, 0
	bne	.L2831
	ldrb	w0, [sp, 31]
	cmp	w0, 0
	beq	.L2832
.L2831:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 1800]
	orr	w1, w0, 4
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	w1, [x0, 1800]
.L2832:
	ldr	x1, [sp, 40]
	mov	x0, 18448
	add	x2, x1, x0
	ldr	x1, [sp, 40]
	mov	x0, 18184
	add	x0, x1, x0
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIiE9push_backERKi
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrsh	w0, [x0, 6920]
	and	w0, w0, 65535
	add	w0, w0, 1
	and	w0, w0, 65535
	sxth	w1, w0
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strh	w1, [x0, 6920]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1863:
	.size	_ZN5ImGui13BeginDisabledEb, .-_ZN5ImGui13BeginDisabledEb
	.section	.rodata
	.align	3
.LC273:
	.string	"void ImGui::EndDisabled()"
	.align	3
.LC274:
	.string	"g.DisabledStackSize > 0"
	.text
	.align	2
	.global	_ZN5ImGui11EndDisabledEv
	.type	_ZN5ImGui11EndDisabledEv, %function
_ZN5ImGui11EndDisabledEv:
.LFB1864:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrsh	w0, [x0, 6920]
	cmp	w0, 0
	bgt	.L2834
	adrp	x0, .LC273
	add	x3, x0, :lo12:.LC273
	mov	w2, 7256
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC274
	add	x0, x0, :lo12:.LC274
	bl	__assert_fail
.L2834:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrsh	w0, [x0, 6920]
	and	w0, w0, 65535
	sub	w0, w0, #1
	and	w0, w0, 65535
	sxth	w1, w0
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	strh	w1, [x0, 6920]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 1800]
	and	w0, w0, 4
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 23]
	ldr	x1, [sp, 24]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiE8pop_backEv
	ldr	x1, [sp, 24]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiE4backEv
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	w1, [x0, 1800]
	ldrb	w0, [sp, 23]
	cmp	w0, 0
	beq	.L2836
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 1800]
	and	w0, w0, 4
	cmp	w0, 0
	bne	.L2836
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	s0, [x0, 6916]
	ldr	x0, [sp, 24]
	str	s0, [x0, 14304]
.L2836:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1864:
	.size	_ZN5ImGui11EndDisabledEv, .-_ZN5ImGui11EndDisabledEv
	.align	2
	.global	_ZN5ImGui22PushAllowKeyboardFocusEb
	.type	_ZN5ImGui22PushAllowKeyboardFocusEb, %function
_ZN5ImGui22PushAllowKeyboardFocusEb:
.LFB1865:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	strb	w0, [sp, 31]
	ldrb	w0, [sp, 31]
	eor	w0, w0, 1
	and	w0, w0, 255
	mov	w1, w0
	mov	w0, 1
	bl	_ZN5ImGui12PushItemFlagEib
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1865:
	.size	_ZN5ImGui22PushAllowKeyboardFocusEb, .-_ZN5ImGui22PushAllowKeyboardFocusEb
	.align	2
	.global	_ZN5ImGui21PopAllowKeyboardFocusEv
	.type	_ZN5ImGui21PopAllowKeyboardFocusEv, %function
_ZN5ImGui21PopAllowKeyboardFocusEv:
.LFB1866:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	bl	_ZN5ImGui11PopItemFlagEv
	nop
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1866:
	.size	_ZN5ImGui21PopAllowKeyboardFocusEv, .-_ZN5ImGui21PopAllowKeyboardFocusEv
	.align	2
	.global	_ZN5ImGui16PushButtonRepeatEb
	.type	_ZN5ImGui16PushButtonRepeatEb, %function
_ZN5ImGui16PushButtonRepeatEb:
.LFB1867:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	strb	w0, [sp, 31]
	ldrb	w1, [sp, 31]
	mov	w0, 2
	bl	_ZN5ImGui12PushItemFlagEib
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1867:
	.size	_ZN5ImGui16PushButtonRepeatEb, .-_ZN5ImGui16PushButtonRepeatEb
	.align	2
	.global	_ZN5ImGui15PopButtonRepeatEv
	.type	_ZN5ImGui15PopButtonRepeatEv, %function
_ZN5ImGui15PopButtonRepeatEv:
.LFB1868:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	bl	_ZN5ImGui11PopItemFlagEv
	nop
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1868:
	.size	_ZN5ImGui15PopButtonRepeatEv, .-_ZN5ImGui15PopButtonRepeatEv
	.align	2
	.global	_ZN5ImGui15PushTextWrapPosEf
	.type	_ZN5ImGui15PushTextWrapPosEf, %function
_ZN5ImGui15PushTextWrapPosEf:
.LFB1869:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x2, x0, 440
	ldr	x0, [sp, 40]
	add	x0, x0, 416
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIfE9push_backERKf
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 28]
	str	s0, [x0, 416]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1869:
	.size	_ZN5ImGui15PushTextWrapPosEf, .-_ZN5ImGui15PushTextWrapPosEf
	.align	2
	.global	_ZN5ImGui14PopTextWrapPosEv
	.type	_ZN5ImGui14PopTextWrapPosEv, %function
_ZN5ImGui14PopTextWrapPosEv:
.LFB1870:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 440
	bl	_ZN8ImVectorIfE4backEv
	ldr	s0, [x0]
	ldr	x0, [sp, 24]
	str	s0, [x0, 416]
	ldr	x0, [sp, 24]
	add	x0, x0, 440
	bl	_ZN8ImVectorIfE8pop_backEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1870:
	.size	_ZN5ImGui14PopTextWrapPosEv, .-_ZN5ImGui14PopTextWrapPosEv
	.align	2
	.type	_ZL21GetCombinedRootWindowP11ImGuiWindowb, %function
_ZL21GetCombinedRootWindowP11ImGuiWindowb:
.LFB1871:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	strb	w1, [sp, 7]
	str	xzr, [sp, 24]
	b	.L2844
.L2845:
	ldr	x0, [sp, 8]
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 856]
	str	x0, [sp, 8]
	ldrb	w0, [sp, 7]
	cmp	w0, 0
	beq	.L2844
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 864]
	str	x0, [sp, 8]
.L2844:
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 8]
	cmp	x1, x0
	bne	.L2845
	ldr	x0, [sp, 8]
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1871:
	.size	_ZL21GetCombinedRootWindowP11ImGuiWindowb, .-_ZL21GetCombinedRootWindowP11ImGuiWindowb
	.align	2
	.global	_ZN5ImGui15IsWindowChildOfEP11ImGuiWindowS1_b
	.type	_ZN5ImGui15IsWindowChildOfEP11ImGuiWindowS1_b, %function
_ZN5ImGui15IsWindowChildOfEP11ImGuiWindowS1_b:
.LFB1872:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	strb	w2, [sp, 31]
	ldrb	w1, [sp, 31]
	ldr	x0, [sp, 40]
	bl	_ZL21GetCombinedRootWindowP11ImGuiWindowb
	str	x0, [sp, 56]
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 32]
	cmp	x1, x0
	bne	.L2850
	mov	w0, 1
	b	.L2849
.L2853:
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 32]
	cmp	x1, x0
	bne	.L2851
	mov	w0, 1
	b	.L2849
.L2851:
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 56]
	cmp	x1, x0
	bne	.L2852
	mov	w0, 0
	b	.L2849
.L2852:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 840]
	str	x0, [sp, 40]
.L2850:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	bne	.L2853
	mov	w0, 0
.L2849:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1872:
	.size	_ZN5ImGui15IsWindowChildOfEP11ImGuiWindowS1_b, .-_ZN5ImGui15IsWindowChildOfEP11ImGuiWindowS1_b
	.align	2
	.global	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	.type	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_, %function
_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_:
.LFB1873:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 856]
	ldr	x1, [sp]
	cmp	x1, x0
	bne	.L2857
	mov	w0, 1
	b	.L2856
.L2859:
	ldr	x1, [sp, 8]
	ldr	x0, [sp]
	cmp	x1, x0
	bne	.L2858
	mov	w0, 1
	b	.L2856
.L2858:
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 848]
	str	x0, [sp, 8]
.L2857:
	ldr	x0, [sp, 8]
	cmp	x0, 0
	bne	.L2859
	mov	w0, 0
.L2856:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1873:
	.size	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_, .-_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	.align	2
	.global	_ZN5ImGui13IsWindowAboveEP11ImGuiWindowS1_
	.type	_ZN5ImGui13IsWindowAboveEP11ImGuiWindowS1_, %function
_ZN5ImGui13IsWindowAboveEP11ImGuiWindowS1_:
.LFB1874:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 40]
	bl	_ZL21GetWindowDisplayLayerP11ImGuiWindow
	mov	w19, w0
	ldr	x0, [sp, 32]
	bl	_ZL21GetWindowDisplayLayerP11ImGuiWindow
	sub	w0, w19, w0
	str	w0, [sp, 60]
	ldr	w0, [sp, 60]
	cmp	w0, 0
	beq	.L2861
	ldr	w0, [sp, 60]
	cmp	w0, 0
	cset	w0, gt
	and	w0, w0, 255
	b	.L2862
.L2861:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15936]
	sub	w0, w0, #1
	str	w0, [sp, 56]
	b	.L2863
.L2866:
	ldr	x1, [sp, 64]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 56]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 40]
	cmp	x1, x0
	bne	.L2864
	mov	w0, 1
	b	.L2862
.L2864:
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 32]
	cmp	x1, x0
	bne	.L2865
	mov	w0, 0
	b	.L2862
.L2865:
	ldr	w0, [sp, 56]
	sub	w0, w0, #1
	str	w0, [sp, 56]
.L2863:
	ldr	w0, [sp, 56]
	cmp	w0, 0
	bge	.L2866
	mov	w0, 0
.L2862:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1874:
	.size	_ZN5ImGui13IsWindowAboveEP11ImGuiWindowS1_, .-_ZN5ImGui13IsWindowAboveEP11ImGuiWindowS1_
	.section	.rodata
	.align	3
.LC275:
	.string	"bool ImGui::IsWindowHovered(ImGuiHoveredFlags)"
	.align	3
.LC276:
	.string	"(flags & (ImGuiHoveredFlags_AllowWhenOverlapped | ImGuiHoveredFlags_AllowWhenDisabled)) == 0"
	.align	3
.LC277:
	.string	"cur_window"
	.text
	.align	2
	.global	_ZN5ImGui15IsWindowHoveredEi
	.type	_ZN5ImGui15IsWindowHoveredEi, %function
_ZN5ImGui15IsWindowHoveredEi:
.LFB1875:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	and	w0, w0, 768
	cmp	w0, 0
	beq	.L2868
	adrp	x0, .LC275
	add	x3, x0, :lo12:.LC275
	mov	w2, 7365
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC276
	add	x0, x0, :lo12:.LC276
	bl	__assert_fail
.L2868:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16040]
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	bne	.L2869
	mov	w0, 0
	b	.L2870
.L2869:
	ldr	w0, [sp, 28]
	and	w0, w0, 4
	cmp	w0, 0
	bne	.L2871
	ldr	x0, [sp, 40]
	cmp	x0, 0
	bne	.L2872
	adrp	x0, .LC275
	add	x3, x0, :lo12:.LC275
	mov	w2, 7374
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC277
	add	x0, x0, :lo12:.LC277
	bl	__assert_fail
.L2872:
	ldr	w0, [sp, 28]
	and	w0, w0, 8
	cmp	w0, 0
	cset	w0, eq
	strb	w0, [sp, 39]
	ldr	w0, [sp, 28]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L2873
	ldrb	w1, [sp, 39]
	ldr	x0, [sp, 40]
	bl	_ZL21GetCombinedRootWindowP11ImGuiWindowb
	str	x0, [sp, 40]
.L2873:
	ldr	w0, [sp, 28]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2874
	ldrb	w2, [sp, 39]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui15IsWindowChildOfEP11ImGuiWindowS1_b
	strb	w0, [sp, 38]
	b	.L2875
.L2874:
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 40]
	cmp	x1, x0
	cset	w0, eq
	strb	w0, [sp, 38]
.L2875:
	ldrb	w0, [sp, 38]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2871
	mov	w0, 0
	b	.L2870
.L2871:
	ldr	w1, [sp, 28]
	ldr	x0, [sp, 56]
	bl	_ZL24IsWindowContentHoverableP11ImGuiWindowi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2876
	mov	w0, 0
	b	.L2870
.L2876:
	ldr	w0, [sp, 28]
	and	w0, w0, 128
	cmp	w0, 0
	bne	.L2877
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L2877
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3833]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L2877
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 92]
	cmp	w1, w0
	beq	.L2877
	mov	w0, 0
	b	.L2870
.L2877:
	mov	w0, 1
.L2870:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1875:
	.size	_ZN5ImGui15IsWindowHoveredEi, .-_ZN5ImGui15IsWindowHoveredEi
	.section	.rodata
	.align	3
.LC278:
	.string	"bool ImGui::IsWindowFocused(ImGuiFocusedFlags)"
	.text
	.align	2
	.global	_ZN5ImGui15IsWindowFocusedEi
	.type	_ZN5ImGui15IsWindowFocusedEi, %function
_ZN5ImGui15IsWindowFocusedEi:
.LFB1876:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	bne	.L2879
	mov	w0, 0
	b	.L2880
.L2879:
	ldr	w0, [sp, 28]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L2881
	mov	w0, 1
	b	.L2880
.L2881:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	bne	.L2882
	adrp	x0, .LC278
	add	x3, x0, :lo12:.LC278
	mov	w2, 7407
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC277
	add	x0, x0, :lo12:.LC277
	bl	__assert_fail
.L2882:
	ldr	w0, [sp, 28]
	and	w0, w0, 8
	cmp	w0, 0
	cset	w0, eq
	strb	w0, [sp, 39]
	ldr	w0, [sp, 28]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L2883
	ldrb	w1, [sp, 39]
	ldr	x0, [sp, 40]
	bl	_ZL21GetCombinedRootWindowP11ImGuiWindowb
	str	x0, [sp, 40]
.L2883:
	ldr	w0, [sp, 28]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2884
	ldrb	w2, [sp, 39]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui15IsWindowChildOfEP11ImGuiWindowS1_b
	and	w0, w0, 255
	b	.L2880
.L2884:
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 40]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
.L2880:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1876:
	.size	_ZN5ImGui15IsWindowFocusedEi, .-_ZN5ImGui15IsWindowFocusedEi
	.align	2
	.global	_ZN5ImGui20IsWindowNavFocusableEP11ImGuiWindow
	.type	_ZN5ImGui20IsWindowNavFocusableEP11ImGuiWindow, %function
_ZN5ImGui20IsWindowNavFocusableEP11ImGuiWindow:
.LFB1877:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldrb	w0, [x0, 151]
	cmp	w0, 0
	beq	.L2886
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 8]
	cmp	x1, x0
	bne	.L2886
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 12]
	and	w0, w0, 524288
	cmp	w0, 0
	bne	.L2886
	mov	w0, 1
	b	.L2887
.L2886:
	mov	w0, 0
.L2887:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1877:
	.size	_ZN5ImGui20IsWindowNavFocusableEP11ImGuiWindow, .-_ZN5ImGui20IsWindowNavFocusableEP11ImGuiWindow
	.align	2
	.global	_ZN5ImGui14GetWindowWidthEv
	.type	_ZN5ImGui14GetWindowWidthEv, %function
_ZN5ImGui14GetWindowWidthEv:
.LFB1878:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 32]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1878:
	.size	_ZN5ImGui14GetWindowWidthEv, .-_ZN5ImGui14GetWindowWidthEv
	.align	2
	.global	_ZN5ImGui15GetWindowHeightEv
	.type	_ZN5ImGui15GetWindowHeightEv, %function
_ZN5ImGui15GetWindowHeightEv:
.LFB1879:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 36]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1879:
	.size	_ZN5ImGui15GetWindowHeightEv, .-_ZN5ImGui15GetWindowHeightEv
	.align	2
	.global	_ZN5ImGui12GetWindowPosEv
	.type	_ZN5ImGui12GetWindowPosEv, %function
_ZN5ImGui12GetWindowPosEv:
.LFB1880:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp]
	ldr	x0, [sp]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 24]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1880:
	.size	_ZN5ImGui12GetWindowPosEv, .-_ZN5ImGui12GetWindowPosEv
	.section	.rodata
	.align	3
.LC279:
	.string	"void ImGui::SetWindowPos(ImGuiWindow*, const ImVec2&, ImGuiCond)"
	.align	3
.LC280:
	.string	"cond == 0 || ImIsPowerOfTwo(cond)"
	.text
	.align	2
	.global	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
	.type	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i, %function
_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i:
.LFB1881:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	w2, [sp, 44]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	w0, [sp, 44]
	cmp	w0, 0
	beq	.L2896
	ldr	x0, [sp, 56]
	ldrsb	w0, [x0, 188]
	mov	w1, w0
	ldr	w0, [sp, 44]
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L2902
.L2896:
	ldr	w0, [sp, 44]
	cmp	w0, 0
	beq	.L2898
	ldr	w0, [sp, 44]
	bl	_ZL14ImIsPowerOfTwoi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2898
	adrp	x0, .LC279
	add	x3, x0, :lo12:.LC279
	mov	w2, 7451
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC280
	add	x0, x0, :lo12:.LC280
	bl	__assert_fail
.L2898:
	ldr	x0, [sp, 56]
	ldrsb	w0, [x0, 188]
	and	w0, w0, -15
	sxtb	w1, w0
	ldr	x0, [sp, 56]
	strb	w1, [x0, 188]
	add	x0, sp, 80
	mov	w1, 2139095039
	fmov	s1, w1
	mov	w1, 2139095039
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 80]
	str	x1, [x0, 192]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 24]
	str	x0, [sp, 72]
	ldr	x19, [sp, 56]
	ldr	x0, [sp, 48]
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 24]
	str	s0, [x19, 28]
	ldr	x0, [sp, 56]
	add	x0, x0, 24
	add	x1, sp, 72
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	ldr	s0, [sp, 80]
	fcmp	s0, #0.0
	bne	.L2899
	ldr	s0, [sp, 84]
	fcmp	s0, #0.0
	beq	.L2903
.L2899:
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow
	ldr	x0, [sp, 56]
	add	x0, x0, 224
	add	x1, sp, 80
	bl	_ZpLR6ImVec2RKS_
	ldr	x0, [sp, 56]
	add	x0, x0, 248
	add	x1, sp, 80
	bl	_ZpLR6ImVec2RKS_
	ldr	x0, [sp, 56]
	add	x0, x0, 256
	add	x1, sp, 80
	bl	_ZpLR6ImVec2RKS_
	ldr	x0, [sp, 56]
	add	x0, x0, 240
	add	x1, sp, 80
	bl	_ZpLR6ImVec2RKS_
	b	.L2895
.L2902:
	nop
	b	.L2895
.L2903:
	nop
.L2895:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2901
	bl	__stack_chk_fail
.L2901:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1881:
	.size	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i, .-_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
	.align	2
	.global	_ZN5ImGui12SetWindowPosERK6ImVec2i
	.type	_ZN5ImGui12SetWindowPosERK6ImVec2i, %function
_ZN5ImGui12SetWindowPosERK6ImVec2i:
.LFB1882:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 40]
	ldr	w2, [sp, 20]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1882:
	.size	_ZN5ImGui12SetWindowPosERK6ImVec2i, .-_ZN5ImGui12SetWindowPosERK6ImVec2i
	.align	2
	.global	_ZN5ImGui12SetWindowPosEPKcRK6ImVec2i
	.type	_ZN5ImGui12SetWindowPosEPKcRK6ImVec2i, %function
_ZN5ImGui12SetWindowPosEPKcRK6ImVec2i:
.LFB1883:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui16FindWindowByNameEPKc
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L2907
	ldr	w2, [sp, 28]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
.L2907:
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1883:
	.size	_ZN5ImGui12SetWindowPosEPKcRK6ImVec2i, .-_ZN5ImGui12SetWindowPosEPKcRK6ImVec2i
	.align	2
	.global	_ZN5ImGui13GetWindowSizeEv
	.type	_ZN5ImGui13GetWindowSizeEv, %function
_ZN5ImGui13GetWindowSizeEv:
.LFB1884:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 32]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1884:
	.size	_ZN5ImGui13GetWindowSizeEv, .-_ZN5ImGui13GetWindowSizeEv
	.section	.rodata
	.align	3
.LC281:
	.string	"void ImGui::SetWindowSize(ImGuiWindow*, const ImVec2&, ImGuiCond)"
	.text
	.align	2
	.global	_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i
	.type	_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i, %function
_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i:
.LFB1885:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	beq	.L2911
	ldr	x0, [sp, 40]
	ldrsb	w0, [x0, 189]
	mov	w1, w0
	ldr	w0, [sp, 28]
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L2936
.L2911:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	beq	.L2913
	ldr	w0, [sp, 28]
	bl	_ZL14ImIsPowerOfTwoi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2913
	adrp	x0, .LC281
	add	x3, x0, :lo12:.LC281
	mov	w2, 7492
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC280
	add	x0, x0, :lo12:.LC280
	bl	__assert_fail
.L2913:
	ldr	x0, [sp, 40]
	ldrsb	w0, [x0, 189]
	and	w0, w0, -15
	sxtb	w1, w0
	ldr	x0, [sp, 40]
	strb	w1, [x0, 189]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 40]
	str	x0, [sp, 56]
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	fcmpe	s0, #0.0
	bls	.L2928
	b	.L2932
.L2928:
	mov	w1, 2
	b	.L2916
.L2932:
	mov	w1, 0
.L2916:
	ldr	x0, [sp, 40]
	strb	w1, [x0, 176]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 4]
	fcmpe	s0, #0.0
	bls	.L2929
	b	.L2933
.L2929:
	mov	w1, 2
	b	.L2919
.L2933:
	mov	w1, 0
.L2919:
	ldr	x0, [sp, 40]
	strb	w1, [x0, 177]
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	fcmpe	s0, #0.0
	bls	.L2930
	b	.L2934
.L2930:
	ldr	x0, [sp, 40]
	strb	wzr, [x0, 179]
	b	.L2922
.L2934:
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	fcvtzs	s0, s0
	scvtf	s0, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 40]
.L2922:
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 4]
	fcmpe	s0, #0.0
	bls	.L2931
	b	.L2935
.L2931:
	ldr	x0, [sp, 40]
	strb	wzr, [x0, 179]
	b	.L2925
.L2935:
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 4]
	fcvtzs	s0, s0
	scvtf	s0, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 44]
.L2925:
	ldr	s1, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 40]
	fcmp	s1, s0
	bne	.L2926
	ldr	s1, [sp, 60]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 44]
	fcmp	s1, s0
	beq	.L2910
.L2926:
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow
	b	.L2910
.L2936:
	nop
.L2910:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1885:
	.size	_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i, .-_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i
	.align	2
	.global	_ZN5ImGui13SetWindowSizeERK6ImVec2i
	.type	_ZN5ImGui13SetWindowSizeERK6ImVec2i, %function
_ZN5ImGui13SetWindowSizeERK6ImVec2i:
.LFB1886:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	ldr	w2, [sp, 20]
	ldr	x1, [sp, 24]
	bl	_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1886:
	.size	_ZN5ImGui13SetWindowSizeERK6ImVec2i, .-_ZN5ImGui13SetWindowSizeERK6ImVec2i
	.align	2
	.global	_ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i
	.type	_ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i, %function
_ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i:
.LFB1887:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui16FindWindowByNameEPKc
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L2940
	ldr	w2, [sp, 28]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui13SetWindowSizeEP11ImGuiWindowRK6ImVec2i
.L2940:
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1887:
	.size	_ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i, .-_ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i
	.align	2
	.global	_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi
	.type	_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi, %function
_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi:
.LFB1888:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	strb	w1, [sp, 7]
	str	w2, [sp]
	ldr	w0, [sp]
	cmp	w0, 0
	beq	.L2942
	ldr	x0, [sp, 8]
	ldrsb	w0, [x0, 190]
	mov	w1, w0
	ldr	w0, [sp]
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L2944
.L2942:
	ldr	x0, [sp, 8]
	ldrsb	w0, [x0, 190]
	and	w0, w0, -15
	sxtb	w1, w0
	ldr	x0, [sp, 8]
	strb	w1, [x0, 190]
	ldr	x0, [sp, 8]
	ldrb	w1, [sp, 7]
	strb	w1, [x0, 153]
	b	.L2941
.L2944:
	nop
.L2941:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1888:
	.size	_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi, .-_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi
	.section	.rodata
	.align	3
.LC282:
	.string	"void ImGui::SetWindowHitTestHole(ImGuiWindow*, const ImVec2&, const ImVec2&)"
	.align	3
.LC283:
	.string	"window->HitTestHoleSize.x == 0"
	.text
	.align	2
	.global	_ZN5ImGui20SetWindowHitTestHoleEP11ImGuiWindowRK6ImVec2S4_
	.type	_ZN5ImGui20SetWindowHitTestHoleEP11ImGuiWindowRK6ImVec2S4_, %function
_ZN5ImGui20SetWindowHitTestHoleEP11ImGuiWindowRK6ImVec2S4_:
.LFB1889:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldrsh	w0, [x0, 568]
	cmp	w0, 0
	beq	.L2946
	adrp	x0, .LC282
	add	x3, x0, :lo12:.LC282
	mov	w2, 7535
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC283
	add	x0, x0, :lo12:.LC283
	bl	__assert_fail
.L2946:
	add	x0, sp, 64
	ldr	x1, [sp, 24]
	bl	_ZN8ImVec2ihC1ERK6ImVec2
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 64]
	str	w1, [x0, 568]
	ldr	x0, [sp, 40]
	add	x0, x0, 24
	mov	x1, x0
	ldr	x0, [sp, 32]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	add	x1, sp, 64
	add	x0, sp, 56
	bl	_ZN8ImVec2ihC1ERK6ImVec2
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 56]
	str	w1, [x0, 572]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2947
	bl	__stack_chk_fail
.L2947:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1889:
	.size	_ZN5ImGui20SetWindowHitTestHoleEP11ImGuiWindowRK6ImVec2S4_, .-_ZN5ImGui20SetWindowHitTestHoleEP11ImGuiWindowRK6ImVec2S4_
	.align	2
	.global	_ZN5ImGui18SetWindowCollapsedEbi
	.type	_ZN5ImGui18SetWindowCollapsedEbi, %function
_ZN5ImGui18SetWindowCollapsedEbi:
.LFB1890:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	strb	w0, [sp, 31]
	str	w1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	ldr	w2, [sp, 24]
	ldrb	w1, [sp, 31]
	bl	_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1890:
	.size	_ZN5ImGui18SetWindowCollapsedEbi, .-_ZN5ImGui18SetWindowCollapsedEbi
	.align	2
	.global	_ZN5ImGui17IsWindowCollapsedEv
	.type	_ZN5ImGui17IsWindowCollapsedEv, %function
_ZN5ImGui17IsWindowCollapsedEv:
.LFB1891:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 153]
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1891:
	.size	_ZN5ImGui17IsWindowCollapsedEv, .-_ZN5ImGui17IsWindowCollapsedEv
	.align	2
	.global	_ZN5ImGui17IsWindowAppearingEv
	.type	_ZN5ImGui17IsWindowAppearingEv, %function
_ZN5ImGui17IsWindowAppearingEv:
.LFB1892:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 156]
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1892:
	.size	_ZN5ImGui17IsWindowAppearingEv, .-_ZN5ImGui17IsWindowAppearingEv
	.align	2
	.global	_ZN5ImGui18SetWindowCollapsedEPKcbi
	.type	_ZN5ImGui18SetWindowCollapsedEPKcbi, %function
_ZN5ImGui18SetWindowCollapsedEPKcbi:
.LFB1893:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	strb	w1, [sp, 23]
	str	w2, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui16FindWindowByNameEPKc
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L2955
	ldr	w2, [sp, 16]
	ldrb	w1, [sp, 23]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui18SetWindowCollapsedEP11ImGuiWindowbi
.L2955:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1893:
	.size	_ZN5ImGui18SetWindowCollapsedEPKcbi, .-_ZN5ImGui18SetWindowCollapsedEPKcbi
	.align	2
	.global	_ZN5ImGui14SetWindowFocusEv
	.type	_ZN5ImGui14SetWindowFocusEv, %function
_ZN5ImGui14SetWindowFocusEv:
.LFB1894:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	nop
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1894:
	.size	_ZN5ImGui14SetWindowFocusEv, .-_ZN5ImGui14SetWindowFocusEv
	.align	2
	.global	_ZN5ImGui14SetWindowFocusEPKc
	.type	_ZN5ImGui14SetWindowFocusEPKc, %function
_ZN5ImGui14SetWindowFocusEPKc:
.LFB1895:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L2958
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui16FindWindowByNameEPKc
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L2960
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	b	.L2960
.L2958:
	mov	x0, 0
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
.L2960:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1895:
	.size	_ZN5ImGui14SetWindowFocusEPKc, .-_ZN5ImGui14SetWindowFocusEPKc
	.section	.rodata
	.align	3
.LC284:
	.string	"void ImGui::SetNextWindowPos(const ImVec2&, ImGuiCond, const ImVec2&)"
	.text
	.align	2
	.global	_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_
	.type	_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_, %function
_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_:
.LFB1896:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L2962
	ldr	w0, [sp, 36]
	bl	_ZL14ImIsPowerOfTwoi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2962
	adrp	x0, .LC284
	add	x3, x0, :lo12:.LC284
	mov	w2, 7584
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC280
	add	x0, x0, :lo12:.LC280
	bl	__assert_fail
.L2962:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	orr	w1, w0, 1
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 1888]
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 40]
	ldr	x1, [x1]
	str	x1, [x0, 18288]
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 24]
	ldr	x1, [x1]
	str	x1, [x0, 18296]
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L2963
	ldr	w0, [sp, 36]
	b	.L2964
.L2963:
	mov	w0, 1
.L2964:
	ldr	x1, [sp, 56]
	add	x1, x1, 16384
	str	w0, [x1, 1892]
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1896:
	.size	_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_, .-_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_
	.section	.rodata
	.align	3
.LC285:
	.string	"void ImGui::SetNextWindowSize(const ImVec2&, ImGuiCond)"
	.text
	.align	2
	.global	_ZN5ImGui17SetNextWindowSizeERK6ImVec2i
	.type	_ZN5ImGui17SetNextWindowSizeERK6ImVec2i, %function
_ZN5ImGui17SetNextWindowSizeERK6ImVec2i:
.LFB1897:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	beq	.L2966
	ldr	w0, [sp, 20]
	bl	_ZL14ImIsPowerOfTwoi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2966
	adrp	x0, .LC285
	add	x3, x0, :lo12:.LC285
	mov	w2, 7594
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC280
	add	x0, x0, :lo12:.LC280
	bl	__assert_fail
.L2966:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	orr	w1, w0, 2
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	w1, [x0, 1888]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 24]
	ldr	x1, [x1]
	str	x1, [x0, 18304]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	beq	.L2967
	ldr	w0, [sp, 20]
	b	.L2968
.L2967:
	mov	w0, 1
.L2968:
	ldr	x1, [sp, 40]
	add	x1, x1, 16384
	str	w0, [x1, 1896]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1897:
	.size	_ZN5ImGui17SetNextWindowSizeERK6ImVec2i, .-_ZN5ImGui17SetNextWindowSizeERK6ImVec2i
	.align	2
	.global	_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv
	.type	_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv, %function
_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv:
.LFB1898:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	x3, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	orr	w1, w0, 16
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1888]
	add	x0, sp, 56
	ldr	x2, [sp, 32]
	ldr	x1, [sp, 40]
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	x1, [sp, 48]
	mov	x0, 18432
	add	x0, x1, x0
	sub	x2, x0, #100
	ldp	x0, x1, [sp, 56]
	stp	x0, x1, [x2]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 24]
	str	x1, [x0, 18352]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 16]
	str	x1, [x0, 18360]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L2970
	bl	__stack_chk_fail
.L2970:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1898:
	.size	_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv, .-_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv
	.align	2
	.global	_ZN5ImGui24SetNextWindowContentSizeERK6ImVec2
	.type	_ZN5ImGui24SetNextWindowContentSizeERK6ImVec2, %function
_ZN5ImGui24SetNextWindowContentSizeERK6ImVec2:
.LFB1899:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	orr	w1, w0, 4
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 1888]
	ldr	x19, [sp, 56]
	ldr	x0, [sp, 40]
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	add	x0, x19, 16384
	str	s2, [x0, 1928]
	add	x0, x19, 16384
	str	s0, [x0, 1932]
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1899:
	.size	_ZN5ImGui24SetNextWindowContentSizeERK6ImVec2, .-_ZN5ImGui24SetNextWindowContentSizeERK6ImVec2
	.align	2
	.global	_ZN5ImGui19SetNextWindowScrollERK6ImVec2
	.type	_ZN5ImGui19SetNextWindowScrollERK6ImVec2, %function
_ZN5ImGui19SetNextWindowScrollERK6ImVec2:
.LFB1900:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	orr	w1, w0, 128
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	w1, [x0, 1888]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 8]
	ldr	x1, [x1]
	str	x1, [x0, 18320]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1900:
	.size	_ZN5ImGui19SetNextWindowScrollERK6ImVec2, .-_ZN5ImGui19SetNextWindowScrollERK6ImVec2
	.section	.rodata
	.align	3
.LC286:
	.string	"void ImGui::SetNextWindowCollapsed(bool, ImGuiCond)"
	.text
	.align	2
	.global	_ZN5ImGui22SetNextWindowCollapsedEbi
	.type	_ZN5ImGui22SetNextWindowCollapsedEbi, %function
_ZN5ImGui22SetNextWindowCollapsedEbi:
.LFB1901:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	strb	w0, [sp, 31]
	str	w1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 24]
	cmp	w0, 0
	beq	.L2974
	ldr	w0, [sp, 24]
	bl	_ZL14ImIsPowerOfTwoi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L2974
	adrp	x0, .LC286
	add	x3, x0, :lo12:.LC286
	mov	w2, 7628
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC280
	add	x0, x0, :lo12:.LC280
	bl	__assert_fail
.L2974:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	orr	w1, w0, 8
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	w1, [x0, 1888]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w1, [sp, 31]
	strb	w1, [x0, 1944]
	ldr	w0, [sp, 24]
	cmp	w0, 0
	beq	.L2975
	ldr	w0, [sp, 24]
	b	.L2976
.L2975:
	mov	w0, 1
.L2976:
	ldr	x1, [sp, 40]
	add	x1, x1, 16384
	str	w0, [x1, 1900]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1901:
	.size	_ZN5ImGui22SetNextWindowCollapsedEbi, .-_ZN5ImGui22SetNextWindowCollapsedEbi
	.align	2
	.global	_ZN5ImGui18SetNextWindowFocusEv
	.type	_ZN5ImGui18SetNextWindowFocusEv, %function
_ZN5ImGui18SetNextWindowFocusEv:
.LFB1902:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	orr	w1, w0, 32
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	str	w1, [x0, 1888]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1902:
	.size	_ZN5ImGui18SetNextWindowFocusEv, .-_ZN5ImGui18SetNextWindowFocusEv
	.align	2
	.global	_ZN5ImGui20SetNextWindowBgAlphaEf
	.type	_ZN5ImGui20SetNextWindowBgAlphaEf, %function
_ZN5ImGui20SetNextWindowBgAlphaEf:
.LFB1903:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	s0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	orr	w1, w0, 64
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	w1, [x0, 1888]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	s0, [sp, 12]
	str	s0, [x0, 1984]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1903:
	.size	_ZN5ImGui20SetNextWindowBgAlphaEf, .-_ZN5ImGui20SetNextWindowBgAlphaEf
	.align	2
	.global	_ZN5ImGui17GetWindowDrawListEv
	.type	_ZN5ImGui17GetWindowDrawListEv, %function
_ZN5ImGui17GetWindowDrawListEv:
.LFB1904:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 632]
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1904:
	.size	_ZN5ImGui17GetWindowDrawListEv, .-_ZN5ImGui17GetWindowDrawListEv
	.align	2
	.global	_ZN5ImGui7GetFontEv
	.type	_ZN5ImGui7GetFontEv, %function
_ZN5ImGui7GetFontEv:
.LFB1905:
	.cfi_startproc
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 15352]
	ret
	.cfi_endproc
.LFE1905:
	.size	_ZN5ImGui7GetFontEv, .-_ZN5ImGui7GetFontEv
	.align	2
	.global	_ZN5ImGui11GetFontSizeEv
	.type	_ZN5ImGui11GetFontSizeEv, %function
_ZN5ImGui11GetFontSizeEv:
.LFB1906:
	.cfi_startproc
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	s0, [x0, 15360]
	ret
	.cfi_endproc
.LFE1906:
	.size	_ZN5ImGui11GetFontSizeEv, .-_ZN5ImGui11GetFontSizeEv
	.align	2
	.global	_ZN5ImGui22GetFontTexUvWhitePixelEv
	.type	_ZN5ImGui22GetFontTexUvWhitePixelEv, %function
_ZN5ImGui22GetFontTexUvWhitePixelEv:
.LFB1907:
	.cfi_startproc
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 15368]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	ret
	.cfi_endproc
.LFE1907:
	.size	_ZN5ImGui22GetFontTexUvWhitePixelEv, .-_ZN5ImGui22GetFontTexUvWhitePixelEv
	.section	.rodata
	.align	3
.LC287:
	.string	"void ImGui::SetWindowFontScale(float)"
	.align	3
.LC288:
	.string	"scale > 0.0f"
	.text
	.align	2
	.global	_ZN5ImGui18SetWindowFontScaleEf
	.type	_ZN5ImGui18SetWindowFontScaleEf, %function
_ZN5ImGui18SetWindowFontScaleEf:
.LFB1908:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	ldr	s0, [sp, 28]
	fcmpe	s0, #0.0
	bgt	.L2988
	adrp	x0, .LC287
	add	x3, x0, :lo12:.LC287
	mov	w2, 7670
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC288
	add	x0, x0, :lo12:.LC288
	bl	__assert_fail
.L2988:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 28]
	str	s0, [x0, 624]
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	ldr	x0, [sp, 32]
	str	s0, [x0, 15384]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 15384]
	ldr	x0, [sp, 32]
	str	s0, [x0, 15360]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1908:
	.size	_ZN5ImGui18SetWindowFontScaleEf, .-_ZN5ImGui18SetWindowFontScaleEf
	.align	2
	.global	_ZN5ImGui12ActivateItemEj
	.type	_ZN5ImGui12ActivateItemEj, %function
_ZN5ImGui12ActivateItemEj:
.LFB1909:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w1, [sp, 12]
	str	w1, [x0, 2200]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	wzr, [x0, 2204]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1909:
	.size	_ZN5ImGui12ActivateItemEj, .-_ZN5ImGui12ActivateItemEj
	.align	2
	.global	_ZN5ImGui14PushFocusScopeEj
	.type	_ZN5ImGui14PushFocusScopeEj, %function
_ZN5ImGui14PushFocusScopeEj:
.LFB1910:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	mov	x0, 18432
	add	x0, x1, x0
	add	x1, sp, 28
	bl	_ZN8ImVectorIjE9push_backERKj
	ldr	w1, [sp, 28]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	w1, [x0, 1796]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1910:
	.size	_ZN5ImGui14PushFocusScopeEj, .-_ZN5ImGui14PushFocusScopeEj
	.section	.rodata
	.align	3
.LC289:
	.string	"void ImGui::PopFocusScope()"
	.align	3
.LC290:
	.string	"g.FocusScopeStack.Size > 0"
	.text
	.align	2
	.global	_ZN5ImGui13PopFocusScopeEv
	.type	_ZN5ImGui13PopFocusScopeEv, %function
_ZN5ImGui13PopFocusScopeEv:
.LFB1911:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2048]
	cmp	w0, 0
	bgt	.L2992
	adrp	x0, .LC289
	add	x3, x0, :lo12:.LC289
	mov	w2, 7694
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC290
	add	x0, x0, :lo12:.LC290
	bl	__assert_fail
.L2992:
	ldr	x1, [sp, 24]
	mov	x0, 18432
	add	x0, x1, x0
	bl	_ZN8ImVectorIjE8pop_backEv
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2048]
	cmp	w0, 0
	beq	.L2993
	ldr	x1, [sp, 24]
	mov	x0, 18432
	add	x0, x1, x0
	bl	_ZN8ImVectorIjE4backEv
	ldr	w0, [x0]
	b	.L2994
.L2993:
	mov	w0, 0
.L2994:
	ldr	x1, [sp, 24]
	add	x1, x1, 16384
	str	w0, [x1, 1796]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1911:
	.size	_ZN5ImGui13PopFocusScopeEv, .-_ZN5ImGui13PopFocusScopeEv
	.section	.rodata
	.align	3
.LC291:
	.string	"void ImGui::SetKeyboardFocusHere(int)"
	.align	3
.LC292:
	.string	"offset >= -1"
	.align	3
.LC293:
	.string	"SetKeyboardFocusHere(%d) in window \"%s\"\n"
	.align	3
.LC294:
	.string	"SetKeyboardFocusHere() ignored while DragDropActive!\n"
	.text
	.align	2
	.global	_ZN5ImGui20SetKeyboardFocusHereEi
	.type	_ZN5ImGui20SetKeyboardFocusHereEi, %function
_ZN5ImGui20SetKeyboardFocusHereEi:
.LFB1912:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	w0, [sp, 28]
	cmn	w0, #1
	bge	.L2996
	adrp	x0, .LC291
	add	x3, x0, :lo12:.LC291
	mov	w2, 7704
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC292
	add	x0, x0, :lo12:.LC292
	bl	__assert_fail
.L2996:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L2997
	ldr	x0, [sp, 56]
	ldr	x0, [x0]
	mov	x2, x0
	ldr	w1, [sp, 28]
	adrp	x0, .LC293
	add	x0, x0, :lo12:.LC293
	bl	_ZN5ImGui8DebugLogEPKcz
.L2997:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	bne	.L2998
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16056]
	cmp	x0, 0
	beq	.L2999
.L2998:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L3007
	adrp	x0, .LC294
	add	x0, x0, :lo12:.LC294
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L3007
.L2999:
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui12SetNavWindowEP11ImGuiWindow
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 156]
	cmp	w0, 0
	beq	.L3002
	mov	w0, 33
	b	.L3003
.L3002:
	mov	w0, 3
.L3003:
	str	w0, [sp, 44]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bge	.L3004
	mov	w0, 2
	b	.L3005
.L3004:
	mov	w0, 3
.L3005:
	ldr	w3, [sp, 44]
	mov	w2, 1536
	mov	w1, w0
	mov	w0, -1
	bl	_ZN5ImGui20NavMoveRequestSubmitEiiii
	ldr	w0, [sp, 28]
	cmn	w0, #1
	bne	.L3006
	ldr	x1, [sp, 48]
	mov	x0, 18704
	add	x0, x1, x0
	bl	_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData
	b	.L2995
.L3006:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	mov	w1, 1
	str	w1, [x0, 2308]
	ldr	w0, [sp, 28]
	add	w1, w0, 1
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 2312]
	b	.L2995
.L3007:
	nop
.L2995:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1912:
	.size	_ZN5ImGui20SetKeyboardFocusHereEi, .-_ZN5ImGui20SetKeyboardFocusHereEi
	.align	2
	.global	_ZN5ImGui19SetItemDefaultFocusEv
	.type	_ZN5ImGui19SetItemDefaultFocusEv, %function
_ZN5ImGui19SetItemDefaultFocusEv:
.LFB1913:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 156]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3014
	ldr	x0, [sp, 32]
	ldr	x1, [x0, 18536]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 880]
	cmp	x1, x0
	bne	.L3015
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2221]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3012
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2224]
	cmp	w0, 0
	beq	.L3015
.L3012:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [x0, 2212]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 312]
	cmp	w1, w0
	bne	.L3015
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	strb	wzr, [x0, 2221]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [x0, 1828]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2224]
	ldr	x1, [sp, 32]
	mov	x0, 18224
	add	x2, x1, x0
	ldr	x1, [sp, 32]
	mov	x0, 18432
	add	x0, x1, x0
	add	x19, x0, 180
	mov	x1, x2
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [x19]
	str	s4, [x19, 4]
	str	s1, [x19, 8]
	str	s0, [x19, 12]
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	bl	_ZN5ImGui13IsItemVisibleEv
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3008
	ldr	x1, [sp, 32]
	mov	x0, 18224
	add	x0, x1, x0
	mov	w2, 0
	mov	x1, x0
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	b	.L3008
.L3014:
	nop
	b	.L3008
.L3015:
	nop
.L3008:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1913:
	.size	_ZN5ImGui19SetItemDefaultFocusEv, .-_ZN5ImGui19SetItemDefaultFocusEv
	.align	2
	.global	_ZN5ImGui15SetStateStorageEP12ImGuiStorage
	.type	_ZN5ImGui15SetStateStorageEP12ImGuiStorage, %function
_ZN5ImGui15SetStateStorageEP12ImGuiStorage:
.LFB1914:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
	cmp	x0, 0
	bne	.L3017
	ldr	x0, [sp, 24]
	add	x0, x0, 592
	b	.L3018
.L3017:
	ldr	x0, [sp, 8]
.L3018:
	ldr	x1, [sp, 24]
	str	x0, [x1, 384]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1914:
	.size	_ZN5ImGui15SetStateStorageEP12ImGuiStorage, .-_ZN5ImGui15SetStateStorageEP12ImGuiStorage
	.align	2
	.global	_ZN5ImGui15GetStateStorageEv
	.type	_ZN5ImGui15GetStateStorageEv, %function
_ZN5ImGui15GetStateStorageEv:
.LFB1915:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 384]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1915:
	.size	_ZN5ImGui15GetStateStorageEv, .-_ZN5ImGui15GetStateStorageEv
	.align	2
	.global	_ZN5ImGui6PushIDEPKc
	.type	_ZN5ImGui6PushIDEPKc, %function
_ZN5ImGui6PushIDEPKc:
.LFB1916:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 48]
	mov	x2, 0
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 48]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	str	w0, [sp, 36]
	ldr	x0, [sp, 48]
	add	x0, x0, 208
	add	x1, sp, 36
	bl	_ZN8ImVectorIjE9push_backERKj
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3022
	bl	__stack_chk_fail
.L3022:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1916:
	.size	_ZN5ImGui6PushIDEPKc, .-_ZN5ImGui6PushIDEPKc
	.align	2
	.global	_ZN5ImGui6PushIDEPKcS1_
	.type	_ZN5ImGui6PushIDEPKcS1_, %function
_ZN5ImGui6PushIDEPKcS1_:
.LFB1917:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 48]
	ldr	x2, [sp, 16]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 48]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	str	w0, [sp, 36]
	ldr	x0, [sp, 48]
	add	x0, x0, 208
	add	x1, sp, 36
	bl	_ZN8ImVectorIjE9push_backERKj
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3024
	bl	__stack_chk_fail
.L3024:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1917:
	.size	_ZN5ImGui6PushIDEPKcS1_, .-_ZN5ImGui6PushIDEPKcS1_
	.align	2
	.global	_ZN5ImGui6PushIDEPKv
	.type	_ZN5ImGui6PushIDEPKv, %function
_ZN5ImGui6PushIDEPKv:
.LFB1918:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 48]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 48]
	bl	_ZN11ImGuiWindow5GetIDEPKv
	str	w0, [sp, 36]
	ldr	x0, [sp, 48]
	add	x0, x0, 208
	add	x1, sp, 36
	bl	_ZN8ImVectorIjE9push_backERKj
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3026
	bl	__stack_chk_fail
.L3026:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1918:
	.size	_ZN5ImGui6PushIDEPKv, .-_ZN5ImGui6PushIDEPKv
	.align	2
	.global	_ZN5ImGui6PushIDEi
	.type	_ZN5ImGui6PushIDEi, %function
_ZN5ImGui6PushIDEi:
.LFB1919:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 48]
	ldr	w1, [sp, 28]
	ldr	x0, [sp, 48]
	bl	_ZN11ImGuiWindow5GetIDEi
	str	w0, [sp, 36]
	ldr	x0, [sp, 48]
	add	x0, x0, 208
	add	x1, sp, 36
	bl	_ZN8ImVectorIjE9push_backERKj
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3028
	bl	__stack_chk_fail
.L3028:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1919:
	.size	_ZN5ImGui6PushIDEi, .-_ZN5ImGui6PushIDEi
	.align	2
	.global	_ZN5ImGui14PushOverrideIDEj
	.type	_ZN5ImGui14PushOverrideIDEj, %function
_ZN5ImGui14PushOverrideIDEj:
.LFB1920:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	ldr	w1, [x0, 16084]
	ldr	w0, [sp, 28]
	cmp	w1, w0
	bne	.L3030
	ldr	w0, [sp, 28]
	mov	x3, 0
	mov	x2, 0
	mov	w1, 13
	bl	_ZN5ImGui15DebugHookIdInfoEjiPKvS1_
.L3030:
	ldr	x0, [sp, 40]
	add	x0, x0, 208
	add	x1, sp, 28
	bl	_ZN8ImVectorIjE9push_backERKj
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1920:
	.size	_ZN5ImGui14PushOverrideIDEj, .-_ZN5ImGui14PushOverrideIDEj
	.align	2
	.global	_ZN5ImGui13GetIDWithSeedEPKcS1_j
	.type	_ZN5ImGui13GetIDWithSeedEPKcS1_j, %function
_ZN5ImGui13GetIDWithSeedEPKcS1_j:
.LFB1921:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L3032
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	sub	x0, x1, x0
	b	.L3033
.L3032:
	mov	x0, 0
.L3033:
	ldr	w2, [sp, 28]
	mov	x1, x0
	ldr	x0, [sp, 40]
	bl	_Z9ImHashStrPKcmj
	str	w0, [sp, 52]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 16084]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	bne	.L3034
	ldr	x3, [sp, 32]
	ldr	x2, [sp, 40]
	mov	w1, 11
	ldr	w0, [sp, 52]
	bl	_ZN5ImGui15DebugHookIdInfoEjiPKvS1_
.L3034:
	ldr	w0, [sp, 52]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1921:
	.size	_ZN5ImGui13GetIDWithSeedEPKcS1_j, .-_ZN5ImGui13GetIDWithSeedEPKcS1_j
	.section	.rodata
	.align	3
.LC295:
	.string	"void ImGui::PopID()"
	.align	3
.LC296:
	.string	"window->IDStack.Size > 1"
	.text
	.align	2
	.global	_ZN5ImGui5PopIDEv
	.type	_ZN5ImGui5PopIDEv, %function
_ZN5ImGui5PopIDEv:
.LFB1922:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 208]
	cmp	w0, 1
	bgt	.L3037
	adrp	x0, .LC295
	add	x3, x0, :lo12:.LC295
	mov	w2, 7820
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC296
	add	x0, x0, :lo12:.LC296
	bl	__assert_fail
.L3037:
	ldr	x0, [sp, 24]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjE8pop_backEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1922:
	.size	_ZN5ImGui5PopIDEv, .-_ZN5ImGui5PopIDEv
	.align	2
	.global	_ZN5ImGui5GetIDEPKc
	.type	_ZN5ImGui5GetIDEPKc, %function
_ZN5ImGui5GetIDEPKc:
.LFB1923:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	mov	x2, 0
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 40]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1923:
	.size	_ZN5ImGui5GetIDEPKc, .-_ZN5ImGui5GetIDEPKc
	.align	2
	.global	_ZN5ImGui5GetIDEPKcS1_
	.type	_ZN5ImGui5GetIDEPKcS1_, %function
_ZN5ImGui5GetIDEPKcS1_:
.LFB1924:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x2, [sp, 16]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 40]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1924:
	.size	_ZN5ImGui5GetIDEPKcS1_, .-_ZN5ImGui5GetIDEPKcS1_
	.align	2
	.global	_ZN5ImGui5GetIDEPKv
	.type	_ZN5ImGui5GetIDEPKv, %function
_ZN5ImGui5GetIDEPKv:
.LFB1925:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 40]
	bl	_ZN11ImGuiWindow5GetIDEPKv
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1925:
	.size	_ZN5ImGui5GetIDEPKv, .-_ZN5ImGui5GetIDEPKv
	.align	2
	.global	_ZN5ImGui13IsRectVisibleERK6ImVec2
	.type	_ZN5ImGui13IsRectVisibleERK6ImVec2, %function
_ZN5ImGui13IsRectVisibleERK6ImVec2:
.LFB1926:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	add	x19, x0, 536
	ldr	x0, [sp, 64]
	add	x20, x0, 224
	ldr	x0, [sp, 64]
	add	x0, x0, 224
	ldr	x1, [sp, 40]
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	add	x1, sp, 56
	add	x0, sp, 72
	mov	x2, x1
	mov	x1, x20
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x0, sp, 72
	mov	x1, x0
	mov	x0, x19
	bl	_ZNK6ImRect8OverlapsERKS_
	and	w0, w0, 255
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 88]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L3046
	bl	__stack_chk_fail
.L3046:
	mov	w0, w1
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1926:
	.size	_ZN5ImGui13IsRectVisibleERK6ImVec2, .-_ZN5ImGui13IsRectVisibleERK6ImVec2
	.align	2
	.global	_ZN5ImGui13IsRectVisibleERK6ImVec2S2_
	.type	_ZN5ImGui13IsRectVisibleERK6ImVec2S2_, %function
_ZN5ImGui13IsRectVisibleERK6ImVec2S2_:
.LFB1927:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	add	x19, x0, 536
	add	x0, sp, 56
	ldr	x2, [sp, 32]
	ldr	x1, [sp, 40]
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x0, sp, 56
	mov	x1, x0
	mov	x0, x19
	bl	_ZNK6ImRect8OverlapsERKS_
	and	w0, w0, 255
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 72]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L3049
	bl	__stack_chk_fail
.L3049:
	mov	w0, w1
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1927:
	.size	_ZN5ImGui13IsRectVisibleERK6ImVec2S2_, .-_ZN5ImGui13IsRectVisibleERK6ImVec2S2_
	.align	2
	.global	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	.type	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b, %function
_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b:
.LFB1928:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	strb	w2, [sp, 31]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	add	x0, sp, 72
	ldr	x2, [sp, 32]
	ldr	x1, [sp, 40]
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldrb	w0, [sp, 31]
	cmp	w0, 0
	beq	.L3051
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16032]
	add	x1, x0, 536
	add	x0, sp, 72
	bl	_ZN6ImRect8ClipWithERKS_
.L3051:
	ldr	x1, [sp, 64]
	mov	x0, 14404
	add	x1, x1, x0
	add	x0, sp, 72
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x1, [sp, 64]
	mov	x0, 14404
	add	x1, x1, x0
	add	x0, sp, 72
	add	x0, x0, 8
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	add	x2, sp, 56
	add	x1, sp, 48
	add	x0, sp, 88
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	x0, [sp, 64]
	add	x1, x0, 3580
	add	x0, sp, 88
	bl	_ZNK6ImRect8ContainsERK6ImVec2
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3052
	mov	w0, 0
	b	.L3054
.L3052:
	mov	w0, 1
.L3054:
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 104]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L3055
	bl	__stack_chk_fail
.L3055:
	mov	w0, w1
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1928:
	.size	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b, .-_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	.section	.rodata
	.align	3
.LC297:
	.string	"ImGuiKeyData* ImGui::GetKeyData(ImGuiKey)"
	.align	3
.LC298:
	.string	"key >= 0 && key < ImGuiKey_NamedKey_END"
	.text
	.align	2
	.global	_ZN5ImGui10GetKeyDataE8ImGuiKey
	.type	_ZN5ImGui10GetKeyDataE8ImGuiKey, %function
_ZN5ImGui10GetKeyDataE8ImGuiKey:
.LFB1929:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	and	w0, w0, 61440
	cmp	w0, 0
	beq	.L3057
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey
	str	w0, [sp, 28]
.L3057:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3058
	ldr	w0, [sp, 28]
	cmp	w0, 651
	ble	.L3065
.L3058:
	adrp	x0, .LC297
	add	x3, x0, :lo12:.LC297
	mov	w2, 7888
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC298
	add	x0, x0, :lo12:.LC298
	bl	__assert_fail
.L3065:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui11IsLegacyKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3060
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 16]
	cmn	w0, #1
	beq	.L3061
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 16]
	b	.L3062
.L3061:
	ldr	w0, [sp, 28]
.L3062:
	str	w0, [sp, 36]
	b	.L3063
.L3060:
	ldr	w0, [sp, 28]
	str	w0, [sp, 36]
.L3063:
	ldrsw	x0, [sp, 36]
	add	x0, x0, 225
	lsl	x0, x0, 4
	ldr	x1, [sp, 40]
	add	x0, x1, x0
	add	x0, x0, 12
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1929:
	.size	_ZN5ImGui10GetKeyDataE8ImGuiKey, .-_ZN5ImGui10GetKeyDataE8ImGuiKey
	.section	.rodata
	.align	3
.LC299:
	.string	"ImGuiKey ImGui::GetKeyIndex(ImGuiKey)"
	.text
	.align	2
	.global	_ZN5ImGui11GetKeyIndexE8ImGuiKey
	.type	_ZN5ImGui11GetKeyIndexE8ImGuiKey, %function
_ZN5ImGui11GetKeyIndexE8ImGuiKey:
.LFB1930:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10IsNamedKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3067
	adrp	x0, .LC299
	add	x3, x0, :lo12:.LC299
	mov	w2, 7904
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC42
	add	x0, x0, :lo12:.LC42
	bl	__assert_fail
.L3067:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	add	x0, x0, 3612
	ldr	x1, [sp, 40]
	sub	x0, x1, x0
	asr	x0, x0, 4
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1930:
	.size	_ZN5ImGui11GetKeyIndexE8ImGuiKey, .-_ZN5ImGui11GetKeyIndexE8ImGuiKey
	.section	.rodata
	.align	3
.LC300:
	.string	"LeftArrow"
	.align	3
.LC301:
	.string	"RightArrow"
	.align	3
.LC302:
	.string	"UpArrow"
	.align	3
.LC303:
	.string	"DownArrow"
	.align	3
.LC304:
	.string	"PageUp"
	.align	3
.LC305:
	.string	"PageDown"
	.align	3
.LC306:
	.string	"Home"
	.align	3
.LC307:
	.string	"End"
	.align	3
.LC308:
	.string	"Insert"
	.align	3
.LC309:
	.string	"Delete"
	.align	3
.LC310:
	.string	"Backspace"
	.align	3
.LC311:
	.string	"Space"
	.align	3
.LC312:
	.string	"Enter"
	.align	3
.LC313:
	.string	"Escape"
	.align	3
.LC314:
	.string	"LeftCtrl"
	.align	3
.LC315:
	.string	"LeftShift"
	.align	3
.LC316:
	.string	"LeftAlt"
	.align	3
.LC317:
	.string	"LeftSuper"
	.align	3
.LC318:
	.string	"RightCtrl"
	.align	3
.LC319:
	.string	"RightShift"
	.align	3
.LC320:
	.string	"RightAlt"
	.align	3
.LC321:
	.string	"RightSuper"
	.align	3
.LC322:
	.string	"Menu"
	.align	3
.LC323:
	.string	"1"
	.align	3
.LC324:
	.string	"2"
	.align	3
.LC325:
	.string	"3"
	.align	3
.LC326:
	.string	"4"
	.align	3
.LC327:
	.string	"5"
	.align	3
.LC328:
	.string	"6"
	.align	3
.LC329:
	.string	"7"
	.align	3
.LC330:
	.string	"8"
	.align	3
.LC331:
	.string	"9"
	.align	3
.LC332:
	.string	"A"
	.align	3
.LC333:
	.string	"B"
	.align	3
.LC334:
	.string	"C"
	.align	3
.LC335:
	.string	"D"
	.align	3
.LC336:
	.string	"E"
	.align	3
.LC337:
	.string	"F"
	.align	3
.LC338:
	.string	"G"
	.align	3
.LC339:
	.string	"H"
	.align	3
.LC340:
	.string	"I"
	.align	3
.LC341:
	.string	"J"
	.align	3
.LC342:
	.string	"K"
	.align	3
.LC343:
	.string	"L"
	.align	3
.LC344:
	.string	"M"
	.align	3
.LC345:
	.string	"N"
	.align	3
.LC346:
	.string	"O"
	.align	3
.LC347:
	.string	"P"
	.align	3
.LC348:
	.string	"Q"
	.align	3
.LC349:
	.string	"R"
	.align	3
.LC350:
	.string	"S"
	.align	3
.LC351:
	.string	"T"
	.align	3
.LC352:
	.string	"U"
	.align	3
.LC353:
	.string	"V"
	.align	3
.LC354:
	.string	"W"
	.align	3
.LC355:
	.string	"X"
	.align	3
.LC356:
	.string	"Y"
	.align	3
.LC357:
	.string	"Z"
	.align	3
.LC358:
	.string	"F1"
	.align	3
.LC359:
	.string	"F2"
	.align	3
.LC360:
	.string	"F3"
	.align	3
.LC361:
	.string	"F4"
	.align	3
.LC362:
	.string	"F5"
	.align	3
.LC363:
	.string	"F6"
	.align	3
.LC364:
	.string	"F7"
	.align	3
.LC365:
	.string	"F8"
	.align	3
.LC366:
	.string	"F9"
	.align	3
.LC367:
	.string	"F10"
	.align	3
.LC368:
	.string	"F11"
	.align	3
.LC369:
	.string	"F12"
	.align	3
.LC370:
	.string	"Apostrophe"
	.align	3
.LC371:
	.string	"Comma"
	.align	3
.LC372:
	.string	"Minus"
	.align	3
.LC373:
	.string	"Period"
	.align	3
.LC374:
	.string	"Slash"
	.align	3
.LC375:
	.string	"Semicolon"
	.align	3
.LC376:
	.string	"Equal"
	.align	3
.LC377:
	.string	"LeftBracket"
	.align	3
.LC378:
	.string	"Backslash"
	.align	3
.LC379:
	.string	"RightBracket"
	.align	3
.LC380:
	.string	"GraveAccent"
	.align	3
.LC381:
	.string	"CapsLock"
	.align	3
.LC382:
	.string	"ScrollLock"
	.align	3
.LC383:
	.string	"NumLock"
	.align	3
.LC384:
	.string	"PrintScreen"
	.align	3
.LC385:
	.string	"Pause"
	.align	3
.LC386:
	.string	"Keypad0"
	.align	3
.LC387:
	.string	"Keypad1"
	.align	3
.LC388:
	.string	"Keypad2"
	.align	3
.LC389:
	.string	"Keypad3"
	.align	3
.LC390:
	.string	"Keypad4"
	.align	3
.LC391:
	.string	"Keypad5"
	.align	3
.LC392:
	.string	"Keypad6"
	.align	3
.LC393:
	.string	"Keypad7"
	.align	3
.LC394:
	.string	"Keypad8"
	.align	3
.LC395:
	.string	"Keypad9"
	.align	3
.LC396:
	.string	"KeypadDecimal"
	.align	3
.LC397:
	.string	"KeypadDivide"
	.align	3
.LC398:
	.string	"KeypadMultiply"
	.align	3
.LC399:
	.string	"KeypadSubtract"
	.align	3
.LC400:
	.string	"KeypadAdd"
	.align	3
.LC401:
	.string	"KeypadEnter"
	.align	3
.LC402:
	.string	"KeypadEqual"
	.align	3
.LC403:
	.string	"GamepadStart"
	.align	3
.LC404:
	.string	"GamepadBack"
	.align	3
.LC405:
	.string	"GamepadFaceLeft"
	.align	3
.LC406:
	.string	"GamepadFaceRight"
	.align	3
.LC407:
	.string	"GamepadFaceUp"
	.align	3
.LC408:
	.string	"GamepadFaceDown"
	.align	3
.LC409:
	.string	"GamepadDpadLeft"
	.align	3
.LC410:
	.string	"GamepadDpadRight"
	.align	3
.LC411:
	.string	"GamepadDpadUp"
	.align	3
.LC412:
	.string	"GamepadDpadDown"
	.align	3
.LC413:
	.string	"GamepadL1"
	.align	3
.LC414:
	.string	"GamepadR1"
	.align	3
.LC415:
	.string	"GamepadL2"
	.align	3
.LC416:
	.string	"GamepadR2"
	.align	3
.LC417:
	.string	"GamepadL3"
	.align	3
.LC418:
	.string	"GamepadR3"
	.align	3
.LC419:
	.string	"GamepadLStickLeft"
	.align	3
.LC420:
	.string	"GamepadLStickRight"
	.align	3
.LC421:
	.string	"GamepadLStickUp"
	.align	3
.LC422:
	.string	"GamepadLStickDown"
	.align	3
.LC423:
	.string	"GamepadRStickLeft"
	.align	3
.LC424:
	.string	"GamepadRStickRight"
	.align	3
.LC425:
	.string	"GamepadRStickUp"
	.align	3
.LC426:
	.string	"GamepadRStickDown"
	.align	3
.LC427:
	.string	"MouseLeft"
	.align	3
.LC428:
	.string	"MouseRight"
	.align	3
.LC429:
	.string	"MouseMiddle"
	.align	3
.LC430:
	.string	"MouseX1"
	.align	3
.LC431:
	.string	"MouseX2"
	.align	3
.LC432:
	.string	"MouseWheelX"
	.align	3
.LC433:
	.string	"MouseWheelY"
	.align	3
.LC434:
	.string	"ModCtrl"
	.align	3
.LC435:
	.string	"ModShift"
	.align	3
.LC436:
	.string	"ModAlt"
	.align	3
.LC437:
	.string	"ModSuper"
	.section	.data.rel.ro.local
	.align	3
	.type	_ZL9GKeyNames, %object
	.size	_ZL9GKeyNames, 1120
_ZL9GKeyNames:
	.xword	.LC134
	.xword	.LC300
	.xword	.LC301
	.xword	.LC302
	.xword	.LC303
	.xword	.LC304
	.xword	.LC305
	.xword	.LC306
	.xword	.LC307
	.xword	.LC308
	.xword	.LC309
	.xword	.LC310
	.xword	.LC311
	.xword	.LC312
	.xword	.LC313
	.xword	.LC314
	.xword	.LC315
	.xword	.LC316
	.xword	.LC317
	.xword	.LC318
	.xword	.LC319
	.xword	.LC320
	.xword	.LC321
	.xword	.LC322
	.xword	.LC155
	.xword	.LC323
	.xword	.LC324
	.xword	.LC325
	.xword	.LC326
	.xword	.LC327
	.xword	.LC328
	.xword	.LC329
	.xword	.LC330
	.xword	.LC331
	.xword	.LC332
	.xword	.LC333
	.xword	.LC334
	.xword	.LC335
	.xword	.LC336
	.xword	.LC337
	.xword	.LC338
	.xword	.LC339
	.xword	.LC340
	.xword	.LC341
	.xword	.LC342
	.xword	.LC343
	.xword	.LC344
	.xword	.LC345
	.xword	.LC346
	.xword	.LC347
	.xword	.LC348
	.xword	.LC349
	.xword	.LC350
	.xword	.LC351
	.xword	.LC352
	.xword	.LC353
	.xword	.LC354
	.xword	.LC355
	.xword	.LC356
	.xword	.LC357
	.xword	.LC358
	.xword	.LC359
	.xword	.LC360
	.xword	.LC361
	.xword	.LC362
	.xword	.LC363
	.xword	.LC364
	.xword	.LC365
	.xword	.LC366
	.xword	.LC367
	.xword	.LC368
	.xword	.LC369
	.xword	.LC370
	.xword	.LC371
	.xword	.LC372
	.xword	.LC373
	.xword	.LC374
	.xword	.LC375
	.xword	.LC376
	.xword	.LC377
	.xword	.LC378
	.xword	.LC379
	.xword	.LC380
	.xword	.LC381
	.xword	.LC382
	.xword	.LC383
	.xword	.LC384
	.xword	.LC385
	.xword	.LC386
	.xword	.LC387
	.xword	.LC388
	.xword	.LC389
	.xword	.LC390
	.xword	.LC391
	.xword	.LC392
	.xword	.LC393
	.xword	.LC394
	.xword	.LC395
	.xword	.LC396
	.xword	.LC397
	.xword	.LC398
	.xword	.LC399
	.xword	.LC400
	.xword	.LC401
	.xword	.LC402
	.xword	.LC403
	.xword	.LC404
	.xword	.LC405
	.xword	.LC406
	.xword	.LC407
	.xword	.LC408
	.xword	.LC409
	.xword	.LC410
	.xword	.LC411
	.xword	.LC412
	.xword	.LC413
	.xword	.LC414
	.xword	.LC415
	.xword	.LC416
	.xword	.LC417
	.xword	.LC418
	.xword	.LC419
	.xword	.LC420
	.xword	.LC421
	.xword	.LC422
	.xword	.LC423
	.xword	.LC424
	.xword	.LC425
	.xword	.LC426
	.xword	.LC427
	.xword	.LC428
	.xword	.LC429
	.xword	.LC430
	.xword	.LC431
	.xword	.LC432
	.xword	.LC433
	.xword	.LC434
	.xword	.LC435
	.xword	.LC436
	.xword	.LC437
	.section	.rodata
	.align	3
.LC438:
	.string	"N/A"
	.align	3
.LC439:
	.string	"const char* ImGui::GetKeyName(ImGuiKey)"
	.align	3
.LC440:
	.string	"IsNamedKey((ImGuiKey)io.KeyMap[key])"
	.align	3
.LC0:
	.string	"None"
	.align	3
.LC441:
	.string	"Unknown"
	.text
	.align	2
	.global	_ZN5ImGui10GetKeyNameE8ImGuiKey
	.type	_ZN5ImGui10GetKeyNameE8ImGuiKey, %function
_ZN5ImGui10GetKeyNameE8ImGuiKey:
.LFB1931:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui11IsLegacyKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3070
	bl	_ZN5ImGui5GetIOEv
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	cmn	w0, #1
	bne	.L3071
	adrp	x0, .LC438
	add	x0, x0, :lo12:.LC438
	b	.L3072
.L3071:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	bl	_ZN5ImGui10IsNamedKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3073
	adrp	x0, .LC439
	add	x3, x0, :lo12:.LC439
	mov	w2, 7945
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC440
	add	x0, x0, :lo12:.LC440
	bl	__assert_fail
.L3073:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	str	w0, [sp, 28]
.L3070:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bne	.L3074
	adrp	x0, .LC0
	add	x0, x0, :lo12:.LC0
	b	.L3072
.L3074:
	ldr	w0, [sp, 28]
	and	w0, w0, 61440
	cmp	w0, 0
	beq	.L3075
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey
	str	w0, [sp, 28]
.L3075:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10IsNamedKeyE8ImGuiKey
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3076
	adrp	x0, .LC441
	add	x0, x0, :lo12:.LC441
	b	.L3072
.L3076:
	ldr	w0, [sp, 28]
	sub	w1, w0, #512
	adrp	x0, _ZL9GKeyNames
	add	x0, x0, :lo12:_ZL9GKeyNames
	sxtw	x1, w1
	ldr	x0, [x0, x1, lsl 3]
.L3072:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1931:
	.size	_ZN5ImGui10GetKeyNameE8ImGuiKey, .-_ZN5ImGui10GetKeyNameE8ImGuiKey
	.section	.rodata
	.align	3
.LC442:
	.string	"Ctrl+"
	.align	3
.LC443:
	.string	"Shift+"
	.align	3
.LC444:
	.string	"Alt+"
	.align	3
.LC445:
	.string	"Cmd+"
	.align	3
.LC446:
	.string	"Super+"
	.align	3
.LC447:
	.string	"%s%s%s%s%s"
	.text
	.align	2
	.global	_ZN5ImGui15GetKeyChordNameEiPci
	.type	_ZN5ImGui15GetKeyChordNameEiPci, %function
_ZN5ImGui15GetKeyChordNameEiPci:
.LFB1932:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	stp	x21, x22, [sp, 32]
	str	x23, [sp, 48]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	.cfi_offset 21, -64
	.cfi_offset 22, -56
	.cfi_offset 23, -48
	str	w0, [sp, 76]
	str	x1, [sp, 64]
	str	w2, [sp, 72]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 88]
	ldrsw	x23, [sp, 72]
	ldr	w0, [sp, 76]
	and	w0, w0, 4096
	cmp	w0, 0
	beq	.L3078
	adrp	x0, .LC442
	add	x20, x0, :lo12:.LC442
	b	.L3079
.L3078:
	adrp	x0, .LC67
	add	x20, x0, :lo12:.LC67
.L3079:
	ldr	w0, [sp, 76]
	and	w0, w0, 8192
	cmp	w0, 0
	beq	.L3080
	adrp	x0, .LC443
	add	x21, x0, :lo12:.LC443
	b	.L3081
.L3080:
	adrp	x0, .LC67
	add	x21, x0, :lo12:.LC67
.L3081:
	ldr	w0, [sp, 76]
	and	w0, w0, 16384
	cmp	w0, 0
	beq	.L3082
	adrp	x0, .LC444
	add	x22, x0, :lo12:.LC444
	b	.L3083
.L3082:
	adrp	x0, .LC67
	add	x22, x0, :lo12:.LC67
.L3083:
	ldr	w0, [sp, 76]
	and	w0, w0, 32768
	cmp	w0, 0
	beq	.L3084
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 121]
	cmp	w0, 0
	beq	.L3085
	adrp	x0, .LC445
	add	x19, x0, :lo12:.LC445
	b	.L3087
.L3085:
	adrp	x0, .LC446
	add	x19, x0, :lo12:.LC446
	b	.L3087
.L3084:
	adrp	x0, .LC67
	add	x19, x0, :lo12:.LC67
.L3087:
	ldr	w0, [sp, 76]
	and	w0, w0, -61441
	bl	_ZN5ImGui10GetKeyNameE8ImGuiKey
	mov	x7, x0
	mov	x6, x19
	mov	x5, x22
	mov	x4, x21
	mov	x3, x20
	adrp	x0, .LC447
	add	x2, x0, :lo12:.LC447
	mov	x1, x23
	ldr	x0, [sp, 64]
	bl	_Z14ImFormatStringPcmPKcz
	nop
	ldp	x19, x20, [sp, 16]
	ldp	x21, x22, [sp, 32]
	ldr	x23, [sp, 48]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 23
	.cfi_restore 21
	.cfi_restore 22
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1932:
	.size	_ZN5ImGui15GetKeyChordNameEiPci, .-_ZN5ImGui15GetKeyChordNameEiPci
	.align	2
	.global	_ZN5ImGui25CalcTypematicRepeatAmountEffff
	.type	_ZN5ImGui25CalcTypematicRepeatAmountEffff, %function
_ZN5ImGui25CalcTypematicRepeatAmountEffff:
.LFB1933:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	s0, [sp, 12]
	str	s1, [sp, 8]
	str	s2, [sp, 4]
	str	s3, [sp]
	ldr	s0, [sp, 8]
	fcmp	s0, #0.0
	bne	.L3089
	mov	w0, 1
	b	.L3090
.L3089:
	ldr	s1, [sp, 12]
	ldr	s0, [sp, 8]
	fcmpe	s1, s0
	bge	.L3105
	b	.L3111
.L3105:
	mov	w0, 0
	b	.L3090
.L3111:
	ldr	s0, [sp]
	fcmpe	s0, #0.0
	bls	.L3106
	b	.L3112
.L3106:
	ldr	s1, [sp, 12]
	ldr	s0, [sp, 4]
	fcmpe	s1, s0
	bmi	.L3107
	b	.L3095
.L3107:
	ldr	s1, [sp, 8]
	ldr	s0, [sp, 4]
	fcmpe	s1, s0
	bge	.L3108
	b	.L3095
.L3108:
	mov	w0, 1
	b	.L3098
.L3095:
	mov	w0, 0
.L3098:
	b	.L3090
.L3112:
	ldr	s1, [sp, 12]
	ldr	s0, [sp, 4]
	fcmpe	s1, s0
	bmi	.L3109
	b	.L3113
.L3109:
	mvni	v0.2s, 0
	b	.L3101
.L3113:
	ldr	s1, [sp, 12]
	ldr	s0, [sp, 4]
	fsub	s1, s1, s0
	ldr	s0, [sp]
	fdiv	s0, s1, s0
	fcvtzs	s0, s0
.L3101:
	str	s0, [sp, 20]
	ldr	s1, [sp, 8]
	ldr	s0, [sp, 4]
	fcmpe	s1, s0
	bmi	.L3110
	b	.L3114
.L3110:
	mvni	v0.2s, 0
	b	.L3104
.L3114:
	ldr	s1, [sp, 8]
	ldr	s0, [sp, 4]
	fsub	s1, s1, s0
	ldr	s0, [sp]
	fdiv	s0, s1, s0
	fcvtzs	s0, s0
.L3104:
	str	s0, [sp, 24]
	ldr	w1, [sp, 24]
	ldr	w0, [sp, 20]
	sub	w0, w1, w0
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
.L3090:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1933:
	.size	_ZN5ImGui25CalcTypematicRepeatAmountEffff, .-_ZN5ImGui25CalcTypematicRepeatAmountEffff
	.align	2
	.global	_ZN5ImGui22GetTypematicRepeatRateEiPfS0_
	.type	_ZN5ImGui22GetTypematicRepeatRateEiPfS0_, %function
_ZN5ImGui22GetTypematicRepeatRateEiPfS0_:
.LFB1934:
	.cfi_startproc
	sub	sp, sp, #48
	.cfi_def_cfa_offset 48
	str	w0, [sp, 28]
	str	x1, [sp, 16]
	str	x2, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	and	w0, w0, 14
	cmp	w0, 4
	beq	.L3116
	cmp	w0, 8
	beq	.L3117
	b	.L3120
.L3116:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 60]
	mov	w0, 20972
	movk	w0, 0x3f38, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	ldr	x0, [sp, 16]
	str	s0, [x0]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 64]
	mov	w0, 52429
	movk	w0, 0x3f4c, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	ldr	x0, [sp, 8]
	str	s0, [x0]
	b	.L3115
.L3117:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 60]
	mov	w0, 20972
	movk	w0, 0x3f38, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	ldr	x0, [sp, 16]
	str	s0, [x0]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 64]
	mov	w0, 39322
	movk	w0, 0x3e99, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	ldr	x0, [sp, 8]
	str	s0, [x0]
	b	.L3115
.L3120:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 60]
	ldr	x0, [sp, 16]
	str	s0, [x0]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 64]
	ldr	x0, [sp, 8]
	str	s0, [x0]
	nop
.L3115:
	add	sp, sp, 48
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1934:
	.size	_ZN5ImGui22GetTypematicRepeatRateEiPfS0_, .-_ZN5ImGui22GetTypematicRepeatRateEiPfS0_
	.align	2
	.global	_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff
	.type	_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff, %function
_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff:
.LFB1935:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	str	s0, [sp, 24]
	str	s1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldrb	w0, [x0]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3122
	mov	w0, 0
	b	.L3123
.L3122:
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 4]
	str	s0, [sp, 44]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 24]
	ldr	s1, [sp, 44]
	fsub	s0, s1, s0
	ldr	s3, [sp, 20]
	ldr	s2, [sp, 24]
	ldr	s1, [sp, 44]
	bl	_ZN5ImGui25CalcTypematicRepeatAmountEffff
	nop
.L3123:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1935:
	.size	_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff, .-_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff
	.align	2
	.global	_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_
	.type	_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_, %function
_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_:
.LFB1936:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	stp	d8, d9, [sp, 16]
	.cfi_offset 72, -48
	.cfi_offset 73, -40
	str	w0, [sp, 44]
	str	w1, [sp, 40]
	str	w2, [sp, 36]
	str	w3, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	ldr	s8, [x0, 12]
	ldr	w0, [sp, 44]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	ldr	s0, [x0, 12]
	fsub	s9, s8, s0
	ldr	w0, [sp, 32]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	ldr	s8, [x0, 12]
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	ldr	s0, [x0, 12]
	fsub	s0, s8, s0
	add	x0, sp, 48
	fmov	s1, s0
	fmov	s0, s9
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 48]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3126
	bl	__stack_chk_fail
.L3126:
	ldp	d8, d9, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_restore 73
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1936:
	.size	_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_, .-_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_
	.align	2
	.type	_ZL23GetRoutingIdFromOwnerIdj, %function
_ZL23GetRoutingIdFromOwnerIdj:
.LFB1937:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	w0, [sp, 12]
	cmn	w0, #1
	beq	.L3128
	ldr	w0, [sp, 12]
	cmp	w0, 0
	bne	.L3129
.L3128:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 1796]
	b	.L3130
.L3129:
	ldr	w0, [sp, 12]
.L3130:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1937:
	.size	_ZL23GetRoutingIdFromOwnerIdj, .-_ZL23GetRoutingIdFromOwnerIdj
	.section	.rodata
	.align	3
.LC448:
	.string	"ImGuiKeyRoutingData* ImGui::GetShortcutRoutingData(ImGuiKeyChord)"
	.text
	.align	2
	.global	_ZN5ImGui22GetShortcutRoutingDataEi
	.type	_ZN5ImGui22GetShortcutRoutingDataEi, %function
_ZN5ImGui22GetShortcutRoutingDataEi:
.LFB1938:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -96
	str	w0, [sp, 44]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x1, [sp, 64]
	mov	x0, 17856
	add	x0, x1, x0
	str	x0, [sp, 72]
	ldr	w0, [sp, 44]
	and	w0, w0, -61441
	str	w0, [sp, 56]
	ldr	w0, [sp, 44]
	and	w0, w0, 61440
	str	w0, [sp, 60]
	ldr	w0, [sp, 56]
	cmp	w0, 0
	bne	.L3133
	ldr	w0, [sp, 60]
	bl	_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey
	str	w0, [sp, 56]
.L3133:
	ldr	w0, [sp, 56]
	bl	_ZN5ImGui10IsNamedKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3134
	adrp	x0, .LC448
	add	x3, x0, :lo12:.LC448
	mov	w2, 8041
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC42
	add	x0, x0, :lo12:.LC42
	bl	__assert_fail
.L3134:
	ldr	w0, [sp, 56]
	sub	w1, w0, #512
	ldr	x0, [sp, 72]
	sxtw	x1, w1
	ldrh	w0, [x0, x1, lsl 1]
	strh	w0, [sp, 52]
	b	.L3135
.L3138:
	ldr	x0, [sp, 72]
	add	x0, x0, 280
	ldrsh	w1, [sp, 52]
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	ldrh	w0, [x0, 2]
	mov	w1, w0
	ldr	w0, [sp, 60]
	cmp	w0, w1
	bne	.L3136
	ldr	x0, [sp, 80]
	b	.L3137
.L3136:
	ldr	x0, [sp, 80]
	ldrh	w0, [x0]
	strh	w0, [sp, 52]
.L3135:
	ldrsh	w0, [sp, 52]
	cmn	w0, #1
	bne	.L3138
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 280]
	strh	w0, [sp, 54]
	ldr	x0, [sp, 72]
	add	x19, x0, 280
	add	x0, sp, 88
	bl	_ZN19ImGuiKeyRoutingDataC1Ev
	add	x0, sp, 88
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_
	ldr	x0, [sp, 72]
	add	x0, x0, 280
	ldrsh	w1, [sp, 54]
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi
	str	x0, [sp, 80]
	ldr	w0, [sp, 60]
	and	w1, w0, 65535
	ldr	x0, [sp, 80]
	strh	w1, [x0, 2]
	ldr	w0, [sp, 56]
	sub	w1, w0, #512
	ldr	x0, [sp, 72]
	sxtw	x1, w1
	ldrsh	w1, [x0, x1, lsl 1]
	ldr	x0, [sp, 80]
	strh	w1, [x0]
	ldr	w0, [sp, 56]
	sub	w1, w0, #512
	ldr	x0, [sp, 72]
	sxtw	x1, w1
	ldrh	w2, [sp, 54]
	strh	w2, [x0, x1, lsl 1]
	ldr	x0, [sp, 80]
.L3137:
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 104]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L3139
	bl	__stack_chk_fail
.L3139:
	mov	x0, x1
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1938:
	.size	_ZN5ImGui22GetShortcutRoutingDataEi, .-_ZN5ImGui22GetShortcutRoutingDataEi
	.section	.rodata
	.align	3
.LC449:
	.string	"int CalcRoutingScore(ImGuiWindow*, ImGuiID, ImGuiInputFlags)"
	.align	3
.LC450:
	.string	"next_score < 255"
	.text
	.align	2
	.type	_ZL16CalcRoutingScoreP11ImGuiWindowji, %function
_ZL16CalcRoutingScoreP11ImGuiWindowji:
.LFB1939:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	str	w2, [sp, 16]
	ldr	w0, [sp, 16]
	and	w0, w0, 256
	cmp	w0, 0
	beq	.L3141
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 48]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	beq	.L3142
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	bne	.L3142
	mov	w0, 1
	b	.L3143
.L3142:
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L3144
	ldr	x0, [sp, 48]
	ldr	x1, [x0, 856]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 856]
	cmp	x1, x0
	bne	.L3144
	mov	w0, 3
	str	w0, [sp, 44]
	b	.L3145
.L3150:
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 24]
	cmp	x1, x0
	bne	.L3146
	ldr	w0, [sp, 44]
	cmp	w0, 254
	ble	.L3147
	adrp	x0, .LC449
	add	x3, x0, :lo12:.LC449
	mov	w2, 8093
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC450
	add	x0, x0, :lo12:.LC450
	bl	__assert_fail
.L3147:
	ldr	w0, [sp, 44]
	b	.L3143
.L3146:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 48]
	cmp	x1, x0
	beq	.L3148
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 840]
	b	.L3149
.L3148:
	mov	x0, 0
.L3149:
	str	x0, [sp, 48]
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L3145:
	ldr	x0, [sp, 48]
	cmp	x0, 0
	bne	.L3150
.L3144:
	mov	w0, 255
	b	.L3143
.L3141:
	ldr	w0, [sp, 16]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L3151
	mov	w0, 2
	b	.L3143
.L3151:
	ldr	w0, [sp, 16]
	and	w0, w0, 512
	cmp	w0, 0
	beq	.L3152
	mov	w0, 254
	b	.L3143
.L3152:
	mov	w0, 0
.L3143:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1939:
	.size	_ZL16CalcRoutingScoreP11ImGuiWindowji, .-_ZL16CalcRoutingScoreP11ImGuiWindowji
	.section	.rodata
	.align	3
.LC451:
	.string	"bool ImGui::SetShortcutRouting(ImGuiKeyChord, ImGuiID, ImGuiInputFlags)"
	.align	3
.LC452:
	.string	"ImIsPowerOfTwo(flags & ImGuiInputFlags_RouteMask_)"
	.text
	.align	2
	.global	_ZN5ImGui18SetShortcutRoutingEiji
	.type	_ZN5ImGui18SetShortcutRoutingEiji, %function
_ZN5ImGui18SetShortcutRoutingEiji:
.LFB1940:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	w0, [sp, 20]
	and	w0, w0, 3840
	cmp	w0, 0
	bne	.L3154
	ldr	w0, [sp, 20]
	orr	w0, w0, 2048
	str	w0, [sp, 20]
	b	.L3155
.L3154:
	ldr	w0, [sp, 20]
	and	w0, w0, 3840
	bl	_ZL14ImIsPowerOfTwoi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3155
	adrp	x0, .LC451
	add	x3, x0, :lo12:.LC451
	mov	w2, 8122
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC452
	add	x0, x0, :lo12:.LC452
	bl	__assert_fail
.L3155:
	ldr	w0, [sp, 20]
	and	w0, w0, 8192
	cmp	w0, 0
	beq	.L3156
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	bne	.L3156
	mov	w0, 0
	b	.L3157
.L3156:
	ldr	w0, [sp, 20]
	and	w0, w0, 4096
	cmp	w0, 0
	beq	.L3158
	mov	w0, 1
	b	.L3157
.L3158:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	ldr	w2, [sp, 20]
	ldr	w1, [sp, 24]
	bl	_ZL16CalcRoutingScoreP11ImGuiWindowji
	str	w0, [sp, 40]
	ldr	w0, [sp, 40]
	cmp	w0, 255
	bne	.L3159
	mov	w0, 0
	b	.L3157
.L3159:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui22GetShortcutRoutingDataEi
	str	x0, [sp, 56]
	ldr	w0, [sp, 24]
	bl	_ZL23GetRoutingIdFromOwnerIdj
	str	w0, [sp, 44]
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 4]
	mov	w1, w0
	ldr	w0, [sp, 40]
	cmp	w0, w1
	bge	.L3160
	ldr	x0, [sp, 56]
	ldr	w1, [sp, 44]
	str	w1, [x0, 12]
	ldr	w0, [sp, 40]
	and	w1, w0, 255
	ldr	x0, [sp, 56]
	strb	w1, [x0, 4]
.L3160:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	cset	w0, eq
	and	w0, w0, 255
.L3157:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1940:
	.size	_ZN5ImGui18SetShortcutRoutingEiji, .-_ZN5ImGui18SetShortcutRoutingEiji
	.align	2
	.global	_ZN5ImGui19TestShortcutRoutingEij
	.type	_ZN5ImGui19TestShortcutRoutingEij, %function
_ZN5ImGui19TestShortcutRoutingEij:
.LFB1941:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	ldr	w0, [sp, 24]
	bl	_ZL23GetRoutingIdFromOwnerIdj
	str	w0, [sp, 36]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui22GetShortcutRoutingDataEi
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	cset	w0, eq
	and	w0, w0, 255
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1941:
	.size	_ZN5ImGui19TestShortcutRoutingEij, .-_ZN5ImGui19TestShortcutRoutingEij
	.align	2
	.global	_ZN5ImGui9IsKeyDownE8ImGuiKey
	.type	_ZN5ImGui9IsKeyDownE8ImGuiKey, %function
_ZN5ImGui9IsKeyDownE8ImGuiKey:
.LFB1942:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	mov	w1, 0
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKeyj
	and	w0, w0, 255
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1942:
	.size	_ZN5ImGui9IsKeyDownE8ImGuiKey, .-_ZN5ImGui9IsKeyDownE8ImGuiKey
	.align	2
	.global	_ZN5ImGui9IsKeyDownE8ImGuiKeyj
	.type	_ZN5ImGui9IsKeyDownE8ImGuiKeyj, %function
_ZN5ImGui9IsKeyDownE8ImGuiKeyj:
.LFB1943:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldrb	w0, [x0]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3166
	mov	w0, 0
	b	.L3167
.L3166:
	ldr	w1, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3168
	mov	w0, 0
	b	.L3167
.L3168:
	mov	w0, 1
.L3167:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1943:
	.size	_ZN5ImGui9IsKeyDownE8ImGuiKeyj, .-_ZN5ImGui9IsKeyDownE8ImGuiKeyj
	.align	2
	.global	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	.type	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb, %function
_ZN5ImGui12IsKeyPressedE8ImGuiKeyb:
.LFB1944:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	strb	w1, [sp, 27]
	ldrb	w0, [sp, 27]
	cmp	w0, 0
	beq	.L3170
	mov	w0, 1
	b	.L3171
.L3170:
	mov	w0, 0
.L3171:
	mov	w2, w0
	mov	w1, 0
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1944:
	.size	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb, .-_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	.section	.rodata
	.align	3
.LC453:
	.string	"bool ImGui::IsKeyPressed(ImGuiKey, ImGuiID, ImGuiInputFlags)"
	.align	3
.LC454:
	.string	"(flags & ~ImGuiInputFlags_SupportedByIsKeyPressed) == 0"
	.text
	.align	2
	.global	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	.type	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji, %function
_ZN5ImGui12IsKeyPressedE8ImGuiKeyji:
.LFB1945:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldrb	w0, [x0]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3174
	mov	w0, 0
	b	.L3175
.L3174:
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 4]
	str	s0, [sp, 44]
	ldr	s0, [sp, 44]
	fcmpe	s0, #0.0
	bmi	.L3186
	b	.L3188
.L3186:
	mov	w0, 0
	b	.L3175
.L3188:
	ldr	w0, [sp, 20]
	and	w0, w0, -16
	cmp	w0, 0
	beq	.L3178
	adrp	x0, .LC453
	add	x3, x0, :lo12:.LC453
	mov	w2, 8189
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC454
	add	x0, x0, :lo12:.LC454
	bl	__assert_fail
.L3178:
	ldr	s0, [sp, 44]
	fcmp	s0, #0.0
	cset	w0, eq
	strb	w0, [sp, 35]
	ldrb	w0, [sp, 35]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3179
	ldr	w0, [sp, 20]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L3179
	add	x1, sp, 40
	add	x0, sp, 36
	mov	x2, x1
	mov	x1, x0
	ldr	w0, [sp, 20]
	bl	_ZN5ImGui22GetTypematicRepeatRateEiPfS0_
	ldr	s0, [sp, 36]
	ldr	s1, [sp, 44]
	fcmpe	s1, s0
	bgt	.L3187
	b	.L3180
.L3187:
	ldr	s0, [sp, 36]
	ldr	s1, [sp, 40]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff
	cmp	w0, 0
	ble	.L3180
	mov	w0, 1
	b	.L3182
.L3180:
	mov	w0, 0
.L3182:
	strb	w0, [sp, 35]
.L3179:
	ldrb	w0, [sp, 35]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3183
	mov	w0, 0
	b	.L3175
.L3183:
	ldr	w1, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3184
	mov	w0, 0
	b	.L3175
.L3184:
	mov	w0, 1
.L3175:
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 56]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L3185
	bl	__stack_chk_fail
.L3185:
	mov	w0, w1
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1945:
	.size	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji, .-_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	.align	2
	.global	_ZN5ImGui13IsKeyReleasedE8ImGuiKey
	.type	_ZN5ImGui13IsKeyReleasedE8ImGuiKey, %function
_ZN5ImGui13IsKeyReleasedE8ImGuiKey:
.LFB1946:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	mov	w1, 0
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui13IsKeyReleasedE8ImGuiKeyj
	and	w0, w0, 255
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1946:
	.size	_ZN5ImGui13IsKeyReleasedE8ImGuiKey, .-_ZN5ImGui13IsKeyReleasedE8ImGuiKey
	.align	2
	.global	_ZN5ImGui13IsKeyReleasedE8ImGuiKeyj
	.type	_ZN5ImGui13IsKeyReleasedE8ImGuiKeyj, %function
_ZN5ImGui13IsKeyReleasedE8ImGuiKeyj:
.LFB1947:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 8]
	fcmpe	s0, #0.0
	bmi	.L3192
	ldr	x0, [sp, 40]
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L3193
.L3192:
	mov	w0, 0
	b	.L3194
.L3193:
	ldr	w1, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3195
	mov	w0, 0
	b	.L3194
.L3195:
	mov	w0, 1
.L3194:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1947:
	.size	_ZN5ImGui13IsKeyReleasedE8ImGuiKeyj, .-_ZN5ImGui13IsKeyReleasedE8ImGuiKeyj
	.section	.rodata
	.align	3
.LC455:
	.string	"bool ImGui::IsMouseDown(ImGuiMouseButton)"
	.align	3
.LC456:
	.string	"button >= 0 && button < ((int)(sizeof(g.IO.MouseDown) / sizeof(*(g.IO.MouseDown))))"
	.text
	.align	2
	.global	_ZN5ImGui11IsMouseDownEi
	.type	_ZN5ImGui11IsMouseDownEi, %function
_ZN5ImGui11IsMouseDownEi:
.LFB1948:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3197
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3202
.L3197:
	adrp	x0, .LC455
	add	x3, x0, :lo12:.LC455
	mov	w2, 8223
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3202:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x1, x0
	ldrb	w0, [x0, 3588]
	cmp	w0, 0
	beq	.L3199
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui16MouseButtonToKeyEi
	mov	w1, 0
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3199
	mov	w0, 1
	b	.L3200
.L3199:
	mov	w0, 0
.L3200:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1948:
	.size	_ZN5ImGui11IsMouseDownEi, .-_ZN5ImGui11IsMouseDownEi
	.section	.rodata
	.align	3
.LC457:
	.string	"bool ImGui::IsMouseDown(ImGuiMouseButton, ImGuiID)"
	.text
	.align	2
	.global	_ZN5ImGui11IsMouseDownEij
	.type	_ZN5ImGui11IsMouseDownEij, %function
_ZN5ImGui11IsMouseDownEij:
.LFB1949:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3204
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3209
.L3204:
	adrp	x0, .LC457
	add	x3, x0, :lo12:.LC457
	mov	w2, 8230
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3209:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x1, x0
	ldrb	w0, [x0, 3588]
	cmp	w0, 0
	beq	.L3206
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui16MouseButtonToKeyEi
	ldr	w1, [sp, 24]
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3206
	mov	w0, 1
	b	.L3207
.L3206:
	mov	w0, 0
.L3207:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1949:
	.size	_ZN5ImGui11IsMouseDownEij, .-_ZN5ImGui11IsMouseDownEij
	.align	2
	.global	_ZN5ImGui14IsMouseClickedEib
	.type	_ZN5ImGui14IsMouseClickedEib, %function
_ZN5ImGui14IsMouseClickedEib:
.LFB1950:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	strb	w1, [sp, 27]
	ldrb	w0, [sp, 27]
	cmp	w0, 0
	beq	.L3211
	mov	w0, 1
	b	.L3212
.L3211:
	mov	w0, 0
.L3212:
	mov	w2, w0
	mov	w1, 0
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui14IsMouseClickedEiji
	and	w0, w0, 255
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1950:
	.size	_ZN5ImGui14IsMouseClickedEib, .-_ZN5ImGui14IsMouseClickedEib
	.section	.rodata
	.align	3
.LC458:
	.string	"bool ImGui::IsMouseClicked(ImGuiMouseButton, ImGuiID, ImGuiInputFlags)"
	.text
	.align	2
	.global	_ZN5ImGui14IsMouseClickedEiji
	.type	_ZN5ImGui14IsMouseClickedEiji, %function
_ZN5ImGui14IsMouseClickedEiji:
.LFB1951:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3215
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3230
.L3215:
	adrp	x0, .LC458
	add	x3, x0, :lo12:.LC458
	mov	w2, 8242
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3230:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x1, x0
	ldrb	w0, [x0, 3588]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3217
	mov	w0, 0
	b	.L3218
.L3217:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 3544
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	s0, [x0, 8]
	str	s0, [sp, 36]
	ldr	s0, [sp, 36]
	fcmpe	s0, #0.0
	bmi	.L3228
	b	.L3231
.L3228:
	mov	w0, 0
	b	.L3218
.L3231:
	ldr	w0, [sp, 20]
	and	w0, w0, -16
	cmp	w0, 0
	beq	.L3221
	adrp	x0, .LC458
	add	x3, x0, :lo12:.LC458
	mov	w2, 8248
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC454
	add	x0, x0, :lo12:.LC454
	bl	__assert_fail
.L3221:
	ldr	w0, [sp, 20]
	and	w0, w0, 1
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 34]
	ldr	s0, [sp, 36]
	fcmp	s0, #0.0
	beq	.L3222
	ldrb	w0, [sp, 34]
	cmp	w0, 0
	beq	.L3223
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 60]
	ldr	s1, [sp, 36]
	fcmpe	s1, s0
	bgt	.L3229
	b	.L3223
.L3229:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 24]
	ldr	s1, [sp, 36]
	fsub	s0, s1, s0
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 60]
	ldr	x0, [sp, 40]
	ldr	s2, [x0, 64]
	fmov	s3, s2
	fmov	s2, s1
	ldr	s1, [sp, 36]
	bl	_ZN5ImGui25CalcTypematicRepeatAmountEffff
	cmp	w0, 0
	ble	.L3223
.L3222:
	mov	w0, 1
	b	.L3225
.L3223:
	mov	w0, 0
.L3225:
	strb	w0, [sp, 35]
	ldrb	w0, [sp, 35]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3226
	mov	w0, 0
	b	.L3218
.L3226:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui16MouseButtonToKeyEi
	ldr	w1, [sp, 24]
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3227
	mov	w0, 0
	b	.L3218
.L3227:
	mov	w0, 1
.L3218:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1951:
	.size	_ZN5ImGui14IsMouseClickedEiji, .-_ZN5ImGui14IsMouseClickedEiji
	.section	.rodata
	.align	3
.LC459:
	.string	"bool ImGui::IsMouseReleased(ImGuiMouseButton)"
	.text
	.align	2
	.global	_ZN5ImGui15IsMouseReleasedEi
	.type	_ZN5ImGui15IsMouseReleasedEi, %function
_ZN5ImGui15IsMouseReleasedEi:
.LFB1952:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3233
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3238
.L3233:
	adrp	x0, .LC459
	add	x3, x0, :lo12:.LC459
	mov	w2, 8264
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3238:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1878]
	cmp	w0, 0
	beq	.L3235
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui16MouseButtonToKeyEi
	mov	w1, 0
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3235
	mov	w0, 1
	b	.L3236
.L3235:
	mov	w0, 0
.L3236:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1952:
	.size	_ZN5ImGui15IsMouseReleasedEi, .-_ZN5ImGui15IsMouseReleasedEi
	.section	.rodata
	.align	3
.LC460:
	.string	"bool ImGui::IsMouseReleased(ImGuiMouseButton, ImGuiID)"
	.text
	.align	2
	.global	_ZN5ImGui15IsMouseReleasedEij
	.type	_ZN5ImGui15IsMouseReleasedEij, %function
_ZN5ImGui15IsMouseReleasedEij:
.LFB1953:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3240
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3245
.L3240:
	adrp	x0, .LC460
	add	x3, x0, :lo12:.LC460
	mov	w2, 8271
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3245:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1878]
	cmp	w0, 0
	beq	.L3242
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui16MouseButtonToKeyEi
	ldr	w1, [sp, 24]
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3242
	mov	w0, 1
	b	.L3243
.L3242:
	mov	w0, 0
.L3243:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1953:
	.size	_ZN5ImGui15IsMouseReleasedEij, .-_ZN5ImGui15IsMouseReleasedEij
	.section	.rodata
	.align	3
.LC461:
	.string	"bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton)"
	.text
	.align	2
	.global	_ZN5ImGui20IsMouseDoubleClickedEi
	.type	_ZN5ImGui20IsMouseDoubleClickedEi, %function
_ZN5ImGui20IsMouseDoubleClickedEi:
.LFB1954:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3247
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3252
.L3247:
	adrp	x0, .LC461
	add	x3, x0, :lo12:.LC461
	mov	w2, 8278
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3252:
	ldr	x1, [sp, 40]
	ldrsw	x2, [sp, 28]
	mov	x0, 7064
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	ldrh	w0, [x0, 18]
	cmp	w0, 2
	bne	.L3249
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui16MouseButtonToKeyEi
	mov	w1, 0
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3249
	mov	w0, 1
	b	.L3250
.L3249:
	mov	w0, 0
.L3250:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1954:
	.size	_ZN5ImGui20IsMouseDoubleClickedEi, .-_ZN5ImGui20IsMouseDoubleClickedEi
	.section	.rodata
	.align	3
.LC462:
	.string	"int ImGui::GetMouseClickedCount(ImGuiMouseButton)"
	.text
	.align	2
	.global	_ZN5ImGui20GetMouseClickedCountEi
	.type	_ZN5ImGui20GetMouseClickedCountEi, %function
_ZN5ImGui20GetMouseClickedCountEi:
.LFB1955:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3254
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3257
.L3254:
	adrp	x0, .LC462
	add	x3, x0, :lo12:.LC462
	mov	w2, 8285
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3257:
	ldr	x1, [sp, 40]
	ldrsw	x2, [sp, 28]
	mov	x0, 7064
	add	x0, x2, x0
	lsl	x0, x0, 1
	add	x0, x1, x0
	ldrh	w0, [x0, 18]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1955:
	.size	_ZN5ImGui20GetMouseClickedCountEi, .-_ZN5ImGui20GetMouseClickedCountEi
	.section	.rodata
	.align	3
.LC463:
	.string	"bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton, float)"
	.text
	.align	2
	.global	_ZN5ImGui24IsMouseDragPastThresholdEif
	.type	_ZN5ImGui24IsMouseDragPastThresholdEif, %function
_ZN5ImGui24IsMouseDragPastThresholdEif:
.LFB1956:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	s0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3259
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3265
.L3259:
	adrp	x0, .LC463
	add	x3, x0, :lo12:.LC463
	mov	w2, 8294
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3265:
	ldr	s0, [sp, 24]
	fcmpe	s0, #0.0
	bmi	.L3264
	b	.L3261
.L3264:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 56]
	str	s0, [sp, 24]
.L3261:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 3552
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	s1, [x0, 16]
	ldr	s0, [sp, 24]
	fmul	s0, s0, s0
	fcmpe	s1, s0
	cset	w0, ge
	and	w0, w0, 255
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1956:
	.size	_ZN5ImGui24IsMouseDragPastThresholdEif, .-_ZN5ImGui24IsMouseDragPastThresholdEif
	.section	.rodata
	.align	3
.LC464:
	.string	"bool ImGui::IsMouseDragging(ImGuiMouseButton, float)"
	.text
	.align	2
	.global	_ZN5ImGui15IsMouseDraggingEif
	.type	_ZN5ImGui15IsMouseDraggingEif, %function
_ZN5ImGui15IsMouseDraggingEif:
.LFB1957:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	s0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3267
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3271
.L3267:
	adrp	x0, .LC464
	add	x3, x0, :lo12:.LC464
	mov	w2, 8303
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3271:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x1, x0
	ldrb	w0, [x0, 3588]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3269
	mov	w0, 0
	b	.L3270
.L3269:
	ldr	s0, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui24IsMouseDragPastThresholdEif
	and	w0, w0, 255
	nop
.L3270:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1957:
	.size	_ZN5ImGui15IsMouseDraggingEif, .-_ZN5ImGui15IsMouseDraggingEif
	.align	2
	.global	_ZN5ImGui11GetMousePosEv
	.type	_ZN5ImGui11GetMousePosEv, %function
_ZN5ImGui11GetMousePosEv:
.LFB1958:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 3584
	ldr	x0, [x0, -4]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1958:
	.size	_ZN5ImGui11GetMousePosEv, .-_ZN5ImGui11GetMousePosEv
	.align	2
	.global	_ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv
	.type	_ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv, %function
_ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv:
.LFB1959:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	cmp	w0, 0
	ble	.L3275
	ldr	x1, [sp, 24]
	mov	x0, 18480
	add	x2, x1, x0
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	x0, [x0, 44]
	b	.L3276
.L3275:
	ldr	x0, [sp, 24]
	add	x0, x0, 3584
	ldr	x0, [x0, -4]
.L3276:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1959:
	.size	_ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv, .-_ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv
	.section	.rodata
	.align	3
.LC465:
	.string	"bool ImGui::IsMousePosValid(const ImVec2*)"
	.align	3
.LC466:
	.string	"GImGui != __null"
	.text
	.align	2
	.global	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	.type	_ZN5ImGui15IsMousePosValidEPK6ImVec2, %function
_ZN5ImGui15IsMousePosValidEPK6ImVec2:
.LFB1960:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	cmp	x0, 0
	bne	.L3278
	adrp	x0, .LC465
	add	x3, x0, :lo12:.LC465
	mov	w2, 8329
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC466
	add	x0, x0, :lo12:.LC466
	bl	__assert_fail
.L3278:
	mov	w0, -931528704
	fmov	s0, w0
	str	s0, [sp, 36]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L3279
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	add	x0, x0, 3580
	b	.L3280
.L3279:
	ldr	x0, [sp, 24]
.L3280:
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	s0, [sp, 40]
	mov	w0, -931528704
	fmov	s1, w0
	fcmpe	s0, s1
	bge	.L3286
	b	.L3281
.L3286:
	ldr	s0, [sp, 44]
	mov	w0, -931528704
	fmov	s1, w0
	fcmpe	s0, s1
	bge	.L3287
	b	.L3281
.L3287:
	mov	w0, 1
	b	.L3284
.L3281:
	mov	w0, 0
.L3284:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1960:
	.size	_ZN5ImGui15IsMousePosValidEPK6ImVec2, .-_ZN5ImGui15IsMousePosValidEPK6ImVec2
	.align	2
	.global	_ZN5ImGui14IsAnyMouseDownEv
	.type	_ZN5ImGui14IsAnyMouseDownEv, %function
_ZN5ImGui14IsAnyMouseDownEv:
.LFB1961:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	str	wzr, [sp, 4]
	b	.L3289
.L3292:
	ldr	x1, [sp, 8]
	ldrsw	x0, [sp, 4]
	add	x0, x1, x0
	ldrb	w0, [x0, 3588]
	cmp	w0, 0
	beq	.L3290
	mov	w0, 1
	b	.L3291
.L3290:
	ldr	w0, [sp, 4]
	add	w0, w0, 1
	str	w0, [sp, 4]
.L3289:
	ldr	w0, [sp, 4]
	cmp	w0, 4
	ble	.L3292
	mov	w0, 0
.L3291:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1961:
	.size	_ZN5ImGui14IsAnyMouseDownEv, .-_ZN5ImGui14IsAnyMouseDownEv
	.section	.rodata
	.align	3
.LC467:
	.string	"ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton, float)"
	.text
	.align	2
	.global	_ZN5ImGui17GetMouseDragDeltaEif
	.type	_ZN5ImGui17GetMouseDragDeltaEif, %function
_ZN5ImGui17GetMouseDragDeltaEif:
.LFB1962:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	str	s0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3294
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3307
.L3294:
	adrp	x0, .LC467
	add	x3, x0, :lo12:.LC467
	mov	w2, 8351
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3307:
	ldr	s0, [sp, 24]
	fcmpe	s0, #0.0
	bmi	.L3305
	b	.L3296
.L3305:
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 56]
	str	s0, [sp, 24]
.L3296:
	ldr	x1, [sp, 48]
	ldrsw	x0, [sp, 28]
	add	x0, x1, x0
	ldrb	w0, [x0, 3588]
	cmp	w0, 0
	bne	.L3298
	ldr	x1, [sp, 48]
	ldrsw	x0, [sp, 28]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1878]
	cmp	w0, 0
	beq	.L3299
.L3298:
	ldr	x1, [sp, 48]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 3552
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	s1, [x0, 16]
	ldr	s0, [sp, 24]
	fmul	s0, s0, s0
	fcmpe	s1, s0
	bge	.L3306
	b	.L3299
.L3306:
	ldr	x0, [sp, 48]
	add	x0, x0, 3580
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3301
	ldrsw	x0, [sp, 28]
	add	x0, x0, 1756
	lsl	x0, x0, 3
	ldr	x1, [sp, 48]
	add	x0, x1, x0
	add	x0, x0, 8
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3301
	mov	w0, 1
	b	.L3302
.L3301:
	mov	w0, 0
.L3302:
	cmp	w0, 0
	beq	.L3299
	ldr	x0, [sp, 48]
	add	x2, x0, 3580
	ldrsw	x0, [sp, 28]
	add	x0, x0, 1756
	lsl	x0, x0, 3
	ldr	x1, [sp, 48]
	add	x0, x1, x0
	add	x0, x0, 8
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	b	.L3303
.L3299:
	add	x0, sp, 40
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 40]
.L3303:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3304
	bl	__stack_chk_fail
.L3304:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1962:
	.size	_ZN5ImGui17GetMouseDragDeltaEif, .-_ZN5ImGui17GetMouseDragDeltaEif
	.section	.rodata
	.align	3
.LC468:
	.string	"void ImGui::ResetMouseDragDelta(ImGuiMouseButton)"
	.text
	.align	2
	.global	_ZN5ImGui19ResetMouseDragDeltaEi
	.type	_ZN5ImGui19ResetMouseDragDeltaEi, %function
_ZN5ImGui19ResetMouseDragDeltaEi:
.LFB1963:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3309
	ldr	w0, [sp, 28]
	cmp	w0, 4
	ble	.L3311
.L3309:
	adrp	x0, .LC468
	add	x3, x0, :lo12:.LC468
	mov	w2, 8364
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC456
	add	x0, x0, :lo12:.LC456
	bl	__assert_fail
.L3311:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 28]
	add	x0, x0, 1756
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 40]
	add	x1, x1, 3584
	ldr	x1, [x1, -4]
	str	x1, [x0, 8]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1963:
	.size	_ZN5ImGui19ResetMouseDragDeltaEi, .-_ZN5ImGui19ResetMouseDragDeltaEi
	.align	2
	.global	_ZN5ImGui14GetMouseCursorEv
	.type	_ZN5ImGui14GetMouseCursorEv, %function
_ZN5ImGui14GetMouseCursorEv:
.LFB1964:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 2576]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1964:
	.size	_ZN5ImGui14GetMouseCursorEv, .-_ZN5ImGui14GetMouseCursorEv
	.align	2
	.global	_ZN5ImGui14SetMouseCursorEi
	.type	_ZN5ImGui14SetMouseCursorEi, %function
_ZN5ImGui14SetMouseCursorEi:
.LFB1965:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w1, [sp, 12]
	str	w1, [x0, 2576]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1965:
	.size	_ZN5ImGui14SetMouseCursorEi, .-_ZN5ImGui14SetMouseCursorEi
	.align	2
	.global	_ZN5ImGui31SetNextFrameWantCaptureKeyboardEb
	.type	_ZN5ImGui31SetNextFrameWantCaptureKeyboardEb, %function
_ZN5ImGui31SetNextFrameWantCaptureKeyboardEb:
.LFB1966:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	strb	w0, [sp, 15]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldrb	w0, [sp, 15]
	cmp	w0, 0
	beq	.L3316
	mov	w0, 1
	b	.L3317
.L3316:
	mov	w0, 0
.L3317:
	ldr	x1, [sp, 24]
	add	x1, x1, 16384
	str	w0, [x1, 7576]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1966:
	.size	_ZN5ImGui31SetNextFrameWantCaptureKeyboardEb, .-_ZN5ImGui31SetNextFrameWantCaptureKeyboardEb
	.align	2
	.global	_ZN5ImGui28SetNextFrameWantCaptureMouseEb
	.type	_ZN5ImGui28SetNextFrameWantCaptureMouseEb, %function
_ZN5ImGui28SetNextFrameWantCaptureMouseEb:
.LFB1967:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	strb	w0, [sp, 15]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldrb	w0, [sp, 15]
	cmp	w0, 0
	beq	.L3319
	mov	w0, 1
	b	.L3320
.L3319:
	mov	w0, 0
.L3320:
	ldr	x1, [sp, 24]
	add	x1, x1, 16384
	str	w0, [x1, 7572]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1967:
	.size	_ZN5ImGui28SetNextFrameWantCaptureMouseEb, .-_ZN5ImGui28SetNextFrameWantCaptureMouseEb
	.section	.rodata
	.align	3
.LC470:
	.string	"const char* GetInputSourceName(ImGuiInputSource)"
	.align	3
.LC471:
	.string	"((int)(sizeof(input_source_names) / sizeof(*(input_source_names)))) == ImGuiInputSource_COUNT && source >= 0 && source < ImGuiInputSource_COUNT"
	.text
	.align	2
	.type	_ZL18GetInputSourceName16ImGuiInputSource, %function
_ZL18GetInputSourceName16ImGuiInputSource:
.LFB1968:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, .LC469
	add	x1, x0, :lo12:.LC469
	add	x0, sp, 40
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	ldr	q0, [x1, 32]
	str	q0, [x0, 32]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3322
	ldr	w0, [sp, 28]
	cmp	w0, 5
	ble	.L3326
.L3322:
	adrp	x0, .LC470
	add	x3, x0, :lo12:.LC470
	mov	w2, 8401
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC471
	add	x0, x0, :lo12:.LC471
	bl	__assert_fail
.L3326:
	ldr	w0, [sp, 28]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x1, sp, 40
	ldr	x0, [x1, x0]
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 88]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L3325
	bl	__stack_chk_fail
.L3325:
	mov	x0, x1
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1968:
	.size	_ZL18GetInputSourceName16ImGuiInputSource, .-_ZL18GetInputSourceName16ImGuiInputSource
	.section	.rodata
	.align	3
.LC1:
	.string	"Mouse"
	.align	3
.LC2:
	.string	"Keyboard"
	.align	3
.LC3:
	.string	"Gamepad"
	.align	3
.LC4:
	.string	"Nav"
	.align	3
.LC5:
	.string	"Clipboard"
	.data
	.align	3
.LC469:
	.xword	.LC0
	.xword	.LC1
	.xword	.LC2
	.xword	.LC3
	.xword	.LC4
	.xword	.LC5
	.text
	.section	.rodata
	.align	3
.LC472:
	.string	"%s: MousePos (-FLT_MAX, -FLT_MAX)\n"
	.align	3
.LC473:
	.string	"%s: MousePos (%.1f, %.1f)\n"
	.align	3
.LC474:
	.string	"Down"
	.align	3
.LC475:
	.string	"Up"
	.align	3
.LC476:
	.string	"%s: MouseButton %d %s\n"
	.align	3
.LC477:
	.string	"%s: MouseWheel (%.1f, %.1f)\n"
	.align	3
.LC478:
	.string	"%s: Key \"%s\" %s\n"
	.align	3
.LC479:
	.string	"%s: Text: %c (U+%08X)\n"
	.align	3
.LC480:
	.string	"%s: AppFocused %d\n"
	.text
	.align	2
	.type	_ZL20DebugPrintInputEventPKcPK15ImGuiInputEvent, %function
_ZL20DebugPrintInputEventPKcPK15ImGuiInputEvent:
.LFB1969:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 1
	bne	.L3328
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 8]
	mvni	v0.2s, 0x80, lsl 16
	fcmp	s1, s0
	bne	.L3329
	ldr	x0, [sp, 16]
	ldr	s1, [x0, 12]
	mvni	v0.2s, 0x80, lsl 16
	fcmp	s1, s0
	bne	.L3329
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3331
	ldr	x1, [sp, 24]
	adrp	x0, .LC472
	add	x0, x0, :lo12:.LC472
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L3331
.L3329:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3346
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 8]
	fcvt	d2, s0
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 12]
	fcvt	d0, s0
	fmov	d1, d0
	fmov	d0, d2
	ldr	x1, [sp, 24]
	adrp	x0, .LC473
	add	x0, x0, :lo12:.LC473
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L3346
.L3331:
	b	.L3346
.L3328:
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 3
	bne	.L3333
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3347
	ldr	x0, [sp, 16]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 16]
	ldrb	w0, [x0, 12]
	cmp	w0, 0
	beq	.L3335
	adrp	x0, .LC474
	add	x0, x0, :lo12:.LC474
	b	.L3336
.L3335:
	adrp	x0, .LC475
	add	x0, x0, :lo12:.LC475
.L3336:
	mov	x3, x0
	mov	w2, w1
	ldr	x1, [sp, 24]
	adrp	x0, .LC476
	add	x0, x0, :lo12:.LC476
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L3347
.L3333:
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 2
	bne	.L3337
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3348
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 8]
	fcvt	d2, s0
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 12]
	fcvt	d0, s0
	fmov	d1, d0
	fmov	d0, d2
	ldr	x1, [sp, 24]
	adrp	x0, .LC477
	add	x0, x0, :lo12:.LC477
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L3348
.L3337:
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 4
	bne	.L3339
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3349
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 8]
	bl	_ZN5ImGui10GetKeyNameE8ImGuiKey
	mov	x1, x0
	ldr	x0, [sp, 16]
	ldrb	w0, [x0, 12]
	cmp	w0, 0
	beq	.L3341
	adrp	x0, .LC474
	add	x0, x0, :lo12:.LC474
	b	.L3342
.L3341:
	adrp	x0, .LC475
	add	x0, x0, :lo12:.LC475
.L3342:
	mov	x3, x0
	mov	x2, x1
	ldr	x1, [sp, 24]
	adrp	x0, .LC478
	add	x0, x0, :lo12:.LC478
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L3349
.L3339:
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 5
	bne	.L3343
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3350
	ldr	x0, [sp, 16]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 16]
	ldr	w0, [x0, 8]
	mov	w3, w0
	mov	w2, w1
	ldr	x1, [sp, 24]
	adrp	x0, .LC479
	add	x0, x0, :lo12:.LC479
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L3350
.L3343:
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	cmp	w0, 6
	bne	.L3327
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3351
	ldr	x0, [sp, 16]
	ldrb	w0, [x0, 8]
	mov	w2, w0
	ldr	x1, [sp, 24]
	adrp	x0, .LC480
	add	x0, x0, :lo12:.LC480
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L3351
.L3346:
	nop
	b	.L3327
.L3347:
	nop
	b	.L3327
.L3348:
	nop
	b	.L3327
.L3349:
	nop
	b	.L3327
.L3350:
	nop
	b	.L3327
.L3351:
	nop
.L3327:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1969:
	.size	_ZL20DebugPrintInputEventPKcPK15ImGuiInputEvent, .-_ZL20DebugPrintInputEventPKcPK15ImGuiInputEvent
	.section	.rodata
	.align	3
.LC481:
	.string	"void ImGui::UpdateInputEvents(bool)"
	.align	3
.LC482:
	.string	"key != ImGuiKey_None"
	.align	3
.LC483:
	.string	"0 && \"Unknown event!\""
	.align	3
.LC484:
	.string	"Processed"
	.align	3
.LC485:
	.string	"Remaining"
	.text
	.align	2
	.global	_ZN5ImGui17UpdateInputEventsEb
	.type	_ZN5ImGui17UpdateInputEventsEb, %function
_ZN5ImGui17UpdateInputEventsEb:
.LFB1970:
	.cfi_startproc
	stp	x29, x30, [sp, -224]!
	.cfi_def_cfa_offset 224
	.cfi_offset 29, -224
	.cfi_offset 30, -216
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -208
	strb	w0, [sp, 47]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 216]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	add	x0, x0, 8
	str	x0, [sp, 104]
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L3353
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 7580]
	cmp	w0, 1
	bne	.L3353
	mov	w0, 1
	b	.L3354
.L3353:
	mov	w0, 0
.L3354:
	strb	w0, [sp, 54]
	strb	wzr, [sp, 50]
	strb	wzr, [sp, 51]
	strb	wzr, [sp, 52]
	strb	wzr, [sp, 53]
	str	wzr, [sp, 56]
	add	x0, sp, 128
	bl	_ZN10ImBitArrayILi652ELi0EEC1Ev
	str	wzr, [sp, 60]
	b	.L3355
.L3385:
	ldr	x1, [sp, 96]
	mov	x0, 14272
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorI15ImGuiInputEventEixEi
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	ldr	w0, [x0]
	cmp	w0, 1
	bne	.L3356
	ldr	x0, [sp, 112]
	ldr	s0, [x0, 8]
	ldr	x0, [sp, 112]
	ldr	s1, [x0, 12]
	add	x0, sp, 88
	bl	_ZN6ImVec2C1Eff
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L3357
	ldr	w0, [sp, 56]
	cmp	w0, 0
	bne	.L3360
	ldrb	w0, [sp, 51]
	cmp	w0, 0
	bne	.L3360
	ldrb	w0, [sp, 52]
	cmp	w0, 0
	bne	.L3360
	ldrb	w0, [sp, 53]
	cmp	w0, 0
	bne	.L3360
.L3357:
	ldr	x0, [sp, 104]
	add	x0, x0, 3584
	ldr	x1, [sp, 88]
	str	x1, [x0, -12]
	mov	w0, 1
	strb	w0, [sp, 50]
	b	.L3359
.L3356:
	ldr	x0, [sp, 112]
	ldr	w0, [x0]
	cmp	w0, 3
	bne	.L3361
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 8]
	str	w0, [sp, 84]
	ldr	w0, [sp, 84]
	cmp	w0, 0
	blt	.L3362
	ldr	w0, [sp, 84]
	cmp	w0, 4
	ble	.L3397
.L3362:
	adrp	x0, .LC481
	add	x3, x0, :lo12:.LC481
	mov	w2, 8451
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC40
	add	x0, x0, :lo12:.LC40
	bl	__assert_fail
.L3397:
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L3364
	ldr	w0, [sp, 84]
	ldr	w1, [sp, 56]
	asr	w0, w1, w0
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L3360
	ldrb	w0, [sp, 51]
	cmp	w0, 0
	bne	.L3360
.L3364:
	ldr	x0, [sp, 112]
	ldrb	w2, [x0, 12]
	ldr	x1, [sp, 104]
	ldrsw	x0, [sp, 84]
	add	x0, x1, x0
	mov	w1, w2
	strb	w1, [x0, 3580]
	ldr	w0, [sp, 84]
	mov	w1, 1
	lsl	w0, w1, w0
	ldr	w1, [sp, 56]
	orr	w0, w1, w0
	str	w0, [sp, 56]
	b	.L3359
.L3361:
	ldr	x0, [sp, 112]
	ldr	w0, [x0]
	cmp	w0, 2
	bne	.L3365
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L3366
	ldrb	w0, [sp, 50]
	cmp	w0, 0
	bne	.L3360
	ldr	w0, [sp, 56]
	cmp	w0, 0
	bne	.L3360
.L3366:
	ldr	x0, [sp, 104]
	ldr	s1, [x0, 3592]
	ldr	x0, [sp, 112]
	ldr	s0, [x0, 8]
	fadd	s0, s1, s0
	ldr	x0, [sp, 104]
	str	s0, [x0, 3592]
	ldr	x0, [sp, 104]
	ldr	s1, [x0, 3588]
	ldr	x0, [sp, 112]
	ldr	s0, [x0, 12]
	fadd	s0, s1, s0
	ldr	x0, [sp, 104]
	str	s0, [x0, 3588]
	mov	w0, 1
	strb	w0, [sp, 51]
	b	.L3359
.L3365:
	ldr	x0, [sp, 112]
	ldr	w0, [x0]
	cmp	w0, 4
	bne	.L3367
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 8]
	str	w0, [sp, 76]
	ldr	w0, [sp, 76]
	cmp	w0, 0
	bne	.L3368
	adrp	x0, .LC481
	add	x3, x0, :lo12:.LC481
	mov	w2, 8470
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC482
	add	x0, x0, :lo12:.LC482
	bl	__assert_fail
.L3368:
	ldr	w0, [sp, 76]
	bl	_ZN5ImGui10GetKeyDataE8ImGuiKey
	str	x0, [sp, 120]
	ldr	x0, [sp, 96]
	add	x0, x0, 3612
	ldr	x1, [sp, 120]
	sub	x0, x1, x0
	asr	x0, x0, 4
	str	w0, [sp, 80]
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L3369
	ldr	x0, [sp, 120]
	ldrb	w1, [x0]
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 12]
	cmp	w1, w0
	beq	.L3369
	add	x0, sp, 128
	ldr	w1, [sp, 80]
	bl	_ZNK10ImBitArrayILi652ELi0EE7TestBitEi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3370
	ldrb	w0, [sp, 53]
	cmp	w0, 0
	bne	.L3370
	ldr	w0, [sp, 56]
	cmp	w0, 0
	beq	.L3369
.L3370:
	mov	w0, 1
	b	.L3371
.L3369:
	mov	w0, 0
.L3371:
	cmp	w0, 0
	bne	.L3398
	ldr	x0, [sp, 112]
	ldrb	w1, [x0, 12]
	ldr	x0, [sp, 120]
	strb	w1, [x0]
	ldr	x0, [sp, 112]
	ldr	s0, [x0, 16]
	ldr	x0, [sp, 120]
	str	s0, [x0, 12]
	mov	w0, 1
	strb	w0, [sp, 52]
	add	x0, sp, 128
	ldr	w1, [sp, 80]
	bl	_ZN10ImBitArrayILi652ELi0EE6SetBitEi
	ldr	w0, [sp, 76]
	cmp	w0, 4096
	beq	.L3373
	ldr	w0, [sp, 76]
	cmp	w0, 8192
	beq	.L3373
	ldr	w0, [sp, 76]
	cmp	w0, 16384
	beq	.L3373
	ldr	w0, [sp, 76]
	cmp	w0, 32768
	bne	.L3374
.L3373:
	ldr	w0, [sp, 76]
	cmp	w0, 4096
	bne	.L3375
	ldr	x0, [sp, 120]
	ldrb	w1, [x0]
	ldr	x0, [sp, 104]
	strb	w1, [x0, 3596]
.L3375:
	ldr	w0, [sp, 76]
	cmp	w0, 8192
	bne	.L3376
	ldr	x0, [sp, 120]
	ldrb	w1, [x0]
	ldr	x0, [sp, 104]
	strb	w1, [x0, 3597]
.L3376:
	ldr	w0, [sp, 76]
	cmp	w0, 16384
	bne	.L3377
	ldr	x0, [sp, 120]
	ldrb	w1, [x0]
	ldr	x0, [sp, 104]
	strb	w1, [x0, 3598]
.L3377:
	ldr	w0, [sp, 76]
	cmp	w0, 32768
	bne	.L3378
	ldr	x0, [sp, 120]
	ldrb	w1, [x0]
	ldr	x0, [sp, 104]
	strb	w1, [x0, 3599]
.L3378:
	bl	_ZL22GetMergedModsFromBoolsv
	mov	w1, w0
	ldr	x0, [sp, 104]
	str	w1, [x0, 3600]
.L3374:
	ldr	x0, [sp, 120]
	ldrb	w2, [x0]
	ldr	x1, [sp, 104]
	ldrsw	x0, [sp, 80]
	add	x0, x1, x0
	mov	w1, w2
	strb	w1, [x0, 2856]
	ldr	x1, [sp, 104]
	ldrsw	x0, [sp, 80]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	cmn	w0, #1
	beq	.L3359
	ldr	x1, [sp, 104]
	ldrsw	x0, [sp, 80]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w3, [x0, 8]
	ldr	x0, [sp, 120]
	ldrb	w2, [x0]
	ldr	x1, [sp, 104]
	sxtw	x0, w3
	add	x0, x1, x0
	mov	w1, w2
	strb	w1, [x0, 2856]
	b	.L3359
.L3367:
	ldr	x0, [sp, 112]
	ldr	w0, [x0]
	cmp	w0, 5
	bne	.L3379
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L3380
	ldrb	w0, [sp, 52]
	cmp	w0, 0
	beq	.L3381
	ldrb	w0, [sp, 54]
	cmp	w0, 0
	bne	.L3360
.L3381:
	ldr	w0, [sp, 56]
	cmp	w0, 0
	bne	.L3360
	ldrb	w0, [sp, 50]
	cmp	w0, 0
	bne	.L3360
	ldrb	w0, [sp, 51]
	cmp	w0, 0
	bne	.L3360
.L3380:
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 8]
	str	w0, [sp, 72]
	ldr	x1, [sp, 104]
	mov	x0, 14248
	add	x2, x1, x0
	ldr	w1, [sp, 72]
	mov	w0, 65535
	cmp	w1, w0
	bhi	.L3382
	ldr	w0, [sp, 72]
	and	w0, w0, 65535
	b	.L3383
.L3382:
	mov	w0, 65533
.L3383:
	strh	w0, [sp, 88]
	add	x0, sp, 88
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorItE9push_backERKt
	ldrb	w0, [sp, 54]
	cmp	w0, 0
	beq	.L3359
	mov	w0, 1
	strb	w0, [sp, 53]
	b	.L3359
.L3379:
	ldr	x0, [sp, 112]
	ldr	w0, [x0]
	cmp	w0, 6
	bne	.L3384
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 8]
	eor	w0, w0, 1
	strb	w0, [sp, 55]
	ldr	x0, [sp, 104]
	add	x0, x0, 12288
	ldrb	w1, [sp, 55]
	strb	w1, [x0, 1952]
	b	.L3359
.L3384:
	adrp	x0, .LC481
	add	x3, x0, :lo12:.LC481
	mov	w2, 8515
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC483
	add	x0, x0, :lo12:.LC483
	bl	__assert_fail
.L3359:
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L3355:
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 14272]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	blt	.L3385
	b	.L3360
.L3398:
	nop
.L3360:
	str	wzr, [sp, 64]
	b	.L3386
.L3387:
	ldr	x1, [sp, 96]
	mov	x0, 14288
	add	x19, x1, x0
	ldr	x1, [sp, 96]
	mov	x0, 14272
	add	x0, x1, x0
	ldr	w1, [sp, 64]
	bl	_ZN8ImVectorI15ImGuiInputEventEixEi
	mov	x1, x0
	mov	x0, x19
	bl	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	ldr	w0, [sp, 64]
	add	w0, w0, 1
	str	w0, [sp, 64]
.L3386:
	ldr	w1, [sp, 64]
	ldr	w0, [sp, 60]
	cmp	w1, w0
	blt	.L3387
	ldr	w0, [sp, 60]
	cmp	w0, 0
	beq	.L3388
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3388
	str	wzr, [sp, 68]
	b	.L3389
.L3392:
	ldr	w1, [sp, 68]
	ldr	w0, [sp, 60]
	cmp	w1, w0
	bge	.L3390
	adrp	x0, .LC484
	add	x19, x0, :lo12:.LC484
	b	.L3391
.L3390:
	adrp	x0, .LC485
	add	x19, x0, :lo12:.LC485
.L3391:
	ldr	x1, [sp, 96]
	mov	x0, 14272
	add	x0, x1, x0
	ldr	w1, [sp, 68]
	bl	_ZN8ImVectorI15ImGuiInputEventEixEi
	mov	x1, x0
	mov	x0, x19
	bl	_ZL20DebugPrintInputEventPKcPK15ImGuiInputEvent
	ldr	w0, [sp, 68]
	add	w0, w0, 1
	str	w0, [sp, 68]
.L3389:
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 14272]
	ldr	w1, [sp, 68]
	cmp	w1, w0
	blt	.L3392
.L3388:
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 14272]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	bne	.L3393
	ldr	x1, [sp, 96]
	mov	x0, 14272
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorI15ImGuiInputEventE6resizeEi
	b	.L3394
.L3393:
	ldr	x1, [sp, 96]
	mov	x0, 14272
	add	x3, x1, x0
	ldr	x0, [sp, 96]
	ldr	x4, [x0, 14280]
	ldr	x0, [sp, 96]
	ldr	x2, [x0, 14280]
	ldrsw	x1, [sp, 60]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	_ZN8ImVectorI15ImGuiInputEventE5eraseEPKS0_S3_
.L3394:
	ldr	x0, [sp, 96]
	add	x0, x0, 12288
	ldrb	w0, [x0, 1960]
	cmp	w0, 0
	beq	.L3399
	ldr	x0, [sp, 96]
	add	x0, x0, 8
	bl	_ZN7ImGuiIO14ClearInputKeysEv
.L3399:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 216]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3396
	bl	__stack_chk_fail
.L3396:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 224
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1970:
	.size	_ZN5ImGui17UpdateInputEventsEb, .-_ZN5ImGui17UpdateInputEventsEb
	.align	2
	.global	_ZN5ImGui11GetKeyOwnerE8ImGuiKey
	.type	_ZN5ImGui11GetKeyOwnerE8ImGuiKey, %function
_ZN5ImGui11GetKeyOwnerE8ImGuiKey:
.LFB1971:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3401
	mov	w0, -1
	b	.L3402
.L3401:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	str	w0, [sp, 44]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 1788]
	cmp	w0, 0
	beq	.L3403
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	beq	.L3403
	ldr	w0, [sp, 44]
	cmp	w0, 0
	beq	.L3403
	ldr	w0, [sp, 28]
	cmp	w0, 511
	ble	.L3403
	ldr	w0, [sp, 28]
	cmp	w0, 616
	bgt	.L3403
	mov	w0, -1
	b	.L3402
.L3403:
	ldr	w0, [sp, 44]
.L3402:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1971:
	.size	_ZN5ImGui11GetKeyOwnerE8ImGuiKey, .-_ZN5ImGui11GetKeyOwnerE8ImGuiKey
	.align	2
	.global	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	.type	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj, %function
_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj:
.LFB1972:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3405
	mov	w0, 1
	b	.L3406
.L3405:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldrb	w0, [x0, 1788]
	cmp	w0, 0
	beq	.L3407
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 24]
	cmp	w1, w0
	beq	.L3407
	ldr	w0, [sp, 24]
	cmp	w0, 0
	beq	.L3407
	ldr	w0, [sp, 28]
	cmp	w0, 511
	ble	.L3407
	ldr	w0, [sp, 28]
	cmp	w0, 616
	bgt	.L3407
	mov	w0, 0
	b	.L3406
.L3407:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey
	str	x0, [sp, 40]
	ldr	w0, [sp, 24]
	cmp	w0, 0
	bne	.L3408
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 8]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	b	.L3406
.L3408:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 24]
	cmp	w1, w0
	beq	.L3409
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 8]
	cmp	w0, 0
	beq	.L3410
	mov	w0, 0
	b	.L3406
.L3410:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	cmn	w0, #1
	beq	.L3409
	mov	w0, 0
	b	.L3406
.L3409:
	mov	w0, 1
.L3406:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1972:
	.size	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj, .-_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	.section	.rodata
	.align	3
.LC486:
	.string	"void ImGui::SetKeyOwner(ImGuiKey, ImGuiID, ImGuiInputFlags)"
	.align	3
.LC487:
	.string	"IsNamedKeyOrModKey(key) && (owner_id != ((ImGuiID)0) || (flags & (ImGuiInputFlags_LockThisFrame | ImGuiInputFlags_LockUntilRelease)))"
	.align	3
.LC488:
	.string	"(flags & ~ImGuiInputFlags_SupportedBySetKeyOwner) == 0"
	.text
	.align	2
	.global	_ZN5ImGui11SetKeyOwnerE8ImGuiKeyji
	.type	_ZN5ImGui11SetKeyOwnerE8ImGuiKeyji, %function
_ZN5ImGui11SetKeyOwnerE8ImGuiKeyji:
.LFB1973:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui18IsNamedKeyOrModKeyE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3412
	ldr	w0, [sp, 24]
	cmp	w0, 0
	bne	.L3419
	ldr	w0, [sp, 20]
	and	w0, w0, 192
	cmp	w0, 0
	bne	.L3419
.L3412:
	adrp	x0, .LC486
	add	x3, x0, :lo12:.LC486
	mov	w2, 8600
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC487
	add	x0, x0, :lo12:.LC487
	bl	__assert_fail
.L3419:
	nop
	ldr	w0, [sp, 20]
	and	w0, w0, -193
	cmp	w0, 0
	beq	.L3415
	adrp	x0, .LC486
	add	x3, x0, :lo12:.LC486
	mov	w2, 8601
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC488
	add	x0, x0, :lo12:.LC488
	bl	__assert_fail
.L3415:
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 24]
	str	w1, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	w0, [sp, 20]
	and	w0, w0, 128
	cmp	w0, 0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 40]
	strb	w1, [x0, 9]
	ldr	w0, [sp, 20]
	and	w0, w0, 64
	cmp	w0, 0
	bne	.L3416
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 9]
	cmp	w0, 0
	beq	.L3417
.L3416:
	mov	w1, 1
	b	.L3418
.L3417:
	mov	w1, 0
.L3418:
	ldr	x0, [sp, 40]
	strb	w1, [x0, 8]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1973:
	.size	_ZN5ImGui11SetKeyOwnerE8ImGuiKeyji, .-_ZN5ImGui11SetKeyOwnerE8ImGuiKeyji
	.section	.rodata
	.align	3
.LC489:
	.string	"void ImGui::SetItemKeyOwner(ImGuiKey, ImGuiInputFlags)"
	.align	3
.LC490:
	.string	"(flags & ~ImGuiInputFlags_SupportedBySetItemKeyOwner) == 0"
	.text
	.align	2
	.global	_ZN5ImGui15SetItemKeyOwnerE8ImGuiKeyi
	.type	_ZN5ImGui15SetItemKeyOwnerE8ImGuiKeyi, %function
_ZN5ImGui15SetItemKeyOwnerE8ImGuiKeyi:
.LFB1974:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	str	w0, [sp, 36]
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L3428
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16088]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L3422
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L3428
.L3422:
	ldr	w0, [sp, 24]
	and	w0, w0, 48
	cmp	w0, 0
	bne	.L3424
	ldr	w0, [sp, 24]
	orr	w0, w0, 48
	str	w0, [sp, 24]
.L3424:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16088]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L3425
	ldr	w0, [sp, 24]
	and	w0, w0, 16
	cmp	w0, 0
	bne	.L3426
.L3425:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L3420
	ldr	w0, [sp, 24]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3420
.L3426:
	ldr	w0, [sp, 24]
	and	w0, w0, -241
	cmp	w0, 0
	beq	.L3427
	adrp	x0, .LC489
	add	x3, x0, :lo12:.LC489
	mov	w2, 8628
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC490
	add	x0, x0, :lo12:.LC490
	bl	__assert_fail
.L3427:
	ldr	w0, [sp, 24]
	and	w0, w0, -49
	mov	w2, w0
	ldr	w1, [sp, 36]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui11SetKeyOwnerE8ImGuiKeyji
	b	.L3420
.L3428:
	nop
.L3420:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1974:
	.size	_ZN5ImGui15SetItemKeyOwnerE8ImGuiKeyi, .-_ZN5ImGui15SetItemKeyOwnerE8ImGuiKeyi
	.section	.rodata
	.align	3
.LC491:
	.string	"bool ImGui::Shortcut(ImGuiKeyChord, ImGuiID, ImGuiInputFlags)"
	.align	3
.LC492:
	.string	"(flags & ~ImGuiInputFlags_SupportedByShortcut) == 0"
	.text
	.align	2
	.global	_ZN5ImGui8ShortcutEiji
	.type	_ZN5ImGui8ShortcutEiji, %function
_ZN5ImGui8ShortcutEiji:
.LFB1975:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 20]
	and	w0, w0, 3840
	cmp	w0, 0
	bne	.L3430
	ldr	w0, [sp, 20]
	orr	w0, w0, 256
	str	w0, [sp, 20]
.L3430:
	ldr	w2, [sp, 20]
	ldr	w1, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui18SetShortcutRoutingEiji
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3431
	mov	w0, 0
	b	.L3432
.L3431:
	ldr	w0, [sp, 28]
	and	w0, w0, -61441
	str	w0, [sp, 32]
	ldr	w0, [sp, 28]
	and	w0, w0, 61440
	str	w0, [sp, 36]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 3608]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L3433
	mov	w0, 0
	b	.L3432
.L3433:
	ldr	w0, [sp, 32]
	cmp	w0, 0
	bne	.L3434
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui25ConvertSingleModFlagToKeyE8ImGuiKey
	str	w0, [sp, 32]
.L3434:
	ldr	w0, [sp, 20]
	and	w0, w0, 15
	mov	w2, w0
	ldr	w1, [sp, 24]
	ldr	w0, [sp, 32]
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3435
	mov	w0, 0
	b	.L3432
.L3435:
	ldr	w1, [sp, 20]
	mov	w0, -16144
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L3436
	adrp	x0, .LC491
	add	x3, x0, :lo12:.LC491
	mov	w2, 8656
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC492
	add	x0, x0, :lo12:.LC492
	bl	__assert_fail
.L3436:
	mov	w0, 1
.L3432:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1975:
	.size	_ZN5ImGui8ShortcutEiji, .-_ZN5ImGui8ShortcutEiji
	.section	.rodata
	.align	3
.LC493:
	.string	"bool ImGui::DebugCheckVersionAndDataLayout(const char*, size_t, size_t, size_t, size_t, size_t, size_t)"
	.align	3
.LC494:
	.string	"strcmp(version, \"1.89.1 WIP\") == 0 && \"Mismatched version string!\""
	.align	3
.LC495:
	.string	"sz_io == sizeof(ImGuiIO) && \"Mismatched struct layout!\""
	.align	3
.LC496:
	.string	"sz_style == sizeof(ImGuiStyle) && \"Mismatched struct layout!\""
	.align	3
.LC497:
	.string	"sz_vec2 == sizeof(ImVec2) && \"Mismatched struct layout!\""
	.align	3
.LC498:
	.string	"sz_vec4 == sizeof(ImVec4) && \"Mismatched struct layout!\""
	.align	3
.LC499:
	.string	"sz_vert == sizeof(ImDrawVert) && \"Mismatched struct layout!\""
	.align	3
.LC500:
	.string	"sz_idx == sizeof(ImDrawIdx) && \"Mismatched struct layout!\""
	.text
	.align	2
	.global	_ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmmm
	.type	_ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmmm, %function
_ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmmm:
.LFB1976:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	str	x2, [sp, 56]
	str	x3, [sp, 48]
	str	x4, [sp, 40]
	str	x5, [sp, 32]
	str	x6, [sp, 24]
	strb	wzr, [sp, 95]
	adrp	x0, .LC169
	add	x1, x0, :lo12:.LC169
	ldr	x0, [sp, 72]
	bl	strcmp
	cmp	w0, 0
	beq	.L3438
	mov	w0, 1
	strb	w0, [sp, 95]
	adrp	x0, .LC169
	add	x1, x0, :lo12:.LC169
	ldr	x0, [sp, 72]
	bl	strcmp
	cmp	w0, 0
	beq	.L3438
	adrp	x0, .LC493
	add	x3, x0, :lo12:.LC493
	mov	w2, 8677
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC494
	add	x0, x0, :lo12:.LC494
	bl	__assert_fail
.L3438:
	ldr	x1, [sp, 64]
	mov	x0, 14264
	cmp	x1, x0
	beq	.L3439
	mov	w0, 1
	strb	w0, [sp, 95]
	ldr	x1, [sp, 64]
	mov	x0, 14264
	cmp	x1, x0
	beq	.L3439
	adrp	x0, .LC493
	add	x3, x0, :lo12:.LC493
	mov	w2, 8678
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC495
	add	x0, x0, :lo12:.LC495
	bl	__assert_fail
.L3439:
	ldr	x0, [sp, 56]
	cmp	x0, 1048
	beq	.L3440
	mov	w0, 1
	strb	w0, [sp, 95]
	ldr	x0, [sp, 56]
	cmp	x0, 1048
	beq	.L3440
	adrp	x0, .LC493
	add	x3, x0, :lo12:.LC493
	mov	w2, 8679
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC496
	add	x0, x0, :lo12:.LC496
	bl	__assert_fail
.L3440:
	ldr	x0, [sp, 48]
	cmp	x0, 8
	beq	.L3441
	mov	w0, 1
	strb	w0, [sp, 95]
	ldr	x0, [sp, 48]
	cmp	x0, 8
	beq	.L3441
	adrp	x0, .LC493
	add	x3, x0, :lo12:.LC493
	mov	w2, 8680
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC497
	add	x0, x0, :lo12:.LC497
	bl	__assert_fail
.L3441:
	ldr	x0, [sp, 40]
	cmp	x0, 16
	beq	.L3442
	mov	w0, 1
	strb	w0, [sp, 95]
	ldr	x0, [sp, 40]
	cmp	x0, 16
	beq	.L3442
	adrp	x0, .LC493
	add	x3, x0, :lo12:.LC493
	mov	w2, 8681
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC498
	add	x0, x0, :lo12:.LC498
	bl	__assert_fail
.L3442:
	ldr	x0, [sp, 32]
	cmp	x0, 20
	beq	.L3443
	mov	w0, 1
	strb	w0, [sp, 95]
	ldr	x0, [sp, 32]
	cmp	x0, 20
	beq	.L3443
	adrp	x0, .LC493
	add	x3, x0, :lo12:.LC493
	mov	w2, 8682
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC499
	add	x0, x0, :lo12:.LC499
	bl	__assert_fail
.L3443:
	ldr	x0, [sp, 24]
	cmp	x0, 2
	beq	.L3444
	mov	w0, 1
	strb	w0, [sp, 95]
	ldr	x0, [sp, 24]
	cmp	x0, 2
	beq	.L3444
	adrp	x0, .LC493
	add	x3, x0, :lo12:.LC493
	mov	w2, 8683
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC500
	add	x0, x0, :lo12:.LC500
	bl	__assert_fail
.L3444:
	ldrb	w0, [sp, 95]
	eor	w0, w0, 1
	and	w0, w0, 255
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1976:
	.size	_ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmmm, .-_ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmmm
	.section	.rodata
	.align	3
.LC501:
	.string	"void ImGui::ErrorCheckUsingSetCursorPosToExtendParentBoundaries()"
	.align	3
.LC502:
	.string	"window->DC.IsSetPos"
	.text
	.align	2
	.global	_ZN5ImGui51ErrorCheckUsingSetCursorPosToExtendParentBoundariesEv
	.type	_ZN5ImGui51ErrorCheckUsingSetCursorPosToExtendParentBoundariesEv, %function
_ZN5ImGui51ErrorCheckUsingSetCursorPosToExtendParentBoundariesEv:
.LFB1977:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 289]
	cmp	w0, 0
	bne	.L3447
	adrp	x0, .LC501
	add	x3, x0, :lo12:.LC501
	mov	w2, 8706
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC502
	add	x0, x0, :lo12:.LC502
	bl	__assert_fail
.L3447:
	ldr	x0, [sp, 40]
	strb	wzr, [x0, 289]
	ldr	x0, [sp, 40]
	add	x2, x0, 248
	ldr	x0, [sp, 40]
	add	x0, x0, 224
	ldr	x19, [sp, 40]
	mov	x1, x0
	mov	x0, x2
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 248]
	str	s0, [x19, 252]
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1977:
	.size	_ZN5ImGui51ErrorCheckUsingSetCursorPosToExtendParentBoundariesEv, .-_ZN5ImGui51ErrorCheckUsingSetCursorPosToExtendParentBoundariesEv
	.section	.rodata
	.align	3
.LC503:
	.string	"void ImGui::ErrorCheckNewFrameSanityChecks()"
	.align	3
.LC504:
	.string	"(g.IO.DeltaTime > 0.0f || g.FrameCount == 0) && \"Need a positive DeltaTime!\""
	.align	3
.LC505:
	.string	"(g.FrameCount == 0 || g.FrameCountEnded == g.FrameCount) && \"Forgot to call Render() or EndFrame() at the end of the previous frame?\""
	.align	3
.LC506:
	.string	"g.IO.DisplaySize.x >= 0.0f && g.IO.DisplaySize.y >= 0.0f && \"Invalid DisplaySize value!\""
	.align	3
.LC507:
	.string	"g.IO.Fonts->IsBuilt() && \"Font Atlas not built! Make sure you called ImGui_ImplXXXX_NewFrame() function for renderer backend, which should call io.Fonts->GetTexDataAsRGBA32() / GetTexDataAsAlpha8()\""
	.align	3
.LC508:
	.string	"g.Style.CurveTessellationTol > 0.0f && \"Invalid style setting!\""
	.align	3
.LC509:
	.string	"g.Style.CircleTessellationMaxError > 0.0f && \"Invalid style setting!\""
	.align	3
.LC510:
	.string	"g.Style.Alpha >= 0.0f && g.Style.Alpha <= 1.0f && \"Invalid style setting!\""
	.align	3
.LC511:
	.string	"g.Style.WindowMinSize.x >= 1.0f && g.Style.WindowMinSize.y >= 1.0f && \"Invalid style setting.\""
	.align	3
.LC512:
	.string	"g.Style.WindowMenuButtonPosition == ImGuiDir_None || g.Style.WindowMenuButtonPosition == ImGuiDir_Left || g.Style.WindowMenuButtonPosition == ImGuiDir_Right"
	.align	3
.LC513:
	.string	"g.Style.ColorButtonPosition == ImGuiDir_Left || g.Style.ColorButtonPosition == ImGuiDir_Right"
	.align	3
.LC514:
	.string	"g.IO.KeyMap[n] >= -1 && g.IO.KeyMap[n] < 512 && \"io.KeyMap[] contains an out of bound value (need to be 0..511, or -1 for unmapped key)\""
	.align	3
.LC515:
	.string	"g.IO.KeyMap[ImGuiKey_Space] != -1 && \"ImGuiKey_Space is not mapped, required for keyboard navigation.\""
	.text
	.align	2
	.type	_ZN5ImGuiL30ErrorCheckNewFrameSanityChecksEv, %function
_ZN5ImGuiL30ErrorCheckNewFrameSanityChecksEv:
.LFB1978:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L3449
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8733
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC214
	add	x0, x0, :lo12:.LC214
	bl	__assert_fail
.L3449:
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 24]
	fcmpe	s0, #0.0
	bgt	.L3450
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 15904]
	cmp	w0, 0
	beq	.L3450
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8734
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC504
	add	x0, x0, :lo12:.LC504
	bl	__assert_fail
.L3450:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 15904]
	cmp	w0, 0
	beq	.L3451
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 15908]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	beq	.L3451
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8735
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC505
	add	x0, x0, :lo12:.LC505
	bl	__assert_fail
.L3451:
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 16]
	fcmpe	s0, #0.0
	bge	.L3476
	b	.L3452
.L3476:
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 20]
	fcmpe	s0, #0.0
	bge	.L3455
.L3452:
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8736
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC506
	add	x0, x0, :lo12:.LC506
	bl	__assert_fail
.L3455:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 88]
	bl	_ZNK11ImFontAtlas7IsBuiltEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3481
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8737
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC507
	add	x0, x0, :lo12:.LC507
	bl	__assert_fail
.L3481:
	nop
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 14496]
	fcmpe	s0, #0.0
	bgt	.L3458
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8738
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC508
	add	x0, x0, :lo12:.LC508
	bl	__assert_fail
.L3458:
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 14500]
	fcmpe	s0, #0.0
	bgt	.L3459
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8739
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC509
	add	x0, x0, :lo12:.LC509
	bl	__assert_fail
.L3459:
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 14304]
	fcmpe	s0, #0.0
	bge	.L3477
	b	.L3460
.L3477:
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 14304]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	bls	.L3463
.L3460:
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8740
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC510
	add	x0, x0, :lo12:.LC510
	bl	__assert_fail
.L3463:
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 14328]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	bge	.L3478
	b	.L3464
.L3478:
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 14332]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	bge	.L3467
.L3464:
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8741
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC511
	add	x0, x0, :lo12:.LC511
	bl	__assert_fail
.L3467:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 14344]
	cmn	w0, #1
	beq	.L3468
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 14344]
	cmp	w0, 0
	beq	.L3468
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 14344]
	cmp	w0, 1
	beq	.L3468
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8742
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC512
	add	x0, x0, :lo12:.LC512
	bl	__assert_fail
.L3468:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 14452]
	cmp	w0, 0
	beq	.L3469
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 14452]
	cmp	w0, 1
	beq	.L3469
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8743
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC513
	add	x0, x0, :lo12:.LC513
	bl	__assert_fail
.L3469:
	mov	w0, 512
	str	w0, [sp, 20]
	b	.L3470
.L3473:
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 20]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 16]
	cmn	w0, #1
	blt	.L3471
	ldr	x1, [sp, 24]
	ldrsw	x0, [sp, 20]
	add	x0, x0, 60
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	w0, [x0, 16]
	cmp	w0, 511
	ble	.L3480
.L3471:
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8746
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC514
	add	x0, x0, :lo12:.LC514
	bl	__assert_fail
.L3480:
	ldr	w0, [sp, 20]
	add	w0, w0, 1
	str	w0, [sp, 20]
.L3470:
	ldr	w0, [sp, 20]
	cmp	w0, 651
	ble	.L3473
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 8]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L3474
	ldr	x0, [sp, 24]
	add	x0, x0, 12288
	ldrsb	w0, [x0, 1962]
	cmp	w0, 1
	bne	.L3474
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 2352]
	cmn	w0, #1
	bne	.L3474
	adrp	x0, .LC503
	add	x3, x0, :lo12:.LC503
	mov	w2, 8750
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC515
	add	x0, x0, :lo12:.LC515
	bl	__assert_fail
.L3474:
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 126]
	cmp	w0, 0
	beq	.L3482
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 2
	cmp	w0, 0
	bne	.L3482
	ldr	x0, [sp, 24]
	strb	wzr, [x0, 126]
.L3482:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1978:
	.size	_ZN5ImGuiL30ErrorCheckNewFrameSanityChecksEv, .-_ZN5ImGuiL30ErrorCheckNewFrameSanityChecksEv
	.section	.rodata
	.align	3
.LC516:
	.string	"void ImGui::ErrorCheckEndFrameSanityChecks()"
	.align	3
.LC517:
	.string	"(key_mods == 0 || g.IO.KeyMods == key_mods) && \"Mismatching io.KeyCtrl/io.KeyShift/io.KeyAlt/io.KeySuper vs io.KeyMods\""
	.align	3
.LC518:
	.string	"(g.CurrentWindowStack.Size == 1) && \"Mismatched Begin/BeginChild vs End/EndChild calls: did you forget to call End/EndChild?\""
	.align	3
.LC519:
	.string	"(g.CurrentWindowStack.Size == 1) && \"Mismatched Begin/BeginChild vs End/EndChild calls: did you call End/EndChild too much?\""
	.align	3
.LC520:
	.string	"(g.GroupStack.Size == 0) && \"Missing EndGroup call!\""
	.text
	.align	2
	.type	_ZN5ImGuiL30ErrorCheckEndFrameSanityChecksEv, %function
_ZN5ImGuiL30ErrorCheckEndFrameSanityChecksEv:
.LFB1979:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	bl	_ZL22GetMergedModsFromBoolsv
	str	w0, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	beq	.L3484
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 3608]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	beq	.L3484
	adrp	x0, .LC516
	add	x3, x0, :lo12:.LC516
	mov	w2, 8769
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC517
	add	x0, x0, :lo12:.LC517
	bl	__assert_fail
.L3484:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 15984]
	cmp	w0, 1
	beq	.L3485
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 15984]
	cmp	w0, 1
	ble	.L3486
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 15984]
	cmp	w0, 1
	beq	.L3488
	adrp	x0, .LC516
	add	x3, x0, :lo12:.LC516
	mov	w2, 8781
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC518
	add	x0, x0, :lo12:.LC518
	bl	__assert_fail
.L3489:
	bl	_ZN5ImGui3EndEv
.L3488:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 15984]
	cmp	w0, 1
	bgt	.L3489
	b	.L3485
.L3486:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 15984]
	cmp	w0, 1
	beq	.L3485
	adrp	x0, .LC516
	add	x3, x0, :lo12:.LC516
	mov	w2, 8787
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC519
	add	x0, x0, :lo12:.LC519
	bl	__assert_fail
.L3485:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2080]
	cmp	w0, 0
	beq	.L3491
	adrp	x0, .LC516
	add	x3, x0, :lo12:.LC516
	mov	w2, 8791
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC520
	add	x0, x0, :lo12:.LC520
	bl	__assert_fail
.L3491:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1979:
	.size	_ZN5ImGuiL30ErrorCheckEndFrameSanityChecksEv, .-_ZN5ImGuiL30ErrorCheckEndFrameSanityChecksEv
	.section	.rodata
	.align	3
.LC521:
	.string	"void ImGui::ErrorCheckEndFrameRecover(ImGuiErrorLogCallback, void*)"
	.align	3
.LC522:
	.string	"window->IsFallbackWindow"
	.align	3
.LC523:
	.string	"Recovered from missing EndChild() for '%s'"
	.align	3
.LC524:
	.string	"Recovered from missing End() for '%s'"
	.text
	.align	2
	.global	_ZN5ImGui25ErrorCheckEndFrameRecoverEPFvPvPKczES0_
	.type	_ZN5ImGui25ErrorCheckEndFrameRecoverEPFvPvPKczES0_, %function
_ZN5ImGui25ErrorCheckEndFrameRecoverEPFvPvPKczES0_:
.LFB1980:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	b	.L3493
.L3500:
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui26ErrorCheckEndWindowRecoverEPFvPvPKczES0_
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 15984]
	cmp	w0, 1
	bne	.L3494
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 158]
	cmp	w0, 0
	bne	.L3501
	adrp	x0, .LC521
	add	x3, x0, :lo12:.LC521
	mov	w2, 8809
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC522
	add	x0, x0, :lo12:.LC522
	bl	__assert_fail
.L3494:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L3497
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L3498
	ldr	x3, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC523
	add	x1, x0, :lo12:.LC523
	ldr	x0, [sp, 16]
	blr	x3
.L3498:
	bl	_ZN5ImGui8EndChildEv
	b	.L3493
.L3497:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L3499
	ldr	x3, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC524
	add	x1, x0, :lo12:.LC524
	ldr	x0, [sp, 16]
	blr	x3
.L3499:
	bl	_ZN5ImGui3EndEv
.L3493:
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 15984]
	cmp	w0, 0
	bgt	.L3500
	b	.L3502
.L3501:
	nop
.L3502:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1980:
	.size	_ZN5ImGui25ErrorCheckEndFrameRecoverEPFvPvPKczES0_, .-_ZN5ImGui25ErrorCheckEndFrameRecoverEPFvPvPKczES0_
	.section	.rodata
	.align	3
.LC525:
	.string	"Recovered from missing EndTable() in '%s'"
	.align	3
.LC526:
	.string	"void ImGui::ErrorCheckEndWindowRecover(ImGuiErrorLogCallback, void*)"
	.align	3
.LC527:
	.string	"window != __null"
	.align	3
.LC528:
	.string	"Recovered from missing EndTabBar() in '%s'"
	.align	3
.LC529:
	.string	"Recovered from missing TreePop() in '%s'"
	.align	3
.LC530:
	.string	"Recovered from missing EndGroup() in '%s'"
	.align	3
.LC531:
	.string	"Recovered from missing PopID() in '%s'"
	.align	3
.LC532:
	.string	"Recovered from missing EndDisabled() in '%s'"
	.align	3
.LC533:
	.string	"Recovered from missing PopStyleColor() in '%s' for ImGuiCol_%s"
	.align	3
.LC534:
	.string	"Recovered from missing PopItemFlag() in '%s'"
	.align	3
.LC535:
	.string	"Recovered from missing PopStyleVar() in '%s'"
	.align	3
.LC536:
	.string	"Recovered from missing PopFocusScope() in '%s'"
	.text
	.align	2
	.global	_ZN5ImGui26ErrorCheckEndWindowRecoverEPFvPvPKczES0_
	.type	_ZN5ImGui26ErrorCheckEndWindowRecoverEPFvPvPKczES0_, %function
_ZN5ImGui26ErrorCheckEndWindowRecoverEPFvPvPKczES0_:
.LFB1981:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -64
	.cfi_offset 20, -56
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	b	.L3504
.L3507:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3505
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 19152]
	ldr	x0, [x0, 384]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC525
	add	x1, x0, :lo12:.LC525
	ldr	x0, [sp, 32]
	blr	x3
.L3505:
	bl	_ZN5ImGui8EndTableEv
.L3504:
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 19152]
	cmp	x0, 0
	beq	.L3506
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 19152]
	ldr	x1, [x0, 384]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 16032]
	cmp	x1, x0
	beq	.L3507
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 19152]
	ldr	x1, [x0, 392]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 16032]
	cmp	x1, x0
	beq	.L3507
.L3506:
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 64]
	ldr	x1, [sp, 56]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE4backEv
	add	x0, x0, 68
	str	x0, [sp, 72]
	ldr	x0, [sp, 64]
	cmp	x0, 0
	bne	.L3509
	adrp	x0, .LC526
	add	x3, x0, :lo12:.LC526
	mov	w2, 8837
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC527
	add	x0, x0, :lo12:.LC527
	bl	__assert_fail
.L3511:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3510
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC528
	add	x1, x0, :lo12:.LC528
	ldr	x0, [sp, 32]
	blr	x3
.L3510:
	bl	_ZN5ImGui9EndTabBarEv
.L3509:
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 19256]
	cmp	x0, 0
	bne	.L3511
	b	.L3512
.L3514:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3513
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC529
	add	x1, x0, :lo12:.LC529
	ldr	x0, [sp, 32]
	blr	x3
.L3513:
	bl	_ZN5ImGui7TreePopEv
.L3512:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 360]
	cmp	w0, 0
	bgt	.L3514
	b	.L3515
.L3517:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3516
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC530
	add	x1, x0, :lo12:.LC530
	ldr	x0, [sp, 32]
	blr	x3
.L3516:
	bl	_ZN5ImGui8EndGroupEv
.L3515:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2080]
	ldr	x1, [sp, 72]
	ldrsh	w1, [x1, 10]
	cmp	w0, w1
	bgt	.L3517
	b	.L3518
.L3520:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3519
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC531
	add	x1, x0, :lo12:.LC531
	ldr	x0, [sp, 32]
	blr	x3
.L3519:
	bl	_ZN5ImGui5PopIDEv
.L3518:
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 208]
	cmp	w0, 1
	bgt	.L3520
	b	.L3521
.L3523:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3522
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC532
	add	x1, x0, :lo12:.LC532
	ldr	x0, [sp, 32]
	blr	x3
.L3522:
	bl	_ZN5ImGui11EndDisabledEv
.L3521:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldrsh	w1, [x0, 6920]
	ldr	x0, [sp, 72]
	ldrsh	w0, [x0, 16]
	cmp	w1, w0
	bgt	.L3523
	b	.L3524
.L3526:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3525
	ldr	x19, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x20, [x0]
	ldr	x1, [sp, 56]
	mov	x0, 18384
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiColorModE4backEv
	ldr	w0, [x0]
	bl	_ZN5ImGui17GetStyleColorNameEi
	mov	x3, x0
	mov	x2, x20
	adrp	x0, .LC533
	add	x1, x0, :lo12:.LC533
	ldr	x0, [sp, 32]
	blr	x19
.L3525:
	mov	w0, 1
	bl	_ZN5ImGui13PopStyleColorEi
.L3524:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2000]
	ldr	x1, [sp, 72]
	ldrsh	w1, [x1, 2]
	cmp	w0, w1
	bgt	.L3526
	b	.L3527
.L3529:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3528
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC534
	add	x1, x0, :lo12:.LC534
	ldr	x0, [sp, 32]
	blr	x3
.L3528:
	bl	_ZN5ImGui11PopItemFlagEv
.L3527:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2064]
	ldr	x1, [sp, 72]
	ldrsh	w1, [x1, 12]
	cmp	w0, w1
	bgt	.L3529
	b	.L3530
.L3532:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3531
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC535
	add	x1, x0, :lo12:.LC535
	ldr	x0, [sp, 32]
	blr	x3
.L3531:
	mov	w0, 1
	bl	_ZN5ImGui11PopStyleVarEi
.L3530:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2016]
	ldr	x1, [sp, 72]
	ldrsh	w1, [x1, 4]
	cmp	w0, w1
	bgt	.L3532
	b	.L3533
.L3535:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3534
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 64]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC536
	add	x1, x0, :lo12:.LC536
	ldr	x0, [sp, 32]
	blr	x3
.L3534:
	bl	_ZN5ImGui13PopFocusScopeEv
.L3533:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 2048]
	ldr	x0, [sp, 72]
	ldrsh	w0, [x0, 8]
	add	w0, w0, 1
	cmp	w1, w0
	bgt	.L3535
	nop
	nop
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1981:
	.size	_ZN5ImGui26ErrorCheckEndWindowRecoverEPFvPvPKczES0_, .-_ZN5ImGui26ErrorCheckEndWindowRecoverEPFvPvPKczES0_
	.align	2
	.global	_ZN15ImGuiStackSizes17SetToCurrentStateEv
	.type	_ZN15ImGuiStackSizes17SetToCurrentStateEv, %function
_ZN15ImGuiStackSizes17SetToCurrentStateEv:
.LFB1982:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 16]
	ldr	x0, [sp, 16]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 208]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2000]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0, 2]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2016]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0, 4]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2032]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0, 6]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2048]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0, 8]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2080]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0, 10]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2064]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0, 12]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	sxth	w1, w0
	ldr	x0, [sp, 8]
	strh	w1, [x0, 14]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldrsh	w1, [x0, 6920]
	ldr	x0, [sp, 8]
	strh	w1, [x0, 16]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1982:
	.size	_ZN15ImGuiStackSizes17SetToCurrentStateEv, .-_ZN15ImGuiStackSizes17SetToCurrentStateEv
	.section	.rodata
	.align	3
.LC537:
	.string	"void ImGuiStackSizes::CompareWithCurrentState()"
	.align	3
.LC538:
	.string	"SizeOfIDStack == window->IDStack.Size && \"PushID/PopID or TreeNode/TreePop Mismatch!\""
	.align	3
.LC539:
	.string	"SizeOfGroupStack == g.GroupStack.Size && \"BeginGroup/EndGroup Mismatch!\""
	.align	3
.LC540:
	.string	"SizeOfBeginPopupStack == g.BeginPopupStack.Size && \"BeginPopup/EndPopup or BeginMenu/EndMenu Mismatch!\""
	.align	3
.LC541:
	.string	"SizeOfDisabledStack == g.DisabledStackSize && \"BeginDisabled/EndDisabled Mismatch!\""
	.align	3
.LC542:
	.string	"SizeOfItemFlagsStack >= g.ItemFlagsStack.Size && \"PushItemFlag/PopItemFlag Mismatch!\""
	.align	3
.LC543:
	.string	"SizeOfColorStack >= g.ColorStack.Size && \"PushStyleColor/PopStyleColor Mismatch!\""
	.align	3
.LC544:
	.string	"SizeOfStyleVarStack >= g.StyleVarStack.Size && \"PushStyleVar/PopStyleVar Mismatch!\""
	.align	3
.LC545:
	.string	"SizeOfFontStack >= g.FontStack.Size && \"PushFont/PopFont Mismatch!\""
	.align	3
.LC546:
	.string	"SizeOfFocusScopeStack == g.FocusScopeStack.Size && \"PushFocusScope/PopFocusScope Mismatch!\""
	.text
	.align	2
	.global	_ZN15ImGuiStackSizes23CompareWithCurrentStateEv
	.type	_ZN15ImGuiStackSizes23CompareWithCurrentStateEv, %function
_ZN15ImGuiStackSizes23CompareWithCurrentStateEv:
.LFB1983:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0]
	mov	w1, w0
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 208]
	cmp	w1, w0
	beq	.L3538
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8910
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC538
	add	x0, x0, :lo12:.LC538
	bl	__assert_fail
.L3538:
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 10]
	mov	w1, w0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2080]
	cmp	w1, w0
	beq	.L3539
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8914
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC539
	add	x0, x0, :lo12:.LC539
	bl	__assert_fail
.L3539:
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 14]
	mov	w1, w0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	cmp	w1, w0
	beq	.L3540
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8915
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC540
	add	x0, x0, :lo12:.LC540
	bl	__assert_fail
.L3540:
	ldr	x0, [sp, 24]
	ldrsh	w1, [x0, 16]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldrsh	w0, [x0, 6920]
	cmp	w1, w0
	beq	.L3541
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8916
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC541
	add	x0, x0, :lo12:.LC541
	bl	__assert_fail
.L3541:
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 12]
	mov	w1, w0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2064]
	cmp	w1, w0
	bge	.L3542
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8917
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC542
	add	x0, x0, :lo12:.LC542
	bl	__assert_fail
.L3542:
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 2]
	mov	w1, w0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2000]
	cmp	w1, w0
	bge	.L3543
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8918
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC543
	add	x0, x0, :lo12:.LC543
	bl	__assert_fail
.L3543:
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 4]
	mov	w1, w0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2016]
	cmp	w1, w0
	bge	.L3544
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8919
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC544
	add	x0, x0, :lo12:.LC544
	bl	__assert_fail
.L3544:
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 6]
	mov	w1, w0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2032]
	cmp	w1, w0
	bge	.L3545
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8920
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC545
	add	x0, x0, :lo12:.LC545
	bl	__assert_fail
.L3545:
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 8]
	mov	w1, w0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2048]
	cmp	w1, w0
	beq	.L3547
	adrp	x0, .LC537
	add	x3, x0, :lo12:.LC537
	mov	w2, 8921
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC546
	add	x0, x0, :lo12:.LC546
	bl	__assert_fail
.L3547:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1983:
	.size	_ZN15ImGuiStackSizes23CompareWithCurrentStateEv, .-_ZN15ImGuiStackSizes23CompareWithCurrentStateEv
	.align	2
	.global	_ZN5ImGui8ItemSizeERK6ImVec2f
	.type	_ZN5ImGui8ItemSizeERK6ImVec2f, %function
_ZN5ImGui8ItemSizeERK6ImVec2f:
.LFB1984:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	s0, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 155]
	cmp	w0, 0
	bne	.L3558
	ldr	s0, [sp, 20]
	fcmpe	s0, #0.0
	bge	.L3556
	b	.L3557
.L3556:
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 280]
	ldr	s0, [sp, 20]
	fsub	s0, s1, s0
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	b	.L3553
.L3557:
	movi	v0.2s, #0
.L3553:
	str	s0, [sp, 36]
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 288]
	cmp	w0, 0
	beq	.L3554
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 236]
	b	.L3555
.L3554:
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 228]
.L3555:
	str	s0, [sp, 40]
	ldr	x0, [sp, 56]
	ldr	s2, [x0, 268]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 228]
	ldr	s0, [sp, 40]
	fsub	s1, s1, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 4]
	fadd	s1, s1, s0
	ldr	s0, [sp, 36]
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 44]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 224]
	ldr	x0, [sp, 24]
	ldr	s0, [x0]
	fadd	s0, s1, s0
	ldr	x0, [sp, 56]
	str	s0, [x0, 232]
	ldr	x0, [sp, 56]
	ldr	s0, [sp, 40]
	str	s0, [x0, 236]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 292]
	fadd	s1, s1, s0
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 296]
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	ldr	x0, [sp, 56]
	str	s0, [x0, 224]
	ldr	s1, [sp, 40]
	ldr	s0, [sp, 44]
	fadd	s1, s1, s0
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 14384]
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	ldr	x0, [sp, 56]
	str	s0, [x0, 228]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 248]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 232]
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 56]
	str	s0, [x0, 248]
	ldr	x0, [sp, 56]
	ldr	s2, [x0, 252]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 228]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 14384]
	fsub	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s2
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 56]
	str	s0, [x0, 252]
	ldr	x0, [sp, 56]
	ldr	s0, [sp, 44]
	str	s0, [x0, 276]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 268]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 280]
	ldr	s1, [sp, 20]
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 56]
	str	s0, [x0, 284]
	ldr	x0, [sp, 56]
	str	wzr, [x0, 280]
	ldr	x0, [sp, 56]
	strb	wzr, [x0, 289]
	ldr	x0, [sp, 56]
	ldrb	w1, [x0, 289]
	ldr	x0, [sp, 56]
	strb	w1, [x0, 288]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 404]
	cmp	w0, 0
	bne	.L3548
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	b	.L3548
.L3558:
	nop
.L3548:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1984:
	.size	_ZN5ImGui8ItemSizeERK6ImVec2f, .-_ZN5ImGui8ItemSizeERK6ImVec2f
	.section	.rodata
	.align	3
.LC547:
	.string	"bool ImGui::ItemAdd(const ImRect&, ImGuiID, const ImRect*, ImGuiItemFlags)"
	.align	3
.LC548:
	.string	"id != window->ID && \"Cannot have an empty ID at the root of a window. If you need an empty label, use ## and read the FAQ about how the ID Stack works!\""
	.text
	.align	2
	.global	_ZN5ImGui7ItemAddERK6ImRectjPS1_i
	.type	_ZN5ImGui7ItemAddERK6ImRectjPS1_i, %function
_ZN5ImGui7ItemAddERK6ImRectjPS1_i:
.LFB1985:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	str	w3, [sp, 32]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 72]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w1, [sp, 36]
	str	w1, [x0, 1828]
	ldr	x1, [sp, 64]
	mov	x0, 18432
	add	x2, x1, x0
	ldr	x0, [sp, 40]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2, -208]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L3560
	ldr	x0, [sp, 24]
	b	.L3561
.L3560:
	ldr	x0, [sp, 40]
.L3561:
	ldr	x2, [sp, 64]
	mov	x1, 18432
	add	x2, x2, x1
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2, -192]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w1, [x0, 1800]
	ldr	w0, [sp, 32]
	orr	w1, w1, w0
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 1832]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 1836]
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L3562
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui11KeepAliveIDEj
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 1832]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L3563
	ldr	x0, [sp, 72]
	ldrsh	w1, [x0, 318]
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 312]
	mov	w2, w0
	mov	w0, 1
	lsl	w0, w0, w2
	sxth	w0, w0
	orr	w0, w1, w0
	sxth	w1, w0
	ldr	x0, [sp, 72]
	strh	w1, [x0, 318]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L3564
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2220]
	cmp	w0, 0
	beq	.L3563
.L3564:
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18536]
	ldr	x1, [x0, 880]
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 880]
	cmp	x1, x0
	bne	.L3563
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 72]
	cmp	x1, x0
	beq	.L3565
	ldr	x0, [sp, 72]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	orr	w0, w1, w0
	and	w0, w0, 8388608
	cmp	w0, 0
	beq	.L3563
.L3565:
	bl	_ZN5ImGuiL14NavProcessItemEv
.L3563:
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L3562
	adrp	x0, .LC547
	add	x3, x0, :lo12:.LC547
	mov	w2, 9038
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC548
	add	x0, x0, :lo12:.LC548
	bl	__assert_fail
.L3562:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 1808]
	ldr	x0, [sp, 72]
	add	x0, x0, 536
	mov	x1, x0
	ldr	x0, [sp, 40]
	bl	_ZNK6ImRect8OverlapsERKS_
	strb	w0, [sp, 63]
	ldrb	w0, [sp, 63]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3566
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L3567
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L3566
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	beq	.L3566
.L3567:
	ldr	x0, [sp, 64]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3566
	mov	w0, 0
	b	.L3568
.L3566:
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L3569
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 1804]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L3569
	bl	_ZN5ImGui34DebugLocateItemResolveWithLastItemEv
.L3569:
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L3570
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	orr	w1, w0, 512
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
.L3570:
	ldr	x3, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 8
	mov	w2, 1
	mov	x1, x0
	mov	x0, x3
	bl	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3571
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	orr	w1, w0, 1
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
.L3571:
	mov	w0, 1
.L3568:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1985:
	.size	_ZN5ImGui7ItemAddERK6ImRectjPS1_i, .-_ZN5ImGui7ItemAddERK6ImRectjPS1_i
	.align	2
	.global	_ZN5ImGui8SameLineEff
	.type	_ZN5ImGui8SameLineEff, %function
_ZN5ImGui8SameLineEff:
.LFB1986:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	s0, [sp, 12]
	str	s1, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 16]
	ldr	x0, [sp, 16]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldrb	w0, [x0, 155]
	cmp	w0, 0
	bne	.L3583
	ldr	s0, [sp, 12]
	fcmp	s0, #0.0
	beq	.L3575
	ldr	s0, [sp, 8]
	fcmpe	s0, #0.0
	bmi	.L3581
	b	.L3576
.L3581:
	str	wzr, [sp, 8]
.L3576:
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 100]
	fsub	s1, s1, s0
	ldr	s0, [sp, 12]
	fadd	s1, s1, s0
	ldr	s0, [sp, 8]
	fadd	s1, s1, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 300]
	fadd	s1, s1, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 296]
	fadd	s0, s1, s0
	ldr	x0, [sp, 24]
	str	s0, [x0, 224]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 236]
	ldr	x0, [sp, 24]
	str	s0, [x0, 228]
	b	.L3578
.L3575:
	ldr	s0, [sp, 8]
	fcmpe	s0, #0.0
	bmi	.L3582
	b	.L3579
.L3582:
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 14380]
	str	s0, [sp, 8]
.L3579:
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 232]
	ldr	s0, [sp, 8]
	fadd	s0, s1, s0
	ldr	x0, [sp, 24]
	str	s0, [x0, 224]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 236]
	ldr	x0, [sp, 24]
	str	s0, [x0, 228]
.L3578:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 24]
	ldr	x1, [x1, 272]
	str	x1, [x0, 264]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 284]
	ldr	x0, [sp, 24]
	str	s0, [x0, 280]
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 288]
	b	.L3572
.L3583:
	nop
.L3572:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1986:
	.size	_ZN5ImGui8SameLineEff, .-_ZN5ImGui8SameLineEff
	.align	2
	.global	_ZN5ImGui18GetCursorScreenPosEv
	.type	_ZN5ImGui18GetCursorScreenPosEv, %function
_ZN5ImGui18GetCursorScreenPosEv:
.LFB1987:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 224]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1987:
	.size	_ZN5ImGui18GetCursorScreenPosEv, .-_ZN5ImGui18GetCursorScreenPosEv
	.align	2
	.global	_ZN5ImGui18SetCursorScreenPosERK6ImVec2
	.type	_ZN5ImGui18SetCursorScreenPosERK6ImVec2, %function
_ZN5ImGui18SetCursorScreenPosERK6ImVec2:
.LFB1988:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 24]
	ldr	x1, [x1]
	str	x1, [x0, 224]
	ldr	x0, [sp, 40]
	mov	w1, 1
	strb	w1, [x0, 289]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1988:
	.size	_ZN5ImGui18SetCursorScreenPosERK6ImVec2, .-_ZN5ImGui18SetCursorScreenPosERK6ImVec2
	.align	2
	.global	_ZN5ImGui12GetCursorPosEv
	.type	_ZN5ImGui12GetCursorPosEv, %function
_ZN5ImGui12GetCursorPosEv:
.LFB1989:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x2, x0, 224
	ldr	x0, [sp, 32]
	add	x0, x0, 24
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 24]
	str	s0, [sp, 28]
	ldr	x0, [sp, 32]
	add	x1, x0, 100
	add	x0, sp, 24
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3589
	bl	__stack_chk_fail
.L3589:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1989:
	.size	_ZN5ImGui12GetCursorPosEv, .-_ZN5ImGui12GetCursorPosEv
	.align	2
	.global	_ZN5ImGui13GetCursorPosXEv
	.type	_ZN5ImGui13GetCursorPosXEv, %function
_ZN5ImGui13GetCursorPosXEv:
.LFB1990:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 224]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 24]
	fsub	s1, s1, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 100]
	fadd	s0, s1, s0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1990:
	.size	_ZN5ImGui13GetCursorPosXEv, .-_ZN5ImGui13GetCursorPosXEv
	.align	2
	.global	_ZN5ImGui13GetCursorPosYEv
	.type	_ZN5ImGui13GetCursorPosYEv, %function
_ZN5ImGui13GetCursorPosYEv:
.LFB1991:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 228]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 28]
	fsub	s1, s1, s0
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 104]
	fadd	s0, s1, s0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1991:
	.size	_ZN5ImGui13GetCursorPosYEv, .-_ZN5ImGui13GetCursorPosYEv
	.align	2
	.global	_ZN5ImGui12SetCursorPosERK6ImVec2
	.type	_ZN5ImGui12SetCursorPosERK6ImVec2, %function
_ZN5ImGui12SetCursorPosERK6ImVec2:
.LFB1992:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	add	x2, x0, 24
	ldr	x0, [sp, 64]
	add	x0, x0, 100
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	ldr	x19, [sp, 64]
	add	x0, sp, 56
	ldr	x1, [sp, 40]
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 224]
	str	s0, [x19, 228]
	ldr	x0, [sp, 64]
	mov	w1, 1
	strb	w1, [x0, 289]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3595
	bl	__stack_chk_fail
.L3595:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1992:
	.size	_ZN5ImGui12SetCursorPosERK6ImVec2, .-_ZN5ImGui12SetCursorPosERK6ImVec2
	.align	2
	.global	_ZN5ImGui13SetCursorPosXEf
	.type	_ZN5ImGui13SetCursorPosXEf, %function
_ZN5ImGui13SetCursorPosXEf:
.LFB1993:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 100]
	fsub	s1, s1, s0
	ldr	s0, [sp, 28]
	fadd	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 224]
	ldr	x0, [sp, 40]
	mov	w1, 1
	strb	w1, [x0, 289]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1993:
	.size	_ZN5ImGui13SetCursorPosXEf, .-_ZN5ImGui13SetCursorPosXEf
	.align	2
	.global	_ZN5ImGui13SetCursorPosYEf
	.type	_ZN5ImGui13SetCursorPosYEf, %function
_ZN5ImGui13SetCursorPosYEf:
.LFB1994:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 28]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 104]
	fsub	s1, s1, s0
	ldr	s0, [sp, 28]
	fadd	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 228]
	ldr	x0, [sp, 40]
	mov	w1, 1
	strb	w1, [x0, 289]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1994:
	.size	_ZN5ImGui13SetCursorPosYEf, .-_ZN5ImGui13SetCursorPosYEf
	.align	2
	.global	_ZN5ImGui17GetCursorStartPosEv
	.type	_ZN5ImGui17GetCursorStartPosEv, %function
_ZN5ImGui17GetCursorStartPosEv:
.LFB1995:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x2, x0, 240
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1995:
	.size	_ZN5ImGui17GetCursorStartPosEv, .-_ZN5ImGui17GetCursorStartPosEv
	.align	2
	.global	_ZN5ImGui6IndentEf
	.type	_ZN5ImGui6IndentEf, %function
_ZN5ImGui6IndentEf:
.LFB1996:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 292]
	ldr	s0, [sp, 28]
	fcmp	s0, #0.0
	bne	.L3601
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 14412]
	b	.L3602
.L3601:
	ldr	s0, [sp, 28]
.L3602:
	fadd	s0, s0, s1
	ldr	x0, [sp, 40]
	str	s0, [x0, 292]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 292]
	fadd	s1, s1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 296]
	fadd	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 224]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1996:
	.size	_ZN5ImGui6IndentEf, .-_ZN5ImGui6IndentEf
	.align	2
	.global	_ZN5ImGui8UnindentEf
	.type	_ZN5ImGui8UnindentEf, %function
_ZN5ImGui8UnindentEf:
.LFB1997:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 292]
	ldr	s0, [sp, 28]
	fcmp	s0, #0.0
	bne	.L3604
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 14412]
	b	.L3605
.L3604:
	ldr	s0, [sp, 28]
.L3605:
	fsub	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 292]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 292]
	fadd	s1, s1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 296]
	fadd	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 224]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1997:
	.size	_ZN5ImGui8UnindentEf, .-_ZN5ImGui8UnindentEf
	.align	2
	.global	_ZN5ImGui16SetNextItemWidthEf
	.type	_ZN5ImGui16SetNextItemWidthEf, %function
_ZN5ImGui16SetNextItemWidthEf:
.LFB1998:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	s0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 1808]
	orr	w1, w0, 1
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	w1, [x0, 1808]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	s0, [sp, 12]
	str	s0, [x0, 1812]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1998:
	.size	_ZN5ImGui16SetNextItemWidthEf, .-_ZN5ImGui16SetNextItemWidthEf
	.align	2
	.global	_ZN5ImGui13PushItemWidthEf
	.type	_ZN5ImGui13PushItemWidthEf, %function
_ZN5ImGui13PushItemWidthEf:
.LFB1999:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x2, x0, 424
	ldr	x0, [sp, 40]
	add	x0, x0, 412
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIfE9push_backERKf
	ldr	s0, [sp, 28]
	fcmp	s0, #0.0
	bne	.L3608
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 584]
	b	.L3609
.L3608:
	ldr	s0, [sp, 28]
.L3609:
	ldr	x0, [sp, 40]
	str	s0, [x0, 412]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 1808]
	and	w1, w0, -2
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 1808]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE1999:
	.size	_ZN5ImGui13PushItemWidthEf, .-_ZN5ImGui13PushItemWidthEf
	.align	2
	.global	_ZN5ImGui20PushMultiItemsWidthsEif
	.type	_ZN5ImGui20PushMultiItemsWidthsEif, %function
_ZN5ImGui20PushMultiItemsWidthsEif:
.LFB2000:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	w0, [sp, 28]
	str	s0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x1, [sp, 48]
	mov	x0, 14304
	add	x0, x1, x0
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 84]
	ldr	w0, [sp, 28]
	sub	w0, w0, #1
	scvtf	s0, w0
	fmul	s0, s1, s0
	ldr	s1, [sp, 24]
	fsub	s1, s1, s0
	ldr	s0, [sp, 28]
	scvtf	s0, s0
	fdiv	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	fmov	s1, s0
	fmov	s0, 1.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 36]
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 84]
	ldr	s0, [sp, 36]
	fadd	s1, s1, s0
	ldr	w0, [sp, 28]
	sub	w0, w0, #1
	scvtf	s0, w0
	fmul	s0, s1, s0
	ldr	s1, [sp, 24]
	fsub	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	fmov	s1, s0
	fmov	s0, 1.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 40]
	ldr	x0, [sp, 56]
	add	x2, x0, 424
	ldr	x0, [sp, 56]
	add	x0, x0, 412
	mov	x1, x0
	mov	x0, x2
	bl	_ZN8ImVectorIfE9push_backERKf
	ldr	x0, [sp, 56]
	add	x0, x0, 424
	add	x1, sp, 40
	bl	_ZN8ImVectorIfE9push_backERKf
	str	wzr, [sp, 44]
	b	.L3611
.L3612:
	ldr	x0, [sp, 56]
	add	x0, x0, 424
	add	x1, sp, 36
	bl	_ZN8ImVectorIfE9push_backERKf
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L3611:
	ldr	w0, [sp, 28]
	sub	w0, w0, #2
	ldr	w1, [sp, 44]
	cmp	w1, w0
	blt	.L3612
	ldr	w0, [sp, 28]
	cmp	w0, 1
	bne	.L3613
	ldr	s0, [sp, 40]
	b	.L3614
.L3613:
	ldr	s0, [sp, 36]
.L3614:
	ldr	x0, [sp, 56]
	str	s0, [x0, 412]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1808]
	and	w1, w0, -2
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1808]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3615
	bl	__stack_chk_fail
.L3615:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2000:
	.size	_ZN5ImGui20PushMultiItemsWidthsEif, .-_ZN5ImGui20PushMultiItemsWidthsEif
	.align	2
	.global	_ZN5ImGui12PopItemWidthEv
	.type	_ZN5ImGui12PopItemWidthEv, %function
_ZN5ImGui12PopItemWidthEv:
.LFB2001:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	bl	_ZN5ImGui16GetCurrentWindowEv
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 424
	bl	_ZN8ImVectorIfE4backEv
	ldr	s0, [x0]
	ldr	x0, [sp, 24]
	str	s0, [x0, 412]
	ldr	x0, [sp, 24]
	add	x0, x0, 424
	bl	_ZN8ImVectorIfE8pop_backEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2001:
	.size	_ZN5ImGui12PopItemWidthEv, .-_ZN5ImGui12PopItemWidthEv
	.align	2
	.global	_ZN5ImGui13CalcItemWidthEv
	.type	_ZN5ImGui13CalcItemWidthEv, %function
_ZN5ImGui13CalcItemWidthEv:
.LFB2002:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 1808]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L3618
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	s0, [x0, 1812]
	str	s0, [sp, 24]
	b	.L3619
.L3618:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 412]
	str	s0, [sp, 24]
.L3619:
	ldr	s0, [sp, 24]
	fcmpe	s0, #0.0
	bmi	.L3623
	b	.L3620
.L3623:
	bl	_ZN5ImGui22GetContentRegionMaxAbsEv
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	sbfx	x0, x0, 0, 32
	fmov	s0, w0
	str	s0, [sp, 28]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 224]
	ldr	s1, [sp, 28]
	fsub	s1, s1, s0
	ldr	s0, [sp, 24]
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, 1.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 24]
.L3620:
	ldr	s0, [sp, 24]
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 24]
	ldr	s0, [sp, 24]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2002:
	.size	_ZN5ImGui13CalcItemWidthEv, .-_ZN5ImGui13CalcItemWidthEv
	.align	2
	.global	_ZN5ImGui12CalcItemSizeE6ImVec2ff
	.type	_ZN5ImGui12CalcItemSizeE6ImVec2ff, %function
_ZN5ImGui12CalcItemSizeE6ImVec2ff:
.LFB2003:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	fmov	s4, s0
	fmov	s0, s1
	fmov	x0, d4
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	str	x0, [sp, 24]
	str	s2, [sp, 20]
	str	s3, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 48]
	str	wzr, [sp, 32]
	str	wzr, [sp, 36]
	ldr	s0, [sp, 24]
	fcmpe	s0, #0.0
	bmi	.L3625
	ldr	s0, [sp, 28]
	fcmpe	s0, #0.0
	bmi	.L3625
	b	.L3626
.L3625:
	bl	_ZN5ImGui22GetContentRegionMaxAbsEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 32]
	str	s0, [sp, 36]
.L3626:
	ldr	s0, [sp, 24]
	fcmp	s0, #0.0
	bne	.L3628
	ldr	s0, [sp, 20]
	str	s0, [sp, 24]
	b	.L3629
.L3628:
	ldr	s0, [sp, 24]
	fcmpe	s0, #0.0
	bmi	.L3636
	b	.L3629
.L3636:
	ldr	s1, [sp, 32]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 224]
	fsub	s1, s1, s0
	ldr	s0, [sp, 24]
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, 4.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 24]
.L3629:
	ldr	s0, [sp, 28]
	fcmp	s0, #0.0
	bne	.L3631
	ldr	s0, [sp, 16]
	str	s0, [sp, 28]
	b	.L3632
.L3631:
	ldr	s0, [sp, 28]
	fcmpe	s0, #0.0
	bmi	.L3637
	b	.L3632
.L3637:
	ldr	s1, [sp, 36]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 228]
	fsub	s1, s1, s0
	ldr	s0, [sp, 28]
	fadd	s0, s1, s0
	fmov	s1, s0
	fmov	s0, 4.0e+0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 28]
.L3632:
	ldr	x0, [sp, 24]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3635
	bl	__stack_chk_fail
.L3635:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2003:
	.size	_ZN5ImGui12CalcItemSizeE6ImVec2ff, .-_ZN5ImGui12CalcItemSizeE6ImVec2ff
	.align	2
	.global	_ZN5ImGui17GetTextLineHeightEv
	.type	_ZN5ImGui17GetTextLineHeightEv, %function
_ZN5ImGui17GetTextLineHeightEv:
.LFB2004:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 15360]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2004:
	.size	_ZN5ImGui17GetTextLineHeightEv, .-_ZN5ImGui17GetTextLineHeightEv
	.align	2
	.global	_ZN5ImGui28GetTextLineHeightWithSpacingEv
	.type	_ZN5ImGui28GetTextLineHeightWithSpacingEv, %function
_ZN5ImGui28GetTextLineHeightWithSpacingEv:
.LFB2005:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 15360]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 14384]
	fadd	s0, s1, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2005:
	.size	_ZN5ImGui28GetTextLineHeightWithSpacingEv, .-_ZN5ImGui28GetTextLineHeightWithSpacingEv
	.align	2
	.global	_ZN5ImGui14GetFrameHeightEv
	.type	_ZN5ImGui14GetFrameHeightEv, %function
_ZN5ImGui14GetFrameHeightEv:
.LFB2006:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 15360]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 14368]
	fadd	s0, s0, s0
	fadd	s0, s1, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2006:
	.size	_ZN5ImGui14GetFrameHeightEv, .-_ZN5ImGui14GetFrameHeightEv
	.align	2
	.global	_ZN5ImGui25GetFrameHeightWithSpacingEv
	.type	_ZN5ImGui25GetFrameHeightWithSpacingEv, %function
_ZN5ImGui25GetFrameHeightWithSpacingEv:
.LFB2007:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s1, [x0, 15360]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 14368]
	fadd	s0, s0, s0
	fadd	s1, s1, s0
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 14384]
	fadd	s0, s1, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2007:
	.size	_ZN5ImGui25GetFrameHeightWithSpacingEv, .-_ZN5ImGui25GetFrameHeightWithSpacingEv
	.align	2
	.global	_ZN5ImGui19GetContentRegionMaxEv
	.type	_ZN5ImGui19GetContentRegionMaxEv, %function
_ZN5ImGui19GetContentRegionMaxEv:
.LFB2008:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x2, x0, 560
	ldr	x0, [sp, 32]
	add	x0, x0, 24
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 16]
	str	s0, [sp, 20]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 392]
	cmp	x0, 0
	bne	.L3647
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 19152]
	cmp	x0, 0
	beq	.L3648
.L3647:
	ldr	x0, [sp, 32]
	ldr	s1, [x0, 512]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 24]
	fsub	s0, s1, s0
	str	s0, [sp, 16]
.L3648:
	ldr	x0, [sp, 16]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3650
	bl	__stack_chk_fail
.L3650:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2008:
	.size	_ZN5ImGui19GetContentRegionMaxEv, .-_ZN5ImGui19GetContentRegionMaxEv
	.align	2
	.global	_ZN5ImGui22GetContentRegionMaxAbsEv
	.type	_ZN5ImGui22GetContentRegionMaxAbsEv, %function
_ZN5ImGui22GetContentRegionMaxAbsEv:
.LFB2009:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 560]
	str	x0, [sp, 16]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 392]
	cmp	x0, 0
	bne	.L3652
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 19152]
	cmp	x0, 0
	beq	.L3653
.L3652:
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 512]
	str	s0, [sp, 16]
.L3653:
	ldr	x0, [sp, 16]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3655
	bl	__stack_chk_fail
.L3655:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2009:
	.size	_ZN5ImGui22GetContentRegionMaxAbsEv, .-_ZN5ImGui22GetContentRegionMaxAbsEv
	.align	2
	.global	_ZN5ImGui21GetContentRegionAvailEv
	.type	_ZN5ImGui21GetContentRegionAvailEv, %function
_ZN5ImGui21GetContentRegionAvailEv:
.LFB2010:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 32]
	bl	_ZN5ImGui22GetContentRegionMaxAbsEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 24]
	str	s0, [sp, 28]
	ldr	x0, [sp, 32]
	add	x1, x0, 224
	add	x0, sp, 24
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3658
	bl	__stack_chk_fail
.L3658:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2010:
	.size	_ZN5ImGui21GetContentRegionAvailEv, .-_ZN5ImGui21GetContentRegionAvailEv
	.align	2
	.global	_ZN5ImGui25GetWindowContentRegionMinEv
	.type	_ZN5ImGui25GetWindowContentRegionMinEv, %function
_ZN5ImGui25GetWindowContentRegionMinEv:
.LFB2011:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x2, x0, 552
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2011:
	.size	_ZN5ImGui25GetWindowContentRegionMinEv, .-_ZN5ImGui25GetWindowContentRegionMinEv
	.align	2
	.global	_ZN5ImGui25GetWindowContentRegionMaxEv
	.type	_ZN5ImGui25GetWindowContentRegionMaxEv, %function
_ZN5ImGui25GetWindowContentRegionMaxEv:
.LFB2012:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x2, x0, 560
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2012:
	.size	_ZN5ImGui25GetWindowContentRegionMaxEv, .-_ZN5ImGui25GetWindowContentRegionMaxEv
	.align	2
	.global	_ZN5ImGui10BeginGroupEv
	.type	_ZN5ImGui10BeginGroupEv, %function
_ZN5ImGui10BeginGroupEv:
.LFB2013:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x1, [sp, 32]
	mov	x0, 18464
	add	x2, x1, x0
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2080]
	add	w0, w0, 1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI14ImGuiGroupDataE6resizeEi
	ldr	x1, [sp, 32]
	mov	x0, 18464
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiGroupDataE4backEv
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 48]
	str	w1, [x0]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 40]
	ldr	x1, [x1, 224]
	str	x1, [x0, 4]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 40]
	ldr	x1, [x1, 248]
	str	x1, [x0, 12]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 40]
	ldr	s0, [x1, 292]
	str	s0, [x0, 20]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 40]
	ldr	s0, [x1, 300]
	str	s0, [x0, 24]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 40]
	ldr	x1, [x1, 264]
	str	x1, [x0, 28]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 280]
	ldr	x0, [sp, 48]
	str	s0, [x0, 36]
	ldr	x0, [sp, 32]
	ldr	w1, [x0, 16112]
	ldr	x0, [sp, 48]
	str	w1, [x0, 40]
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 48]
	strb	w1, [x0, 45]
	ldr	x0, [sp, 32]
	add	x0, x0, 12288
	ldrb	w1, [x0, 3868]
	ldr	x0, [sp, 48]
	strb	w1, [x0, 44]
	ldr	x0, [sp, 48]
	mov	w1, 1
	strb	w1, [x0, 46]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 224]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 24]
	fsub	s1, s1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 296]
	fsub	s0, s1, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 300]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 40]
	ldr	s0, [x1, 300]
	str	s0, [x0, 292]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 40]
	ldr	x1, [x1, 224]
	str	x1, [x0, 248]
	add	x0, sp, 24
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 24]
	str	x1, [x0, 264]
	ldr	x0, [sp, 32]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L3666
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [x0, 7192]
.L3666:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3665
	bl	__stack_chk_fail
.L3665:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2013:
	.size	_ZN5ImGui10BeginGroupEv, .-_ZN5ImGui10BeginGroupEv
	.section	.rodata
	.align	3
.LC549:
	.string	"void ImGui::EndGroup()"
	.align	3
.LC550:
	.string	"g.GroupStack.Size > 0"
	.align	3
.LC551:
	.string	"group_data.WindowID == window->ID"
	.text
	.align	2
	.global	_ZN5ImGui8EndGroupEv
	.type	_ZN5ImGui8EndGroupEv, %function
_ZN5ImGui8EndGroupEv:
.LFB2014:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2080]
	cmp	w0, 0
	bgt	.L3668
	adrp	x0, .LC549
	add	x3, x0, :lo12:.LC549
	mov	w2, 9374
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC550
	add	x0, x0, :lo12:.LC550
	bl	__assert_fail
.L3668:
	ldr	x1, [sp, 48]
	mov	x0, 18464
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiGroupDataE4backEv
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	w1, [x0]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 8]
	cmp	w1, w0
	beq	.L3669
	adrp	x0, .LC549
	add	x3, x0, :lo12:.LC549
	mov	w2, 9377
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC551
	add	x0, x0, :lo12:.LC551
	bl	__assert_fail
.L3669:
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 289]
	cmp	w0, 0
	beq	.L3670
	bl	_ZN5ImGui51ErrorCheckUsingSetCursorPosToExtendParentBoundariesEv
.L3670:
	ldr	x0, [sp, 64]
	add	x19, x0, 4
	ldr	x0, [sp, 56]
	add	x2, x0, 248
	ldr	x0, [sp, 64]
	add	x0, x0, 4
	mov	x1, x0
	mov	x0, x2
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 40]
	str	s0, [sp, 44]
	add	x1, sp, 40
	add	x0, sp, 72
	mov	x2, x1
	mov	x1, x19
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 64]
	ldr	x1, [x1, 4]
	str	x1, [x0, 224]
	ldr	x0, [sp, 64]
	add	x2, x0, 12
	ldr	x0, [sp, 56]
	add	x0, x0, 248
	ldr	x19, [sp, 56]
	mov	x1, x0
	mov	x0, x2
	bl	_ZL5ImMaxRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 248]
	str	s0, [x19, 252]
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 64]
	ldr	s0, [x1, 20]
	str	s0, [x0, 292]
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 64]
	ldr	s0, [x1, 24]
	str	s0, [x0, 300]
	ldr	x0, [sp, 56]
	ldr	x1, [sp, 64]
	ldr	x1, [x1, 28]
	str	x1, [x0, 264]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 36]
	ldr	x0, [sp, 56]
	str	s0, [x0, 280]
	ldr	x0, [sp, 48]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L3671
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [x0, 7192]
.L3671:
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 46]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3672
	ldr	x1, [sp, 48]
	mov	x0, 18464
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiGroupDataE8pop_backEv
	b	.L3667
.L3672:
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 284]
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 36]
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 56]
	str	s0, [x0, 280]
	add	x0, sp, 72
	bl	_ZNK6ImRect7GetSizeEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 40]
	str	s0, [sp, 44]
	add	x0, sp, 40
	fmov	s0, -1.0e+0
	bl	_ZN5ImGui8ItemSizeERK6ImVec2f
	add	x0, sp, 72
	mov	w3, 1
	mov	x2, 0
	mov	w1, 0
	bl	_ZN5ImGui7ItemAddERK6ImRectjPS1_i
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 40]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w1, w0
	beq	.L3674
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 16112]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w1, w0
	bne	.L3674
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L3674
	mov	w0, 1
	b	.L3675
.L3674:
	mov	w0, 0
.L3675:
	strb	w0, [sp, 37]
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 44]
	cmp	w0, 0
	bne	.L3676
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3868]
	cmp	w0, 1
	bne	.L3676
	mov	w0, 1
	b	.L3677
.L3676:
	mov	w0, 0
.L3677:
	strb	w0, [sp, 38]
	ldrb	w0, [sp, 37]
	cmp	w0, 0
	beq	.L3678
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1828]
	b	.L3679
.L3678:
	ldrb	w0, [sp, 38]
	cmp	w0, 0
	beq	.L3679
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 16152]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1828]
.L3679:
	ldr	x1, [sp, 48]
	mov	x0, 18432
	add	x2, x1, x0
	ldp	x0, x1, [sp, 72]
	stp	x0, x1, [x2, -208]
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 45]
	cmp	w0, 0
	bne	.L3680
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16088]
	cmp	w0, 0
	beq	.L3680
	mov	w0, 1
	b	.L3681
.L3680:
	mov	w0, 0
.L3681:
	strb	w0, [sp, 39]
	ldrb	w0, [sp, 39]
	cmp	w0, 0
	beq	.L3682
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	orr	w1, w0, 128
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
.L3682:
	ldrb	w0, [sp, 37]
	cmp	w0, 0
	beq	.L3683
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3837]
	cmp	w0, 0
	beq	.L3683
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	orr	w1, w0, 4
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
.L3683:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	orr	w1, w0, 32
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
	ldrb	w0, [sp, 38]
	cmp	w0, 0
	beq	.L3684
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16152]
	cmp	w1, w0
	beq	.L3684
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	orr	w1, w0, 64
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
.L3684:
	ldr	x1, [sp, 48]
	mov	x0, 18464
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiGroupDataE8pop_backEv
.L3667:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3685
	bl	__stack_chk_fail
.L3685:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2014:
	.size	_ZN5ImGui8EndGroupEv, .-_ZN5ImGui8EndGroupEv
	.align	2
	.type	_ZL18CalcScrollEdgeSnapfffff, %function
_ZL18CalcScrollEdgeSnapfffff:
.LFB2015:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 44]
	str	s1, [sp, 40]
	str	s2, [sp, 36]
	str	s3, [sp, 32]
	str	s4, [sp, 28]
	ldr	s1, [sp, 40]
	ldr	s0, [sp, 32]
	fadd	s0, s1, s0
	ldr	s1, [sp, 44]
	fcmpe	s1, s0
	bls	.L3692
	b	.L3694
.L3692:
	ldr	s2, [sp, 28]
	ldr	s1, [sp, 44]
	ldr	s0, [sp, 40]
	bl	_Z6ImLerpIfET_S0_S0_f
	b	.L3689
.L3694:
	ldr	s1, [sp, 36]
	ldr	s0, [sp, 32]
	fsub	s0, s1, s0
	ldr	s1, [sp, 44]
	fcmpe	s1, s0
	bge	.L3693
	b	.L3695
.L3693:
	ldr	s2, [sp, 28]
	ldr	s1, [sp, 36]
	ldr	s0, [sp, 44]
	bl	_Z6ImLerpIfET_S0_S0_f
	b	.L3689
.L3695:
	ldr	s0, [sp, 44]
.L3689:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2015:
	.size	_ZL18CalcScrollEdgeSnapfffff, .-_ZL18CalcScrollEdgeSnapfffff
	.align	2
	.type	_ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindow, %function
_ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindow:
.LFB2016:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -96
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 100]
	str	x0, [sp, 96]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 116]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmpe	s0, s1
	bmi	.L3708
	b	.L3697
.L3708:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 140]
	str	s0, [sp, 64]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 124]
	str	s0, [sp, 68]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 116]
	str	s0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 132]
	fcmpe	s0, #0.0
	bgt	.L3709
	b	.L3699
.L3709:
	str	wzr, [sp, 72]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 108]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 40]
	fadd	s1, s1, s0
	ldr	s0, [sp, 64]
	fsub	s0, s1, s0
	str	s0, [sp, 76]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 132]
	ldr	s4, [sp, 68]
	fmov	s3, s0
	ldr	s2, [sp, 76]
	ldr	s1, [sp, 72]
	ldr	s0, [sp, 56]
	bl	_ZL18CalcScrollEdgeSnapfffff
	str	s0, [sp, 56]
.L3699:
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 40]
	ldr	s0, [sp, 64]
	fsub	s1, s1, s0
	ldr	s0, [sp, 68]
	fmul	s0, s1, s0
	ldr	s1, [sp, 56]
	fsub	s0, s1, s0
	str	s0, [sp, 96]
.L3697:
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 120]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmpe	s0, s1
	bmi	.L3710
	b	.L3701
.L3710:
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	fmov	s8, s0
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow13MenuBarHeightEv
	fadd	s1, s8, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 144]
	fadd	s0, s1, s0
	str	s0, [sp, 80]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 128]
	str	s0, [sp, 84]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 120]
	str	s0, [sp, 60]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 136]
	fcmpe	s0, #0.0
	bgt	.L3711
	b	.L3703
.L3711:
	str	wzr, [sp, 88]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 112]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 44]
	fadd	s1, s1, s0
	ldr	s0, [sp, 80]
	fsub	s0, s1, s0
	str	s0, [sp, 92]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 136]
	ldr	s4, [sp, 84]
	fmov	s3, s0
	ldr	s2, [sp, 92]
	ldr	s1, [sp, 88]
	ldr	s0, [sp, 60]
	bl	_ZL18CalcScrollEdgeSnapfffff
	str	s0, [sp, 60]
.L3703:
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 44]
	ldr	s0, [sp, 80]
	fsub	s1, s1, s0
	ldr	s0, [sp, 84]
	fmul	s0, s1, s0
	ldr	s1, [sp, 60]
	fsub	s0, s1, s0
	str	s0, [sp, 100]
.L3701:
	ldr	s0, [sp, 96]
	movi	v1.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 96]
	ldr	s0, [sp, 100]
	movi	v1.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 100]
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 153]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3705
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 155]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3705
	ldr	s0, [sp, 96]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 108]
	bl	_Z5ImMinIfET_S0_S0_
	str	s0, [sp, 96]
	ldr	s0, [sp, 100]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 112]
	bl	_Z5ImMinIfET_S0_S0_
	str	s0, [sp, 100]
.L3705:
	ldr	x0, [sp, 96]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3707
	bl	__stack_chk_fail
.L3707:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2016:
	.size	_ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindow, .-_ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindow
	.align	2
	.global	_ZN5ImGui12ScrollToItemEi
	.type	_ZN5ImGui12ScrollToItemEi, %function
_ZN5ImGui12ScrollToItemEi:
.LFB2017:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x1, [sp, 32]
	mov	x0, 18240
	add	x0, x1, x0
	ldr	w2, [sp, 28]
	mov	x1, x0
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2017:
	.size	_ZN5ImGui12ScrollToItemEi, .-_ZN5ImGui12ScrollToItemEi
	.align	2
	.global	_ZN5ImGui12ScrollToRectEP11ImGuiWindowRK6ImRecti
	.type	_ZN5ImGui12ScrollToRectEP11ImGuiWindowRK6ImRecti, %function
_ZN5ImGui12ScrollToRectEP11ImGuiWindowRK6ImRecti:
.LFB2018:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	ldr	w2, [sp, 28]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2018:
	.size	_ZN5ImGui12ScrollToRectEP11ImGuiWindowRK6ImRecti, .-_ZN5ImGui12ScrollToRectEP11ImGuiWindowRK6ImRecti
	.section	.rodata
	.align	3
.LC552:
	.string	"ImVec2 ImGui::ScrollToRectEx(ImGuiWindow*, const ImRect&, ImGuiScrollFlags)"
	.align	3
.LC553:
	.string	"(flags & ImGuiScrollFlags_MaskX_) == 0 || ImIsPowerOfTwo(flags & ImGuiScrollFlags_MaskX_)"
	.align	3
.LC554:
	.string	"(flags & ImGuiScrollFlags_MaskY_) == 0 || ImIsPowerOfTwo(flags & ImGuiScrollFlags_MaskY_)"
	.text
	.align	2
	.global	_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti
	.type	_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti, %function
_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti:
.LFB2019:
	.cfi_startproc
	stp	x29, x30, [sp, -176]!
	.cfi_def_cfa_offset 176
	.cfi_offset 29, -176
	.cfi_offset 30, -168
	mov	x29, sp
	str	x19, [sp, 16]
	str	d8, [sp, 24]
	.cfi_offset 19, -160
	.cfi_offset 72, -152
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	w2, [sp, 44]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 168]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 128]
	ldr	x0, [sp, 56]
	add	x19, x0, 472
	add	x0, sp, 104
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 104
	mov	x1, x0
	mov	x0, x19
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	ldr	x0, [sp, 56]
	add	x19, x0, 480
	add	x0, sp, 120
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 120
	mov	x1, x0
	mov	x0, x19
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 152]
	str	s0, [sp, 156]
	add	x2, sp, 152
	add	x1, sp, 112
	add	x0, sp, 136
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	w1, [sp, 44]
	mov	w0, 21
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L3715
	ldr	w1, [sp, 44]
	mov	w0, 21
	and	w0, w1, w0
	bl	_ZL14ImIsPowerOfTwoi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3715
	adrp	x0, .LC552
	add	x3, x0, :lo12:.LC552
	mov	w2, 9510
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC553
	add	x0, x0, :lo12:.LC553
	bl	__assert_fail
.L3715:
	ldr	w1, [sp, 44]
	mov	w0, 42
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L3716
	ldr	w1, [sp, 44]
	mov	w0, 42
	and	w0, w1, w0
	bl	_ZL14ImIsPowerOfTwoi
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3716
	adrp	x0, .LC552
	add	x3, x0, :lo12:.LC552
	mov	w2, 9511
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC554
	add	x0, x0, :lo12:.LC554
	bl	__assert_fail
.L3716:
	ldr	w0, [sp, 44]
	str	w0, [sp, 76]
	ldr	w1, [sp, 44]
	mov	w0, 21
	and	w0, w1, w0
	cmp	w0, 0
	bne	.L3717
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 148]
	cmp	w0, 0
	beq	.L3717
	ldr	w0, [sp, 44]
	orr	w0, w0, 1
	str	w0, [sp, 44]
.L3717:
	ldr	w1, [sp, 44]
	mov	w0, 42
	and	w0, w1, w0
	cmp	w0, 0
	bne	.L3718
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 156]
	cmp	w0, 0
	beq	.L3719
	mov	w0, 32
	b	.L3720
.L3719:
	mov	w0, 2
.L3720:
	ldr	w1, [sp, 44]
	orr	w0, w1, w0
	str	w0, [sp, 44]
.L3718:
	ldr	x0, [sp, 48]
	ldr	s1, [x0]
	ldr	s0, [sp, 136]
	fcmpe	s1, s0
	bge	.L3754
	b	.L3721
.L3754:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 144]
	fcmpe	s1, s0
	bls	.L3755
	b	.L3721
.L3755:
	mov	w0, 1
	b	.L3724
.L3721:
	mov	w0, 0
.L3724:
	strb	w0, [sp, 72]
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 4]
	ldr	s0, [sp, 140]
	fcmpe	s1, s0
	bge	.L3756
	b	.L3725
.L3756:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 12]
	ldr	s0, [sp, 148]
	fcmpe	s1, s0
	bls	.L3757
	b	.L3725
.L3757:
	mov	w0, 1
	b	.L3728
.L3725:
	mov	w0, 0
.L3728:
	strb	w0, [sp, 73]
	ldr	x0, [sp, 48]
	bl	_ZNK6ImRect8GetWidthEv
	fmov	s1, s0
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 14380]
	fadd	s0, s0, s0
	fadd	s8, s1, s0
	add	x0, sp, 136
	bl	_ZNK6ImRect8GetWidthEv
	fcmpe	s8, s0
	cset	w0, ls
	strb	w0, [sp, 74]
	ldr	x0, [sp, 48]
	bl	_ZNK6ImRect9GetHeightEv
	fmov	s1, s0
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 14384]
	fadd	s0, s0, s0
	fadd	s8, s1, s0
	add	x0, sp, 136
	bl	_ZNK6ImRect9GetHeightEv
	fcmpe	s8, s0
	cset	w0, ls
	strb	w0, [sp, 75]
	ldr	w0, [sp, 44]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L3729
	ldrb	w0, [sp, 72]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3729
	ldr	x0, [sp, 48]
	ldr	s1, [x0]
	ldr	s0, [sp, 136]
	fcmpe	s1, s0
	bmi	.L3730
	ldrb	w0, [sp, 74]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3731
.L3730:
	ldr	x0, [sp, 48]
	ldr	s1, [x0]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 14380]
	fsub	s1, s1, s0
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 24]
	fsub	s0, s1, s0
	movi	v1.2s, #0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff
	b	.L3734
.L3731:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 8]
	ldr	s0, [sp, 144]
	fcmpe	s1, s0
	bge	.L3758
	b	.L3734
.L3758:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 14380]
	fadd	s1, s1, s0
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 24]
	fsub	s0, s1, s0
	fmov	s1, 1.0e+0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff
	b	.L3734
.L3729:
	ldr	w0, [sp, 44]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L3735
	ldrb	w0, [sp, 72]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3736
.L3735:
	ldr	w0, [sp, 44]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L3734
.L3736:
	ldrb	w0, [sp, 74]
	cmp	w0, 0
	beq	.L3737
	ldr	x0, [sp, 48]
	ldr	s1, [x0]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 8]
	fadd	s8, s1, s0
	ldr	x0, [sp, 56]
	add	x0, x0, 472
	bl	_ZNK6ImRect8GetWidthEv
	fsub	s1, s8, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	b	.L3738
.L3737:
	ldr	x0, [sp, 48]
	ldr	s0, [x0]
.L3738:
	str	s0, [sp, 80]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 24]
	ldr	s1, [sp, 80]
	fsub	s0, s1, s0
	movi	v1.2s, #0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff
.L3734:
	ldr	w0, [sp, 44]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L3739
	ldrb	w0, [sp, 73]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3739
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 4]
	ldr	s0, [sp, 140]
	fcmpe	s1, s0
	bmi	.L3740
	ldrb	w0, [sp, 75]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3741
.L3740:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 14384]
	fsub	s1, s1, s0
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 28]
	fsub	s0, s1, s0
	movi	v1.2s, #0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff
	b	.L3744
.L3741:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 12]
	ldr	s0, [sp, 148]
	fcmpe	s1, s0
	bge	.L3759
	b	.L3744
.L3759:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 12]
	ldr	x0, [sp, 128]
	ldr	s0, [x0, 14384]
	fadd	s1, s1, s0
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 28]
	fsub	s0, s1, s0
	fmov	s1, 1.0e+0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff
	b	.L3744
.L3739:
	ldr	w0, [sp, 44]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L3745
	ldrb	w0, [sp, 73]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3746
.L3745:
	ldr	w0, [sp, 44]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3744
.L3746:
	ldrb	w0, [sp, 75]
	cmp	w0, 0
	beq	.L3747
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 12]
	fadd	s8, s1, s0
	ldr	x0, [sp, 56]
	add	x0, x0, 472
	bl	_ZNK6ImRect9GetHeightEv
	fsub	s1, s8, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	bl	_ZL7ImFloorf
	b	.L3748
.L3747:
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 4]
.L3748:
	str	s0, [sp, 84]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 28]
	ldr	s1, [sp, 84]
	fsub	s0, s1, s0
	movi	v1.2s, #0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff
.L3744:
	ldr	x0, [sp, 56]
	bl	_ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindow
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	ldr	x0, [sp, 56]
	add	x1, x0, 100
	add	x0, sp, 88
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	ldr	w0, [sp, 44]
	and	w0, w0, 64
	cmp	w0, 0
	bne	.L3749
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L3749
	ldr	w1, [sp, 76]
	mov	w0, 20
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L3750
	ldr	w1, [sp, 76]
	mov	w0, -22
	and	w0, w1, w0
	orr	w0, w0, 1
	str	w0, [sp, 76]
.L3750:
	ldr	w1, [sp, 76]
	mov	w0, 40
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L3751
	ldr	w1, [sp, 76]
	mov	w0, -43
	and	w0, w1, w0
	orr	w0, w0, 2
	str	w0, [sp, 76]
.L3751:
	ldr	x0, [sp, 56]
	ldr	x19, [x0, 840]
	ldr	x0, [sp, 48]
	add	x1, sp, 96
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 104]
	str	s0, [sp, 108]
	ldr	x0, [sp, 48]
	add	x0, x0, 8
	add	x1, sp, 96
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	add	x2, sp, 112
	add	x1, sp, 104
	add	x0, sp, 152
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x0, sp, 152
	ldr	w2, [sp, 76]
	mov	x1, x0
	mov	x0, x19
	bl	_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 120]
	str	s0, [sp, 124]
	add	x1, sp, 120
	add	x0, sp, 96
	bl	_ZpLR6ImVec2RKS_
.L3749:
	ldr	x0, [sp, 96]
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 168]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3753
	bl	__stack_chk_fail
.L3753:
	ldr	d8, [sp, 24]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 176
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2019:
	.size	_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti, .-_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti
	.align	2
	.global	_ZN5ImGui10GetScrollXEv
	.type	_ZN5ImGui10GetScrollXEv, %function
_ZN5ImGui10GetScrollXEv:
.LFB2020:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 100]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2020:
	.size	_ZN5ImGui10GetScrollXEv, .-_ZN5ImGui10GetScrollXEv
	.align	2
	.global	_ZN5ImGui10GetScrollYEv
	.type	_ZN5ImGui10GetScrollYEv, %function
_ZN5ImGui10GetScrollYEv:
.LFB2021:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 104]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2021:
	.size	_ZN5ImGui10GetScrollYEv, .-_ZN5ImGui10GetScrollYEv
	.align	2
	.global	_ZN5ImGui13GetScrollMaxXEv
	.type	_ZN5ImGui13GetScrollMaxXEv, %function
_ZN5ImGui13GetScrollMaxXEv:
.LFB2022:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 108]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2022:
	.size	_ZN5ImGui13GetScrollMaxXEv, .-_ZN5ImGui13GetScrollMaxXEv
	.align	2
	.global	_ZN5ImGui13GetScrollMaxYEv
	.type	_ZN5ImGui13GetScrollMaxYEv, %function
_ZN5ImGui13GetScrollMaxYEv:
.LFB2023:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 112]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2023:
	.size	_ZN5ImGui13GetScrollMaxYEv, .-_ZN5ImGui13GetScrollMaxYEv
	.align	2
	.global	_ZN5ImGui10SetScrollXEP11ImGuiWindowf
	.type	_ZN5ImGui10SetScrollXEP11ImGuiWindowf, %function
_ZN5ImGui10SetScrollXEP11ImGuiWindowf:
.LFB2024:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	s0, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [sp, 4]
	str	s0, [x0, 116]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 124]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 132]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2024:
	.size	_ZN5ImGui10SetScrollXEP11ImGuiWindowf, .-_ZN5ImGui10SetScrollXEP11ImGuiWindowf
	.align	2
	.global	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
	.type	_ZN5ImGui10SetScrollYEP11ImGuiWindowf, %function
_ZN5ImGui10SetScrollYEP11ImGuiWindowf:
.LFB2025:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	s0, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	s0, [sp, 4]
	str	s0, [x0, 120]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 128]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 136]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2025:
	.size	_ZN5ImGui10SetScrollYEP11ImGuiWindowf, .-_ZN5ImGui10SetScrollYEP11ImGuiWindowf
	.align	2
	.global	_ZN5ImGui10SetScrollXEf
	.type	_ZN5ImGui10SetScrollXEf, %function
_ZN5ImGui10SetScrollXEf:
.LFB2026:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	ldr	s0, [sp, 28]
	bl	_ZN5ImGui10SetScrollXEP11ImGuiWindowf
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2026:
	.size	_ZN5ImGui10SetScrollXEf, .-_ZN5ImGui10SetScrollXEf
	.align	2
	.global	_ZN5ImGui10SetScrollYEf
	.type	_ZN5ImGui10SetScrollYEf, %function
_ZN5ImGui10SetScrollYEf:
.LFB2027:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	ldr	s0, [sp, 28]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2027:
	.size	_ZN5ImGui10SetScrollYEf, .-_ZN5ImGui10SetScrollYEf
	.section	.rodata
	.align	3
.LC555:
	.string	"void ImGui::SetScrollFromPosX(ImGuiWindow*, float, float)"
	.align	3
.LC556:
	.string	"center_x_ratio >= 0.0f && center_x_ratio <= 1.0f"
	.text
	.align	2
	.global	_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff
	.type	_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff, %function
_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff:
.LFB2028:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	s0, [sp, 20]
	str	s1, [sp, 16]
	ldr	s0, [sp, 16]
	fcmpe	s0, #0.0
	bge	.L3777
	b	.L3773
.L3777:
	ldr	s1, [sp, 16]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	bls	.L3776
.L3773:
	adrp	x0, .LC555
	add	x3, x0, :lo12:.LC555
	mov	w2, 9630
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC556
	add	x0, x0, :lo12:.LC556
	bl	__assert_fail
.L3776:
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 100]
	ldr	s0, [sp, 20]
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	ldr	x0, [sp, 24]
	str	s0, [x0, 116]
	ldr	x0, [sp, 24]
	ldr	s0, [sp, 16]
	str	s0, [x0, 124]
	ldr	x0, [sp, 24]
	str	wzr, [x0, 132]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2028:
	.size	_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff, .-_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff
	.section	.rodata
	.align	3
.LC557:
	.string	"void ImGui::SetScrollFromPosY(ImGuiWindow*, float, float)"
	.align	3
.LC558:
	.string	"center_y_ratio >= 0.0f && center_y_ratio <= 1.0f"
	.text
	.align	2
	.global	_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff
	.type	_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff, %function
_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff:
.LFB2029:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -48
	str	x0, [sp, 40]
	str	s0, [sp, 36]
	str	s1, [sp, 32]
	ldr	s0, [sp, 32]
	fcmpe	s0, #0.0
	bge	.L3783
	b	.L3779
.L3783:
	ldr	s1, [sp, 32]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	bls	.L3782
.L3779:
	adrp	x0, .LC557
	add	x3, x0, :lo12:.LC557
	mov	w2, 9638
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC558
	add	x0, x0, :lo12:.LC558
	bl	__assert_fail
.L3782:
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow14TitleBarHeightEv
	fmov	s8, s0
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiWindow13MenuBarHeightEv
	fadd	s0, s8, s0
	str	s0, [sp, 60]
	ldr	s1, [sp, 36]
	ldr	s0, [sp, 60]
	fsub	s0, s1, s0
	str	s0, [sp, 36]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 104]
	ldr	s0, [sp, 36]
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	ldr	x0, [sp, 40]
	str	s0, [x0, 120]
	ldr	x0, [sp, 40]
	ldr	s0, [sp, 32]
	str	s0, [x0, 128]
	ldr	x0, [sp, 40]
	str	wzr, [x0, 136]
	nop
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2029:
	.size	_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff, .-_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff
	.align	2
	.global	_ZN5ImGui17SetScrollFromPosXEff
	.type	_ZN5ImGui17SetScrollFromPosXEff, %function
_ZN5ImGui17SetScrollFromPosXEff:
.LFB2030:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	str	s1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	ldr	s1, [sp, 24]
	ldr	s0, [sp, 28]
	bl	_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2030:
	.size	_ZN5ImGui17SetScrollFromPosXEff, .-_ZN5ImGui17SetScrollFromPosXEff
	.align	2
	.global	_ZN5ImGui17SetScrollFromPosYEff
	.type	_ZN5ImGui17SetScrollFromPosYEff, %function
_ZN5ImGui17SetScrollFromPosYEff:
.LFB2031:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	s0, [sp, 28]
	str	s1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	ldr	s1, [sp, 24]
	ldr	s0, [sp, 28]
	bl	_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2031:
	.size	_ZN5ImGui17SetScrollFromPosYEff, .-_ZN5ImGui17SetScrollFromPosYEff
	.align	2
	.global	_ZN5ImGui14SetScrollHereXEf
	.type	_ZN5ImGui14SetScrollHereXEf, %function
_ZN5ImGui14SetScrollHereXEf:
.LFB2032:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	s0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 72]
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 14380]
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 40]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	s1, [x0, 1840]
	ldr	s0, [sp, 40]
	fsub	s3, s1, s0
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	s1, [x0, 1848]
	ldr	s0, [sp, 40]
	fadd	s0, s1, s0
	ldr	s2, [sp, 28]
	fmov	s1, s0
	fmov	s0, s3
	bl	_Z6ImLerpIfET_S0_S0_f
	str	s0, [sp, 44]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 24]
	ldr	s1, [sp, 44]
	fsub	s0, s1, s0
	ldr	s1, [sp, 28]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui17SetScrollFromPosXEP11ImGuiWindowff
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 72]
	ldr	s0, [sp, 40]
	fsub	s0, s1, s0
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 56]
	str	s0, [x0, 132]
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2032:
	.size	_ZN5ImGui14SetScrollHereXEf, .-_ZN5ImGui14SetScrollHereXEf
	.align	2
	.global	_ZN5ImGui14SetScrollHereYEf
	.type	_ZN5ImGui14SetScrollHereYEf, %function
_ZN5ImGui14SetScrollHereYEf:
.LFB2033:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	s0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 76]
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 14384]
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 40]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 236]
	ldr	s0, [sp, 40]
	fsub	s3, s1, s0
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 236]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 276]
	fadd	s1, s1, s0
	ldr	s0, [sp, 40]
	fadd	s0, s1, s0
	ldr	s2, [sp, 28]
	fmov	s1, s0
	fmov	s0, s3
	bl	_Z6ImLerpIfET_S0_S0_f
	str	s0, [sp, 44]
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 28]
	ldr	s1, [sp, 44]
	fsub	s0, s1, s0
	ldr	s1, [sp, 28]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui17SetScrollFromPosYEP11ImGuiWindowff
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 76]
	ldr	s0, [sp, 40]
	fsub	s0, s1, s0
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 56]
	str	s0, [x0, 136]
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2033:
	.size	_ZN5ImGui14SetScrollHereYEf, .-_ZN5ImGui14SetScrollHereYEf
	.align	2
	.global	_ZN5ImGui12BeginTooltipEv
	.type	_ZN5ImGui12BeginTooltipEv, %function
_ZN5ImGui12BeginTooltipEv:
.LFB2034:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	mov	w1, 0
	mov	w0, 0
	bl	_ZN5ImGui14BeginTooltipExEii
	nop
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2034:
	.size	_ZN5ImGui12BeginTooltipEv, .-_ZN5ImGui12BeginTooltipEv
	.section	.rodata
	.align	3
.LC559:
	.string	"##Tooltip_%02d"
	.text
	.align	2
	.global	_ZN5ImGui14BeginTooltipExEii
	.type	_ZN5ImGui14BeginTooltipExEii, %function
_ZN5ImGui14BeginTooltipExEii:
.LFB2035:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -96
	str	w0, [sp, 44]
	str	w1, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2581]
	cmp	w0, 0
	bne	.L3790
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2582]
	cmp	w0, 0
	beq	.L3791
.L3790:
	ldr	x0, [sp, 72]
	add	x19, x0, 3580
	ldr	x0, [sp, 72]
	ldr	s1, [x0, 14488]
	fmov	s0, 1.6e+1
	fmul	s2, s1, s0
	ldr	x0, [sp, 72]
	ldr	s1, [x0, 14488]
	fmov	s0, 8.0e+0
	fmul	s0, s1, s0
	add	x0, sp, 64
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 64
	mov	x1, x0
	mov	x0, x19
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	add	x0, sp, 64
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 64
	add	x0, sp, 56
	mov	x2, x1
	mov	w1, 0
	bl	_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 14580]
	mov	w0, 39322
	movk	w0, 0x3f19, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	bl	_ZN5ImGui20SetNextWindowBgAlphaEf
	ldr	w0, [sp, 44]
	orr	w0, w0, 1
	str	w0, [sp, 44]
.L3791:
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldrsh	w0, [x0, 6922]
	add	x4, sp, 88
	mov	w3, w0
	adrp	x0, .LC559
	add	x2, x0, :lo12:.LC559
	mov	x1, 16
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
	ldr	w0, [sp, 44]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L3792
	add	x0, sp, 88
	bl	_ZN5ImGui16FindWindowByNameEPKc
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	cmp	x0, 0
	beq	.L3792
	ldr	x0, [sp, 80]
	ldrb	w0, [x0, 150]
	cmp	w0, 0
	beq	.L3792
	ldr	x0, [sp, 80]
	mov	w1, 1
	strb	w1, [x0, 157]
	ldr	x0, [sp, 80]
	mov	w1, 1
	strb	w1, [x0, 184]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldrsh	w0, [x0, 6922]
	and	w0, w0, 65535
	add	w0, w0, 1
	and	w0, w0, 65535
	sxth	w1, w0
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	strh	w1, [x0, 6922]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldrsh	w0, [x0, 6922]
	add	x4, sp, 88
	mov	w3, w0
	adrp	x0, .LC559
	add	x2, x0, :lo12:.LC559
	mov	x1, 16
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
.L3792:
	mov	w0, 839
	movk	w0, 0x20c, lsl 16
	str	w0, [sp, 52]
	ldr	w1, [sp, 52]
	ldr	w0, [sp, 40]
	orr	w1, w1, w0
	add	x0, sp, 88
	mov	w2, w1
	mov	x1, 0
	bl	_ZN5ImGui5BeginEPKcPbi
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3793
	bl	__stack_chk_fail
.L3793:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2035:
	.size	_ZN5ImGui14BeginTooltipExEii, .-_ZN5ImGui14BeginTooltipExEii
	.section	.rodata
	.align	3
.LC560:
	.string	"void ImGui::EndTooltip()"
	.align	3
.LC561:
	.string	"GetCurrentWindowRead()->Flags & ImGuiWindowFlags_Tooltip"
	.text
	.align	2
	.global	_ZN5ImGui10EndTooltipEv
	.type	_ZN5ImGui10EndTooltipEv, %function
_ZN5ImGui10EndTooltipEv:
.LFB2036:
	.cfi_startproc
	stp	x29, x30, [sp, -16]!
	.cfi_def_cfa_offset 16
	.cfi_offset 29, -16
	.cfi_offset 30, -8
	mov	x29, sp
	bl	_ZN5ImGui20GetCurrentWindowReadEv
	ldr	w0, [x0, 12]
	and	w0, w0, 33554432
	cmp	w0, 0
	bne	.L3795
	adrp	x0, .LC560
	add	x3, x0, :lo12:.LC560
	mov	w2, 9727
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC561
	add	x0, x0, :lo12:.LC561
	bl	__assert_fail
.L3795:
	bl	_ZN5ImGui3EndEv
	nop
	ldp	x29, x30, [sp], 16
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2036:
	.size	_ZN5ImGui10EndTooltipEv, .-_ZN5ImGui10EndTooltipEv
	.align	2
	.global	_ZN5ImGui11SetTooltipVEPKcSt9__va_list
	.type	_ZN5ImGui11SetTooltipVEPKcSt9__va_list, %function
_ZN5ImGui11SetTooltipVEPKcSt9__va_list:
.LFB2037:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 72]
	mov	x19, x1
	mov	w1, 0
	mov	w0, 1
	bl	_ZN5ImGui14BeginTooltipExEii
	add	x0, sp, 32
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x1, x0
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui5TextVEPKcSt9__va_list
	bl	_ZN5ImGui10EndTooltipEv
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2037:
	.size	_ZN5ImGui11SetTooltipVEPKcSt9__va_list, .-_ZN5ImGui11SetTooltipVEPKcSt9__va_list
	.align	2
	.global	_ZN5ImGui10SetTooltipEPKcz
	.type	_ZN5ImGui10SetTooltipEPKcz, %function
_ZN5ImGui10SetTooltipEPKcz:
.LFB2038:
	.cfi_startproc
	stp	x29, x30, [sp, -304]!
	.cfi_def_cfa_offset 304
	.cfi_offset 29, -304
	.cfi_offset 30, -296
	mov	x29, sp
	str	x0, [sp, 56]
	str	x1, [sp, 248]
	str	x2, [sp, 256]
	str	x3, [sp, 264]
	str	x4, [sp, 272]
	str	x5, [sp, 280]
	str	x6, [sp, 288]
	str	x7, [sp, 296]
	str	q0, [sp, 112]
	str	q1, [sp, 128]
	str	q2, [sp, 144]
	str	q3, [sp, 160]
	str	q4, [sp, 176]
	str	q5, [sp, 192]
	str	q6, [sp, 208]
	str	q7, [sp, 224]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	add	x0, sp, 304
	str	x0, [sp, 72]
	add	x0, sp, 304
	str	x0, [sp, 80]
	add	x0, sp, 240
	str	x0, [sp, 88]
	mov	w0, -56
	str	w0, [sp, 96]
	mov	w0, -128
	str	w0, [sp, 100]
	add	x0, sp, 16
	add	x1, sp, 72
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 16
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui11SetTooltipVEPKcSt9__va_list
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3798
	bl	__stack_chk_fail
.L3798:
	ldp	x29, x30, [sp], 304
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2038:
	.size	_ZN5ImGui10SetTooltipEPKcz, .-_ZN5ImGui10SetTooltipEPKcz
	.section	.rodata
	.align	3
.LC562:
	.string	"bool ImGui::IsPopupOpen(ImGuiID, ImGuiPopupFlags)"
	.align	3
.LC563:
	.string	"id == 0"
	.text
	.align	2
	.global	_ZN5ImGui11IsPopupOpenEji
	.type	_ZN5ImGui11IsPopupOpenEji, %function
_ZN5ImGui11IsPopupOpenEji:
.LFB2039:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 24]
	and	w0, w0, 128
	cmp	w0, 0
	beq	.L3800
	ldr	w0, [sp, 28]
	cmp	w0, 0
	beq	.L3801
	adrp	x0, .LC562
	add	x3, x0, :lo12:.LC562
	mov	w2, 9758
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC563
	add	x0, x0, :lo12:.LC563
	bl	__assert_fail
.L3801:
	ldr	w0, [sp, 24]
	and	w0, w0, 256
	cmp	w0, 0
	beq	.L3802
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	cmp	w0, 0
	cset	w0, gt
	and	w0, w0, 255
	b	.L3803
.L3802:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [x0, 2096]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	cmp	w1, w0
	cset	w0, gt
	and	w0, w0, 255
	b	.L3803
.L3800:
	ldr	w0, [sp, 24]
	and	w0, w0, 256
	cmp	w0, 0
	beq	.L3804
	str	wzr, [sp, 36]
	b	.L3805
.L3807:
	ldr	x1, [sp, 40]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	w0, [x0]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3806
	mov	w0, 1
	b	.L3803
.L3806:
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L3805:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	blt	.L3807
	mov	w0, 0
	b	.L3803
.L3804:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [x0, 2096]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	cmp	w1, w0
	ble	.L3808
	ldr	x1, [sp, 40]
	mov	x0, 18480
	add	x2, x1, x0
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	w0, [x0]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bne	.L3808
	mov	w0, 1
	b	.L3810
.L3808:
	mov	w0, 0
.L3810:
	nop
.L3803:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2039:
	.size	_ZN5ImGui11IsPopupOpenEji, .-_ZN5ImGui11IsPopupOpenEji
	.section	.rodata
	.align	3
.LC564:
	.string	"bool ImGui::IsPopupOpen(const char*, ImGuiPopupFlags)"
	.align	3
.LC565:
	.string	"0 && \"Cannot use IsPopupOpen() with a string id and ImGuiPopupFlags_AnyPopupLevel.\""
	.text
	.align	2
	.global	_ZN5ImGui11IsPopupOpenEPKci
	.type	_ZN5ImGui11IsPopupOpenEPKci, %function
_ZN5ImGui11IsPopupOpenEPKci:
.LFB2040:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 20]
	and	w0, w0, 128
	cmp	w0, 0
	bne	.L3812
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	mov	x2, 0
	ldr	x1, [sp, 24]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	b	.L3813
.L3812:
	mov	w0, 0
.L3813:
	str	w0, [sp, 36]
	ldr	w0, [sp, 20]
	and	w0, w0, 256
	cmp	w0, 0
	beq	.L3814
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L3814
	adrp	x0, .LC564
	add	x3, x0, :lo12:.LC564
	mov	w2, 9787
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC565
	add	x0, x0, :lo12:.LC565
	bl	__assert_fail
.L3814:
	ldr	w1, [sp, 20]
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui11IsPopupOpenEji
	and	w0, w0, 255
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2040:
	.size	_ZN5ImGui11IsPopupOpenEPKci, .-_ZN5ImGui11IsPopupOpenEPKci
	.align	2
	.global	_ZN5ImGui20GetTopMostPopupModalEv
	.type	_ZN5ImGui20GetTopMostPopupModalEv, %function
_ZN5ImGui20GetTopMostPopupModalEv:
.LFB2041:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 16]
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	sub	w0, w0, #1
	str	w0, [sp, 12]
	b	.L3817
.L3820:
	ldr	x0, [sp, 16]
	ldr	x2, [x0, 18488]
	ldrsw	x1, [sp, 12]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldr	x0, [x0, 8]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L3818
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 134217728
	cmp	w0, 0
	beq	.L3818
	ldr	x0, [sp, 24]
	b	.L3819
.L3818:
	ldr	w0, [sp, 12]
	sub	w0, w0, #1
	str	w0, [sp, 12]
.L3817:
	ldr	w0, [sp, 12]
	cmp	w0, 0
	bge	.L3820
	mov	x0, 0
.L3819:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2041:
	.size	_ZN5ImGui20GetTopMostPopupModalEv, .-_ZN5ImGui20GetTopMostPopupModalEv
	.align	2
	.global	_ZN5ImGui30GetTopMostAndVisiblePopupModalEv
	.type	_ZN5ImGui30GetTopMostAndVisiblePopupModalEv, %function
_ZN5ImGui30GetTopMostAndVisiblePopupModalEv:
.LFB2042:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	sub	w0, w0, #1
	str	w0, [sp, 28]
	b	.L3822
.L3827:
	ldr	x0, [sp, 32]
	ldr	x2, [x0, 18488]
	ldrsw	x1, [sp, 28]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldr	x0, [x0, 8]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3823
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 134217728
	cmp	w0, 0
	beq	.L3824
	ldr	x0, [sp, 40]
	bl	_ZL24IsWindowActiveAndVisibleP11ImGuiWindow
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3824
	mov	w0, 1
	b	.L3825
.L3824:
	mov	w0, 0
.L3825:
	cmp	w0, 0
	beq	.L3823
	ldr	x0, [sp, 40]
	b	.L3826
.L3823:
	ldr	w0, [sp, 28]
	sub	w0, w0, #1
	str	w0, [sp, 28]
.L3822:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bge	.L3827
	mov	x0, 0
.L3826:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2042:
	.size	_ZN5ImGui30GetTopMostAndVisiblePopupModalEv, .-_ZN5ImGui30GetTopMostAndVisiblePopupModalEv
	.section	.rodata
	.align	3
.LC566:
	.string	"[popup] OpenPopup(\"%s\" -> 0x%08X\n"
	.text
	.align	2
	.global	_ZN5ImGui9OpenPopupEPKci
	.type	_ZN5ImGui9OpenPopupEPKci, %function
_ZN5ImGui9OpenPopupEPKci:
.LFB2043:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	mov	x2, 0
	ldr	x1, [sp, 24]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	str	w0, [sp, 36]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L3829
	ldr	w2, [sp, 36]
	ldr	x1, [sp, 24]
	adrp	x0, .LC566
	add	x0, x0, :lo12:.LC566
	bl	_ZN5ImGui8DebugLogEPKcz
.L3829:
	ldr	w1, [sp, 20]
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui11OpenPopupExEji
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2043:
	.size	_ZN5ImGui9OpenPopupEPKci, .-_ZN5ImGui9OpenPopupEPKci
	.align	2
	.global	_ZN5ImGui9OpenPopupEji
	.type	_ZN5ImGui9OpenPopupEji, %function
_ZN5ImGui9OpenPopupEji:
.LFB2044:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	ldr	w1, [sp, 24]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui11OpenPopupExEji
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2044:
	.size	_ZN5ImGui9OpenPopupEji, .-_ZN5ImGui9OpenPopupEji
	.section	.rodata
	.align	3
.LC567:
	.string	"[popup] OpenPopupEx(0x%08X)\n"
	.text
	.align	2
	.global	_ZN5ImGui11OpenPopupExEji
	.type	_ZN5ImGui11OpenPopupExEji, %function
_ZN5ImGui11OpenPopupExEji:
.LFB2045:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -128
	str	w0, [sp, 44]
	str	w1, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 72]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	str	w0, [sp, 60]
	ldr	w0, [sp, 40]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L3832
	mov	w1, 128
	mov	w0, 0
	bl	_ZN5ImGui11IsPopupOpenEji
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3843
.L3832:
	add	x0, sp, 80
	bl	_ZN14ImGuiPopupDataC1Ev
	ldr	w0, [sp, 44]
	str	w0, [sp, 80]
	str	xzr, [sp, 88]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 96]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15904]
	str	w0, [sp, 108]
	ldr	x0, [sp, 72]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjE4backEv
	ldr	w0, [x0]
	str	w0, [sp, 112]
	bl	_ZN5ImGuiL22NavCalcPreferredRefPosEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 116]
	str	s0, [sp, 120]
	ldr	x0, [sp, 64]
	add	x0, x0, 3580
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3834
	ldr	x0, [sp, 64]
	add	x0, x0, 3580
	b	.L3835
.L3834:
	add	x0, sp, 80
	add	x0, x0, 36
.L3835:
	ldr	x0, [x0]
	str	x0, [sp, 124]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L3836
	ldr	w1, [sp, 44]
	adrp	x0, .LC567
	add	x0, x0, :lo12:.LC567
	bl	_ZN5ImGui8DebugLogEPKcz
.L3836:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	blt	.L3837
	ldr	x1, [sp, 64]
	mov	x0, 18480
	add	x0, x1, x0
	add	x1, sp, 80
	bl	_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_
	b	.L3831
.L3837:
	ldr	x1, [sp, 64]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	w0, [x0]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	bne	.L3839
	ldr	x1, [sp, 64]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	w1, [x0, 28]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15904]
	sub	w0, w0, #1
	cmp	w1, w0
	bne	.L3839
	mov	w0, 1
	b	.L3840
.L3839:
	mov	w0, 0
.L3840:
	cmp	w0, 0
	beq	.L3841
	ldr	w19, [sp, 108]
	ldr	x1, [sp, 64]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	str	w19, [x0, 28]
	b	.L3831
.L3841:
	mov	w1, 0
	ldr	w0, [sp, 60]
	bl	_ZN5ImGui17ClosePopupToLevelEib
	ldr	x1, [sp, 64]
	mov	x0, 18480
	add	x0, x1, x0
	add	x1, sp, 80
	bl	_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_
	b	.L3831
.L3843:
	nop
.L3831:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L3842
	bl	__stack_chk_fail
.L3842:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2045:
	.size	_ZN5ImGui11OpenPopupExEji, .-_ZN5ImGui11OpenPopupExEji
	.section	.rodata
	.align	3
.LC568:
	.string	"void ImGui::ClosePopupsOverWindow(ImGuiWindow*, bool)"
	.align	3
.LC569:
	.string	"(popup.Window->Flags & ImGuiWindowFlags_Popup) != 0"
	.align	3
.LC570:
	.string	"<NULL>"
	.align	3
.LC571:
	.string	"[popup] ClosePopupsOverWindow(\"%s\")\n"
	.text
	.align	2
	.global	_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb
	.type	_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb, %function
_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb:
.LFB2046:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 24]
	strb	w1, [sp, 23]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	cmp	w0, 0
	beq	.L3862
	str	wzr, [sp, 48]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L3847
	b	.L3848
.L3858:
	ldr	x1, [sp, 56]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 48]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L3863
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 8]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	bne	.L3851
	adrp	x0, .LC568
	add	x3, x0, :lo12:.LC568
	mov	w2, 9893
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC569
	add	x0, x0, :lo12:.LC569
	bl	__assert_fail
.L3851:
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 8]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L3864
	strb	wzr, [sp, 47]
	ldr	w0, [sp, 48]
	str	w0, [sp, 52]
	b	.L3853
.L3856:
	ldr	x1, [sp, 56]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	x0, [x0, 8]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	cmp	x0, 0
	beq	.L3854
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui26IsWindowWithinBeginStackOfEP11ImGuiWindowS1_
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3854
	mov	w0, 1
	strb	w0, [sp, 47]
	b	.L3855
.L3854:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L3853:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	blt	.L3856
.L3855:
	ldrb	w0, [sp, 47]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3865
	b	.L3850
.L3863:
	nop
	b	.L3850
.L3864:
	nop
.L3850:
	ldr	w0, [sp, 48]
	add	w0, w0, 1
	str	w0, [sp, 48]
.L3848:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 48]
	cmp	w1, w0
	blt	.L3858
	b	.L3847
.L3865:
	nop
.L3847:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 48]
	cmp	w1, w0
	bge	.L3844
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L3859
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L3860
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	b	.L3861
.L3860:
	adrp	x0, .LC570
	add	x0, x0, :lo12:.LC570
.L3861:
	mov	x1, x0
	adrp	x0, .LC571
	add	x0, x0, :lo12:.LC571
	bl	_ZN5ImGui8DebugLogEPKcz
.L3859:
	ldrb	w1, [sp, 23]
	ldr	w0, [sp, 48]
	bl	_ZN5ImGui17ClosePopupToLevelEib
	b	.L3844
.L3862:
	nop
.L3844:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2046:
	.size	_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb, .-_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb
	.align	2
	.global	_ZN5ImGui23ClosePopupsExceptModalsEv
	.type	_ZN5ImGui23ClosePopupsExceptModalsEv, %function
_ZN5ImGui23ClosePopupsExceptModalsEv:
.LFB2047:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	str	w0, [sp, 28]
	b	.L3867
.L3869:
	ldr	x1, [sp, 32]
	mov	x0, 18480
	add	x2, x1, x0
	ldr	w0, [sp, 28]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	x0, [x0, 8]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L3868
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 134217728
	cmp	w0, 0
	bne	.L3868
	ldr	w0, [sp, 28]
	sub	w0, w0, #1
	str	w0, [sp, 28]
.L3867:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bgt	.L3869
.L3868:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bge	.L3871
	mov	w1, 1
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui17ClosePopupToLevelEib
.L3871:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2047:
	.size	_ZN5ImGui23ClosePopupsExceptModalsEv, .-_ZN5ImGui23ClosePopupsExceptModalsEv
	.section	.rodata
	.align	3
.LC572:
	.string	"[popup] ClosePopupToLevel(%d), restore_focus_to_window_under_popup=%d\n"
	.align	3
.LC573:
	.string	"void ImGui::ClosePopupToLevel(int, bool)"
	.align	3
.LC574:
	.string	"remaining >= 0 && remaining < g.OpenPopupStack.Size"
	.text
	.align	2
	.global	_ZN5ImGui17ClosePopupToLevelEib
	.type	_ZN5ImGui17ClosePopupToLevelEib, %function
_ZN5ImGui17ClosePopupToLevelEib:
.LFB2048:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	strb	w1, [sp, 27]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L3873
	ldrb	w0, [sp, 27]
	mov	w2, w0
	ldr	w1, [sp, 28]
	adrp	x0, .LC572
	add	x0, x0, :lo12:.LC572
	bl	_ZN5ImGui8DebugLogEPKcz
.L3873:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L3874
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	blt	.L3882
.L3874:
	adrp	x0, .LC573
	add	x3, x0, :lo12:.LC573
	mov	w2, 9940
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC574
	add	x0, x0, :lo12:.LC574
	bl	__assert_fail
.L3882:
	ldr	x1, [sp, 40]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	x0, [x0, 8]
	str	x0, [sp, 48]
	ldr	x1, [sp, 40]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	x0, [x0, 16]
	str	x0, [sp, 56]
	ldr	x1, [sp, 40]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorI14ImGuiPopupDataE6resizeEi
	ldrb	w0, [sp, 27]
	cmp	w0, 0
	beq	.L3883
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L3877
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 12]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L3877
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 840]
	b	.L3878
.L3877:
	ldr	x0, [sp, 56]
.L3878:
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L3879
	ldr	x0, [sp, 32]
	ldrb	w0, [x0, 151]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3879
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L3879
	mov	x1, 0
	ldr	x0, [sp, 48]
	bl	_ZN5ImGui26FocusTopMostWindowUnderOneEP11ImGuiWindowS1_
	b	.L3883
.L3879:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 0
	bne	.L3881
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L3881
	ldr	x0, [sp, 32]
	bl	_ZN5ImGuiL28NavRestoreLastChildNavWindowEP11ImGuiWindow
	str	x0, [sp, 32]
.L3881:
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
.L3883:
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2048:
	.size	_ZN5ImGui17ClosePopupToLevelEib, .-_ZN5ImGui17ClosePopupToLevelEib
	.section	.rodata
	.align	3
.LC575:
	.string	"[popup] CloseCurrentPopup %d -> %d\n"
	.text
	.align	2
	.global	_ZN5ImGui17CloseCurrentPopupEv
	.type	_ZN5ImGui17CloseCurrentPopupEv, %function
_ZN5ImGui17CloseCurrentPopupEv:
.LFB2049:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	sub	w0, w0, #1
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	cmp	w0, 0
	blt	.L3885
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	bge	.L3885
	ldr	x1, [sp, 48]
	mov	x0, 18496
	add	x0, x1, x0
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	w19, [x0]
	ldr	x1, [sp, 48]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	w0, [x0]
	cmp	w19, w0
	beq	.L3886
.L3885:
	mov	w0, 1
	b	.L3887
.L3886:
	mov	w0, 0
.L3887:
	cmp	w0, 0
	bne	.L3896
	b	.L3890
.L3894:
	ldr	x1, [sp, 48]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	x0, [x0, 8]
	str	x0, [sp, 56]
	ldr	x1, [sp, 48]
	mov	x0, 18480
	add	x2, x1, x0
	ldr	w0, [sp, 44]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	ldr	x0, [x0, 8]
	str	x0, [sp, 64]
	strb	wzr, [sp, 43]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L3891
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L3891
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L3891
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 12]
	and	w0, w0, 1024
	cmp	w0, 0
	bne	.L3891
	mov	w0, 1
	strb	w0, [sp, 43]
.L3891:
	ldrb	w0, [sp, 43]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3897
	ldr	w0, [sp, 44]
	sub	w0, w0, #1
	str	w0, [sp, 44]
.L3890:
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bgt	.L3894
	b	.L3893
.L3897:
	nop
.L3893:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L3895
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	sub	w0, w0, #1
	ldr	w2, [sp, 44]
	mov	w1, w0
	adrp	x0, .LC575
	add	x0, x0, :lo12:.LC575
	bl	_ZN5ImGui8DebugLogEPKcz
.L3895:
	mov	w1, 1
	ldr	w0, [sp, 44]
	bl	_ZN5ImGui17ClosePopupToLevelEib
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	cmp	x0, 0
	beq	.L3884
	ldr	x0, [sp, 72]
	mov	w1, 1
	strb	w1, [x0, 320]
	b	.L3884
.L3896:
	nop
.L3884:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2049:
	.size	_ZN5ImGui17CloseCurrentPopupEv, .-_ZN5ImGui17CloseCurrentPopupEv
	.section	.rodata
	.align	3
.LC576:
	.string	"##Menu_%02d"
	.align	3
.LC577:
	.string	"##Popup_%08x"
	.text
	.align	2
	.global	_ZN5ImGui12BeginPopupExEji
	.type	_ZN5ImGui12BeginPopupExEji, %function
_ZN5ImGui12BeginPopupExEji:
.LFB2050:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	mov	w1, 0
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui11IsPopupOpenEji
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3899
	ldr	x1, [sp, 40]
	mov	x0, 18272
	add	x0, x1, x0
	bl	_ZN19ImGuiNextWindowData10ClearFlagsEv
	mov	w0, 0
	b	.L3904
.L3899:
	ldr	w0, [sp, 24]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L3901
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2128]
	add	x4, sp, 48
	mov	w3, w0
	adrp	x0, .LC576
	add	x2, x0, :lo12:.LC576
	mov	x1, 20
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
	b	.L3902
.L3901:
	add	x4, sp, 48
	ldr	w3, [sp, 28]
	adrp	x0, .LC577
	add	x2, x0, :lo12:.LC577
	mov	x1, 20
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
.L3902:
	ldr	w0, [sp, 24]
	orr	w0, w0, 67108864
	str	w0, [sp, 24]
	add	x0, sp, 48
	ldr	w2, [sp, 24]
	mov	x1, 0
	bl	_ZN5ImGui5BeginEPKcPbi
	and	w0, w0, 255
	strb	w0, [sp, 39]
	ldrb	w0, [sp, 39]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3903
	bl	_ZN5ImGui8EndPopupEv
.L3903:
	ldrb	w0, [sp, 39]
.L3904:
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 72]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L3905
	bl	__stack_chk_fail
.L3905:
	mov	w0, w1
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2050:
	.size	_ZN5ImGui12BeginPopupExEji, .-_ZN5ImGui12BeginPopupExEji
	.align	2
	.global	_ZN5ImGui10BeginPopupEPKci
	.type	_ZN5ImGui10BeginPopupEPKci, %function
_ZN5ImGui10BeginPopupEPKci:
.LFB2051:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [x0, 2096]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	cmp	w1, w0
	bgt	.L3907
	ldr	x1, [sp, 40]
	mov	x0, 18272
	add	x0, x1, x0
	bl	_ZN19ImGuiNextWindowData10ClearFlagsEv
	mov	w0, 0
	b	.L3908
.L3907:
	ldr	w1, [sp, 20]
	mov	w0, 321
	orr	w0, w1, w0
	str	w0, [sp, 20]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	mov	x2, 0
	ldr	x1, [sp, 24]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	str	w0, [sp, 36]
	ldr	w1, [sp, 20]
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui12BeginPopupExEji
	and	w0, w0, 255
	nop
.L3908:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2051:
	.size	_ZN5ImGui10BeginPopupEPKci, .-_ZN5ImGui10BeginPopupEPKci
	.align	2
	.global	_ZN5ImGui15BeginPopupModalEPKcPbi
	.type	_ZN5ImGui15BeginPopupModalEPKcPbi, %function
_ZN5ImGui15BeginPopupModalEPKcPbi:
.LFB2052:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	w2, [sp, 28]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 88]
	mov	x2, 0
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 88]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	str	w0, [sp, 60]
	mov	w1, 0
	ldr	w0, [sp, 60]
	bl	_ZN5ImGui11IsPopupOpenEji
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3910
	ldr	x1, [sp, 80]
	mov	x0, 18272
	add	x0, x1, x0
	bl	_ZN19ImGuiNextWindowData10ClearFlagsEv
	mov	w0, 0
	b	.L3911
.L3910:
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L3912
	bl	_ZN5ImGui15GetMainViewportEv
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	bl	_ZNK13ImGuiViewport9GetCenterEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	add	x0, sp, 72
	fmov	s1, 5.0e-1
	fmov	s0, 5.0e-1
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 64
	mov	x2, x1
	mov	w1, 4
	bl	_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_
.L3912:
	ldr	w1, [sp, 28]
	mov	w0, 32
	movk	w0, 0xc00, lsl 16
	orr	w0, w1, w0
	str	w0, [sp, 28]
	ldr	w2, [sp, 28]
	ldr	x1, [sp, 32]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui5BeginEPKcPbi
	and	w0, w0, 255
	strb	w0, [sp, 59]
	ldrb	w0, [sp, 59]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L3913
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L3914
	ldr	x0, [sp, 32]
	ldrb	w0, [x0]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3914
.L3913:
	bl	_ZN5ImGui8EndPopupEv
	ldrb	w0, [sp, 59]
	cmp	w0, 0
	beq	.L3915
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	mov	w1, 1
	bl	_ZN5ImGui17ClosePopupToLevelEib
.L3915:
	mov	w0, 0
	b	.L3911
.L3914:
	ldrb	w0, [sp, 59]
.L3911:
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 104]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L3916
	bl	__stack_chk_fail
.L3916:
	mov	w0, w1
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2052:
	.size	_ZN5ImGui15BeginPopupModalEPKcPbi, .-_ZN5ImGui15BeginPopupModalEPKcPbi
	.section	.rodata
	.align	3
.LC578:
	.string	"void ImGui::EndPopup()"
	.align	3
.LC579:
	.string	"window->Flags & ImGuiWindowFlags_Popup"
	.align	3
.LC580:
	.string	"g.BeginPopupStack.Size > 0"
	.text
	.align	2
	.global	_ZN5ImGui8EndPopupEv
	.type	_ZN5ImGui8EndPopupEv, %function
_ZN5ImGui8EndPopupEv:
.LFB2053:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 16]
	ldr	x0, [sp, 16]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	bne	.L3918
	adrp	x0, .LC578
	add	x3, x0, :lo12:.LC578
	mov	w2, 10070
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC579
	add	x0, x0, :lo12:.LC579
	bl	__assert_fail
.L3918:
	ldr	x0, [sp, 16]
	add	x0, x0, 16384
	ldr	w0, [x0, 2112]
	cmp	w0, 0
	bgt	.L3919
	adrp	x0, .LC578
	add	x3, x0, :lo12:.LC578
	mov	w2, 10071
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC580
	add	x0, x0, :lo12:.LC580
	bl	__assert_fail
.L3919:
	ldr	x0, [sp, 16]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	bne	.L3920
	mov	w1, 2
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi
.L3920:
	ldr	x0, [sp, 16]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3630]
	cmp	w0, 0
	beq	.L3921
	adrp	x0, .LC578
	add	x3, x0, :lo12:.LC578
	mov	w2, 10078
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC226
	add	x0, x0, :lo12:.LC226
	bl	__assert_fail
.L3921:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L3922
	ldr	x0, [sp, 16]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3630]
.L3922:
	bl	_ZN5ImGui3EndEv
	ldr	x0, [sp, 16]
	add	x0, x0, 12288
	strb	wzr, [x0, 3630]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2053:
	.size	_ZN5ImGui8EndPopupEv, .-_ZN5ImGui8EndPopupEv
	.section	.rodata
	.align	3
.LC581:
	.string	"void ImGui::OpenPopupOnItemClick(const char*, ImGuiPopupFlags)"
	.text
	.align	2
	.global	_ZN5ImGui20OpenPopupOnItemClickEPKci
	.type	_ZN5ImGui20OpenPopupOnItemClickEPKci, %function
_ZN5ImGui20OpenPopupOnItemClickEPKci:
.LFB2054:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	w0, [sp, 20]
	and	w0, w0, 31
	str	w0, [sp, 40]
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui15IsMouseReleasedEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3924
	mov	w0, 32
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3924
	mov	w0, 1
	b	.L3925
.L3924:
	mov	w0, 0
.L3925:
	cmp	w0, 0
	beq	.L3930
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L3927
	mov	x2, 0
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 56]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	b	.L3928
.L3927:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
.L3928:
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bne	.L3929
	adrp	x0, .LC581
	add	x3, x0, :lo12:.LC581
	mov	w2, 10095
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC224
	add	x0, x0, :lo12:.LC224
	bl	__assert_fail
.L3929:
	ldr	w1, [sp, 20]
	ldr	w0, [sp, 44]
	bl	_ZN5ImGui11OpenPopupExEji
.L3930:
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2054:
	.size	_ZN5ImGui20OpenPopupOnItemClickEPKci, .-_ZN5ImGui20OpenPopupOnItemClickEPKci
	.section	.rodata
	.align	3
.LC582:
	.string	"bool ImGui::BeginPopupContextItem(const char*, ImGuiPopupFlags)"
	.text
	.align	2
	.global	_ZN5ImGui21BeginPopupContextItemEPKci
	.type	_ZN5ImGui21BeginPopupContextItemEPKci, %function
_ZN5ImGui21BeginPopupContextItemEPKci:
.LFB2055:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 155]
	cmp	w0, 0
	beq	.L3932
	mov	w0, 0
	b	.L3933
.L3932:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L3934
	mov	x2, 0
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 56]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	b	.L3935
.L3934:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
.L3935:
	str	w0, [sp, 40]
	ldr	w0, [sp, 40]
	cmp	w0, 0
	bne	.L3936
	adrp	x0, .LC582
	add	x3, x0, :lo12:.LC582
	mov	w2, 10123
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC224
	add	x0, x0, :lo12:.LC224
	bl	__assert_fail
.L3936:
	ldr	w0, [sp, 20]
	and	w0, w0, 31
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	bl	_ZN5ImGui15IsMouseReleasedEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3937
	mov	w0, 32
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3937
	mov	w0, 1
	b	.L3938
.L3937:
	mov	w0, 0
.L3938:
	cmp	w0, 0
	beq	.L3939
	ldr	w1, [sp, 20]
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui11OpenPopupExEji
.L3939:
	mov	w1, 321
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui12BeginPopupExEji
	and	w0, w0, 255
	nop
.L3933:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2055:
	.size	_ZN5ImGui21BeginPopupContextItemEPKci, .-_ZN5ImGui21BeginPopupContextItemEPKci
	.section	.rodata
	.align	3
.LC583:
	.string	"window_context"
	.text
	.align	2
	.global	_ZN5ImGui23BeginPopupContextWindowEPKci
	.type	_ZN5ImGui23BeginPopupContextWindowEPKci, %function
_ZN5ImGui23BeginPopupContextWindowEPKci:
.LFB2056:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L3941
	adrp	x0, .LC583
	add	x0, x0, :lo12:.LC583
	str	x0, [sp, 24]
.L3941:
	mov	x2, 0
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 56]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	str	w0, [sp, 40]
	ldr	w0, [sp, 20]
	and	w0, w0, 31
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	bl	_ZN5ImGui15IsMouseReleasedEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3942
	mov	w0, 32
	bl	_ZN5ImGui15IsWindowHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3942
	mov	w0, 1
	b	.L3943
.L3942:
	mov	w0, 0
.L3943:
	cmp	w0, 0
	beq	.L3944
	ldr	w0, [sp, 20]
	and	w0, w0, 64
	cmp	w0, 0
	beq	.L3945
	bl	_ZN5ImGui16IsAnyItemHoveredEv
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3946
.L3945:
	mov	w0, 1
	b	.L3947
.L3946:
	mov	w0, 0
.L3947:
	cmp	w0, 0
	beq	.L3944
	ldr	w1, [sp, 20]
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui11OpenPopupExEji
.L3944:
	mov	w1, 321
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui12BeginPopupExEji
	and	w0, w0, 255
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2056:
	.size	_ZN5ImGui23BeginPopupContextWindowEPKci, .-_ZN5ImGui23BeginPopupContextWindowEPKci
	.section	.rodata
	.align	3
.LC584:
	.string	"void_context"
	.text
	.align	2
	.global	_ZN5ImGui21BeginPopupContextVoidEPKci
	.type	_ZN5ImGui21BeginPopupContextVoidEPKci, %function
_ZN5ImGui21BeginPopupContextVoidEPKci:
.LFB2057:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L3950
	adrp	x0, .LC584
	add	x0, x0, :lo12:.LC584
	str	x0, [sp, 24]
.L3950:
	mov	x2, 0
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 56]
	bl	_ZN11ImGuiWindow5GetIDEPKcS1_
	str	w0, [sp, 40]
	ldr	w0, [sp, 20]
	and	w0, w0, 31
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	bl	_ZN5ImGui15IsMouseReleasedEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3951
	mov	w0, 4
	bl	_ZN5ImGui15IsWindowHoveredEi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3951
	mov	w0, 1
	b	.L3952
.L3951:
	mov	w0, 0
.L3952:
	cmp	w0, 0
	beq	.L3953
	bl	_ZN5ImGui20GetTopMostPopupModalEv
	cmp	x0, 0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L3953
	ldr	w1, [sp, 20]
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui11OpenPopupExEji
.L3953:
	mov	w1, 321
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui12BeginPopupExEji
	and	w0, w0, 255
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2057:
	.size	_ZN5ImGui21BeginPopupContextVoidEPKci, .-_ZN5ImGui21BeginPopupContextVoidEPKci
	.align	2
	.global	_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_PiRK6ImRectS6_24ImGuiPopupPositionPolicy
	.type	_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_PiRK6ImRectS6_24ImGuiPopupPositionPolicy, %function
_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_PiRK6ImRectS6_24ImGuiPopupPositionPolicy:
.LFB2058:
	.cfi_startproc
	stp	x29, x30, [sp, -176]!
	.cfi_def_cfa_offset 176
	.cfi_offset 29, -176
	.cfi_offset 30, -168
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -160
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	str	x2, [sp, 56]
	str	x3, [sp, 48]
	str	x4, [sp, 40]
	str	w5, [sp, 36]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 168]
	mov	x1, 0
	ldr	x19, [sp, 48]
	ldr	x0, [sp, 48]
	add	x0, x0, 8
	ldr	x1, [sp, 64]
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s1, w0
	fmov	s0, w1
	mov	x1, x19
	ldr	x0, [sp, 72]
	bl	_ZL7ImClampRK6ImVec2S1_S_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 112]
	str	s0, [sp, 116]
	ldr	w0, [sp, 36]
	cmp	w0, 1
	bne	.L3956
	mov	w0, 3
	str	w0, [sp, 152]
	mov	w0, 1
	str	w0, [sp, 156]
	str	wzr, [sp, 160]
	mov	w0, 2
	str	w0, [sp, 164]
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	cmn	w0, #1
	beq	.L3957
	mov	w0, -1
	b	.L3958
.L3957:
	mov	w0, 0
.L3958:
	str	w0, [sp, 88]
	b	.L3959
.L3970:
	ldr	w0, [sp, 88]
	cmn	w0, #1
	bne	.L3960
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	b	.L3961
.L3960:
	ldrsw	x0, [sp, 88]
	lsl	x0, x0, 2
	add	x1, sp, 152
	ldr	w0, [x1, x0]
.L3961:
	str	w0, [sp, 96]
	ldr	w0, [sp, 88]
	cmn	w0, #1
	beq	.L3962
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	ldr	w1, [sp, 96]
	cmp	w1, w0
	beq	.L4008
.L3962:
	str	wzr, [sp, 120]
	str	wzr, [sp, 124]
	ldr	w0, [sp, 96]
	cmp	w0, 3
	bne	.L3964
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 12]
	add	x0, sp, 136
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 136]
	str	x0, [sp, 120]
.L3964:
	ldr	w0, [sp, 96]
	cmp	w0, 1
	bne	.L3965
	ldr	x0, [sp, 40]
	ldr	s2, [x0]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	add	x0, sp, 136
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 136]
	str	x0, [sp, 120]
.L3965:
	ldr	w0, [sp, 96]
	cmp	w0, 0
	bne	.L3966
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	fsub	s0, s1, s0
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 12]
	add	x0, sp, 136
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 136]
	str	x0, [sp, 120]
.L3966:
	ldr	w0, [sp, 96]
	cmp	w0, 2
	bne	.L3967
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 8]
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	fsub	s2, s1, s0
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	add	x0, sp, 136
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 136]
	str	x0, [sp, 120]
.L3967:
	add	x0, sp, 120
	ldr	x1, [sp, 64]
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 128]
	str	s0, [sp, 132]
	add	x2, sp, 128
	add	x1, sp, 120
	add	x0, sp, 136
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x0, sp, 136
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZNK6ImRect8ContainsERKS_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4009
	ldr	x0, [sp, 56]
	ldr	w1, [sp, 96]
	str	w1, [x0]
	ldr	x0, [sp, 120]
	b	.L4004
.L4008:
	nop
	b	.L3963
.L4009:
	nop
.L3963:
	ldr	w0, [sp, 88]
	add	w0, w0, 1
	str	w0, [sp, 88]
.L3959:
	ldr	w0, [sp, 88]
	cmp	w0, 3
	ble	.L3970
.L3956:
	ldr	w0, [sp, 36]
	cmp	w0, 2
	beq	.L3971
	ldr	w0, [sp, 36]
	cmp	w0, 0
	bne	.L3972
.L3971:
	mov	w0, 1
	str	w0, [sp, 152]
	mov	w0, 3
	str	w0, [sp, 156]
	mov	w0, 2
	str	w0, [sp, 160]
	str	wzr, [sp, 164]
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	cmn	w0, #1
	beq	.L3973
	mov	w0, -1
	b	.L3974
.L3973:
	mov	w0, 0
.L3974:
	str	w0, [sp, 92]
	b	.L3975
.L4002:
	ldr	w0, [sp, 92]
	cmn	w0, #1
	bne	.L3976
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	b	.L3977
.L3976:
	ldrsw	x0, [sp, 92]
	lsl	x0, x0, 2
	add	x1, sp, 152
	ldr	w0, [x1, x0]
.L3977:
	str	w0, [sp, 100]
	ldr	w0, [sp, 92]
	cmn	w0, #1
	beq	.L3978
	ldr	x0, [sp, 56]
	ldr	w0, [x0]
	ldr	w1, [sp, 100]
	cmp	w1, w0
	beq	.L4010
.L3978:
	ldr	w0, [sp, 100]
	cmp	w0, 0
	bne	.L3980
	ldr	x0, [sp, 40]
	ldr	s1, [x0]
	b	.L3981
.L3980:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 8]
.L3981:
	ldr	w0, [sp, 100]
	cmp	w0, 1
	bne	.L3982
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 8]
	b	.L3983
.L3982:
	ldr	x0, [sp, 48]
	ldr	s0, [x0]
.L3983:
	fsub	s0, s1, s0
	str	s0, [sp, 104]
	ldr	w0, [sp, 100]
	cmp	w0, 2
	bne	.L3984
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 4]
	b	.L3985
.L3984:
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 12]
.L3985:
	ldr	w0, [sp, 100]
	cmp	w0, 3
	bne	.L3986
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 12]
	b	.L3987
.L3986:
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 4]
.L3987:
	fsub	s0, s1, s0
	str	s0, [sp, 108]
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	ldr	s1, [sp, 104]
	fcmpe	s1, s0
	bmi	.L4006
	b	.L3988
.L4006:
	ldr	w0, [sp, 100]
	cmp	w0, 0
	beq	.L4011
	ldr	w0, [sp, 100]
	cmp	w0, 1
	beq	.L4011
.L3988:
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 4]
	ldr	s1, [sp, 108]
	fcmpe	s1, s0
	bmi	.L4007
	b	.L3991
.L4007:
	ldr	w0, [sp, 100]
	cmp	w0, 2
	beq	.L4012
	ldr	w0, [sp, 100]
	cmp	w0, 3
	beq	.L4012
.L3991:
	str	wzr, [sp, 136]
	str	wzr, [sp, 140]
	ldr	w0, [sp, 100]
	cmp	w0, 0
	bne	.L3994
	ldr	x0, [sp, 40]
	ldr	s1, [x0]
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	fsub	s0, s1, s0
	b	.L3995
.L3994:
	ldr	w0, [sp, 100]
	cmp	w0, 1
	bne	.L3996
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 8]
	b	.L3995
.L3996:
	ldr	s0, [sp, 112]
.L3995:
	str	s0, [sp, 136]
	ldr	w0, [sp, 100]
	cmp	w0, 2
	bne	.L3998
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	b	.L3999
.L3998:
	ldr	w0, [sp, 100]
	cmp	w0, 3
	bne	.L4000
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 12]
	b	.L3999
.L4000:
	ldr	s0, [sp, 116]
.L3999:
	str	s0, [sp, 140]
	ldr	s0, [sp, 136]
	ldr	x0, [sp, 48]
	ldr	s1, [x0]
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 136]
	ldr	s0, [sp, 140]
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 4]
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 140]
	ldr	x0, [sp, 56]
	ldr	w1, [sp, 100]
	str	w1, [x0]
	ldr	x0, [sp, 136]
	b	.L4004
.L4010:
	nop
	b	.L3979
.L4011:
	nop
	b	.L3979
.L4012:
	nop
.L3979:
	ldr	w0, [sp, 92]
	add	w0, w0, 1
	str	w0, [sp, 92]
.L3975:
	ldr	w0, [sp, 92]
	cmp	w0, 3
	ble	.L4002
.L3972:
	ldr	x0, [sp, 56]
	mov	w1, -1
	str	w1, [x0]
	ldr	w0, [sp, 36]
	cmp	w0, 2
	bne	.L4003
	add	x0, sp, 136
	fmov	s1, 2.0e+0
	fmov	s0, 2.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 136
	mov	x1, x0
	ldr	x0, [sp, 72]
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	b	.L4004
.L4003:
	ldr	x0, [sp, 72]
	ldr	x0, [x0]
	str	x0, [sp, 136]
	ldr	s1, [sp, 136]
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	fadd	s0, s1, s0
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 8]
	bl	_Z5ImMinIfET_S0_S0_
	fmov	s1, s0
	ldr	x0, [sp, 64]
	ldr	s0, [x0]
	fsub	s0, s1, s0
	ldr	x0, [sp, 48]
	ldr	s1, [x0]
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 136]
	ldr	s1, [sp, 140]
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 12]
	bl	_Z5ImMinIfET_S0_S0_
	fmov	s1, s0
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 4]
	fsub	s0, s1, s0
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 4]
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 140]
	ldr	x0, [sp, 136]
.L4004:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 168]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4005
	bl	__stack_chk_fail
.L4005:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 176
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2058:
	.size	_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_PiRK6ImRectS6_24ImGuiPopupPositionPolicy, .-_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_PiRK6ImRectS6_24ImGuiPopupPositionPolicy
	.align	2
	.global	_ZN5ImGui25GetPopupAllowedExtentRectEP11ImGuiWindow
	.type	_ZN5ImGui25GetPopupAllowedExtentRectEP11ImGuiWindow, %function
_ZN5ImGui25GetPopupAllowedExtentRectEP11ImGuiWindow:
.LFB2059:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -80
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	bl	_ZN5ImGui15GetMainViewportEv
	bl	_ZNK14ImGuiViewportP11GetMainRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 72]
	str	s4, [sp, 76]
	str	s1, [sp, 80]
	str	s0, [sp, 84]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 14480]
	str	x0, [sp, 48]
	add	x0, sp, 72
	bl	_ZNK6ImRect8GetWidthEv
	fmov	s1, s0
	ldr	s0, [sp, 48]
	fadd	s0, s0, s0
	fcmpe	s1, s0
	bgt	.L4022
	b	.L4024
.L4022:
	ldr	s0, [sp, 48]
	fneg	s8, s0
	b	.L4016
.L4024:
	movi	v8.2s, #0
.L4016:
	add	x0, sp, 72
	bl	_ZNK6ImRect9GetHeightEv
	fmov	s1, s0
	ldr	s0, [sp, 52]
	fadd	s0, s0, s0
	fcmpe	s1, s0
	bgt	.L4023
	b	.L4025
.L4023:
	ldr	s0, [sp, 52]
	fneg	s0, s0
	b	.L4019
.L4025:
	movi	v0.2s, #0
.L4019:
	add	x0, sp, 56
	fmov	s1, s0
	fmov	s0, s8
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 56
	add	x0, sp, 72
	bl	_ZN6ImRect6ExpandERK6ImVec2
	ldp	x0, x1, [sp, 72]
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4021
	bl	__stack_chk_fail
.L4021:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2059:
	.size	_ZN5ImGui25GetPopupAllowedExtentRectEP11ImGuiWindow, .-_ZN5ImGui25GetPopupAllowedExtentRectEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC585:
	.string	"ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow*)"
	.align	3
.LC586:
	.string	"g.CurrentWindow == window"
	.text
	.align	2
	.global	_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow
	.type	_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow, %function
_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow:
.LFB2060:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	str	x21, [sp, 32]
	.cfi_offset 19, -144
	.cfi_offset 20, -136
	.cfi_offset 21, -128
	str	x0, [sp, 56]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 88]
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui25GetPopupAllowedExtentRectEP11ImGuiWindow
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 104]
	str	s4, [sp, 108]
	str	s1, [sp, 112]
	str	s0, [sp, 116]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L4027
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 16032]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	beq	.L4028
	adrp	x0, .LC585
	add	x3, x0, :lo12:.LC585
	mov	w2, 10257
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC586
	add	x0, x0, :lo12:.LC586
	bl	__assert_fail
.L4028:
	ldr	x1, [sp, 88]
	mov	x0, 15984
	add	x2, x1, x0
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 15984]
	sub	w0, w0, #2
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI20ImGuiWindowStackDataEixEi
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 14388]
	str	s0, [sp, 76]
	str	wzr, [sp, 120]
	str	wzr, [sp, 124]
	str	wzr, [sp, 128]
	str	wzr, [sp, 132]
	ldr	x0, [sp, 96]
	ldrb	w0, [x0, 322]
	cmp	w0, 0
	beq	.L4029
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 540]
	ldr	x0, [sp, 96]
	ldr	s1, [x0, 548]
	add	x0, sp, 136
	fmov	s3, s1
	mov	w1, 2139095039
	fmov	s2, w1
	fmov	s1, s0
	mvni	v0.2s, 0x80, lsl 16
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 136]
	stp	x0, x1, [sp, 120]
	b	.L4030
.L4029:
	ldr	x0, [sp, 96]
	ldr	s1, [x0, 24]
	ldr	s0, [sp, 76]
	fadd	s4, s1, s0
	ldr	x0, [sp, 96]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 32]
	fadd	s1, s1, s0
	ldr	s0, [sp, 76]
	fsub	s1, s1, s0
	ldr	x0, [sp, 96]
	ldr	s0, [x0, 140]
	fsub	s0, s1, s0
	add	x0, sp, 136
	mov	w1, 2139095039
	fmov	s3, w1
	fmov	s2, s0
	mvni	v1.2s, 0x80, lsl 16
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 136]
	stp	x0, x1, [sp, 120]
.L4030:
	ldr	x0, [sp, 56]
	add	x6, x0, 24
	ldr	x0, [sp, 56]
	add	x1, x0, 32
	ldr	x0, [sp, 56]
	add	x0, x0, 180
	add	x3, sp, 120
	add	x2, sp, 104
	mov	w5, 0
	mov	x4, x3
	mov	x3, x2
	mov	x2, x0
	mov	x0, x6
	bl	_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_PiRK6ImRectS6_24ImGuiPopupPositionPolicy
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	b	.L4036
.L4027:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L4032
	ldr	x0, [sp, 56]
	add	x19, x0, 24
	ldr	x0, [sp, 56]
	add	x20, x0, 32
	ldr	x0, [sp, 56]
	add	x21, x0, 180
	ldr	x0, [sp, 56]
	add	x1, x0, 24
	ldr	x0, [sp, 56]
	add	x2, x0, 24
	add	x0, sp, 136
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x1, sp, 136
	add	x0, sp, 104
	mov	w5, 0
	mov	x4, x1
	mov	x3, x0
	mov	x2, x21
	mov	x1, x20
	mov	x0, x19
	bl	_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_PiRK6ImRectS6_24ImGuiPopupPositionPolicy
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	b	.L4036
.L4032:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	and	w0, w0, 33554432
	cmp	w0, 0
	beq	.L4033
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 14488]
	str	s0, [sp, 72]
	bl	_ZN5ImGuiL22NavCalcPreferredRefPosEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	str	wzr, [sp, 120]
	str	wzr, [sp, 124]
	str	wzr, [sp, 128]
	str	wzr, [sp, 132]
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4034
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2219]
	cmp	w0, 0
	beq	.L4034
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 8]
	and	w0, w0, 4
	cmp	w0, 0
	bne	.L4034
	ldr	s1, [sp, 80]
	fmov	s0, 1.6e+1
	fsub	s4, s1, s0
	ldr	s1, [sp, 84]
	fmov	s0, 8.0e+0
	fsub	s5, s1, s0
	ldr	s1, [sp, 80]
	fmov	s0, 1.6e+1
	fadd	s2, s1, s0
	ldr	s1, [sp, 84]
	fmov	s0, 8.0e+0
	fadd	s0, s1, s0
	add	x0, sp, 136
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 136]
	stp	x0, x1, [sp, 120]
	b	.L4035
.L4034:
	ldr	s1, [sp, 80]
	fmov	s0, 1.6e+1
	fsub	s4, s1, s0
	ldr	s1, [sp, 84]
	fmov	s0, 8.0e+0
	fsub	s5, s1, s0
	ldr	s1, [sp, 80]
	ldr	s2, [sp, 72]
	fmov	s0, 2.4e+1
	fmul	s0, s2, s0
	fadd	s6, s1, s0
	ldr	s1, [sp, 84]
	ldr	s2, [sp, 72]
	fmov	s0, 2.4e+1
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	add	x0, sp, 136
	fmov	s3, s0
	fmov	s2, s6
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 136]
	stp	x0, x1, [sp, 120]
.L4035:
	ldr	x0, [sp, 56]
	add	x1, x0, 32
	ldr	x0, [sp, 56]
	add	x2, x0, 180
	add	x4, sp, 120
	add	x3, sp, 104
	add	x0, sp, 80
	mov	w5, 2
	bl	_ZN5ImGui27FindBestWindowPosForPopupExERK6ImVec2S2_PiRK6ImRectS6_24ImGuiPopupPositionPolicy
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	b	.L4036
.L4033:
	adrp	x0, .LC585
	add	x3, x0, :lo12:.LC585
	mov	w2, 10283
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L4036:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4037
	bl	__stack_chk_fail
.L4037:
	ldp	x19, x20, [sp, 16]
	ldr	x21, [sp, 32]
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 21
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2060:
	.size	_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow, .-_ZN5ImGui25FindBestWindowPosForPopupEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC587:
	.string	"[focus] SetNavWindow(\"%s\")\n"
	.text
	.align	2
	.global	_ZN5ImGui12SetNavWindowEP11ImGuiWindow
	.type	_ZN5ImGui12SetNavWindowEP11ImGuiWindow, %function
_ZN5ImGui12SetNavWindowEP11ImGuiWindow:
.LFB2061:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L4039
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4040
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L4041
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	b	.L4042
.L4041:
	adrp	x0, .LC570
	add	x0, x0, :lo12:.LC570
.L4042:
	mov	x1, x0
	adrp	x0, .LC587
	add	x0, x0, :lo12:.LC587
	bl	_ZN5ImGui8DebugLogEPKcz
.L4040:
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 24]
	str	x1, [x0, 18536]
.L4039:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strb	wzr, [x0, 2245]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2245]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strb	w1, [x0, 2244]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2244]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strb	w1, [x0, 2221]
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2061:
	.size	_ZN5ImGui12SetNavWindowEP11ImGuiWindow, .-_ZN5ImGui12SetNavWindowEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC588:
	.string	"void ImGui::SetNavID(ImGuiID, ImGuiNavLayer, ImGuiID, const ImRect&)"
	.align	3
.LC589:
	.string	"g.NavWindow != __null"
	.align	3
.LC590:
	.string	"nav_layer == ImGuiNavLayer_Main || nav_layer == ImGuiNavLayer_Menu"
	.text
	.align	2
	.global	_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect
	.type	_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect, %function
_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect:
.LFB2062:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 44]
	str	w1, [sp, 40]
	str	w2, [sp, 36]
	str	x3, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	bne	.L4044
	adrp	x0, .LC588
	add	x3, x0, :lo12:.LC588
	mov	w2, 10310
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC589
	add	x0, x0, :lo12:.LC589
	bl	__assert_fail
.L4044:
	ldr	w0, [sp, 40]
	cmp	w0, 0
	beq	.L4045
	ldr	w0, [sp, 40]
	cmp	w0, 1
	beq	.L4045
	adrp	x0, .LC588
	add	x3, x0, :lo12:.LC588
	mov	w2, 10311
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC590
	add	x0, x0, :lo12:.LC590
	bl	__assert_fail
.L4045:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [sp, 44]
	str	w1, [x0, 2160]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [sp, 40]
	str	w1, [x0, 2212]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [sp, 36]
	str	w1, [x0, 2164]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 18536]
	ldr	w1, [sp, 40]
	sxtw	x1, w1
	add	x1, x1, 224
	ldr	w2, [sp, 44]
	str	w2, [x0, x1, lsl 2]
	ldr	x0, [sp, 56]
	ldr	x1, [x0, 18536]
	ldr	w0, [sp, 40]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	add	x2, x1, x0
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2, 8]
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2062:
	.size	_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect, .-_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect
	.section	.rodata
	.align	3
.LC591:
	.string	"void ImGui::SetFocusID(ImGuiID, ImGuiWindow*)"
	.text
	.align	2
	.global	_ZN5ImGui10SetFocusIDEjP11ImGuiWindow
	.type	_ZN5ImGui10SetFocusIDEjP11ImGuiWindow, %function
_ZN5ImGui10SetFocusIDEjP11ImGuiWindow:
.LFB2063:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	w0, [sp, 44]
	str	x1, [sp, 32]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bne	.L4047
	adrp	x0, .LC591
	add	x3, x0, :lo12:.LC591
	mov	w2, 10322
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC224
	add	x0, x0, :lo12:.LC224
	bl	__assert_fail
.L4047:
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 32]
	cmp	x1, x0
	beq	.L4048
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui12SetNavWindowEP11ImGuiWindow
.L4048:
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 312]
	str	w0, [sp, 52]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [sp, 44]
	str	w1, [x0, 2160]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [sp, 52]
	str	w1, [x0, 2212]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w1, [x0, 1796]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	str	w1, [x0, 2164]
	ldr	w1, [sp, 52]
	ldr	x0, [sp, 32]
	sxtw	x1, w1
	add	x1, x1, 224
	ldr	w2, [sp, 44]
	str	w2, [x0, x1, lsl 2]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	bne	.L4049
	ldr	x1, [sp, 56]
	mov	x0, 18240
	add	x2, x1, x0
	ldr	w0, [sp, 52]
	ldr	x1, [sp, 32]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	add	x19, x1, x0
	mov	x1, x2
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [x19, 8]
	str	s4, [x19, 12]
	str	s1, [x19, 16]
	str	s0, [x19, 20]
.L4049:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 16144]
	cmp	w0, 5
	bne	.L4050
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2219]
	b	.L4052
.L4050:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2218]
.L4052:
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2063:
	.size	_ZN5ImGui10SetFocusIDEjP11ImGuiWindow, .-_ZN5ImGui10SetFocusIDEjP11ImGuiWindow
	.align	2
	.global	_Z25ImGetDirQuadrantFromDeltaff
	.type	_Z25ImGetDirQuadrantFromDeltaff, %function
_Z25ImGetDirQuadrantFromDeltaff:
.LFB2064:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	str	s1, [sp, 8]
	ldr	s0, [sp, 12]
	fabs	s1, s0
	ldr	s0, [sp, 8]
	fabs	s0, s0
	fcmpe	s1, s0
	bgt	.L4063
	b	.L4066
.L4063:
	ldr	s0, [sp, 12]
	fcmpe	s0, #0.0
	bgt	.L4064
	b	.L4067
.L4064:
	mov	w0, 1
	b	.L4059
.L4067:
	mov	w0, 0
	b	.L4059
.L4066:
	ldr	s0, [sp, 8]
	fcmpe	s0, #0.0
	bgt	.L4065
	b	.L4068
.L4065:
	mov	w0, 3
	b	.L4069
.L4068:
	mov	w0, 2
.L4069:
	nop
.L4059:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2064:
	.size	_Z25ImGetDirQuadrantFromDeltaff, .-_Z25ImGetDirQuadrantFromDeltaff
	.align	2
	.type	_ZL24NavScoreItemDistIntervalffff, %function
_ZL24NavScoreItemDistIntervalffff:
.LFB2065:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	str	s1, [sp, 8]
	str	s2, [sp, 4]
	str	s3, [sp]
	ldr	s1, [sp, 8]
	ldr	s0, [sp, 4]
	fcmpe	s1, s0
	bmi	.L4076
	b	.L4078
.L4076:
	ldr	s1, [sp, 8]
	ldr	s0, [sp, 4]
	fsub	s0, s1, s0
	b	.L4073
.L4078:
	ldr	s1, [sp]
	ldr	s0, [sp, 12]
	fcmpe	s1, s0
	bmi	.L4077
	b	.L4079
.L4077:
	ldr	s1, [sp, 12]
	ldr	s0, [sp]
	fsub	s0, s1, s0
	b	.L4073
.L4079:
	movi	v0.2s, #0
.L4073:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2065:
	.size	_ZL24NavScoreItemDistIntervalffff, .-_ZL24NavScoreItemDistIntervalffff
	.align	2
	.type	_ZL35NavClampRectToVisibleAreaForMoveDiriR6ImRectRKS_, %function
_ZL35NavClampRectToVisibleAreaForMoveDiriR6ImRectRKS_:
.LFB2066:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 44]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	w0, [sp, 44]
	cmp	w0, 0
	beq	.L4081
	ldr	w0, [sp, 44]
	cmp	w0, 1
	bne	.L4082
.L4081:
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 12]
	bl	_Z7ImClampIfET_S0_S0_S0_
	ldr	x0, [sp, 32]
	str	s0, [x0, 4]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 12]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 12]
	bl	_Z7ImClampIfET_S0_S0_S0_
	ldr	x0, [sp, 32]
	str	s0, [x0, 12]
	b	.L4083
.L4082:
	ldr	x0, [sp, 32]
	ldr	s0, [x0]
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 8]
	bl	_Z7ImClampIfET_S0_S0_S0_
	ldr	x0, [sp, 32]
	str	s0, [x0]
	ldr	x0, [sp, 32]
	ldr	s0, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	s1, [x0]
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 8]
	bl	_Z7ImClampIfET_S0_S0_S0_
	ldr	x0, [sp, 32]
	str	s0, [x0, 8]
	nop
.L4083:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2066:
	.size	_ZL35NavClampRectToVisibleAreaForMoveDiriR6ImRectRKS_, .-_ZL35NavClampRectToVisibleAreaForMoveDiriR6ImRectRKS_
	.section	.rodata
	.align	3
.LC592:
	.string	"bool ImGui::NavScoreItem(ImGuiNavItemData*)"
	.align	3
.LC593:
	.string	"(window->Flags | g.NavWindow->Flags) & ImGuiWindowFlags_NavFlattened"
	.text
	.align	2
	.type	_ZN5ImGuiL12NavScoreItemEP16ImGuiNavItemData, %function
_ZN5ImGuiL12NavScoreItemEP16ImGuiNavItemData:
.LFB2067:
	.cfi_startproc
	stp	x29, x30, [sp, -176]!
	.cfi_def_cfa_offset 176
	.cfi_offset 29, -176
	.cfi_offset 30, -168
	mov	x29, sp
	stp	d8, d9, [sp, 16]
	str	d10, [sp, 32]
	.cfi_offset 72, -160
	.cfi_offset 73, -152
	.cfi_offset 74, -144
	str	x0, [sp, 56]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 168]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 120]
	ldr	x0, [sp, 120]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 128]
	ldr	x0, [sp, 120]
	add	x0, x0, 16384
	ldr	w1, [x0, 2212]
	ldr	x0, [sp, 128]
	ldr	w0, [x0, 312]
	cmp	w1, w0
	beq	.L4085
	mov	w0, 0
	b	.L4115
.L4085:
	ldr	x1, [sp, 120]
	mov	x0, 18432
	add	x0, x1, x0
	ldp	x0, x1, [x0, -192]
	stp	x0, x1, [sp, 136]
	ldr	x1, [sp, 120]
	mov	x0, 18432
	add	x0, x1, x0
	ldp	x0, x1, [x0, 224]
	stp	x0, x1, [sp, 152]
	ldr	x0, [sp, 120]
	add	x0, x0, 16384
	ldr	w0, [x0, 2304]
	add	w1, w0, 1
	ldr	x0, [sp, 120]
	add	x0, x0, 16384
	str	w1, [x0, 2304]
	ldr	x0, [sp, 128]
	ldr	x1, [x0, 840]
	ldr	x0, [sp, 120]
	ldr	x0, [x0, 18536]
	cmp	x1, x0
	bne	.L4087
	ldr	x0, [sp, 128]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 120]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	orr	w0, w1, w0
	and	w0, w0, 8388608
	cmp	w0, 0
	bne	.L4088
	adrp	x0, .LC592
	add	x3, x0, :lo12:.LC592
	mov	w2, 10389
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC593
	add	x0, x0, :lo12:.LC593
	bl	__assert_fail
.L4088:
	ldr	x0, [sp, 128]
	add	x0, x0, 536
	add	x1, sp, 136
	bl	_ZNK6ImRect8OverlapsERKS_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4089
	mov	w0, 0
	b	.L4115
.L4089:
	ldr	x0, [sp, 128]
	add	x1, x0, 536
	add	x0, sp, 136
	bl	_ZN6ImRect12ClipWithFullERKS_
.L4087:
	ldr	x0, [sp, 120]
	add	x0, x0, 16384
	ldr	w3, [x0, 2268]
	ldr	x0, [sp, 128]
	add	x1, x0, 536
	add	x0, sp, 136
	mov	x2, x1
	mov	x1, x0
	mov	w0, w3
	bl	_ZL35NavClampRectToVisibleAreaForMoveDiriR6ImRectRKS_
	ldr	s0, [sp, 136]
	ldr	s1, [sp, 144]
	ldr	s2, [sp, 152]
	ldr	s3, [sp, 160]
	bl	_ZL24NavScoreItemDistIntervalffff
	str	s0, [sp, 76]
	ldr	s0, [sp, 140]
	ldr	s1, [sp, 148]
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s2, w0
	bl	_Z6ImLerpIfET_S0_S0_f
	fmov	s8, s0
	ldr	s0, [sp, 140]
	ldr	s1, [sp, 148]
	mov	w0, 52429
	movk	w0, 0x3f4c, lsl 16
	fmov	s2, w0
	bl	_Z6ImLerpIfET_S0_S0_f
	fmov	s9, s0
	ldr	s0, [sp, 156]
	ldr	s1, [sp, 164]
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s2, w0
	bl	_Z6ImLerpIfET_S0_S0_f
	fmov	s10, s0
	ldr	s0, [sp, 156]
	ldr	s1, [sp, 164]
	mov	w0, 52429
	movk	w0, 0x3f4c, lsl 16
	fmov	s2, w0
	bl	_Z6ImLerpIfET_S0_S0_f
	fmov	s3, s0
	fmov	s2, s10
	fmov	s1, s9
	fmov	s0, s8
	bl	_ZL24NavScoreItemDistIntervalffff
	str	s0, [sp, 96]
	ldr	s0, [sp, 96]
	fcmp	s0, #0.0
	beq	.L4090
	ldr	s0, [sp, 76]
	fcmp	s0, #0.0
	beq	.L4090
	mov	w0, 1148846080
	fmov	s1, w0
	ldr	s0, [sp, 76]
	fdiv	s1, s0, s1
	ldr	s0, [sp, 76]
	fcmpe	s0, #0.0
	bgt	.L4117
	b	.L4122
.L4117:
	fmov	s0, 1.0e+0
	b	.L4093
.L4122:
	fmov	s0, -1.0e+0
.L4093:
	fadd	s0, s0, s1
	str	s0, [sp, 76]
.L4090:
	ldr	s0, [sp, 76]
	fabs	s1, s0
	ldr	s0, [sp, 96]
	fabs	s0, s0
	fadd	s0, s1, s0
	str	s0, [sp, 100]
	ldr	s1, [sp, 136]
	ldr	s0, [sp, 144]
	fadd	s1, s1, s0
	ldr	s2, [sp, 152]
	ldr	s0, [sp, 160]
	fadd	s0, s2, s0
	fsub	s0, s1, s0
	str	s0, [sp, 104]
	ldr	s1, [sp, 140]
	ldr	s0, [sp, 148]
	fadd	s1, s1, s0
	ldr	s2, [sp, 156]
	ldr	s0, [sp, 164]
	fadd	s0, s2, s0
	fsub	s0, s1, s0
	str	s0, [sp, 108]
	ldr	s0, [sp, 104]
	fabs	s1, s0
	ldr	s0, [sp, 108]
	fabs	s0, s0
	fadd	s0, s1, s0
	str	s0, [sp, 112]
	str	wzr, [sp, 84]
	str	wzr, [sp, 88]
	str	wzr, [sp, 92]
	ldr	s0, [sp, 76]
	fcmp	s0, #0.0
	bne	.L4094
	ldr	s0, [sp, 96]
	fcmp	s0, #0.0
	beq	.L4095
.L4094:
	ldr	s0, [sp, 76]
	str	s0, [sp, 84]
	ldr	s0, [sp, 96]
	str	s0, [sp, 88]
	ldr	s0, [sp, 100]
	str	s0, [sp, 92]
	ldr	s1, [sp, 96]
	ldr	s0, [sp, 76]
	bl	_Z25ImGetDirQuadrantFromDeltaff
	str	w0, [sp, 80]
	b	.L4096
.L4095:
	ldr	s0, [sp, 104]
	fcmp	s0, #0.0
	bne	.L4097
	ldr	s0, [sp, 108]
	fcmp	s0, #0.0
	beq	.L4098
.L4097:
	ldr	s0, [sp, 104]
	str	s0, [sp, 84]
	ldr	s0, [sp, 108]
	str	s0, [sp, 88]
	ldr	s0, [sp, 112]
	str	s0, [sp, 92]
	ldr	s1, [sp, 108]
	ldr	s0, [sp, 104]
	bl	_Z25ImGetDirQuadrantFromDeltaff
	str	w0, [sp, 80]
	b	.L4096
.L4098:
	ldr	x0, [sp, 120]
	add	x0, x0, 16384
	ldr	w1, [x0, 1828]
	ldr	x0, [sp, 120]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w1, w0
	cset	w0, cs
	and	w0, w0, 255
	str	w0, [sp, 80]
.L4096:
	strb	wzr, [sp, 75]
	ldr	x0, [sp, 120]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	str	w0, [sp, 116]
	ldr	w1, [sp, 80]
	ldr	w0, [sp, 116]
	cmp	w1, w0
	bne	.L4099
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 36]
	ldr	s1, [sp, 100]
	fcmpe	s1, s0
	bmi	.L4118
	b	.L4123
.L4118:
	ldr	x0, [sp, 56]
	ldr	s0, [sp, 100]
	str	s0, [x0, 36]
	ldr	x0, [sp, 56]
	ldr	s0, [sp, 112]
	str	s0, [x0, 40]
	mov	w0, 1
	b	.L4115
.L4123:
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 36]
	ldr	s1, [sp, 100]
	fcmp	s1, s0
	bne	.L4099
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 40]
	ldr	s1, [sp, 112]
	fcmpe	s1, s0
	bmi	.L4119
	b	.L4124
.L4119:
	ldr	x0, [sp, 56]
	ldr	s0, [sp, 112]
	str	s0, [x0, 40]
	mov	w0, 1
	strb	w0, [sp, 75]
	b	.L4099
.L4124:
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 40]
	ldr	s1, [sp, 112]
	fcmp	s1, s0
	bne	.L4099
	ldr	w0, [sp, 116]
	cmp	w0, 2
	beq	.L4104
	ldr	w0, [sp, 116]
	cmp	w0, 3
	bne	.L4105
.L4104:
	ldr	s0, [sp, 96]
	b	.L4106
.L4105:
	ldr	s0, [sp, 76]
.L4106:
	fcmpe	s0, #0.0
	bmi	.L4120
	b	.L4099
.L4120:
	mov	w0, 1
	strb	w0, [sp, 75]
.L4099:
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 36]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmp	s0, s1
	bne	.L4108
	ldr	x0, [sp, 56]
	ldr	s0, [x0, 44]
	ldr	s1, [sp, 92]
	fcmpe	s1, s0
	bmi	.L4121
	b	.L4108
.L4121:
	ldr	x0, [sp, 120]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 1
	bne	.L4108
	ldr	x0, [sp, 120]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	and	w0, w0, 268435456
	cmp	w0, 0
	bne	.L4108
	ldr	w0, [sp, 116]
	cmp	w0, 0
	bne	.L4110
	ldr	s0, [sp, 84]
	fcmpe	s0, #0.0
	bmi	.L4111
.L4110:
	ldr	w0, [sp, 116]
	cmp	w0, 1
	bne	.L4112
	ldr	s0, [sp, 84]
	fcmpe	s0, #0.0
	bgt	.L4111
.L4112:
	ldr	w0, [sp, 116]
	cmp	w0, 2
	bne	.L4113
	ldr	s0, [sp, 88]
	fcmpe	s0, #0.0
	bmi	.L4111
.L4113:
	ldr	w0, [sp, 116]
	cmp	w0, 3
	bne	.L4108
	ldr	s0, [sp, 88]
	fcmpe	s0, #0.0
	bgt	.L4111
	b	.L4108
.L4111:
	ldr	x0, [sp, 56]
	ldr	s0, [sp, 92]
	str	s0, [x0, 44]
	mov	w0, 1
	strb	w0, [sp, 75]
.L4108:
	ldrb	w0, [sp, 75]
.L4115:
	mov	w1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 168]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L4116
	bl	__stack_chk_fail
.L4116:
	mov	w0, w1
	ldp	d8, d9, [sp, 16]
	ldr	d10, [sp, 32]
	ldp	x29, x30, [sp], 176
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 74
	.cfi_restore 72
	.cfi_restore 73
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2067:
	.size	_ZN5ImGuiL12NavScoreItemEP16ImGuiNavItemData, .-_ZN5ImGuiL12NavScoreItemEP16ImGuiNavItemData
	.align	2
	.type	_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData, %function
_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData:
.LFB2068:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 56]
	str	x1, [x0]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 1828]
	ldr	x0, [sp, 40]
	str	w1, [x0, 8]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 1796]
	ldr	x0, [sp, 40]
	str	w1, [x0, 12]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 1832]
	ldr	x0, [sp, 40]
	str	w1, [x0, 32]
	ldr	x1, [sp, 48]
	mov	x0, 18240
	add	x0, x1, x0
	ldr	x19, [sp, 40]
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [x19, 16]
	str	s4, [x19, 20]
	str	s1, [x19, 24]
	str	s0, [x19, 28]
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2068:
	.size	_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData, .-_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData
	.align	2
	.type	_ZN5ImGuiL14NavProcessItemEv, %function
_ZN5ImGuiL14NavProcessItemEv:
.LFB2069:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	str	d8, [sp, 24]
	.cfi_offset 19, -80
	.cfi_offset 72, -72
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	str	w0, [sp, 36]
	ldr	x1, [sp, 48]
	mov	x0, 18432
	add	x0, x1, x0
	ldp	x0, x1, [x0, -192]
	stp	x0, x1, [sp, 72]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1832]
	str	w0, [sp, 40]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2221]
	cmp	w0, 0
	beq	.L4127
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 2212]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 312]
	cmp	w1, w0
	bne	.L4127
	ldr	w0, [sp, 40]
	and	w0, w0, 4
	cmp	w0, 0
	bne	.L4127
	ldr	w0, [sp, 40]
	and	w0, w0, 16
	cmp	w0, 0
	cset	w0, eq
	strb	w0, [sp, 33]
	ldrb	w0, [sp, 33]
	cmp	w0, 0
	bne	.L4128
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2224]
	cmp	w0, 0
	bne	.L4129
.L4128:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [sp, 36]
	str	w1, [x0, 2224]
	ldr	x1, [sp, 48]
	mov	x0, 18432
	add	x0, x1, x0
	add	x19, x0, 180
	add	x0, sp, 72
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [x19]
	str	s4, [x19, 4]
	str	s1, [x19, 8]
	str	s0, [x19, 12]
.L4129:
	ldrb	w0, [sp, 33]
	cmp	w0, 0
	beq	.L4127
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	strb	wzr, [x0, 2221]
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
.L4127:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2245]
	cmp	w0, 0
	beq	.L4130
	ldr	w0, [sp, 40]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L4131
	ldr	w1, [sp, 40]
	mov	w0, 5
	and	w0, w1, w0
	cmp	w0, 0
	bne	.L4131
	mov	w0, 1
	b	.L4132
.L4131:
	mov	w0, 0
.L4132:
	strb	w0, [sp, 34]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 1024
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 35]
	ldrb	w0, [sp, 35]
	cmp	w0, 0
	beq	.L4133
	ldrb	w0, [sp, 34]
	cmp	w0, 0
	bne	.L4134
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 512
	cmp	w0, 0
	beq	.L4130
.L4134:
	ldr	w0, [sp, 36]
	bl	_ZN5ImGuiL31NavProcessItemForTabbingRequestEj
	b	.L4130
.L4133:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L4135
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 16
	cmp	w0, 0
	beq	.L4130
.L4135:
	ldr	w0, [sp, 40]
	and	w0, w0, 4
	cmp	w0, 0
	bne	.L4130
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	bne	.L4136
	ldr	x1, [sp, 48]
	mov	x0, 18704
	add	x0, x1, x0
	b	.L4137
.L4136:
	ldr	x1, [sp, 48]
	mov	x0, 18800
	add	x0, x1, x0
.L4137:
	str	x0, [sp, 64]
	ldrb	w0, [sp, 35]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4130
	ldr	x0, [sp, 64]
	bl	_ZN5ImGuiL12NavScoreItemEP16ImGuiNavItemData
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4138
	ldr	x0, [sp, 64]
	bl	_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData
.L4138:
	mov	w0, 13107
	movk	w0, 0x3f33, lsl 16
	fmov	s0, w0
	str	s0, [sp, 44]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L4139
	ldr	x0, [sp, 56]
	add	x0, x0, 536
	add	x1, sp, 72
	bl	_ZNK6ImRect8OverlapsERKS_
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4139
	mov	w0, 1
	b	.L4140
.L4139:
	mov	w0, 0
.L4140:
	cmp	w0, 0
	beq	.L4130
	ldr	s0, [sp, 84]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 540]
	ldr	x0, [sp, 56]
	ldr	s2, [x0, 548]
	bl	_Z7ImClampIfET_S0_S0_S0_
	fmov	s8, s0
	ldr	s0, [sp, 76]
	ldr	x0, [sp, 56]
	ldr	s1, [x0, 540]
	ldr	x0, [sp, 56]
	ldr	s2, [x0, 548]
	bl	_Z7ImClampIfET_S0_S0_S0_
	fsub	s1, s8, s0
	ldr	s2, [sp, 84]
	ldr	s0, [sp, 76]
	fsub	s0, s2, s0
	mov	w0, 13107
	movk	w0, 0x3f33, lsl 16
	fmov	s2, w0
	fmul	s0, s0, s2
	fcmpe	s1, s0
	cset	w0, ge
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4130
	ldr	x1, [sp, 48]
	mov	x0, 18752
	add	x0, x1, x0
	bl	_ZN5ImGuiL12NavScoreItemEP16ImGuiNavItemData
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4130
	ldr	x1, [sp, 48]
	mov	x0, 18752
	add	x0, x1, x0
	bl	_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData
.L4130:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L4144
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	beq	.L4142
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui12SetNavWindowEP11ImGuiWindow
.L4142:
	ldr	x0, [sp, 56]
	ldr	w1, [x0, 312]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 2212]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 1796]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 2164]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2216]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 312]
	ldr	x1, [sp, 56]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	add	x19, x1, x0
	add	x0, sp, 72
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [x19, 8]
	str	s4, [x19, 12]
	str	s1, [x19, 16]
	str	s0, [x19, 20]
.L4144:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4143
	bl	__stack_chk_fail
.L4143:
	ldr	d8, [sp, 24]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2069:
	.size	_ZN5ImGuiL14NavProcessItemEv, .-_ZN5ImGuiL14NavProcessItemEv
	.align	2
	.type	_ZN5ImGuiL31NavProcessItemForTabbingRequestEj, %function
_ZN5ImGuiL31NavProcessItemForTabbingRequestEj:
.LFB2070:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x1, [sp, 32]
	mov	x0, 18704
	add	x0, x1, x0
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2308]
	cmp	w0, 1
	bne	.L4146
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2472]
	cmp	w0, 0
	bne	.L4147
	ldr	x1, [sp, 32]
	mov	x0, 18848
	add	x0, x1, x0
	bl	_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData
.L4147:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2312]
	sub	w1, w0, #1
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2312]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2312]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4148
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData
	b	.L4152
.L4148:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bne	.L4152
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	mov	w1, 1
	str	w1, [x0, 2312]
	b	.L4152
.L4146:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2308]
	cmn	w0, #1
	bne	.L4150
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bne	.L4151
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	cmp	w0, 0
	beq	.L4152
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	strb	wzr, [x0, 2245]
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	b	.L4152
.L4151:
	ldr	x0, [sp, 40]
	bl	_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData
	b	.L4152
.L4150:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2308]
	cmp	w0, 0
	bne	.L4152
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2472]
	cmp	w0, 0
	bne	.L4152
	ldr	x1, [sp, 32]
	mov	x0, 18848
	add	x0, x1, x0
	bl	_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData
.L4152:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2070:
	.size	_ZN5ImGuiL31NavProcessItemForTabbingRequestEj, .-_ZN5ImGuiL31NavProcessItemForTabbingRequestEj
	.align	2
	.global	_ZN5ImGui28NavMoveRequestButNoResultYetEv
	.type	_ZN5ImGui28NavMoveRequestButNoResultYetEv, %function
_ZN5ImGui28NavMoveRequestButNoResultYetEv:
.LFB2071:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2245]
	cmp	w0, 0
	beq	.L4154
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 2328]
	cmp	w0, 0
	bne	.L4154
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 2424]
	cmp	w0, 0
	bne	.L4154
	mov	w0, 1
	b	.L4155
.L4154:
	mov	w0, 0
.L4155:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2071:
	.size	_ZN5ImGui28NavMoveRequestButNoResultYetEv, .-_ZN5ImGui28NavMoveRequestButNoResultYetEv
	.section	.rodata
	.align	3
.LC594:
	.string	"void ImGui::NavMoveRequestSubmit(ImGuiDir, ImGuiDir, ImGuiNavMoveFlags, ImGuiScrollFlags)"
	.text
	.align	2
	.global	_ZN5ImGui20NavMoveRequestSubmitEiiii
	.type	_ZN5ImGui20NavMoveRequestSubmitEiiii, %function
_ZN5ImGui20NavMoveRequestSubmitEiiii:
.LFB2072:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	str	w3, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	bne	.L4158
	adrp	x0, .LC594
	add	x3, x0, :lo12:.LC594
	mov	w2, 10643
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC589
	add	x0, x0, :lo12:.LC589
	bl	__assert_fail
.L4158:
	ldr	w0, [sp, 20]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L4159
	ldr	w0, [sp, 20]
	orr	w0, w0, 16
	str	w0, [sp, 20]
.L4159:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2245]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2245]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strb	w1, [x0, 2244]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 28]
	str	w1, [x0, 2260]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 28]
	str	w1, [x0, 2264]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 24]
	str	w1, [x0, 2268]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 20]
	str	w1, [x0, 2248]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 16]
	str	w1, [x0, 2252]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strb	wzr, [x0, 2246]
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 3608]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	w1, [x0, 2256]
	ldr	x1, [sp, 40]
	mov	x0, 18704
	add	x0, x1, x0
	bl	_ZN16ImGuiNavItemData5ClearEv
	ldr	x1, [sp, 40]
	mov	x0, 18752
	add	x0, x1, x0
	bl	_ZN16ImGuiNavItemData5ClearEv
	ldr	x1, [sp, 40]
	mov	x0, 18800
	add	x0, x1, x0
	bl	_ZN16ImGuiNavItemData5ClearEv
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	wzr, [x0, 2312]
	ldr	x1, [sp, 40]
	mov	x0, 18848
	add	x0, x1, x0
	bl	_ZN16ImGuiNavItemData5ClearEv
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2072:
	.size	_ZN5ImGui20NavMoveRequestSubmitEiiii, .-_ZN5ImGui20NavMoveRequestSubmitEiiii
	.align	2
	.global	_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData
	.type	_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData, %function
_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData:
.LFB2073:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	strb	wzr, [x0, 2245]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGuiL20NavApplyItemToResultEP16ImGuiNavItemData
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2073:
	.size	_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData, .-_ZN5ImGui33NavMoveRequestResolveWithLastItemEP16ImGuiNavItemData
	.align	2
	.global	_ZN5ImGui20NavMoveRequestCancelEv
	.type	_ZN5ImGui20NavMoveRequestCancelEv, %function
_ZN5ImGui20NavMoveRequestCancelEv:
.LFB2074:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	strb	wzr, [x0, 2245]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2245]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	strb	w1, [x0, 2244]
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2074:
	.size	_ZN5ImGui20NavMoveRequestCancelEv, .-_ZN5ImGui20NavMoveRequestCancelEv
	.section	.rodata
	.align	3
.LC595:
	.string	"void ImGui::NavMoveRequestForward(ImGuiDir, ImGuiDir, ImGuiNavMoveFlags, ImGuiScrollFlags)"
	.align	3
.LC596:
	.string	"g.NavMoveForwardToNextFrame == false"
	.text
	.align	2
	.global	_ZN5ImGui21NavMoveRequestForwardEiiii
	.type	_ZN5ImGui21NavMoveRequestForwardEiiii, %function
_ZN5ImGui21NavMoveRequestForwardEiiii:
.LFB2075:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	str	w3, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2246]
	cmp	w0, 0
	beq	.L4163
	adrp	x0, .LC595
	add	x3, x0, :lo12:.LC595
	mov	w2, 10683
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC596
	add	x0, x0, :lo12:.LC596
	bl	__assert_fail
.L4163:
	bl	_ZN5ImGui20NavMoveRequestCancelEv
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2246]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 28]
	str	w1, [x0, 2260]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 24]
	str	w1, [x0, 2268]
	ldr	w0, [sp, 20]
	orr	w1, w0, 128
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	w1, [x0, 2248]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 16]
	str	w1, [x0, 2252]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2075:
	.size	_ZN5ImGui21NavMoveRequestForwardEiiii, .-_ZN5ImGui21NavMoveRequestForwardEiiii
	.section	.rodata
	.align	3
.LC597:
	.string	"void ImGui::NavMoveRequestTryWrapping(ImGuiWindow*, ImGuiNavMoveFlags)"
	.align	3
.LC598:
	.string	"wrap_flags != 0"
	.text
	.align	2
	.global	_ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi
	.type	_ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi, %function
_ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi:
.LFB2076:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	bne	.L4165
	adrp	x0, .LC597
	add	x3, x0, :lo12:.LC597
	mov	w2, 10697
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC598
	add	x0, x0, :lo12:.LC598
	bl	__assert_fail
.L4165:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	bne	.L4167
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2245]
	cmp	w0, 0
	beq	.L4167
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 0
	bne	.L4167
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [x0, 2248]
	ldr	w0, [sp, 20]
	orr	w1, w1, w0
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	w1, [x0, 2248]
.L4167:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2076:
	.size	_ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi, .-_ZN5ImGui25NavMoveRequestTryWrappingEP11ImGuiWindowi
	.align	2
	.type	_ZN5ImGuiL35NavSaveLastChildNavWindowIntoParentEP11ImGuiWindow, %function
_ZN5ImGuiL35NavSaveLastChildNavWindowIntoParentEP11ImGuiWindow:
.LFB2077:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	x0, [sp, 24]
	b	.L4169
.L4171:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 840]
	str	x0, [sp, 24]
.L4169:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L4170
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L4170
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 12]
	mov	w0, 335544320
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L4171
.L4170:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L4173
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 8]
	cmp	x1, x0
	beq	.L4173
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 8]
	str	x1, [x0, 888]
.L4173:
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2077:
	.size	_ZN5ImGuiL35NavSaveLastChildNavWindowIntoParentEP11ImGuiWindow, .-_ZN5ImGuiL35NavSaveLastChildNavWindowIntoParentEP11ImGuiWindow
	.align	2
	.type	_ZN5ImGuiL28NavRestoreLastChildNavWindowEP11ImGuiWindow, %function
_ZN5ImGuiL28NavRestoreLastChildNavWindowEP11ImGuiWindow:
.LFB2078:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 888]
	cmp	x0, 0
	beq	.L4175
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 888]
	ldrb	w0, [x0, 151]
	cmp	w0, 0
	beq	.L4175
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 888]
	b	.L4176
.L4175:
	ldr	x0, [sp, 8]
.L4176:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2078:
	.size	_ZN5ImGuiL28NavRestoreLastChildNavWindowEP11ImGuiWindow, .-_ZN5ImGuiL28NavRestoreLastChildNavWindowEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC599:
	.string	"[focus] NavRestoreLayer: from \"%s\" to SetNavWindow(\"%s\")\n"
	.text
	.align	2
	.type	_ZN5ImGuiL15NavRestoreLayerE13ImGuiNavLayer, %function
_ZN5ImGuiL15NavRestoreLayerE13ImGuiNavLayer:
.LFB2079:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bne	.L4178
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	bl	_ZN5ImGuiL28NavRestoreLastChildNavWindowEP11ImGuiWindow
	mov	x1, x0
	ldr	x0, [sp, 40]
	str	x1, [x0, 18536]
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L4178
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4178
	ldr	x0, [sp, 48]
	ldr	x1, [x0]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0]
	mov	x2, x0
	adrp	x0, .LC599
	add	x0, x0, :lo12:.LC599
	bl	_ZN5ImGui8DebugLogEPKcz
.L4178:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 56]
	ldr	w1, [sp, 28]
	ldr	x0, [sp, 56]
	sxtw	x1, w1
	add	x1, x1, 224
	ldr	w0, [x0, x1, lsl 2]
	cmp	w0, 0
	beq	.L4179
	ldr	w1, [sp, 28]
	ldr	x0, [sp, 56]
	sxtw	x1, w1
	add	x1, x1, 224
	ldr	w4, [x0, x1, lsl 2]
	ldr	w0, [sp, 28]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	ldr	x1, [sp, 56]
	add	x0, x1, x0
	add	x0, x0, 8
	mov	x3, x0
	mov	w2, 0
	ldr	w1, [sp, 28]
	mov	w0, w4
	bl	_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect
	b	.L4181
.L4179:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 28]
	str	w1, [x0, 2212]
	mov	w1, 1
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui13NavInitWindowEP11ImGuiWindowb
.L4181:
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2079:
	.size	_ZN5ImGuiL15NavRestoreLayerE13ImGuiNavLayer, .-_ZN5ImGuiL15NavRestoreLayerE13ImGuiNavLayer
	.align	2
	.type	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv, %function
_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv:
.LFB2080:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	strb	wzr, [x0, 2218]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2217]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2217]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	strb	w1, [x0, 2219]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2080:
	.size	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv, .-_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv
	.section	.rodata
	.align	3
.LC600:
	.string	"void ImGui::NavUpdateAnyRequestFlag()"
	.text
	.align	2
	.type	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv, %function
_ZN5ImGuiL23NavUpdateAnyRequestFlagEv:
.LFB2081:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2245]
	cmp	w0, 0
	bne	.L4184
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2221]
	cmp	w0, 0
	beq	.L4185
.L4184:
	mov	w1, 1
	b	.L4186
.L4185:
	mov	w1, 0
.L4186:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	strb	w1, [x0, 2220]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2220]
	cmp	w0, 0
	beq	.L4188
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	bne	.L4188
	adrp	x0, .LC600
	add	x3, x0, :lo12:.LC600
	mov	w2, 10757
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC589
	add	x0, x0, :lo12:.LC589
	bl	__assert_fail
.L4188:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2081:
	.size	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv, .-_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	.section	.rodata
	.align	3
.LC601:
	.string	"void ImGui::NavInitWindow(ImGuiWindow*, bool)"
	.align	3
.LC602:
	.string	"window == g.NavWindow"
	.align	3
.LC603:
	.string	"[nav] NavInitRequest: from NavInitWindow(), init_for_nav=%d, window=\"%s\", layer=%d\n"
	.text
	.align	2
	.global	_ZN5ImGui13NavInitWindowEP11ImGuiWindowb
	.type	_ZN5ImGui13NavInitWindowEP11ImGuiWindowb, %function
_ZN5ImGui13NavInitWindowEP11ImGuiWindowb:
.LFB2082:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	str	x0, [sp, 40]
	strb	w1, [sp, 39]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	beq	.L4190
	adrp	x0, .LC601
	add	x3, x0, :lo12:.LC601
	mov	w2, 10764
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC602
	add	x0, x0, :lo12:.LC602
	bl	__assert_fail
.L4190:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 262144
	cmp	w0, 0
	beq	.L4191
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 2160]
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 936]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 2164]
	b	.L4189
.L4191:
	strb	wzr, [sp, 63]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	beq	.L4193
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	bne	.L4193
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 896]
	cmp	w0, 0
	beq	.L4193
	ldrb	w0, [sp, 39]
	cmp	w0, 0
	beq	.L4194
.L4193:
	mov	w0, 1
	strb	w0, [sp, 63]
.L4194:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L4195
	ldrb	w1, [sp, 63]
	ldr	x0, [sp, 40]
	ldr	x2, [x0]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	mov	w3, w0
	adrp	x0, .LC603
	add	x0, x0, :lo12:.LC603
	bl	_ZN5ImGui8DebugLogEPKcz
.L4195:
	ldrb	w0, [sp, 63]
	cmp	w0, 0
	beq	.L4196
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w19, [x0, 2212]
	ldr	x0, [sp, 40]
	ldr	w20, [x0, 936]
	add	x0, sp, 72
	bl	_ZN6ImRectC1Ev
	add	x0, sp, 72
	mov	x3, x0
	mov	w2, w20
	mov	w1, w19
	mov	w0, 0
	bl	_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2221]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	strb	wzr, [x0, 2222]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	wzr, [x0, 2224]
	add	x0, sp, 72
	bl	_ZN6ImRectC1Ev
	ldr	x1, [sp, 64]
	mov	x0, 18432
	add	x0, x1, x0
	add	x2, x0, 180
	ldp	x0, x1, [sp, 72]
	stp	x0, x1, [x2]
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	b	.L4189
.L4196:
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 896]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 2160]
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 936]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	str	w1, [x0, 2164]
.L4189:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4197
	bl	__stack_chk_fail
.L4197:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2082:
	.size	_ZN5ImGui13NavInitWindowEP11ImGuiWindowb, .-_ZN5ImGui13NavInitWindowEP11ImGuiWindowb
	.align	2
	.type	_ZN5ImGuiL22NavCalcPreferredRefPosEv, %function
_ZN5ImGuiL22NavCalcPreferredRefPosEv:
.LFB2083:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x19, [sp, 16]
	stp	d8, d9, [sp, 32]
	str	d10, [sp, 24]
	.cfi_offset 19, -96
	.cfi_offset 72, -80
	.cfi_offset 73, -72
	.cfi_offset 74, -88
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 72]
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	cmp	w0, 0
	bne	.L4199
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2219]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4199
	ldr	x0, [sp, 72]
	cmp	x0, 0
	bne	.L4200
.L4199:
	ldr	x0, [sp, 64]
	add	x0, x0, 3580
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4201
	ldr	x0, [sp, 64]
	add	x0, x0, 3580
	b	.L4202
.L4201:
	ldr	x1, [sp, 64]
	mov	x0, 19352
	add	x0, x1, x0
.L4202:
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	s1, [sp, 56]
	fmov	s0, 1.0e+0
	fadd	s0, s1, s0
	ldr	s1, [sp, 60]
	add	x0, sp, 88
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 88]
	b	.L4203
.L4200:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	ldr	x1, [sp, 72]
	add	x0, x1, x0
	add	x0, x0, 8
	mov	x1, x0
	ldr	x0, [sp, 72]
	bl	_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 88]
	str	s4, [sp, 92]
	str	s1, [sp, 96]
	str	s0, [sp, 100]
	ldr	x0, [sp, 72]
	ldr	w1, [x0, 576]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	beq	.L4204
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 116]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmp	s0, s1
	bne	.L4205
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 120]
	mov	w0, 2139095039
	fmov	s1, w0
	fcmp	s0, s1
	beq	.L4204
.L4205:
	ldr	x0, [sp, 72]
	bl	_ZL38CalcNextScrollFromScrollTargetAndClampP11ImGuiWindow
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	ldr	x0, [sp, 72]
	add	x0, x0, 100
	add	x1, sp, 48
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	add	x1, sp, 56
	add	x0, sp, 88
	bl	_ZN6ImRect9TranslateERK6ImVec2
.L4204:
	ldr	s8, [sp, 88]
	ldr	x0, [sp, 64]
	ldr	s1, [x0, 14364]
	fmov	s0, 4.0e+0
	fmul	s9, s1, s0
	add	x0, sp, 88
	bl	_ZNK6ImRect8GetWidthEv
	fmov	s1, s0
	fmov	s0, s9
	bl	_Z5ImMinIfET_S0_S0_
	fadd	s9, s8, s0
	ldr	s8, [sp, 100]
	ldr	x0, [sp, 64]
	ldr	s10, [x0, 14368]
	add	x0, sp, 88
	bl	_ZNK6ImRect9GetHeightEv
	fmov	s1, s0
	fmov	s0, s10
	bl	_Z5ImMinIfET_S0_S0_
	fsub	s0, s8, s0
	add	x0, sp, 48
	fmov	s1, s0
	fmov	s0, s9
	bl	_ZN6ImVec2C1Eff
	bl	_ZN5ImGui15GetMainViewportEv
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	add	x19, x0, 4
	ldr	x0, [sp, 80]
	add	x2, x0, 4
	ldr	x0, [sp, 80]
	add	x0, x0, 12
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s1, w0
	add	x0, sp, 48
	fmov	s0, w1
	mov	x1, x19
	bl	_ZL7ImClampRK6ImVec2S1_S_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	add	x0, sp, 56
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	nop
.L4203:
	mov	x1, x0
	lsr	w1, w1, 0
	lsr	x0, x0, 32
	fmov	s0, w1
	fmov	s1, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4206
	bl	__stack_chk_fail
.L4206:
	ldp	d8, d9, [sp, 32]
	ldr	d10, [sp, 24]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 74
	.cfi_restore 72
	.cfi_restore 73
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2083:
	.size	_ZN5ImGuiL22NavCalcPreferredRefPosEv, .-_ZN5ImGuiL22NavCalcPreferredRefPosEv
	.align	2
	.global	_ZN5ImGui24GetNavTweakPressedAmountE9ImGuiAxis
	.type	_ZN5ImGui24GetNavTweakPressedAmountE9ImGuiAxis, %function
_ZN5ImGui24GetNavTweakPressedAmountE9ImGuiAxis:
.LFB2084:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -80
	str	w0, [sp, 44]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 80]
	add	x1, sp, 64
	add	x0, sp, 60
	mov	x2, x1
	mov	x1, x0
	mov	w0, 8
	bl	_ZN5ImGui22GetTypematicRepeatRateEiPfS0_
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 3
	bne	.L4208
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bne	.L4209
	mov	w0, 623
	b	.L4210
.L4209:
	mov	w0, 625
.L4210:
	str	w0, [sp, 68]
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bne	.L4211
	mov	w0, 624
	b	.L4212
.L4211:
	mov	w0, 626
.L4212:
	str	w0, [sp, 72]
	b	.L4213
.L4208:
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bne	.L4214
	mov	w0, 513
	b	.L4215
.L4214:
	mov	w0, 515
.L4215:
	str	w0, [sp, 68]
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bne	.L4216
	mov	w0, 514
	b	.L4217
.L4216:
	mov	w0, 516
.L4217:
	str	w0, [sp, 72]
.L4213:
	ldr	s0, [sp, 60]
	ldr	s1, [sp, 64]
	ldr	w0, [sp, 72]
	bl	_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff
	scvtf	s8, w0
	ldr	s0, [sp, 60]
	ldr	s1, [sp, 64]
	ldr	w0, [sp, 68]
	bl	_ZN5ImGui19GetKeyPressedAmountE8ImGuiKeyff
	scvtf	s0, w0
	fsub	s0, s8, s0
	str	s0, [sp, 76]
	ldr	s0, [sp, 76]
	fcmp	s0, #0.0
	beq	.L4218
	ldr	w0, [sp, 68]
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4218
	ldr	w0, [sp, 72]
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4218
	mov	w0, 1
	b	.L4219
.L4218:
	mov	w0, 0
.L4219:
	cmp	w0, 0
	beq	.L4220
	str	wzr, [sp, 76]
.L4220:
	ldr	s0, [sp, 76]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4222
	bl	__stack_chk_fail
.L4222:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2084:
	.size	_ZN5ImGui24GetNavTweakPressedAmountE9ImGuiAxis, .-_ZN5ImGui24GetNavTweakPressedAmountE9ImGuiAxis
	.section	.rodata
	.align	3
.LC604:
	.string	"void ImGui::NavUpdate()"
	.align	3
.LC605:
	.string	"g.NavLayer == ImGuiNavLayer_Main || g.NavLayer == ImGuiNavLayer_Menu"
	.align	3
.LC606:
	.string	"g.NavActivateDownId == g.NavActivateId"
	.text
	.align	2
	.type	_ZN5ImGuiL9NavUpdateEv, %function
_ZN5ImGuiL9NavUpdateEv:
.LFB2085:
	.cfi_startproc
	stp	x29, x30, [sp, -224]!
	.cfi_def_cfa_offset 224
	.cfi_offset 29, -224
	.cfi_offset 30, -216
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -208
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 216]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	add	x0, x0, 8
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	strb	wzr, [x0, 211]
	ldr	x0, [sp, 104]
	ldr	w0, [x0]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4224
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 4]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L4224
	mov	w0, 1
	b	.L4225
.L4224:
	mov	w0, 0
.L4225:
	strb	w0, [sp, 46]
	adrp	x0, .LC7
	add	x1, x0, :lo12:.LC7
	add	x0, sp, 184
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4226
	add	x0, sp, 184
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	str	x0, [sp, 80]
	ldr	x0, [sp, 112]
	add	x0, x0, 32
	str	x0, [sp, 120]
	b	.L4227
.L4229:
	ldr	x0, [sp, 80]
	ldr	w0, [x0]
	str	w0, [sp, 52]
	ldr	w0, [sp, 52]
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4228
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 3
	str	w1, [x0, 2208]
.L4228:
	ldr	x0, [sp, 80]
	add	x0, x0, 4
	str	x0, [sp, 80]
.L4227:
	ldr	x1, [sp, 80]
	ldr	x0, [sp, 120]
	cmp	x1, x0
	bne	.L4229
.L4226:
	ldr	x0, [sp, 104]
	ldr	w0, [x0]
	and	w0, w0, 1
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 47]
	adrp	x0, .LC8
	add	x1, x0, :lo12:.LC8
	add	x0, sp, 152
	ldr	q0, [x1]
	str	q0, [x0]
	ldr	q0, [x1, 12]
	str	q0, [x0, 12]
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4230
	add	x0, sp, 152
	str	x0, [sp, 128]
	ldr	x0, [sp, 128]
	str	x0, [sp, 88]
	ldr	x0, [sp, 128]
	add	x0, x0, 28
	str	x0, [sp, 136]
	b	.L4231
.L4233:
	ldr	x0, [sp, 88]
	ldr	w0, [x0]
	str	w0, [sp, 56]
	ldr	w0, [sp, 56]
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4232
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 2
	str	w1, [x0, 2208]
.L4232:
	ldr	x0, [sp, 88]
	add	x0, x0, 4
	str	x0, [sp, 88]
.L4231:
	ldr	x1, [sp, 88]
	ldr	x0, [sp, 136]
	cmp	x1, x0
	bne	.L4233
.L4230:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2224]
	cmp	w0, 0
	beq	.L4234
	bl	_ZN5ImGui25NavInitRequestApplyResultEv
.L4234:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	wzr, [x0, 2221]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	wzr, [x0, 2222]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2224]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2188]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2244]
	cmp	w0, 0
	beq	.L4235
	bl	_ZN5ImGui25NavMoveRequestApplyResultEv
.L4235:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2312]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	wzr, [x0, 2245]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2245]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	w1, [x0, 2244]
	strb	wzr, [sp, 45]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2217]
	cmp	w0, 0
	beq	.L4236
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2216]
	cmp	w0, 0
	beq	.L4236
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4236
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2219]
	cmp	w0, 0
	beq	.L4236
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4236
	mov	w0, 1
	strb	w0, [sp, 45]
.L4236:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	wzr, [x0, 2217]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 0
	beq	.L4237
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 1
	beq	.L4237
	adrp	x0, .LC604
	add	x3, x0, :lo12:.LC604
	mov	w2, 10887
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC605
	add	x0, x0, :lo12:.LC605
	bl	__assert_fail
.L4237:
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4238
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	bl	_ZN5ImGuiL35NavSaveLastChildNavWindowIntoParentEP11ImGuiWindow
.L4238:
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4239
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0, 888]
	cmp	x0, 0
	beq	.L4239
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 0
	bne	.L4239
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	str	xzr, [x0, 888]
.L4239:
	bl	_ZN5ImGuiL18NavUpdateWindowingEv
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	bne	.L4240
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4241
.L4240:
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4241
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	and	w0, w0, 262144
	cmp	w0, 0
	bne	.L4241
	mov	w1, 1
	b	.L4242
.L4241:
	mov	w1, 0
.L4242:
	ldr	x0, [sp, 104]
	strb	w1, [x0, 213]
	ldr	x0, [sp, 104]
	ldrb	w0, [x0, 213]
	cmp	w0, 0
	beq	.L4243
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w0, 0
	beq	.L4243
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4244
.L4243:
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L4245
.L4244:
	mov	w1, 1
	b	.L4246
.L4245:
	mov	w1, 0
.L4246:
	ldr	x0, [sp, 104]
	strb	w1, [x0, 214]
	bl	_ZN5ImGuiL22NavUpdateCancelRequestEv
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2180]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2180]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2176]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2176]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2172]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2172]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2168]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2184]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w0, 0
	beq	.L4247
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4247
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4247
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4247
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	and	w0, w0, 262144
	cmp	w0, 0
	bne	.L4247
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4248
	mov	w0, 524
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4249
.L4248:
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4250
	mov	w0, 622
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4250
.L4249:
	mov	w0, 1
	b	.L4251
.L4250:
	mov	w0, 0
.L4251:
	strb	w0, [sp, 48]
	ldrb	w0, [sp, 48]
	cmp	w0, 0
	beq	.L4252
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4253
	mov	w1, 0
	mov	w0, 524
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4254
.L4253:
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4252
	mov	w1, 0
	mov	w0, 622
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4252
.L4254:
	mov	w0, 1
	b	.L4255
.L4252:
	mov	w0, 0
.L4255:
	strb	w0, [sp, 49]
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4256
	mov	w0, 525
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4257
.L4256:
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4258
	mov	w0, 621
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4258
.L4257:
	mov	w0, 1
	b	.L4259
.L4258:
	mov	w0, 0
.L4259:
	strb	w0, [sp, 50]
	ldrb	w0, [sp, 50]
	cmp	w0, 0
	beq	.L4260
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4261
	mov	w1, 0
	mov	w0, 525
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4262
.L4261:
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4260
	mov	w1, 0
	mov	w0, 621
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4260
.L4262:
	mov	w0, 1
	b	.L4263
.L4260:
	mov	w0, 0
.L4263:
	strb	w0, [sp, 51]
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	bne	.L4264
	ldrb	w0, [sp, 49]
	cmp	w0, 0
	beq	.L4264
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2160]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2168]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 2
	str	w1, [x0, 2184]
.L4264:
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L4265
	ldr	x0, [sp, 96]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w1, w0
	bne	.L4266
.L4265:
	ldrb	w0, [sp, 51]
	cmp	w0, 0
	beq	.L4266
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2160]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2180]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 1
	str	w1, [x0, 2184]
.L4266:
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L4267
	ldr	x0, [sp, 96]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w1, w0
	bne	.L4268
.L4267:
	ldrb	w0, [sp, 48]
	cmp	w0, 0
	beq	.L4268
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2160]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2172]
.L4268:
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L4269
	ldr	x0, [sp, 96]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w1, w0
	bne	.L4247
.L4269:
	ldrb	w0, [sp, 49]
	cmp	w0, 0
	beq	.L4247
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2160]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2176]
.L4247:
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4270
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	and	w0, w0, 262144
	cmp	w0, 0
	beq	.L4270
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2218]
.L4270:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2168]
	cmp	w0, 0
	beq	.L4271
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2172]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2168]
	cmp	w1, w0
	beq	.L4271
	adrp	x0, .LC604
	add	x3, x0, :lo12:.LC604
	mov	w2, 10932
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC606
	add	x0, x0, :lo12:.LC606
	bl	__assert_fail
.L4271:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2200]
	cmp	w0, 0
	beq	.L4272
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2204]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L4273
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2200]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2180]
	b	.L4274
.L4273:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2200]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2176]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2176]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2172]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2172]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2168]
.L4274:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2204]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2184]
.L4272:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2200]
	bl	_ZN5ImGuiL26NavUpdateCreateMoveRequestEv
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmn	w0, #1
	bne	.L4275
	bl	_ZN5ImGuiL29NavUpdateCreateTabbingRequestEv
.L4275:
	bl	_ZN5ImGuiL23NavUpdateAnyRequestFlagEv
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	wzr, [x0, 2216]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4276
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	and	w0, w0, 262144
	cmp	w0, 0
	bne	.L4276
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4276
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 144]
	ldr	x0, [sp, 144]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	mov	w0, 1120403456
	fmov	s1, w0
	fmul	s1, s0, s1
	ldr	x0, [sp, 104]
	ldr	s0, [x0, 16]
	fmul	s1, s1, s0
	fmov	s0, 5.0e-1
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	scvtf	s0, s0
	str	s0, [sp, 60]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	str	w0, [sp, 64]
	ldr	x0, [sp, 144]
	ldrsh	w0, [x0, 316]
	cmp	w0, 0
	bne	.L4277
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 321]
	cmp	w0, 0
	beq	.L4277
	ldr	w0, [sp, 64]
	cmn	w0, #1
	beq	.L4277
	ldr	w0, [sp, 64]
	cmp	w0, 0
	beq	.L4278
	ldr	w0, [sp, 64]
	cmp	w0, 1
	bne	.L4279
.L4278:
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 100]
	ldr	w0, [sp, 64]
	cmp	w0, 0
	bne	.L4280
	fmov	s0, -1.0e+0
	b	.L4281
.L4280:
	fmov	s0, 1.0e+0
.L4281:
	ldr	s2, [sp, 60]
	fmul	s0, s0, s2
	fadd	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui10SetScrollXEP11ImGuiWindowf
.L4279:
	ldr	w0, [sp, 64]
	cmp	w0, 2
	beq	.L4282
	ldr	w0, [sp, 64]
	cmp	w0, 3
	bne	.L4277
.L4282:
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 104]
	ldr	w0, [sp, 64]
	cmp	w0, 2
	bne	.L4283
	fmov	s0, -1.0e+0
	b	.L4284
.L4283:
	fmov	s0, 1.0e+0
.L4284:
	ldr	s2, [sp, 60]
	fmul	s0, s0, s2
	fadd	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
.L4277:
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4276
	mov	w3, 636
	mov	w2, 635
	mov	w1, 634
	mov	w0, 633
	bl	_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	mov	w0, 627
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4285
	mov	w0, 52429
	movk	w0, 0x3dcc, lsl 16
	fmov	s0, w0
	b	.L4286
.L4285:
	mov	w0, 628
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4287
	fmov	s0, 1.0e+1
	b	.L4286
.L4287:
	fmov	s0, 1.0e+0
.L4286:
	str	s0, [sp, 68]
	ldr	s0, [sp, 72]
	fcmp	s0, #0.0
	beq	.L4289
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 148]
	cmp	w0, 0
	beq	.L4289
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 100]
	ldr	s2, [sp, 72]
	ldr	s0, [sp, 60]
	fmul	s2, s2, s0
	ldr	s0, [sp, 68]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui10SetScrollXEP11ImGuiWindowf
.L4289:
	ldr	s0, [sp, 76]
	fcmp	s0, #0.0
	beq	.L4276
	ldr	x0, [sp, 144]
	ldr	s1, [x0, 104]
	ldr	s2, [sp, 76]
	ldr	s0, [sp, 60]
	fmul	s2, s2, s0
	ldr	s0, [sp, 68]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	bl	_ZL7ImFloorf
	ldr	x0, [sp, 144]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
.L4276:
	ldrb	w0, [sp, 47]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4291
	ldrb	w0, [sp, 46]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4291
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2218]
	strb	wzr, [sp, 45]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w1, [sp, 45]
	strb	w1, [x0, 2219]
.L4291:
	ldrb	w0, [sp, 45]
	cmp	w0, 0
	beq	.L4292
	ldr	x0, [sp, 104]
	ldr	w0, [x0]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L4292
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 4]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L4292
	ldr	x19, [sp, 104]
	bl	_ZN5ImGuiL22NavCalcPreferredRefPosEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [x19, 14040]
	str	s0, [x19, 14044]
	ldr	x1, [sp, 104]
	mov	x0, 14040
	add	x1, x1, x0
	ldr	x0, [sp, 104]
	add	x0, x0, 3584
	ldr	x1, [x1]
	str	x1, [x0, -12]
	ldr	x0, [sp, 104]
	mov	w1, 1
	strb	w1, [x0, 211]
.L4292:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2304]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 216]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4293
	bl	__stack_chk_fail
.L4293:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 224
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2085:
	.size	_ZN5ImGuiL9NavUpdateEv, .-_ZN5ImGuiL9NavUpdateEv
	.section	.rodata
	.align	3
.LC7:
	.word	620
	.word	619
	.word	621
	.word	622
	.word	624
	.word	623
	.word	625
	.word	626
	.align	3
.LC8:
	.word	524
	.word	525
	.word	526
	.word	514
	.word	513
	.word	515
	.word	516
	.text
	.section	.rodata
	.align	3
.LC607:
	.string	"[nav] NavInitRequest: ApplyResult: NavID 0x%08X in Layer %d Window \"%s\"\n"
	.text
	.align	2
	.global	_ZN5ImGui25NavInitRequestApplyResultEv
	.type	_ZN5ImGui25NavInitRequestApplyResultEv, %function
_ZN5ImGui25NavInitRequestApplyResultEv:
.LFB2086:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4298
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L4297
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w1, [x0, 2224]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	mov	w2, w0
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0]
	mov	x3, x0
	adrp	x0, .LC607
	add	x0, x0, :lo12:.LC607
	bl	_ZN5ImGui8DebugLogEPKcz
.L4297:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w4, [x0, 2224]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w5, [x0, 2212]
	ldr	x1, [sp, 24]
	mov	x0, 18612
	add	x0, x1, x0
	mov	x3, x0
	mov	w2, 0
	mov	w1, w5
	mov	w0, w4
	bl	_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2216]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2222]
	cmp	w0, 0
	beq	.L4294
	bl	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv
	b	.L4294
.L4298:
	nop
.L4294:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2086:
	.size	_ZN5ImGui25NavInitRequestApplyResultEv, .-_ZN5ImGui25NavInitRequestApplyResultEv
	.section	.rodata
	.align	3
.LC608:
	.string	"void ImGui::NavUpdateCreateMoveRequest()"
	.align	3
.LC609:
	.string	"g.NavMoveDir != ImGuiDir_None && g.NavMoveClipDir != ImGuiDir_None"
	.align	3
.LC610:
	.string	"g.NavMoveFlags & ImGuiNavMoveFlags_Forwarded"
	.align	3
.LC611:
	.string	"[nav] NavMoveRequestForward %d\n"
	.align	3
.LC612:
	.string	"[nav] NavInitRequest: from move, window \"%s\", layer=%d\n"
	.align	3
.LC613:
	.string	"!scoring_rect.IsInverted()"
	.text
	.align	2
	.type	_ZN5ImGuiL26NavUpdateCreateMoveRequestEv, %function
_ZN5ImGuiL26NavUpdateCreateMoveRequestEv:
.LFB2087:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	str	x19, [sp, 16]
	str	d8, [sp, 24]
	.cfi_offset 19, -144
	.cfi_offset 72, -136
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	add	x0, x0, 8
	str	x0, [sp, 104]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 112]
	ldr	x0, [sp, 104]
	ldr	w0, [x0]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4300
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 4]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L4300
	mov	w0, 1
	b	.L4301
.L4300:
	mov	w0, 0
.L4301:
	strb	w0, [sp, 44]
	ldr	x0, [sp, 104]
	ldr	w0, [x0]
	and	w0, w0, 1
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 45]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2246]
	cmp	w0, 0
	beq	.L4302
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L4302
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmn	w0, #1
	beq	.L4303
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2268]
	cmn	w0, #1
	bne	.L4353
.L4303:
	adrp	x0, .LC608
	add	x3, x0, :lo12:.LC608
	mov	w2, 11037
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC609
	add	x0, x0, :lo12:.LC609
	bl	__assert_fail
.L4353:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 128
	cmp	w0, 0
	bne	.L4305
	adrp	x0, .LC608
	add	x3, x0, :lo12:.LC608
	mov	w2, 11038
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC610
	add	x0, x0, :lo12:.LC610
	bl	__assert_fail
.L4305:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L4307
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	mov	w1, w0
	adrp	x0, .LC611
	add	x0, x0, :lo12:.LC611
	bl	_ZN5ImGui8DebugLogEPKcz
	b	.L4307
.L4302:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 2260]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2248]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2252]
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L4308
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4308
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 12]
	and	w0, w0, 262144
	cmp	w0, 0
	bne	.L4308
	mov	w0, 5
	str	w0, [sp, 52]
	mov	w0, 0
	bl	_ZN5ImGui21IsActiveIdUsingNavDirEi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4309
	ldrb	w0, [sp, 44]
	cmp	w0, 0
	beq	.L4310
	mov	w2, 5
	mov	w1, -1
	mov	w0, 623
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4311
.L4310:
	ldrb	w0, [sp, 45]
	cmp	w0, 0
	beq	.L4309
	mov	w2, 5
	mov	w1, -1
	mov	w0, 513
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4309
.L4311:
	mov	w0, 1
	b	.L4312
.L4309:
	mov	w0, 0
.L4312:
	cmp	w0, 0
	beq	.L4313
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2260]
.L4313:
	mov	w0, 1
	bl	_ZN5ImGui21IsActiveIdUsingNavDirEi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4314
	ldrb	w0, [sp, 44]
	cmp	w0, 0
	beq	.L4315
	mov	w2, 5
	mov	w1, -1
	mov	w0, 624
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4316
.L4315:
	ldrb	w0, [sp, 45]
	cmp	w0, 0
	beq	.L4314
	mov	w2, 5
	mov	w1, -1
	mov	w0, 514
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4314
.L4316:
	mov	w0, 1
	b	.L4317
.L4314:
	mov	w0, 0
.L4317:
	cmp	w0, 0
	beq	.L4318
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 1
	str	w1, [x0, 2260]
.L4318:
	mov	w0, 2
	bl	_ZN5ImGui21IsActiveIdUsingNavDirEi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4319
	ldrb	w0, [sp, 44]
	cmp	w0, 0
	beq	.L4320
	mov	w2, 5
	mov	w1, -1
	mov	w0, 625
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4321
.L4320:
	ldrb	w0, [sp, 45]
	cmp	w0, 0
	beq	.L4319
	mov	w2, 5
	mov	w1, -1
	mov	w0, 515
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4319
.L4321:
	mov	w0, 1
	b	.L4322
.L4319:
	mov	w0, 0
.L4322:
	cmp	w0, 0
	beq	.L4323
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 2
	str	w1, [x0, 2260]
.L4323:
	mov	w0, 3
	bl	_ZN5ImGui21IsActiveIdUsingNavDirEi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4324
	ldrb	w0, [sp, 44]
	cmp	w0, 0
	beq	.L4325
	mov	w2, 5
	mov	w1, -1
	mov	w0, 626
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4326
.L4325:
	ldrb	w0, [sp, 45]
	cmp	w0, 0
	beq	.L4324
	mov	w2, 5
	mov	w1, -1
	mov	w0, 516
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4324
.L4326:
	mov	w0, 1
	b	.L4327
.L4324:
	mov	w0, 0
.L4327:
	cmp	w0, 0
	beq	.L4308
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 3
	str	w1, [x0, 2260]
.L4308:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2260]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2268]
	add	x0, sp, 136
	mvni	v3.2s, 0x80, lsl 16
	mvni	v2.2s, 0x80, lsl 16
	mov	w1, 2139095039
	fmov	s1, w1
	mov	w1, 2139095039
	fmov	s0, w1
	bl	_ZN6ImRectC1Effff
	ldr	x1, [sp, 96]
	mov	x0, 18432
	add	x2, x1, x0
	ldp	x0, x1, [sp, 136]
	stp	x0, x1, [x2, 240]
.L4307:
	str	wzr, [sp, 48]
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L4328
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmn	w0, #1
	bne	.L4328
	ldrb	w0, [sp, 45]
	cmp	w0, 0
	beq	.L4328
	bl	_ZN5ImGuiL23NavUpdatePageUpPageDownEv
	str	s0, [sp, 48]
.L4328:
	ldr	s0, [sp, 48]
	fcmp	s0, #0.0
	beq	.L4329
	ldr	x1, [sp, 96]
	mov	x0, 18432
	add	x2, x1, x0
	ldr	x0, [sp, 112]
	add	x0, x0, 512
	ldp	x0, x1, [x0, -40]
	stp	x0, x1, [x2, 240]
	ldr	x1, [sp, 96]
	mov	x0, 18672
	add	x0, x1, x0
	ldr	s0, [sp, 48]
	bl	_ZN6ImRect10TranslateYEf
.L4329:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	wzr, [x0, 2246]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmn	w0, #1
	beq	.L4330
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w4, [x0, 2260]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2268]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w2, [x0, 2248]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2252]
	mov	w3, w0
	mov	w0, w4
	bl	_ZN5ImGui20NavMoveRequestSubmitEiiii
.L4330:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2244]
	cmp	w0, 0
	beq	.L4331
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w0, 0
	bne	.L4331
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L4332
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L4333
	ldr	x0, [sp, 112]
	ldr	x0, [x0]
	b	.L4334
.L4333:
	adrp	x0, .LC570
	add	x0, x0, :lo12:.LC570
.L4334:
	ldr	x1, [sp, 96]
	add	x1, x1, 16384
	ldr	w1, [x1, 2212]
	mov	w2, w1
	mov	x1, x0
	adrp	x0, .LC612
	add	x0, x0, :lo12:.LC612
	bl	_ZN5ImGui8DebugLogEPKcz
.L4332:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2222]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w1, [x0, 2222]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	w1, [x0, 2221]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2224]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	strb	wzr, [x0, 2218]
.L4331:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2244]
	cmp	w0, 0
	beq	.L4335
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 3
	bne	.L4335
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 0
	bne	.L4335
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L4335
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2248]
	mov	w0, 5
	and	w0, w1, w0
	cmp	w0, 0
	cset	w0, eq
	strb	w0, [sp, 46]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2248]
	mov	w0, 10
	and	w0, w1, w0
	cmp	w0, 0
	cset	w0, eq
	strb	w0, [sp, 47]
	ldr	x0, [sp, 112]
	add	x19, x0, 472
	add	x0, sp, 64
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 64
	mov	x1, x0
	mov	x0, x19
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	ldr	x0, [sp, 112]
	add	x19, x0, 480
	add	x0, sp, 80
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 80
	mov	x1, x0
	mov	x0, x19
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	add	x2, sp, 88
	add	x1, sp, 72
	add	x0, sp, 136
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x0, sp, 136
	mov	x1, x0
	ldr	x0, [sp, 112]
	bl	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 120]
	str	s4, [sp, 124]
	str	s1, [sp, 128]
	str	s0, [sp, 132]
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	bne	.L4336
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4337
.L4336:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	ldr	x1, [sp, 112]
	add	x0, x1, x0
	add	x1, x0, 8
	add	x0, sp, 120
	bl	_ZNK6ImRect8ContainsERKS_
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4337
	mov	w0, 1
	b	.L4338
.L4337:
	mov	w0, 0
.L4338:
	cmp	w0, 0
	beq	.L4335
	add	x0, sp, 120
	bl	_ZNK6ImRect8GetWidthEv
	fmov	s8, s0
	ldr	x0, [sp, 112]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	fmov	s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s8
	bl	_Z5ImMinIfET_S0_S0_
	str	s0, [sp, 56]
	add	x0, sp, 120
	bl	_ZNK6ImRect9GetHeightEv
	fmov	s8, s0
	ldr	x0, [sp, 112]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	fmov	s1, s0
	fmov	s0, 5.0e-1
	fmul	s0, s1, s0
	fmov	s1, s0
	fmov	s0, s8
	bl	_Z5ImMinIfET_S0_S0_
	str	s0, [sp, 60]
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4340
	ldr	s1, [sp, 120]
	ldr	s0, [sp, 56]
	fadd	s0, s1, s0
	b	.L4341
.L4340:
	mvni	v0.2s, 0x80, lsl 16
.L4341:
	str	s0, [sp, 120]
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4342
	ldr	s1, [sp, 128]
	ldr	s0, [sp, 56]
	fsub	s0, s1, s0
	b	.L4343
.L4342:
	mov	w0, 2139095039
	fmov	s0, w0
.L4343:
	str	s0, [sp, 128]
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4344
	ldr	s1, [sp, 124]
	ldr	s0, [sp, 60]
	fadd	s0, s1, s0
	b	.L4345
.L4344:
	mvni	v0.2s, 0x80, lsl 16
.L4345:
	str	s0, [sp, 124]
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4346
	ldr	s1, [sp, 132]
	ldr	s0, [sp, 60]
	fsub	s0, s1, s0
	b	.L4347
.L4346:
	mov	w0, 2139095039
	fmov	s0, w0
.L4347:
	str	s0, [sp, 132]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	ldr	x1, [sp, 112]
	add	x0, x1, x0
	add	x0, x0, 8
	add	x1, sp, 120
	bl	_ZN6ImRect12ClipWithFullERKS_
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	wzr, [x0, 2160]
.L4335:
	str	wzr, [sp, 120]
	str	wzr, [sp, 124]
	str	wzr, [sp, 128]
	str	wzr, [sp, 132]
	ldr	x0, [sp, 112]
	cmp	x0, 0
	beq	.L4348
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	ldr	x1, [sp, 112]
	add	x0, x1, x0
	add	x0, x0, 8
	bl	_ZNK6ImRect10IsInvertedEv
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4349
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	ldr	x1, [sp, 112]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x0, x1, [x0, 8]
	stp	x0, x1, [sp, 136]
	b	.L4350
.L4349:
	add	x0, sp, 136
	movi	v3.2s, #0
	movi	v2.2s, #0
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImRectC1Effff
.L4350:
	add	x0, sp, 136
	mov	x1, x0
	ldr	x0, [sp, 112]
	bl	_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 120]
	str	s4, [sp, 124]
	str	s1, [sp, 128]
	str	s0, [sp, 132]
	add	x0, sp, 120
	ldr	s0, [sp, 48]
	bl	_ZN6ImRect10TranslateYEf
	ldr	s1, [sp, 120]
	fmov	s0, 1.0e+0
	fadd	s0, s1, s0
	ldr	s1, [sp, 128]
	bl	_Z5ImMinIfET_S0_S0_
	str	s0, [sp, 120]
	ldr	s0, [sp, 120]
	str	s0, [sp, 128]
	add	x0, sp, 120
	bl	_ZNK6ImRect10IsInvertedEv
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4348
	adrp	x0, .LC608
	add	x3, x0, :lo12:.LC608
	mov	w2, 11126
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC613
	add	x0, x0, :lo12:.LC613
	bl	__assert_fail
.L4348:
	ldr	x1, [sp, 96]
	mov	x0, 18432
	add	x2, x1, x0
	ldp	x0, x1, [sp, 120]
	stp	x0, x1, [x2, 224]
	ldr	x1, [sp, 96]
	mov	x0, 18672
	add	x0, x1, x0
	add	x1, sp, 120
	bl	_ZN6ImRect3AddERKS_
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4352
	bl	__stack_chk_fail
.L4352:
	ldr	d8, [sp, 24]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2087:
	.size	_ZN5ImGuiL26NavUpdateCreateMoveRequestEv, .-_ZN5ImGuiL26NavUpdateCreateMoveRequestEv
	.section	.rodata
	.align	3
.LC614:
	.string	"void ImGui::NavUpdateCreateTabbingRequest()"
	.align	3
.LC615:
	.string	"g.NavMoveDir == ImGuiDir_None"
	.text
	.align	2
	.type	_ZN5ImGuiL29NavUpdateCreateTabbingRequestEv, %function
_ZN5ImGuiL29NavUpdateCreateTabbingRequestEv:
.LFB2088:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmn	w0, #1
	beq	.L4355
	adrp	x0, .LC614
	add	x3, x0, :lo12:.LC614
	mov	w2, 11138
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC615
	add	x0, x0, :lo12:.LC615
	bl	__assert_fail
.L4355:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L4368
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4368
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 12]
	and	w0, w0, 262144
	cmp	w0, 0
	bne	.L4368
	mov	w2, 1
	mov	w1, -1
	mov	w0, 512
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4359
	ldr	x0, [sp, 32]
	ldrb	w0, [x0, 3604]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4359
	ldr	x0, [sp, 32]
	ldrb	w0, [x0, 3606]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4359
	mov	w0, 1
	b	.L4360
.L4359:
	mov	w0, 0
.L4360:
	strb	w0, [sp, 23]
	ldrb	w0, [sp, 23]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4369
	ldr	x0, [sp, 32]
	ldrb	w0, [x0, 3605]
	cmp	w0, 0
	beq	.L4362
	mov	w0, -1
	b	.L4363
.L4362:
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	cset	w0, ne
	and	w0, w0, 255
.L4363:
	ldr	x1, [sp, 32]
	add	x1, x1, 16384
	str	w0, [x1, 2308]
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 156]
	cmp	w0, 0
	beq	.L4364
	mov	w0, 33
	b	.L4365
.L4364:
	mov	w0, 3
.L4365:
	str	w0, [sp, 24]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2308]
	cmp	w0, 0
	bge	.L4366
	mov	w0, 2
	b	.L4367
.L4366:
	mov	w0, 3
.L4367:
	str	w0, [sp, 28]
	ldr	w3, [sp, 24]
	mov	w2, 1024
	ldr	w1, [sp, 28]
	mov	w0, -1
	bl	_ZN5ImGui20NavMoveRequestSubmitEiiii
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 2312]
	b	.L4354
.L4368:
	nop
	b	.L4354
.L4369:
	nop
.L4354:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2088:
	.size	_ZN5ImGuiL29NavUpdateCreateTabbingRequestEv, .-_ZN5ImGuiL29NavUpdateCreateTabbingRequestEv
	.section	.rodata
	.align	3
.LC616:
	.string	"void ImGui::NavMoveRequestApplyResult()"
	.align	3
.LC617:
	.string	"g.NavWindow && result->Window"
	.align	3
.LC618:
	.string	"[focus] NavMoveRequest: SetNavWindow(\"%s\")\n"
	.align	3
.LC619:
	.string	"[nav] NavMoveRequest: result NavID 0x%08X in Layer %d Window \"%s\"\n"
	.text
	.align	2
	.global	_ZN5ImGui25NavMoveRequestApplyResultEv
	.type	_ZN5ImGui25NavMoveRequestApplyResultEv, %function
_ZN5ImGui25NavMoveRequestApplyResultEv:
.LFB2089:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2328]
	cmp	w0, 0
	beq	.L4371
	ldr	x1, [sp, 32]
	mov	x0, 18704
	add	x0, x1, x0
	b	.L4372
.L4371:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2424]
	cmp	w0, 0
	beq	.L4373
	ldr	x1, [sp, 32]
	mov	x0, 18800
	add	x0, x1, x0
	b	.L4372
.L4373:
	mov	x0, 0
.L4372:
	str	x0, [sp, 24]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L4375
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2312]
	cmp	w0, 1
	beq	.L4376
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2308]
	cmp	w0, 0
	bne	.L4375
.L4376:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2472]
	cmp	w0, 0
	beq	.L4375
	ldr	x1, [sp, 32]
	mov	x0, 18848
	add	x0, x1, x0
	str	x0, [sp, 24]
.L4375:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L4377
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L4378
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	orr	w1, w0, 4096
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2248]
.L4378:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w0, 0
	beq	.L4400
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 4096
	cmp	w0, 0
	bne	.L4400
	bl	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv
	b	.L4400
.L4377:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 32
	cmp	w0, 0
	beq	.L4381
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2376]
	cmp	w0, 0
	beq	.L4381
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [x0, 2376]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	cmp	w1, w0
	beq	.L4381
	ldr	x1, [sp, 32]
	mov	x0, 18752
	add	x0, x1, x0
	str	x0, [sp, 24]
.L4381:
	ldr	x1, [sp, 32]
	mov	x0, 18800
	add	x0, x1, x0
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L4382
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2424]
	cmp	w0, 0
	beq	.L4382
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18800]
	ldr	x1, [x0, 840]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18536]
	cmp	x1, x0
	bne	.L4382
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	s1, [x0, 2452]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 36]
	fcmpe	s1, s0
	bmi	.L4383
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	s1, [x0, 2452]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 36]
	fcmp	s1, s0
	bne	.L4382
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	s1, [x0, 2456]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 40]
	fcmpe	s1, s0
	bmi	.L4383
	b	.L4382
.L4383:
	ldr	x1, [sp, 32]
	mov	x0, 18800
	add	x0, x1, x0
	str	x0, [sp, 24]
.L4382:
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4385
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	cmp	x0, 0
	bne	.L4399
.L4385:
	adrp	x0, .LC616
	add	x3, x0, :lo12:.LC616
	mov	w2, 11194
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC617
	add	x0, x0, :lo12:.LC617
	bl	__assert_fail
.L4399:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 0
	bne	.L4387
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 64
	cmp	w0, 0
	beq	.L4388
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmp	w0, 2
	bne	.L4389
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	ldr	s0, [x0, 112]
	b	.L4390
.L4389:
	movi	v0.2s, #0
.L4390:
	str	s0, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	ldr	s0, [sp, 20]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
	b	.L4387
.L4388:
	ldr	x0, [sp, 24]
	ldr	x2, [x0]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	mov	x1, x0
	mov	x0, x2
	bl	_ZN5ImGui18WindowRectRelToAbsEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 40]
	str	s4, [sp, 44]
	str	s1, [sp, 48]
	str	s0, [sp, 52]
	ldr	x0, [sp, 24]
	ldr	x3, [x0]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [x0, 2252]
	add	x0, sp, 40
	mov	w2, w1
	mov	x1, x0
	mov	x0, x3
	bl	_ZN5ImGui14ScrollToRectExEP11ImGuiWindowRK6ImRecti
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
.L4387:
	ldr	x0, [sp, 32]
	ldr	x1, [x0, 18536]
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	cmp	x1, x0
	beq	.L4391
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4392
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	ldr	x0, [x0]
	mov	x1, x0
	adrp	x0, .LC618
	add	x0, x0, :lo12:.LC618
	bl	_ZN5ImGui8DebugLogEPKcz
.L4392:
	ldr	x0, [sp, 24]
	ldr	x1, [x0]
	ldr	x0, [sp, 32]
	str	x1, [x0, 18536]
.L4391:
	ldr	x0, [sp, 32]
	ldr	w1, [x0, 16108]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 8]
	cmp	w1, w0
	beq	.L4393
	bl	_ZN5ImGui13ClearActiveIDEv
.L4393:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [x0, 2160]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 8]
	cmp	w1, w0
	beq	.L4394
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2188]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2192]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [x0, 2256]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2196]
.L4394:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L4395
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	mov	w2, w0
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0]
	mov	x3, x0
	adrp	x0, .LC619
	add	x0, x0, :lo12:.LC619
	bl	_ZN5ImGui8DebugLogEPKcz
.L4395:
	ldr	x0, [sp, 24]
	ldr	w4, [x0, 8]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [x0, 2212]
	ldr	x0, [sp, 24]
	ldr	w2, [x0, 12]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	mov	x3, x0
	mov	w0, w4
	bl	_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L4396
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 32]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L4396
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2200]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	mov	w1, 5
	str	w1, [x0, 2204]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	orr	w1, w0, 4096
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2248]
.L4396:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 2048
	cmp	w0, 0
	beq	.L4397
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 8]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 2200]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	wzr, [x0, 2204]
.L4397:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 4096
	cmp	w0, 0
	bne	.L4370
	bl	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv
	b	.L4370
.L4400:
	nop
.L4370:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4398
	bl	__stack_chk_fail
.L4398:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2089:
	.size	_ZN5ImGui25NavMoveRequestApplyResultEv, .-_ZN5ImGui25NavMoveRequestApplyResultEv
	.section	.rodata
	.align	3
.LC620:
	.string	"[nav] NavUpdateCancelRequest()\n"
	.align	3
.LC621:
	.string	"void ImGui::NavUpdateCancelRequest()"
	.align	3
.LC622:
	.string	"child_window->ChildId != 0"
	.text
	.align	2
	.type	_ZN5ImGuiL22NavUpdateCancelRequestEv, %function
_ZN5ImGuiL22NavUpdateCancelRequestEv:
.LFB2090:
	.cfi_startproc
	stp	x29, x30, [sp, -112]!
	.cfi_def_cfa_offset 112
	.cfi_offset 29, -112
	.cfi_offset 30, -104
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -96
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 8]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4402
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 12]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L4402
	mov	w0, 1
	b	.L4403
.L4402:
	mov	w0, 0
.L4403:
	strb	w0, [sp, 46]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 8]
	and	w0, w0, 1
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 47]
	ldrb	w0, [sp, 47]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4404
	mov	w2, 0
	mov	w1, -1
	mov	w0, 526
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4405
.L4404:
	ldrb	w0, [sp, 46]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4406
	mov	w2, 0
	mov	w1, -1
	mov	w0, 620
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4405
.L4406:
	mov	w0, 1
	b	.L4407
.L4405:
	mov	w0, 0
.L4407:
	cmp	w0, 0
	bne	.L4421
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L4410
	adrp	x0, .LC620
	add	x0, x0, :lo12:.LC620
	bl	_ZN5ImGui8DebugLogEPKcz
.L4410:
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L4411
	bl	_ZN5ImGui13ClearActiveIDEv
	b	.L4401
.L4411:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 0
	beq	.L4412
	mov	w0, 0
	bl	_ZN5ImGuiL15NavRestoreLayerE13ImGuiNavLayer
	bl	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv
	b	.L4401
.L4412:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4413
	ldr	x0, [sp, 48]
	ldr	x1, [x0, 18536]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0, 856]
	cmp	x1, x0
	beq	.L4413
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	bne	.L4413
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0, 840]
	cmp	x0, 0
	beq	.L4413
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 56]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0, 840]
	str	x0, [sp, 64]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 96]
	cmp	w0, 0
	bne	.L4414
	adrp	x0, .LC621
	add	x3, x0, :lo12:.LC621
	mov	w2, 11279
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC622
	add	x0, x0, :lo12:.LC622
	bl	__assert_fail
.L4414:
	ldr	x0, [sp, 56]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 72]
	str	s4, [sp, 76]
	str	s1, [sp, 80]
	str	s0, [sp, 84]
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	ldr	x0, [sp, 56]
	ldr	w19, [x0, 96]
	add	x0, sp, 72
	mov	x1, x0
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui18WindowRectAbsToRelEP11ImGuiWindowRK6ImRect
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 88]
	str	s4, [sp, 92]
	str	s1, [sp, 96]
	str	s0, [sp, 100]
	add	x0, sp, 88
	mov	x3, x0
	mov	w2, 0
	mov	w1, 0
	mov	w0, w19
	bl	_ZN5ImGui8SetNavIDEj13ImGuiNavLayerjRK6ImRect
	bl	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv
	b	.L4401
.L4413:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	cmp	w0, 0
	ble	.L4415
	ldr	x1, [sp, 48]
	mov	x0, 18480
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataE4backEv
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L4415
	ldr	x1, [sp, 48]
	mov	x0, 18480
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataE4backEv
	ldr	x0, [x0, 8]
	ldr	w0, [x0, 12]
	and	w0, w0, 134217728
	cmp	w0, 0
	bne	.L4415
	mov	w0, 1
	b	.L4416
.L4415:
	mov	w0, 0
.L4416:
	cmp	w0, 0
	beq	.L4417
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	sub	w0, w0, #1
	mov	w1, 1
	bl	_ZN5ImGui17ClosePopupToLevelEib
	b	.L4401
.L4417:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4418
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	bne	.L4419
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L4418
.L4419:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 18536]
	str	wzr, [x0, 896]
.L4418:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	wzr, [x0, 2160]
	b	.L4401
.L4421:
	nop
.L4401:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4420
	bl	__stack_chk_fail
.L4420:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 112
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2090:
	.size	_ZN5ImGuiL22NavUpdateCancelRequestEv, .-_ZN5ImGuiL22NavUpdateCancelRequestEv
	.align	2
	.type	_ZN5ImGuiL23NavUpdatePageUpPageDownEv, %function
_ZN5ImGuiL23NavUpdatePageUpPageDownEv:
.LFB2091:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -64
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 12]
	and	w0, w0, 262144
	cmp	w0, 0
	bne	.L4423
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L4424
.L4423:
	movi	v0.2s, #0
	b	.L4425
.L4424:
	mov	w1, -1
	mov	w0, 517
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKeyj
	and	w0, w0, 255
	strb	w0, [sp, 44]
	mov	w1, -1
	mov	w0, 518
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKeyj
	and	w0, w0, 255
	strb	w0, [sp, 45]
	mov	w2, 1
	mov	w1, -1
	mov	w0, 519
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	strb	w0, [sp, 46]
	mov	w2, 1
	mov	w1, -1
	mov	w0, 520
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	strb	w0, [sp, 47]
	ldrb	w1, [sp, 44]
	ldrb	w0, [sp, 45]
	cmp	w1, w0
	bne	.L4426
	ldrb	w1, [sp, 46]
	ldrb	w0, [sp, 47]
	cmp	w1, w0
	bne	.L4426
	movi	v0.2s, #0
	b	.L4425
.L4426:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	cmp	w0, 0
	beq	.L4427
	mov	w0, 0
	bl	_ZN5ImGuiL15NavRestoreLayerE13ImGuiNavLayer
.L4427:
	ldr	x0, [sp, 64]
	ldrsh	w0, [x0, 316]
	cmp	w0, 0
	bne	.L4428
	ldr	x0, [sp, 64]
	ldrb	w0, [x0, 321]
	cmp	w0, 0
	beq	.L4428
	mov	w2, 1
	mov	w1, -1
	mov	w0, 517
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4429
	ldr	x0, [sp, 64]
	ldr	s8, [x0, 104]
	ldr	x0, [sp, 64]
	add	x0, x0, 472
	bl	_ZNK6ImRect9GetHeightEv
	fsub	s0, s8, s0
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
	b	.L4440
.L4429:
	mov	w2, 1
	mov	w1, -1
	mov	w0, 518
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4431
	ldr	x0, [sp, 64]
	ldr	s8, [x0, 104]
	ldr	x0, [sp, 64]
	add	x0, x0, 472
	bl	_ZNK6ImRect9GetHeightEv
	fadd	s0, s8, s0
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
	b	.L4440
.L4431:
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4432
	movi	v0.2s, #0
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
	b	.L4440
.L4432:
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4440
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 112]
	ldr	x0, [sp, 64]
	bl	_ZN5ImGui10SetScrollYEP11ImGuiWindowf
	b	.L4440
.L4428:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	ldr	x1, [sp, 64]
	add	x0, x1, x0
	add	x0, x0, 8
	str	x0, [sp, 72]
	ldr	x0, [sp, 64]
	add	x0, x0, 472
	bl	_ZNK6ImRect9GetHeightEv
	fmov	s8, s0
	ldr	x0, [sp, 64]
	bl	_ZNK11ImGuiWindow12CalcFontSizeEv
	fsub	s8, s8, s0
	ldr	x0, [sp, 72]
	bl	_ZNK6ImRect9GetHeightEv
	fadd	s0, s8, s0
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	str	s0, [sp, 52]
	str	wzr, [sp, 48]
	mov	w1, 1
	mov	w0, 517
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4434
	ldr	s0, [sp, 52]
	fneg	s0, s0
	str	s0, [sp, 48]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 3
	str	w1, [x0, 2260]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 2
	str	w1, [x0, 2268]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 48
	str	w1, [x0, 2248]
	b	.L4435
.L4434:
	mov	w1, 1
	mov	w0, 518
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4436
	ldr	s0, [sp, 52]
	str	s0, [sp, 48]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 2
	str	w1, [x0, 2260]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 3
	str	w1, [x0, 2268]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 48
	str	w1, [x0, 2248]
	b	.L4435
.L4436:
	ldrb	w0, [sp, 46]
	cmp	w0, 0
	beq	.L4437
	ldr	x0, [sp, 72]
	str	wzr, [x0, 12]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 12]
	ldr	x0, [sp, 72]
	str	s0, [x0, 4]
	ldr	x0, [sp, 72]
	bl	_ZNK6ImRect10IsInvertedEv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4438
	ldr	x0, [sp, 72]
	str	wzr, [x0, 8]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 8]
	ldr	x0, [sp, 72]
	str	s0, [x0]
.L4438:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 3
	str	w1, [x0, 2260]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 80
	str	w1, [x0, 2248]
	b	.L4435
.L4437:
	ldrb	w0, [sp, 47]
	cmp	w0, 0
	beq	.L4435
	ldr	x0, [sp, 64]
	ldr	s0, [x0, 52]
	ldr	x0, [sp, 72]
	str	s0, [x0, 12]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 12]
	ldr	x0, [sp, 72]
	str	s0, [x0, 4]
	ldr	x0, [sp, 72]
	bl	_ZNK6ImRect10IsInvertedEv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4439
	ldr	x0, [sp, 72]
	str	wzr, [x0, 8]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 8]
	ldr	x0, [sp, 72]
	str	s0, [x0]
.L4439:
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 2
	str	w1, [x0, 2260]
	ldr	x0, [sp, 56]
	add	x0, x0, 16384
	mov	w1, 80
	str	w1, [x0, 2248]
.L4435:
	ldr	s0, [sp, 48]
	b	.L4425
.L4440:
	nop
	movi	v0.2s, #0
.L4425:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2091:
	.size	_ZN5ImGuiL23NavUpdatePageUpPageDownEv, .-_ZN5ImGuiL23NavUpdatePageUpPageDownEv
	.align	2
	.type	_ZN5ImGuiL11NavEndFrameEv, %function
_ZN5ImGuiL11NavEndFrameEv:
.LFB2092:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L4442
	bl	_ZN5ImGuiL25NavUpdateWindowingOverlayEv
.L4442:
	mov	w0, 15
	str	w0, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4443
	bl	_ZN5ImGui28NavMoveRequestButNoResultYetEv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4443
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 15
	cmp	w0, 0
	beq	.L4443
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	and	w0, w0, 128
	cmp	w0, 0
	bne	.L4443
	mov	w0, 1
	b	.L4444
.L4443:
	mov	w0, 0
.L4444:
	cmp	w0, 0
	beq	.L4446
	bl	_ZN5ImGuiL30NavUpdateCreateWrappingRequestEv
.L4446:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2092:
	.size	_ZN5ImGuiL11NavEndFrameEv, .-_ZN5ImGuiL11NavEndFrameEv
	.align	2
	.type	_ZN5ImGuiL30NavUpdateCreateWrappingRequestEv, %function
_ZN5ImGuiL30NavUpdateCreateWrappingRequestEv:
.LFB2093:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 48]
	strb	wzr, [sp, 31]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	ldr	x1, [sp, 48]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x0, x1, [x0, 8]
	stp	x0, x1, [sp, 56]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	str	w0, [sp, 32]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2248]
	str	w0, [sp, 36]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmp	w0, 0
	bne	.L4448
	ldr	w1, [sp, 36]
	mov	w0, 5
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L4448
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 48]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 72]
	fadd	s0, s1, s0
	str	s0, [sp, 64]
	ldr	s0, [sp, 64]
	str	s0, [sp, 56]
	ldr	w0, [sp, 36]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L4449
	add	x0, sp, 56
	bl	_ZNK6ImRect9GetHeightEv
	fneg	s0, s0
	add	x0, sp, 56
	bl	_ZN6ImRect10TranslateYEf
	mov	w0, 2
	str	w0, [sp, 32]
.L4449:
	mov	w0, 1
	strb	w0, [sp, 31]
.L4448:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmp	w0, 1
	bne	.L4450
	ldr	w1, [sp, 36]
	mov	w0, 5
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L4450
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 72]
	fneg	s0, s0
	str	s0, [sp, 64]
	ldr	s0, [sp, 64]
	str	s0, [sp, 56]
	ldr	w0, [sp, 36]
	and	w0, w0, 4
	cmp	w0, 0
	beq	.L4451
	add	x0, sp, 56
	bl	_ZNK6ImRect9GetHeightEv
	add	x0, sp, 56
	bl	_ZN6ImRect10TranslateYEf
	mov	w0, 3
	str	w0, [sp, 32]
.L4451:
	mov	w0, 1
	strb	w0, [sp, 31]
.L4450:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmp	w0, 2
	bne	.L4452
	ldr	w1, [sp, 36]
	mov	w0, 10
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L4452
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 52]
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 76]
	fadd	s0, s1, s0
	str	s0, [sp, 68]
	ldr	s0, [sp, 68]
	str	s0, [sp, 60]
	ldr	w0, [sp, 36]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L4453
	add	x0, sp, 56
	bl	_ZNK6ImRect8GetWidthEv
	fneg	s0, s0
	add	x0, sp, 56
	bl	_ZN6ImRect10TranslateXEf
	str	wzr, [sp, 32]
.L4453:
	mov	w0, 1
	strb	w0, [sp, 31]
.L4452:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2260]
	cmp	w0, 3
	bne	.L4454
	ldr	w1, [sp, 36]
	mov	w0, 10
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L4454
	ldr	x0, [sp, 48]
	ldr	s0, [x0, 76]
	fneg	s0, s0
	str	s0, [sp, 68]
	ldr	s0, [sp, 68]
	str	s0, [sp, 60]
	ldr	w0, [sp, 36]
	and	w0, w0, 8
	cmp	w0, 0
	beq	.L4455
	add	x0, sp, 56
	bl	_ZNK6ImRect8GetWidthEv
	add	x0, sp, 56
	bl	_ZN6ImRect10TranslateXEf
	mov	w0, 1
	str	w0, [sp, 32]
.L4455:
	mov	w0, 1
	strb	w0, [sp, 31]
.L4454:
	ldrb	w0, [sp, 31]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4459
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	ldr	x1, [sp, 48]
	sxtw	x0, w0
	add	x0, x0, 56
	lsl	x0, x0, 4
	add	x2, x1, x0
	ldp	x0, x1, [sp, 56]
	stp	x0, x1, [x2, 8]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w4, [x0, 2260]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2252]
	mov	w3, w0
	ldr	w2, [sp, 36]
	ldr	w1, [sp, 32]
	mov	w0, w4
	bl	_ZN5ImGui21NavMoveRequestForwardEiiii
	b	.L4447
.L4459:
	nop
.L4447:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4458
	bl	__stack_chk_fail
.L4458:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2093:
	.size	_ZN5ImGuiL30NavUpdateCreateWrappingRequestEv, .-_ZN5ImGuiL30NavUpdateCreateWrappingRequestEv
	.section	.rodata
	.align	3
.LC623:
	.string	"int ImGui::FindWindowFocusIndex(ImGuiWindow*)"
	.align	3
.LC624:
	.string	"window->RootWindow == window"
	.align	3
.LC625:
	.string	"g.WindowsFocusOrder[order] == window"
	.text
	.align	2
	.type	_ZN5ImGuiL20FindWindowFocusIndexEP11ImGuiWindow, %function
_ZN5ImGuiL20FindWindowFocusIndexEP11ImGuiWindow:
.LFB2094:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 170]
	str	w0, [sp, 36]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L4461
	adrp	x0, .LC623
	add	x3, x0, :lo12:.LC623
	mov	w2, 11453
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC624
	add	x0, x0, :lo12:.LC624
	bl	__assert_fail
.L4461:
	ldr	x1, [sp, 40]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	beq	.L4462
	adrp	x0, .LC623
	add	x3, x0, :lo12:.LC623
	mov	w2, 11454
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC625
	add	x0, x0, :lo12:.LC625
	bl	__assert_fail
.L4462:
	ldr	w0, [sp, 36]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2094:
	.size	_ZN5ImGuiL20FindWindowFocusIndexEP11ImGuiWindow, .-_ZN5ImGuiL20FindWindowFocusIndexEP11ImGuiWindow
	.align	2
	.type	_ZL22FindWindowNavFocusableiii, %function
_ZL22FindWindowNavFocusableiii:
.LFB2095:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	str	w2, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	w0, [sp, 28]
	str	w0, [sp, 36]
	b	.L4465
.L4469:
	ldr	x1, [sp, 40]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	bl	_ZN5ImGui20IsWindowNavFocusableEP11ImGuiWindow
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4466
	ldr	x1, [sp, 40]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	b	.L4467
.L4466:
	ldr	w1, [sp, 36]
	ldr	w0, [sp, 20]
	add	w0, w1, w0
	str	w0, [sp, 36]
.L4465:
	ldr	w0, [sp, 36]
	cmp	w0, 0
	blt	.L4468
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 15952]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bge	.L4468
	ldr	w1, [sp, 36]
	ldr	w0, [sp, 24]
	cmp	w1, w0
	bne	.L4469
.L4468:
	mov	x0, 0
.L4467:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2095:
	.size	_ZL22FindWindowNavFocusableiii, .-_ZL22FindWindowNavFocusableiii
	.section	.rodata
	.align	3
.LC626:
	.string	"void NavUpdateWindowingHighlightWindow(int)"
	.align	3
.LC627:
	.string	"g.NavWindowingTarget"
	.text
	.align	2
	.type	_ZL33NavUpdateWindowingHighlightWindowi, %function
_ZL33NavUpdateWindowingHighlightWindowi:
.LFB2096:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4471
	adrp	x0, .LC626
	add	x3, x0, :lo12:.LC626
	mov	w2, 11470
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC627
	add	x0, x0, :lo12:.LC627
	bl	__assert_fail
.L4471:
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	ldr	w0, [x0, 12]
	and	w0, w0, 134217728
	cmp	w0, 0
	bne	.L4479
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	bl	_ZN5ImGuiL20FindWindowFocusIndexEP11ImGuiWindow
	str	w0, [sp, 44]
	ldr	w1, [sp, 44]
	ldr	w0, [sp, 28]
	add	w0, w1, w0
	ldr	w2, [sp, 28]
	mov	w1, -2147483647
	bl	_ZL22FindWindowNavFocusableiii
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	bne	.L4474
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bge	.L4475
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15952]
	sub	w0, w0, #1
	b	.L4476
.L4475:
	mov	w0, 0
.L4476:
	ldr	w2, [sp, 28]
	ldr	w1, [sp, 44]
	bl	_ZL22FindWindowNavFocusableiii
	str	x0, [sp, 56]
.L4474:
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L4477
	ldr	x0, [sp, 64]
	ldr	x1, [sp, 56]
	str	x1, [x0, 18912]
	ldr	x0, [sp, 64]
	ldr	x1, [x0, 18912]
	ldr	x0, [sp, 64]
	str	x1, [x0, 18904]
	add	x0, sp, 48
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x1, [sp, 64]
	mov	x0, 18944
	add	x0, x1, x0
	ldr	x1, [sp, 48]
	str	x1, [x0, 4]
	ldr	x1, [sp, 64]
	mov	x0, 18948
	add	x1, x1, x0
	ldr	x2, [sp, 64]
	mov	x0, 18944
	add	x0, x2, x0
	ldr	x1, [x1]
	str	x1, [x0, -4]
.L4477:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	strb	wzr, [x0, 2552]
	b	.L4470
.L4479:
	nop
.L4470:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4478
	bl	__stack_chk_fail
.L4478:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2096:
	.size	_ZL33NavUpdateWindowingHighlightWindowi, .-_ZL33NavUpdateWindowingHighlightWindowi
	.section	.rodata
	.align	3
.LC628:
	.string	"void ImGui::NavUpdateWindowing()"
	.align	3
.LC629:
	.string	"shared_mods != 0"
	.text
	.align	2
	.type	_ZN5ImGuiL18NavUpdateWindowingEv, %function
_ZN5ImGuiL18NavUpdateWindowingEv:
.LFB2097:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	str	x19, [sp, 16]
	str	d8, [sp, 24]
	.cfi_offset 19, -144
	.cfi_offset 72, -136
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	add	x0, x0, 8
	str	x0, [sp, 112]
	str	xzr, [sp, 88]
	strb	wzr, [sp, 36]
	bl	_ZN5ImGui20GetTopMostPopupModalEv
	str	x0, [sp, 120]
	ldr	x0, [sp, 120]
	cmp	x0, 0
	cset	w0, eq
	strb	w0, [sp, 37]
	ldrb	w0, [sp, 37]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4481
	ldr	x0, [sp, 104]
	str	xzr, [x0, 18904]
.L4481:
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18912]
	cmp	x0, 0
	beq	.L4482
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4482
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s1, [x0, 2548]
	ldr	x0, [sp, 112]
	ldr	s2, [x0, 16]
	fmov	s0, 1.0e+1
	fmul	s0, s2, s0
	fsub	s0, s1, s0
	movi	v1.2s, #0
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	str	s0, [x0, 2548]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s0, [x0, 2572]
	fcmpe	s0, #0.0
	bls	.L4551
	b	.L4482
.L4551:
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s0, [x0, 2548]
	fcmpe	s0, #0.0
	bls	.L4552
	b	.L4482
.L4552:
	ldr	x0, [sp, 104]
	str	xzr, [x0, 18912]
.L4482:
	ldr	x0, [sp, 112]
	ldr	w0, [x0]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4485
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 4]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L4485
	mov	w0, 1
	b	.L4486
.L4485:
	mov	w0, 0
.L4486:
	strb	w0, [sp, 38]
	ldr	x0, [sp, 112]
	ldr	w0, [x0]
	and	w0, w0, 1
	cmp	w0, 0
	cset	w0, ne
	strb	w0, [sp, 39]
	ldrb	w0, [sp, 37]
	cmp	w0, 0
	beq	.L4487
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2512]
	cmp	w0, 0
	beq	.L4487
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2512]
	mov	w2, 4097
	mov	w1, -1
	bl	_ZN5ImGui8ShortcutEiji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4487
	mov	w0, 1
	b	.L4488
.L4487:
	mov	w0, 0
.L4488:
	strb	w0, [sp, 40]
	ldrb	w0, [sp, 37]
	cmp	w0, 0
	beq	.L4489
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2516]
	cmp	w0, 0
	beq	.L4489
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2516]
	mov	w2, 4097
	mov	w1, -1
	bl	_ZN5ImGui8ShortcutEiji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4489
	mov	w0, 1
	b	.L4490
.L4489:
	mov	w0, 0
.L4490:
	strb	w0, [sp, 41]
	ldrb	w0, [sp, 37]
	cmp	w0, 0
	beq	.L4491
	ldrb	w0, [sp, 38]
	cmp	w0, 0
	beq	.L4491
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4491
	mov	w2, 0
	mov	w1, 0
	mov	w0, 619
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4491
	mov	w0, 1
	b	.L4492
.L4491:
	mov	w0, 0
.L4492:
	strb	w0, [sp, 42]
	ldrb	w0, [sp, 37]
	cmp	w0, 0
	beq	.L4493
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4493
	ldrb	w0, [sp, 40]
	cmp	w0, 0
	bne	.L4494
	ldrb	w0, [sp, 41]
	cmp	w0, 0
	beq	.L4493
.L4494:
	mov	w0, 1
	b	.L4495
.L4493:
	mov	w0, 0
.L4495:
	strb	w0, [sp, 43]
	ldrb	w0, [sp, 42]
	cmp	w0, 0
	bne	.L4496
	ldrb	w0, [sp, 43]
	cmp	w0, 0
	beq	.L4497
.L4496:
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4498
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	b	.L4499
.L4498:
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 15952]
	sub	w0, w0, #1
	mov	w2, -1
	mov	w1, -2147483647
	bl	_ZL22FindWindowNavFocusableiii
.L4499:
	str	x0, [sp, 128]
	ldr	x0, [sp, 128]
	cmp	x0, 0
	beq	.L4497
	ldr	x0, [sp, 128]
	ldr	x1, [x0, 856]
	ldr	x0, [sp, 104]
	str	x1, [x0, 18912]
	ldr	x0, [sp, 104]
	ldr	x1, [x0, 18912]
	ldr	x0, [sp, 104]
	str	x1, [x0, 18904]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	str	wzr, [x0, 2548]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s0, [x0, 2548]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	str	s0, [x0, 2544]
	add	x0, sp, 80
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x1, [sp, 104]
	mov	x0, 18944
	add	x0, x1, x0
	ldr	x1, [sp, 80]
	str	x1, [x0, 4]
	ldr	x1, [sp, 104]
	mov	x0, 18948
	add	x1, x1, x0
	ldr	x2, [sp, 104]
	mov	x0, 18944
	add	x0, x2, x0
	ldr	x1, [x1]
	str	x1, [x0, -4]
	ldrb	w0, [sp, 42]
	cmp	w0, 0
	beq	.L4500
	mov	w1, 1
	b	.L4501
.L4500:
	mov	w1, 0
.L4501:
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	strb	w1, [x0, 2552]
	ldrb	w0, [sp, 43]
	cmp	w0, 0
	beq	.L4502
	mov	w0, 2
	b	.L4503
.L4502:
	mov	w0, 3
.L4503:
	ldr	x1, [sp, 104]
	add	x1, x1, 16384
	str	w0, [x1, 2208]
.L4497:
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s1, [x0, 2544]
	ldr	x0, [sp, 112]
	ldr	s0, [x0, 16]
	fadd	s0, s1, s0
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	str	s0, [x0, 2544]
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L4504
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 3
	bne	.L4504
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s8, [x0, 2548]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s0, [x0, 2544]
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s1, w0
	fsub	s0, s0, s1
	mov	w0, 52429
	movk	w0, 0x3d4c, lsl 16
	fmov	s1, w0
	fdiv	s0, s0, s1
	bl	_ZL10ImSaturatef
	fmov	s1, s0
	fmov	s0, s8
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	str	s0, [x0, 2548]
	mov	w1, 1
	mov	w0, 627
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	mov	w19, w0
	mov	w1, 1
	mov	w0, 628
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	sub	w0, w19, w0
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	cmp	w0, 0
	beq	.L4505
	ldr	w0, [sp, 44]
	bl	_ZL33NavUpdateWindowingHighlightWindowi
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	fmov	s0, 1.0e+0
	str	s0, [x0, 2548]
.L4505:
	mov	w0, 619
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4504
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2552]
	mov	w1, w0
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s1, [x0, 2548]
	fmov	s0, 1.0e+0
	fcmpe	s1, s0
	cset	w0, mi
	and	w0, w0, 255
	and	w0, w1, w0
	cmp	w0, 0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	strb	w1, [x0, 2552]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2552]
	cmp	w0, 0
	beq	.L4506
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4506
	mov	w0, 1
	strb	w0, [sp, 36]
	b	.L4507
.L4506:
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2552]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4507
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	str	x0, [sp, 88]
.L4507:
	ldr	x0, [sp, 104]
	str	xzr, [x0, 18904]
.L4504:
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L4508
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 2
	bne	.L4508
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2512]
	cmp	w0, 0
	beq	.L4509
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w1, [x0, 2512]
	b	.L4510
.L4509:
	mov	w1, 61440
.L4510:
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2516]
	cmp	w0, 0
	beq	.L4511
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2516]
	b	.L4512
.L4511:
	mov	w0, 61440
.L4512:
	and	w0, w1, w0
	and	w0, w0, 61440
	str	w0, [sp, 48]
	ldr	w0, [sp, 48]
	cmp	w0, 0
	bne	.L4513
	adrp	x0, .LC628
	add	x3, x0, :lo12:.LC628
	mov	w2, 11559
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC629
	add	x0, x0, :lo12:.LC629
	bl	__assert_fail
.L4513:
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s8, [x0, 2548]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	s0, [x0, 2544]
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s1, w0
	fsub	s0, s0, s1
	mov	w0, 52429
	movk	w0, 0x3d4c, lsl 16
	fmov	s1, w0
	fdiv	s0, s0, s1
	bl	_ZL10ImSaturatef
	fmov	s1, s0
	fmov	s0, s8
	bl	_Z5ImMaxIfET_S0_S0_
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	str	s0, [x0, 2548]
	ldrb	w0, [sp, 40]
	cmp	w0, 0
	bne	.L4514
	ldrb	w0, [sp, 41]
	cmp	w0, 0
	beq	.L4515
.L4514:
	ldrb	w0, [sp, 40]
	cmp	w0, 0
	beq	.L4516
	mov	w0, -1
	b	.L4517
.L4516:
	mov	w0, 1
.L4517:
	bl	_ZL33NavUpdateWindowingHighlightWindowi
	b	.L4508
.L4515:
	ldr	x0, [sp, 112]
	ldr	w1, [x0, 3600]
	ldr	w0, [sp, 48]
	and	w0, w1, w0
	ldr	w1, [sp, 48]
	cmp	w1, w0
	beq	.L4508
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	str	x0, [sp, 88]
.L4508:
	ldrb	w0, [sp, 39]
	cmp	w0, 0
	beq	.L4519
	mov	w2, 0
	mov	w1, -1
	mov	w0, 16384
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyji
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4519
	mov	w0, 1
	b	.L4520
.L4519:
	mov	w0, 0
.L4520:
	cmp	w0, 0
	beq	.L4521
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2552]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	mov	w1, 2
	str	w1, [x0, 2208]
.L4521:
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2552]
	cmp	w0, 0
	beq	.L4522
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 2
	bne	.L4522
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 14248]
	cmp	w0, 0
	bgt	.L4523
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 3596]
	cmp	w0, 0
	bne	.L4523
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 3597]
	cmp	w0, 0
	bne	.L4523
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 3599]
	cmp	w0, 0
	bne	.L4523
	mov	w1, -1
	mov	w0, 16384
	bl	_ZN5ImGui12TestKeyOwnerE8ImGuiKeyj
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4524
.L4523:
	mov	w0, 1
	b	.L4525
.L4524:
	mov	w0, 0
.L4525:
	cmp	w0, 0
	beq	.L4526
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	strb	wzr, [x0, 2552]
.L4526:
	mov	w0, 16384
	bl	_ZN5ImGui13IsKeyReleasedE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4527
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2552]
	cmp	w0, 0
	beq	.L4527
	mov	w0, 1
	b	.L4528
.L4527:
	mov	w0, 0
.L4528:
	cmp	w0, 0
	beq	.L4529
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L4530
	ldr	x0, [sp, 104]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3833]
	cmp	w0, 0
	beq	.L4529
.L4530:
	ldr	x0, [sp, 112]
	add	x0, x0, 3572
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w19, w0, 255
	ldr	x1, [sp, 112]
	mov	x0, 14040
	add	x0, x1, x0
	bl	_ZN5ImGui15IsMousePosValidEPK6ImVec2
	and	w0, w0, 255
	cmp	w19, w0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4529
	mov	w0, 1
	strb	w0, [sp, 36]
.L4529:
	mov	w0, 16384
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4522
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	strb	wzr, [x0, 2552]
.L4522:
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L4531
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	ldr	w0, [x0, 12]
	and	w0, w0, 4
	cmp	w0, 0
	bne	.L4531
	str	wzr, [sp, 64]
	str	wzr, [sp, 68]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 2
	bne	.L4532
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 3597]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4532
	mov	w3, 516
	mov	w2, 515
	mov	w1, 514
	mov	w0, 513
	bl	_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
.L4532:
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	cmp	w0, 3
	bne	.L4533
	mov	w3, 636
	mov	w2, 635
	mov	w1, 634
	mov	w0, 633
	bl	_ZN5ImGui14GetKeyVector2dE8ImGuiKeyS0_S0_S0_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
.L4533:
	ldr	s0, [sp, 64]
	fcmp	s0, #0.0
	bne	.L4534
	ldr	s0, [sp, 68]
	fcmp	s0, #0.0
	beq	.L4531
.L4534:
	mov	w0, 1145569280
	fmov	s0, w0
	str	s0, [sp, 52]
	ldr	x0, [sp, 112]
	ldr	s0, [x0, 16]
	mov	w0, 1145569280
	fmov	s1, w0
	fmul	s8, s0, s1
	ldr	x0, [sp, 112]
	ldr	s0, [x0, 104]
	ldr	x0, [sp, 112]
	ldr	s1, [x0, 108]
	bl	_Z5ImMinIfET_S0_S0_
	fmul	s0, s8, s0
	str	s0, [sp, 56]
	add	x0, sp, 64
	ldr	s0, [sp, 56]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	ldr	x1, [sp, 104]
	mov	x0, 18940
	add	x0, x1, x0
	add	x1, sp, 80
	bl	_ZpLR6ImVec2RKS_
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2219]
	ldr	x1, [sp, 104]
	mov	x0, 18940
	add	x0, x1, x0
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	ldr	s0, [sp, 72]
	fcmp	s0, #0.0
	bne	.L4536
	ldr	s0, [sp, 76]
	fcmp	s0, #0.0
	beq	.L4531
.L4536:
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18904]
	ldr	x0, [x0, 856]
	str	x0, [sp, 136]
	ldr	x0, [sp, 136]
	add	x0, x0, 24
	add	x1, sp, 72
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 80
	mov	w2, 1
	mov	x1, x0
	ldr	x0, [sp, 136]
	bl	_ZN5ImGui12SetWindowPosEP11ImGuiWindowRK6ImVec2i
	ldr	x1, [sp, 104]
	mov	x0, 18940
	add	x0, x1, x0
	add	x1, sp, 72
	bl	_ZmIR6ImVec2RKS_
.L4531:
	ldr	x0, [sp, 88]
	cmp	x0, 0
	beq	.L4538
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4539
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 88]
	cmp	x1, x0
	beq	.L4538
.L4539:
	bl	_ZN5ImGui13ClearActiveIDEv
	bl	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv
	ldr	x0, [sp, 88]
	bl	_ZN5ImGuiL28NavRestoreLastChildNavWindowEP11ImGuiWindow
	str	x0, [sp, 88]
	mov	w1, 0
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui21ClosePopupsOverWindowEP11ImGuiWindowb
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 896]
	cmp	w0, 0
	bne	.L4540
	mov	w1, 0
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui13NavInitWindowEP11ImGuiWindowb
.L4540:
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 318]
	cmp	w0, 2
	bne	.L4538
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	mov	w1, 1
	str	w1, [x0, 2212]
.L4538:
	ldr	x0, [sp, 88]
	cmp	x0, 0
	beq	.L4541
	ldr	x0, [sp, 104]
	str	xzr, [x0, 18904]
.L4541:
	ldrb	w0, [sp, 36]
	cmp	w0, 0
	beq	.L4553
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4553
	bl	_ZN5ImGui13ClearActiveIDEv
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 96]
	b	.L4543
.L4545:
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 840]
	str	x0, [sp, 96]
.L4543:
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 840]
	cmp	x0, 0
	beq	.L4544
	ldr	x0, [sp, 96]
	ldrsh	w0, [x0, 316]
	and	w0, w0, 2
	cmp	w0, 0
	bne	.L4544
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L4544
	ldr	x0, [sp, 96]
	ldr	w1, [x0, 12]
	mov	w0, 335544320
	and	w0, w1, w0
	cmp	w0, 0
	beq	.L4545
.L4544:
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 96]
	cmp	x1, x0
	beq	.L4546
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	str	x0, [sp, 144]
	ldr	x0, [sp, 96]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
	ldr	x0, [sp, 96]
	ldr	x1, [sp, 144]
	str	x1, [x0, 888]
.L4546:
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	ldrsh	w0, [x0, 316]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4547
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	eor	w0, w0, 1
	b	.L4548
.L4547:
	mov	w0, 0
.L4548:
	str	w0, [sp, 60]
	ldr	x0, [sp, 104]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	beq	.L4553
	ldr	w0, [sp, 60]
	cmp	w0, 1
	bne	.L4549
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 18536]
	ldr	w1, [sp, 60]
	sxtw	x1, w1
	add	x1, x1, 224
	str	wzr, [x0, x1, lsl 2]
.L4549:
	ldr	w0, [sp, 60]
	bl	_ZN5ImGuiL15NavRestoreLayerE13ImGuiNavLayer
	bl	_ZN5ImGuiL28NavRestoreHighlightAfterMoveEv
.L4553:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4550
	bl	__stack_chk_fail
.L4550:
	ldr	d8, [sp, 24]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2097:
	.size	_ZN5ImGuiL18NavUpdateWindowingEv, .-_ZN5ImGuiL18NavUpdateWindowingEv
	.section	.rodata
	.align	3
.LC630:
	.string	"##MainMenuBar"
	.text
	.align	2
	.type	_ZL37GetFallbackWindowNameForWindowingListP11ImGuiWindow, %function
_ZL37GetFallbackWindowNameForWindowingListP11ImGuiWindow:
.LFB2098:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L4555
	mov	w0, 5
	bl	_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey
	b	.L4556
.L4555:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 12]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L4557
	ldr	x0, [sp, 24]
	ldr	x2, [x0]
	adrp	x0, .LC630
	add	x1, x0, :lo12:.LC630
	mov	x0, x2
	bl	strcmp
	cmp	w0, 0
	bne	.L4557
	mov	w0, 4
	bl	_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey
	b	.L4556
.L4557:
	mov	w0, 6
	bl	_ZN5ImGui14LocalizeGetMsgE11ImGuiLocKey
	nop
.L4556:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2098:
	.size	_ZL37GetFallbackWindowNameForWindowingListP11ImGuiWindow, .-_ZL37GetFallbackWindowNameForWindowingListP11ImGuiWindow
	.section	.rodata
	.align	3
.LC631:
	.string	"void ImGui::NavUpdateWindowingOverlay()"
	.align	3
.LC632:
	.string	"g.NavWindowingTarget != __null"
	.align	3
.LC633:
	.string	"###NavWindowingList"
	.text
	.align	2
	.type	_ZN5ImGuiL25NavUpdateWindowingOverlayEv, %function
_ZN5ImGuiL25NavUpdateWindowingOverlayEv:
.LFB2099:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	bne	.L4559
	adrp	x0, .LC631
	add	x3, x0, :lo12:.LC631
	mov	w2, 11687
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC632
	add	x0, x0, :lo12:.LC632
	bl	__assert_fail
.L4559:
	ldr	x0, [sp, 64]
	add	x0, x0, 16384
	ldr	s0, [x0, 2544]
	mov	w0, 39322
	movk	w0, 0x3e19, lsl 16
	fmov	s1, w0
	fcmpe	s0, s1
	bmi	.L4571
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18920]
	cmp	x0, 0
	bne	.L4563
	adrp	x0, .LC633
	add	x0, x0, :lo12:.LC633
	bl	_ZN5ImGui16FindWindowByNameEPKc
	mov	x1, x0
	ldr	x0, [sp, 64]
	str	x1, [x0, 18920]
.L4563:
	bl	_ZN5ImGui15GetMainViewportEv
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 12]
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s1, w0
	fmul	s2, s0, s1
	ldr	x0, [sp, 72]
	ldr	s0, [x0, 16]
	mov	w0, 52429
	movk	w0, 0x3e4c, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	add	x0, sp, 40
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 48
	mov	w1, 2139095039
	fmov	s1, w1
	mov	w1, 2139095039
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 48
	add	x0, sp, 40
	mov	x3, 0
	mov	x2, 0
	bl	_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv
	ldr	x0, [sp, 72]
	bl	_ZNK13ImGuiViewport9GetCenterEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 40]
	str	s0, [sp, 44]
	add	x0, sp, 48
	fmov	s1, 5.0e-1
	fmov	s0, 5.0e-1
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 48
	add	x0, sp, 40
	mov	x2, x1
	mov	w1, 1
	bl	_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_
	ldr	x1, [sp, 64]
	mov	x0, 14312
	add	x0, x1, x0
	fmov	s0, 2.0e+0
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	add	x0, sp, 48
	mov	x1, x0
	mov	w0, 2
	bl	_ZN5ImGui12PushStyleVarEiRK6ImVec2
	mov	w2, 4935
	movk	w2, 0xc, lsl 16
	mov	x1, 0
	adrp	x0, .LC633
	add	x0, x0, :lo12:.LC633
	bl	_ZN5ImGui5BeginEPKcPbi
	ldr	x0, [sp, 64]
	ldr	w0, [x0, 15952]
	sub	w0, w0, #1
	str	w0, [sp, 36]
	b	.L4564
.L4569:
	ldr	x1, [sp, 64]
	mov	x0, 15952
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	cmp	x0, 0
	bne	.L4565
	adrp	x0, .LC631
	add	x3, x0, :lo12:.LC631
	mov	w2, 11702
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC527
	add	x0, x0, :lo12:.LC527
	bl	__assert_fail
.L4565:
	ldr	x0, [sp, 80]
	bl	_ZN5ImGui20IsWindowNavFocusableEP11ImGuiWindow
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4572
	ldr	x0, [sp, 80]
	ldr	x0, [x0]
	str	x0, [sp, 56]
	mov	x1, 0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui19FindRenderedTextEndEPKcS1_
	mov	x1, x0
	ldr	x0, [sp, 56]
	cmp	x0, x1
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4568
	ldr	x0, [sp, 80]
	bl	_ZL37GetFallbackWindowNameForWindowingListP11ImGuiWindow
	str	x0, [sp, 56]
.L4568:
	ldr	x0, [sp, 64]
	ldr	x0, [x0, 18904]
	ldr	x1, [sp, 80]
	cmp	x1, x0
	cset	w0, eq
	and	w19, w0, 255
	add	x0, sp, 48
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 48
	mov	x3, x0
	mov	w2, 0
	mov	w1, w19
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui10SelectableEPKcbiRK6ImVec2
	b	.L4567
.L4572:
	nop
.L4567:
	ldr	w0, [sp, 36]
	sub	w0, w0, #1
	str	w0, [sp, 36]
.L4564:
	ldr	w0, [sp, 36]
	cmp	w0, 0
	bge	.L4569
	bl	_ZN5ImGui3EndEv
	mov	w0, 1
	bl	_ZN5ImGui11PopStyleVarEi
	b	.L4558
.L4571:
	nop
.L4558:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4570
	bl	__stack_chk_fail
.L4570:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2099:
	.size	_ZN5ImGuiL25NavUpdateWindowingOverlayEv, .-_ZN5ImGuiL25NavUpdateWindowingOverlayEv
	.align	2
	.global	_ZN5ImGui16IsDragDropActiveEv
	.type	_ZN5ImGui16IsDragDropActiveEv, %function
_ZN5ImGui16IsDragDropActiveEv:
.LFB2100:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2100:
	.size	_ZN5ImGui16IsDragDropActiveEv, .-_ZN5ImGui16IsDragDropActiveEv
	.align	2
	.global	_ZN5ImGui13ClearDragDropEv
	.type	_ZN5ImGui13ClearDragDropEv, %function
_ZN5ImGui13ClearDragDropEv:
.LFB2101:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	strb	wzr, [x0, 2580]
	ldr	x1, [sp, 24]
	mov	x0, 18984
	add	x0, x1, x0
	bl	_ZN12ImGuiPayload5ClearEv
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	wzr, [x0, 2684]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	wzr, [x0, 2696]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w1, [x0, 2696]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	w1, [x0, 2692]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	mov	w1, 2139095039
	fmov	s0, w1
	str	s0, [x0, 2688]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	mov	w1, -1
	str	w1, [x0, 2700]
	ldr	x1, [sp, 24]
	mov	x0, 19096
	add	x0, x1, x0
	bl	_ZN8ImVectorIhE5clearEv
	ldr	x1, [sp, 24]
	mov	x0, 19112
	add	x0, x1, x0
	mov	x2, 16
	mov	w1, 0
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2101:
	.size	_ZN5ImGui13ClearDragDropEv, .-_ZN5ImGui13ClearDragDropEv
	.section	.rodata
	.align	3
.LC634:
	.string	"bool ImGui::BeginDragDropSource(ImGuiDragDropFlags)"
	.align	3
.LC635:
	.string	"#SourceExtern"
	.align	3
.LC636:
	.string	"source_id != 0"
	.text
	.align	2
	.global	_ZN5ImGui19BeginDragDropSourceEi
	.type	_ZN5ImGui19BeginDragDropSourceEi, %function
_ZN5ImGui19BeginDragDropSourceEi:
.LFB2102:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 56]
	str	wzr, [sp, 36]
	strb	wzr, [sp, 34]
	str	wzr, [sp, 40]
	str	wzr, [sp, 44]
	ldr	w0, [sp, 28]
	and	w0, w0, 16
	cmp	w0, 0
	bne	.L4577
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	str	w0, [sp, 40]
	ldr	w0, [sp, 40]
	cmp	w0, 0
	beq	.L4578
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 40]
	cmp	w1, w0
	beq	.L4579
	mov	w0, 0
	b	.L4580
.L4579:
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16148]
	cmn	w0, #1
	beq	.L4581
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16148]
	str	w0, [sp, 36]
.L4581:
	ldr	x1, [sp, 48]
	ldrsw	x0, [sp, 36]
	add	x0, x1, x0
	ldrb	w0, [x0, 3588]
	cmp	w0, 0
	beq	.L4582
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 155]
	cmp	w0, 0
	beq	.L4583
.L4582:
	mov	w0, 0
	b	.L4580
.L4583:
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	strb	wzr, [x0, 3833]
	b	.L4584
.L4578:
	ldr	x1, [sp, 48]
	ldrsw	x0, [sp, 36]
	add	x0, x1, x0
	ldrb	w0, [x0, 3588]
	cmp	w0, 0
	beq	.L4585
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 155]
	cmp	w0, 0
	beq	.L4586
.L4585:
	mov	w0, 0
	b	.L4580
.L4586:
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L4587
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w0, 0
	beq	.L4588
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16136]
	ldr	x1, [sp, 56]
	cmp	x1, x0
	beq	.L4587
.L4588:
	mov	w0, 0
	b	.L4580
.L4587:
	ldr	w0, [sp, 28]
	and	w0, w0, 8
	cmp	w0, 0
	bne	.L4589
	adrp	x0, .LC634
	add	x3, x0, :lo12:.LC634
	mov	w2, 11784
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L4589:
	ldr	x1, [sp, 48]
	mov	x0, 18224
	add	x0, x1, x0
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect
	mov	w1, w0
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1828]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	str	w0, [sp, 40]
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui11KeepAliveIDEj
	ldr	x1, [sp, 48]
	mov	x0, 18224
	add	x0, x1, x0
	ldr	w1, [sp, 40]
	bl	_ZN5ImGui13ItemHoverableERK6ImRectj
	and	w0, w0, 255
	strb	w0, [sp, 35]
	ldrb	w0, [sp, 35]
	cmp	w0, 0
	beq	.L4590
	ldr	x1, [sp, 48]
	ldrsw	x0, [sp, 36]
	add	x0, x1, x0
	add	x0, x0, 12288
	ldrb	w0, [x0, 1848]
	cmp	w0, 0
	beq	.L4590
	ldr	x1, [sp, 56]
	ldr	w0, [sp, 40]
	bl	_ZN5ImGui11SetActiveIDEjP11ImGuiWindow
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui11FocusWindowEP11ImGuiWindow
.L4590:
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 40]
	cmp	w1, w0
	bne	.L4584
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	ldrb	w1, [sp, 35]
	strb	w1, [x0, 3833]
.L4584:
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	ldr	w1, [sp, 40]
	cmp	w1, w0
	beq	.L4591
	mov	w0, 0
	b	.L4580
.L4591:
	ldr	x0, [sp, 56]
	add	x0, x0, 208
	bl	_ZN8ImVectorIjE4backEv
	ldr	w0, [x0]
	str	w0, [sp, 44]
	fmov	s0, -1.0e+0
	ldr	w0, [sp, 36]
	bl	_ZN5ImGui15IsMouseDraggingEif
	strb	w0, [sp, 34]
	bl	_ZN5ImGui31SetActiveIdUsingAllKeyboardKeysEv
	b	.L4592
.L4577:
	str	xzr, [sp, 56]
	mov	w2, 0
	mov	x1, 0
	adrp	x0, .LC635
	add	x0, x0, :lo12:.LC635
	bl	_Z9ImHashStrPKcmj
	str	w0, [sp, 40]
	mov	w0, 1
	strb	w0, [sp, 34]
.L4592:
	ldrb	w0, [sp, 34]
	cmp	w0, 0
	beq	.L4593
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4594
	ldr	w0, [sp, 40]
	cmp	w0, 0
	bne	.L4595
	adrp	x0, .LC634
	add	x3, x0, :lo12:.LC634
	mov	w2, 11823
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC636
	add	x0, x0, :lo12:.LC636
	bl	__assert_fail
.L4595:
	bl	_ZN5ImGui13ClearDragDropEv
	ldr	x1, [sp, 48]
	mov	x0, 18984
	add	x0, x1, x0
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	w1, [sp, 40]
	str	w1, [x0, 12]
	ldr	x0, [sp, 64]
	ldr	w1, [sp, 44]
	str	w1, [x0, 16]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2580]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [sp, 28]
	str	w1, [x0, 2584]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [sp, 36]
	str	w1, [x0, 2592]
	ldr	x0, [sp, 64]
	ldr	w1, [x0, 12]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16108]
	cmp	w1, w0
	bne	.L4594
	ldr	x0, [sp, 48]
	add	x0, x0, 12288
	mov	w1, 1
	strb	w1, [x0, 3834]
.L4594:
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 15904]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 2588]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2581]
	ldr	w0, [sp, 28]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L4596
	bl	_ZN5ImGui12BeginTooltipEv
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2696]
	cmp	w0, 0
	beq	.L4596
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 2684]
	and	w0, w0, 4096
	cmp	w0, 0
	beq	.L4596
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	mov	w1, 1
	strb	w1, [x0, 155]
	ldr	x0, [sp, 72]
	ldrb	w1, [x0, 155]
	ldr	x0, [sp, 72]
	strb	w1, [x0, 157]
	ldr	x0, [sp, 72]
	mov	w1, 1
	strb	w1, [x0, 184]
.L4596:
	ldr	w0, [sp, 28]
	and	w0, w0, 2
	cmp	w0, 0
	bne	.L4597
	ldr	w0, [sp, 28]
	and	w0, w0, 16
	cmp	w0, 0
	bne	.L4597
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	and	w1, w0, -2
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	w1, [x0, 1836]
.L4597:
	mov	w0, 1
	b	.L4580
.L4593:
	mov	w0, 0
.L4580:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2102:
	.size	_ZN5ImGui19BeginDragDropSourceEi, .-_ZN5ImGui19BeginDragDropSourceEi
	.section	.rodata
	.align	3
.LC637:
	.string	"void ImGui::EndDragDropSource()"
	.align	3
.LC638:
	.string	"g.DragDropActive"
	.align	3
.LC639:
	.string	"g.DragDropWithinSource && \"Not after a BeginDragDropSource()?\""
	.text
	.align	2
	.global	_ZN5ImGui17EndDragDropSourceEv
	.type	_ZN5ImGui17EndDragDropSourceEv, %function
_ZN5ImGui17EndDragDropSourceEv:
.LFB2103:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	bne	.L4599
	adrp	x0, .LC637
	add	x3, x0, :lo12:.LC637
	mov	w2, 11861
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC638
	add	x0, x0, :lo12:.LC638
	bl	__assert_fail
.L4599:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2581]
	cmp	w0, 0
	bne	.L4600
	adrp	x0, .LC637
	add	x3, x0, :lo12:.LC637
	mov	w2, 11862
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC639
	add	x0, x0, :lo12:.LC639
	bl	__assert_fail
.L4600:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2584]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L4601
	bl	_ZN5ImGui10EndTooltipEv
.L4601:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 2620]
	cmn	w0, #1
	bne	.L4602
	bl	_ZN5ImGui13ClearDragDropEv
.L4602:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	strb	wzr, [x0, 2581]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2103:
	.size	_ZN5ImGui17EndDragDropSourceEv, .-_ZN5ImGui17EndDragDropSourceEv
	.section	.rodata
	.align	3
.LC640:
	.string	"bool ImGui::SetDragDropPayload(const char*, const void*, size_t, ImGuiCond)"
	.align	3
.LC641:
	.string	"type != __null"
	.align	3
.LC642:
	.string	"strlen(type) < ((int)(sizeof(payload.DataType) / sizeof(*(payload.DataType)))) && \"Payload type can be at most 32 characters long\""
	.align	3
.LC643:
	.string	"(data != __null && data_size > 0) || (data == __null && data_size == 0)"
	.align	3
.LC644:
	.string	"cond == ImGuiCond_Always || cond == ImGuiCond_Once"
	.align	3
.LC645:
	.string	"payload.SourceId != 0"
	.text
	.align	2
	.global	_ZN5ImGui18SetDragDropPayloadEPKcPKvmi
	.type	_ZN5ImGui18SetDragDropPayloadEPKcPKvmi, %function
_ZN5ImGui18SetDragDropPayloadEPKcPKvmi:
.LFB2104:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	w3, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x1, [sp, 48]
	mov	x0, 18984
	add	x0, x1, x0
	str	x0, [sp, 56]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	bne	.L4604
	mov	w0, 1
	str	w0, [sp, 20]
.L4604:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	bne	.L4605
	adrp	x0, .LC640
	add	x3, x0, :lo12:.LC640
	mov	w2, 11881
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC641
	add	x0, x0, :lo12:.LC641
	bl	__assert_fail
.L4605:
	ldr	x0, [sp, 40]
	bl	strlen
	cmp	x0, 32
	bls	.L4606
	adrp	x0, .LC640
	add	x3, x0, :lo12:.LC640
	mov	w2, 11882
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC642
	add	x0, x0, :lo12:.LC642
	bl	__assert_fail
.L4606:
	ldr	x0, [sp, 32]
	cmp	x0, 0
	beq	.L4607
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L4608
.L4607:
	ldr	x0, [sp, 32]
	cmp	x0, 0
	bne	.L4609
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L4608
.L4609:
	adrp	x0, .LC640
	add	x3, x0, :lo12:.LC640
	mov	w2, 11883
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC643
	add	x0, x0, :lo12:.LC643
	bl	__assert_fail
.L4608:
	ldr	w0, [sp, 20]
	cmp	w0, 1
	beq	.L4610
	ldr	w0, [sp, 20]
	cmp	w0, 2
	beq	.L4610
	adrp	x0, .LC640
	add	x3, x0, :lo12:.LC640
	mov	w2, 11884
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC644
	add	x0, x0, :lo12:.LC644
	bl	__assert_fail
.L4610:
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 12]
	cmp	w0, 0
	bne	.L4611
	adrp	x0, .LC640
	add	x3, x0, :lo12:.LC640
	mov	w2, 11885
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC645
	add	x0, x0, :lo12:.LC645
	bl	__assert_fail
.L4611:
	ldr	w0, [sp, 20]
	cmp	w0, 1
	beq	.L4612
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 20]
	cmn	w0, #1
	bne	.L4613
.L4612:
	ldr	x0, [sp, 56]
	add	x0, x0, 24
	mov	x2, 33
	ldr	x1, [sp, 40]
	bl	_Z9ImStrncpyPcPKcm
	ldr	x1, [sp, 48]
	mov	x0, 19096
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIhE6resizeEi
	ldr	x0, [sp, 24]
	cmp	x0, 16
	bls	.L4614
	ldr	x1, [sp, 48]
	mov	x0, 19096
	add	x0, x1, x0
	ldr	x1, [sp, 24]
	bl	_ZN8ImVectorIhE6resizeEi
	ldr	x0, [sp, 48]
	ldr	x1, [x0, 19104]
	ldr	x0, [sp, 56]
	str	x1, [x0]
	ldr	x0, [sp, 56]
	ldr	x0, [x0]
	ldr	x2, [sp, 24]
	ldr	x1, [sp, 32]
	bl	memcpy
	b	.L4615
.L4614:
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L4616
	ldr	x1, [sp, 48]
	mov	x0, 19112
	add	x0, x1, x0
	mov	x2, 16
	mov	w1, 0
	bl	memset
	ldr	x1, [sp, 48]
	mov	x0, 19112
	add	x1, x1, x0
	ldr	x0, [sp, 56]
	str	x1, [x0]
	ldr	x0, [sp, 56]
	ldr	x0, [x0]
	ldr	x2, [sp, 24]
	ldr	x1, [sp, 32]
	bl	memcpy
	b	.L4615
.L4616:
	ldr	x0, [sp, 56]
	str	xzr, [x0]
.L4615:
	ldr	x0, [sp, 24]
	mov	w1, w0
	ldr	x0, [sp, 56]
	str	w1, [x0, 8]
.L4613:
	ldr	x0, [sp, 48]
	ldr	w1, [x0, 15904]
	ldr	x0, [sp, 56]
	str	w1, [x0, 20]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 2700]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	beq	.L4617
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	ldr	w1, [x0, 2700]
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 15904]
	sub	w0, w0, #1
	cmp	w1, w0
	bne	.L4618
.L4617:
	mov	w0, 1
	b	.L4619
.L4618:
	mov	w0, 0
.L4619:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2104:
	.size	_ZN5ImGui18SetDragDropPayloadEPKcPKvmi, .-_ZN5ImGui18SetDragDropPayloadEPKcPKvmi
	.section	.rodata
	.align	3
.LC646:
	.string	"bool ImGui::BeginDragDropTargetCustom(const ImRect&, ImGuiID)"
	.align	3
.LC647:
	.string	"g.DragDropWithinTarget == false"
	.text
	.align	2
	.global	_ZN5ImGui25BeginDragDropTargetCustomERK6ImRectj
	.type	_ZN5ImGui25BeginDragDropTargetCustomERK6ImRectj, %function
_ZN5ImGui25BeginDragDropTargetCustomERK6ImRectj:
.LFB2105:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4622
	mov	w0, 0
	b	.L4623
.L4622:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16048]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L4624
	ldr	x0, [sp, 48]
	ldr	x1, [x0, 856]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 856]
	cmp	x1, x0
	beq	.L4625
.L4624:
	mov	w0, 0
	b	.L4623
.L4625:
	ldr	w0, [sp, 20]
	cmp	w0, 0
	bne	.L4626
	adrp	x0, .LC646
	add	x3, x0, :lo12:.LC646
	mov	w2, 11928
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC224
	add	x0, x0, :lo12:.LC224
	bl	__assert_fail
.L4626:
	ldr	x3, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	mov	w2, 1
	mov	x1, x0
	mov	x0, x3
	bl	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4627
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 2612]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	bne	.L4628
.L4627:
	mov	w0, 1
	b	.L4629
.L4628:
	mov	w0, 0
.L4629:
	cmp	w0, 0
	beq	.L4630
	mov	w0, 0
	b	.L4623
.L4630:
	ldr	x0, [sp, 48]
	ldrb	w0, [x0, 155]
	cmp	w0, 0
	beq	.L4631
	mov	w0, 0
	b	.L4623
.L4631:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2582]
	cmp	w0, 0
	beq	.L4632
	adrp	x0, .LC646
	add	x3, x0, :lo12:.LC646
	mov	w2, 11934
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC647
	add	x0, x0, :lo12:.LC647
	bl	__assert_fail
.L4632:
	ldr	x1, [sp, 40]
	mov	x0, 18944
	add	x2, x1, x0
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2, 104]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 20]
	str	w1, [x0, 2680]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2582]
	mov	w0, 1
.L4623:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2105:
	.size	_ZN5ImGui25BeginDragDropTargetCustomERK6ImRectj, .-_ZN5ImGui25BeginDragDropTargetCustomERK6ImRectj
	.section	.rodata
	.align	3
.LC648:
	.string	"bool ImGui::BeginDragDropTarget()"
	.text
	.align	2
	.global	_ZN5ImGui19BeginDragDropTargetEv
	.type	_ZN5ImGui19BeginDragDropTargetEv, %function
_ZN5ImGui19BeginDragDropTargetEv:
.LFB2106:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4634
	mov	w0, 0
	b	.L4635
.L4634:
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	and	w0, w0, 1
	cmp	w0, 0
	bne	.L4636
	mov	w0, 0
	b	.L4635
.L4636:
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16048]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L4637
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 856]
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 856]
	cmp	x1, x0
	bne	.L4637
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 155]
	cmp	w0, 0
	beq	.L4638
.L4637:
	mov	w0, 0
	b	.L4635
.L4638:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 1836]
	and	w0, w0, 2
	cmp	w0, 0
	beq	.L4639
	ldr	x1, [sp, 32]
	mov	x0, 18256
	add	x0, x1, x0
	b	.L4640
.L4639:
	ldr	x1, [sp, 32]
	mov	x0, 18224
	add	x0, x1, x0
.L4640:
	str	x0, [sp, 56]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 1828]
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	bne	.L4641
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 40]
	bl	_ZN11ImGuiWindow18GetIDFromRectangleERK6ImRect
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	bl	_ZN5ImGui11KeepAliveIDEj
.L4641:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2612]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bne	.L4642
	mov	w0, 0
	b	.L4635
.L4642:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2582]
	cmp	w0, 0
	beq	.L4643
	adrp	x0, .LC648
	add	x3, x0, :lo12:.LC648
	mov	w2, 11968
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC647
	add	x0, x0, :lo12:.LC647
	bl	__assert_fail
.L4643:
	ldr	x1, [sp, 32]
	mov	x0, 18944
	add	x2, x1, x0
	ldr	x0, [sp, 56]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2, 104]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [sp, 28]
	str	w1, [x0, 2680]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	mov	w1, 1
	strb	w1, [x0, 2582]
	mov	w0, 1
.L4635:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2106:
	.size	_ZN5ImGui19BeginDragDropTargetEv, .-_ZN5ImGui19BeginDragDropTargetEv
	.align	2
	.global	_ZN5ImGui30IsDragDropPayloadBeingAcceptedEv
	.type	_ZN5ImGui30IsDragDropPayloadBeingAcceptedEv, %function
_ZN5ImGui30IsDragDropPayloadBeingAcceptedEv:
.LFB2107:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	beq	.L4645
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 2696]
	cmp	w0, 0
	beq	.L4645
	mov	w0, 1
	b	.L4646
.L4645:
	mov	w0, 0
.L4646:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2107:
	.size	_ZN5ImGui30IsDragDropPayloadBeingAcceptedEv, .-_ZN5ImGui30IsDragDropPayloadBeingAcceptedEv
	.section	.rodata
	.align	3
.LC649:
	.string	"const ImGuiPayload* ImGui::AcceptDragDropPayload(const char*, ImGuiDragDropFlags)"
	.align	3
.LC650:
	.string	"payload.DataFrameCount != -1"
	.text
	.align	2
	.global	_ZN5ImGui21AcceptDragDropPayloadEPKci
	.type	_ZN5ImGui21AcceptDragDropPayloadEPKci, %function
_ZN5ImGui21AcceptDragDropPayloadEPKci:
.LFB2108:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	str	x19, [sp, 16]
	str	d8, [sp, 24]
	.cfi_offset 19, -128
	.cfi_offset 72, -120
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 104]
	ldr	x1, [sp, 96]
	mov	x0, 18984
	add	x0, x1, x0
	str	x0, [sp, 112]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	bne	.L4649
	adrp	x0, .LC649
	add	x3, x0, :lo12:.LC649
	mov	w2, 11986
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC638
	add	x0, x0, :lo12:.LC638
	bl	__assert_fail
.L4649:
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 20]
	cmn	w0, #1
	bne	.L4650
	adrp	x0, .LC649
	add	x3, x0, :lo12:.LC649
	mov	w2, 11987
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC650
	add	x0, x0, :lo12:.LC650
	bl	__assert_fail
.L4650:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L4651
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 112]
	bl	_ZNK12ImGuiPayload10IsDataTypeEPKc
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4651
	mov	w0, 1
	b	.L4652
.L4651:
	mov	w0, 0
.L4652:
	cmp	w0, 0
	beq	.L4653
	mov	x0, 0
	b	.L4661
.L4653:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2696]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2680]
	cmp	w1, w0
	cset	w0, eq
	strb	w0, [sp, 59]
	ldr	x1, [sp, 96]
	mov	x0, 18944
	add	x0, x1, x0
	ldp	x0, x1, [x0, 104]
	stp	x0, x1, [sp, 120]
	add	x0, sp, 120
	bl	_ZNK6ImRect8GetWidthEv
	fmov	s8, s0
	add	x0, sp, 120
	bl	_ZNK6ImRect9GetHeightEv
	fmul	s0, s8, s0
	str	s0, [sp, 60]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	s0, [x0, 2688]
	ldr	s1, [sp, 60]
	fcmpe	s1, s0
	bls	.L4663
	b	.L4655
.L4663:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [sp, 36]
	str	w1, [x0, 2684]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w1, [x0, 2680]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2692]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	s0, [sp, 60]
	str	s0, [x0, 2688]
.L4655:
	ldr	x0, [sp, 112]
	ldrb	w1, [sp, 59]
	strb	w1, [x0, 57]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2584]
	and	w0, w0, 2048
	ldr	w1, [sp, 36]
	orr	w0, w1, w0
	str	w0, [sp, 36]
	ldr	w0, [sp, 36]
	and	w0, w0, 2048
	cmp	w0, 0
	bne	.L4657
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 57]
	cmp	w0, 0
	beq	.L4657
	ldr	x0, [sp, 104]
	ldr	x19, [x0, 632]
	add	x0, sp, 64
	fmov	s1, 3.5e+0
	fmov	s0, 3.5e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 64
	add	x0, sp, 120
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	add	x0, sp, 80
	fmov	s1, 3.5e+0
	fmov	s0, 3.5e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 80
	add	x0, sp, 120
	add	x0, x0, 8
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	fmov	s0, 1.0e+0
	mov	w0, 48
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x1, sp, 88
	add	x0, sp, 72
	fmov	s1, 2.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L4657:
	ldr	x0, [sp, 96]
	ldr	w1, [x0, 15904]
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	str	w1, [x0, 2700]
	ldrb	w0, [sp, 59]
	cmp	w0, 0
	beq	.L4658
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2592]
	bl	_ZN5ImGui11IsMouseDownEi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4658
	mov	w1, 1
	b	.L4659
.L4658:
	mov	w1, 0
.L4659:
	ldr	x0, [sp, 112]
	strb	w1, [x0, 58]
	ldr	x0, [sp, 112]
	ldrb	w0, [x0, 58]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4660
	ldr	w0, [sp, 36]
	and	w0, w0, 1024
	cmp	w0, 0
	bne	.L4660
	mov	x0, 0
	b	.L4661
.L4660:
	ldr	x0, [sp, 112]
.L4661:
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 136]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L4662
	bl	__stack_chk_fail
.L4662:
	mov	x0, x1
	ldr	d8, [sp, 24]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2108:
	.size	_ZN5ImGui21AcceptDragDropPayloadEPKci, .-_ZN5ImGui21AcceptDragDropPayloadEPKci
	.align	2
	.global	_ZN5ImGui24RenderDragDropTargetRectERK6ImRect
	.type	_ZN5ImGui24RenderDragDropTargetRectERK6ImRect, %function
_ZN5ImGui24RenderDragDropTargetRectERK6ImRect:
.LFB2109:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	bl	_ZN5ImGui17GetWindowDrawListEv
	mov	x20, x0
	ldr	x19, [sp, 40]
	add	x0, sp, 56
	fmov	s1, 3.5e+0
	fmov	s0, 3.5e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 56
	mov	x1, x0
	mov	x0, x19
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	ldr	x0, [sp, 40]
	add	x19, x0, 8
	add	x0, sp, 72
	fmov	s1, 3.5e+0
	fmov	s0, 3.5e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 72
	mov	x1, x0
	mov	x0, x19
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	fmov	s0, 1.0e+0
	mov	w0, 48
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x1, sp, 80
	add	x0, sp, 64
	fmov	s1, 2.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x20
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4665
	bl	__stack_chk_fail
.L4665:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2109:
	.size	_ZN5ImGui24RenderDragDropTargetRectERK6ImRect, .-_ZN5ImGui24RenderDragDropTargetRectERK6ImRect
	.align	2
	.global	_ZN5ImGui18GetDragDropPayloadEv
	.type	_ZN5ImGui18GetDragDropPayloadEv, %function
_ZN5ImGui18GetDragDropPayloadEv:
.LFB2110:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	beq	.L4667
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	w0, [x0, 2620]
	cmn	w0, #1
	beq	.L4667
	ldr	x1, [sp, 8]
	mov	x0, 18984
	add	x0, x1, x0
	b	.L4668
.L4667:
	mov	x0, 0
.L4668:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2110:
	.size	_ZN5ImGui18GetDragDropPayloadEv, .-_ZN5ImGui18GetDragDropPayloadEv
	.section	.rodata
	.align	3
.LC651:
	.string	"void ImGui::EndDragDropTarget()"
	.align	3
.LC652:
	.string	"g.DragDropWithinTarget"
	.text
	.align	2
	.global	_ZN5ImGui17EndDragDropTargetEv
	.type	_ZN5ImGui17EndDragDropTargetEv, %function
_ZN5ImGui17EndDragDropTargetEv:
.LFB2111:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	cmp	w0, 0
	bne	.L4671
	adrp	x0, .LC651
	add	x3, x0, :lo12:.LC651
	mov	w2, 12033
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC638
	add	x0, x0, :lo12:.LC638
	bl	__assert_fail
.L4671:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2582]
	cmp	w0, 0
	bne	.L4672
	adrp	x0, .LC651
	add	x3, x0, :lo12:.LC651
	mov	w2, 12034
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC652
	add	x0, x0, :lo12:.LC652
	bl	__assert_fail
.L4672:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	strb	wzr, [x0, 2582]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2111:
	.size	_ZN5ImGui17EndDragDropTargetEv, .-_ZN5ImGui17EndDragDropTargetEv
	.align	2
	.type	_ZL8LogTextVR12ImGuiContextPKcSt9__va_list, %function
_ZL8LogTextVR12ImGuiContextPKcSt9__va_list:
.LFB2112:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -64
	str	x0, [sp, 72]
	str	x1, [sp, 64]
	mov	x19, x2
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 23536]
	cmp	x0, 0
	beq	.L4674
	ldr	x1, [sp, 72]
	mov	x0, 23544
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIcE6resizeEi
	ldr	x1, [sp, 72]
	mov	x0, 23544
	add	x3, x1, x0
	add	x0, sp, 32
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x2, x0
	ldr	x1, [sp, 64]
	mov	x0, x3
	bl	_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list
	ldr	x1, [sp, 72]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5c_strEv
	mov	x19, x0
	ldr	x1, [sp, 72]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer4sizeEv
	sxtw	x1, w0
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 23536]
	mov	x3, x0
	mov	x2, x1
	mov	x1, 1
	mov	x0, x19
	bl	_Z11ImFileWritePKvyyP8_IO_FILE
	b	.L4676
.L4674:
	ldr	x1, [sp, 72]
	mov	x0, 23544
	add	x3, x1, x0
	add	x0, sp, 32
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x2, x0
	ldr	x1, [sp, 64]
	mov	x0, x3
	bl	_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list
.L4676:
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2112:
	.size	_ZL8LogTextVR12ImGuiContextPKcSt9__va_list, .-_ZL8LogTextVR12ImGuiContextPKcSt9__va_list
	.align	2
	.global	_ZN5ImGui7LogTextEPKcz
	.type	_ZN5ImGui7LogTextEPKcz, %function
_ZN5ImGui7LogTextEPKcz:
.LFB2113:
	.cfi_startproc
	stp	x29, x30, [sp, -304]!
	.cfi_def_cfa_offset 304
	.cfi_offset 29, -304
	.cfi_offset 30, -296
	mov	x29, sp
	str	x0, [sp, 56]
	str	x1, [sp, 248]
	str	x2, [sp, 256]
	str	x3, [sp, 264]
	str	x4, [sp, 272]
	str	x5, [sp, 280]
	str	x6, [sp, 288]
	str	x7, [sp, 296]
	str	q0, [sp, 112]
	str	q1, [sp, 128]
	str	q2, [sp, 144]
	str	q3, [sp, 160]
	str	q4, [sp, 176]
	str	q5, [sp, 192]
	str	q6, [sp, 208]
	str	q7, [sp, 224]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4681
	add	x0, sp, 304
	str	x0, [sp, 72]
	add	x0, sp, 304
	str	x0, [sp, 80]
	add	x0, sp, 240
	str	x0, [sp, 88]
	mov	w0, -56
	str	w0, [sp, 96]
	mov	w0, -128
	str	w0, [sp, 100]
	add	x0, sp, 16
	add	x1, sp, 72
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 16
	mov	x2, x0
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 64]
	bl	_ZL8LogTextVR12ImGuiContextPKcSt9__va_list
	b	.L4677
.L4681:
	nop
.L4677:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4680
	bl	__stack_chk_fail
.L4680:
	ldp	x29, x30, [sp], 304
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2113:
	.size	_ZN5ImGui7LogTextEPKcz, .-_ZN5ImGui7LogTextEPKcz
	.align	2
	.global	_ZN5ImGui8LogTextVEPKcSt9__va_list
	.type	_ZN5ImGui8LogTextVEPKcSt9__va_list, %function
_ZN5ImGui8LogTextVEPKcSt9__va_list:
.LFB2114:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	x0, [sp, 72]
	mov	x19, x1
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4685
	add	x0, sp, 32
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x2, x0
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 88]
	bl	_ZL8LogTextVR12ImGuiContextPKcSt9__va_list
	b	.L4682
.L4685:
	nop
.L4682:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2114:
	.size	_ZN5ImGui8LogTextVEPKcSt9__va_list, .-_ZN5ImGui8LogTextVEPKcSt9__va_list
	.section	.rodata
	.align	3
.LC653:
	.string	"\n"
	.align	3
.LC654:
	.string	"%*s%.*s"
	.text
	.align	2
	.global	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_
	.type	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_, %function
_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_:
.LFB2115:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 88]
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 23560]
	str	x0, [sp, 96]
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 23568]
	str	x0, [sp, 104]
	ldr	x0, [sp, 80]
	str	xzr, [x0, 23568]
	ldr	x0, [sp, 80]
	ldr	x1, [x0, 23568]
	ldr	x0, [sp, 80]
	str	x1, [x0, 23560]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	bne	.L4687
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui19FindRenderedTextEndEPKcS1_
	str	x0, [sp, 24]
.L4687:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L4688
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 4]
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	ldr	s2, [x0, 7192]
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 14368]
	fadd	s2, s2, s0
	fmov	s0, 1.0e+0
	fadd	s0, s2, s0
	fcmpe	s1, s0
	bgt	.L4703
	b	.L4688
.L4703:
	mov	w0, 1
	b	.L4690
.L4688:
	mov	w0, 0
.L4690:
	strb	w0, [sp, 58]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L4691
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	str	s0, [x0, 7192]
.L4691:
	ldrb	w0, [sp, 58]
	cmp	w0, 0
	beq	.L4692
	adrp	x0, .LC653
	add	x0, x0, :lo12:.LC653
	bl	_ZN5ImGui7LogTextEPKcz
	ldr	x0, [sp, 80]
	add	x0, x0, 20480
	mov	w1, 1
	strb	w1, [x0, 3100]
.L4692:
	ldr	x0, [sp, 96]
	cmp	x0, 0
	beq	.L4693
	ldr	x0, [sp, 96]
	bl	strlen
	mov	x1, x0
	ldr	x0, [sp, 96]
	add	x0, x0, x1
	mov	x2, x0
	ldr	x1, [sp, 96]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_
.L4693:
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	ldr	w1, [x0, 7200]
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 360]
	cmp	w1, w0
	ble	.L4694
	ldr	x0, [sp, 88]
	ldr	w1, [x0, 360]
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	str	w1, [x0, 7200]
.L4694:
	ldr	x0, [sp, 88]
	ldr	w1, [x0, 360]
	ldr	x0, [sp, 80]
	add	x0, x0, 16384
	ldr	w0, [x0, 7200]
	sub	w0, w1, w0
	str	w0, [sp, 60]
	ldr	x0, [sp, 32]
	str	x0, [sp, 72]
.L4701:
	ldr	x0, [sp, 72]
	str	x0, [sp, 112]
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 112]
	bl	_Z13ImStreolRangePKcS0_
	str	x0, [sp, 120]
	ldr	x1, [sp, 120]
	ldr	x0, [sp, 24]
	cmp	x1, x0
	cset	w0, eq
	strb	w0, [sp, 59]
	ldr	x1, [sp, 112]
	ldr	x0, [sp, 120]
	cmp	x1, x0
	bne	.L4695
	ldrb	w0, [sp, 59]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4696
.L4695:
	ldr	x1, [sp, 120]
	ldr	x0, [sp, 112]
	sub	x0, x1, x0
	str	w0, [sp, 64]
	ldr	x0, [sp, 80]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3100]
	cmp	w0, 0
	beq	.L4697
	ldr	w0, [sp, 60]
	lsl	w0, w0, 2
	b	.L4698
.L4697:
	mov	w0, 1
.L4698:
	str	w0, [sp, 68]
	ldr	x4, [sp, 112]
	ldr	w3, [sp, 64]
	adrp	x0, .LC67
	add	x2, x0, :lo12:.LC67
	ldr	w1, [sp, 68]
	adrp	x0, .LC654
	add	x0, x0, :lo12:.LC654
	bl	_ZN5ImGui7LogTextEPKcz
	ldr	x0, [sp, 80]
	add	x0, x0, 20480
	strb	wzr, [x0, 3100]
	ldr	x0, [sp, 120]
	ldrb	w0, [x0]
	cmp	w0, 10
	bne	.L4696
	adrp	x0, .LC653
	add	x0, x0, :lo12:.LC653
	bl	_ZN5ImGui7LogTextEPKcz
	ldr	x0, [sp, 80]
	add	x0, x0, 20480
	mov	w1, 1
	strb	w1, [x0, 3100]
.L4696:
	ldrb	w0, [sp, 59]
	cmp	w0, 0
	bne	.L4705
	ldr	x0, [sp, 120]
	add	x0, x0, 1
	str	x0, [sp, 72]
	b	.L4701
.L4705:
	nop
	ldr	x0, [sp, 104]
	cmp	x0, 0
	beq	.L4706
	ldr	x0, [sp, 104]
	bl	strlen
	mov	x1, x0
	ldr	x0, [sp, 104]
	add	x0, x0, x1
	mov	x2, x0
	ldr	x1, [sp, 104]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_
.L4706:
	nop
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2115:
	.size	_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_, .-_ZN5ImGui15LogRenderedTextEPK6ImVec2PKcS4_
	.section	.rodata
	.align	3
.LC655:
	.string	"void ImGui::LogBegin(ImGuiLogType, int)"
	.align	3
.LC656:
	.string	"g.LogEnabled == false"
	.align	3
.LC657:
	.string	"g.LogFile == __null"
	.align	3
.LC658:
	.string	"g.LogBuffer.empty()"
	.text
	.align	2
	.global	_ZN5ImGui8LogBeginE12ImGuiLogTypei
	.type	_ZN5ImGui8LogBeginE12ImGuiLogTypei, %function
_ZN5ImGui8LogBeginE12ImGuiLogTypei:
.LFB2116:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	w1, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	beq	.L4708
	adrp	x0, .LC655
	add	x3, x0, :lo12:.LC655
	mov	w2, 12147
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC656
	add	x0, x0, :lo12:.LC656
	bl	__assert_fail
.L4708:
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 23536]
	cmp	x0, 0
	beq	.L4709
	adrp	x0, .LC655
	add	x3, x0, :lo12:.LC655
	mov	w2, 12148
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC657
	add	x0, x0, :lo12:.LC657
	bl	__assert_fail
.L4709:
	ldr	x1, [sp, 32]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4710
	adrp	x0, .LC655
	add	x3, x0, :lo12:.LC655
	mov	w2, 12149
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC658
	add	x0, x0, :lo12:.LC658
	bl	__assert_fail
.L4710:
	ldr	x0, [sp, 32]
	add	x0, x0, 20480
	mov	w1, 1
	strb	w1, [x0, 3048]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w1, [sp, 28]
	str	w1, [x0, 7148]
	ldr	x0, [sp, 32]
	str	xzr, [x0, 23568]
	ldr	x0, [sp, 32]
	ldr	x1, [x0, 23568]
	ldr	x0, [sp, 32]
	str	x1, [x0, 23560]
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 360]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	str	w1, [x0, 7200]
	ldr	w0, [sp, 24]
	cmp	w0, 0
	bge	.L4711
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 7208]
	b	.L4712
.L4711:
	ldr	w0, [sp, 24]
.L4712:
	ldr	x1, [sp, 32]
	add	x1, x1, 16384
	str	w0, [x1, 7204]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	mov	w1, 2139095039
	fmov	s0, w1
	str	s0, [x0, 7192]
	ldr	x0, [sp, 32]
	add	x0, x0, 20480
	mov	w1, 1
	strb	w1, [x0, 3100]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2116:
	.size	_ZN5ImGui8LogBeginE12ImGuiLogTypei, .-_ZN5ImGui8LogBeginE12ImGuiLogTypei
	.align	2
	.global	_ZN5ImGui24LogSetNextTextDecorationEPKcS1_
	.type	_ZN5ImGui24LogSetNextTextDecorationEPKcS1_, %function
_ZN5ImGui24LogSetNextTextDecorationEPKcS1_:
.LFB2117:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	x1, [sp]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 8]
	str	x1, [x0, 23560]
	ldr	x0, [sp, 24]
	ldr	x1, [sp]
	str	x1, [x0, 23568]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2117:
	.size	_ZN5ImGui24LogSetNextTextDecorationEPKcS1_, .-_ZN5ImGui24LogSetNextTextDecorationEPKcS1_
	.align	2
	.global	_ZN5ImGui8LogToTTYEi
	.type	_ZN5ImGui8LogToTTYEi, %function
_ZN5ImGui8LogToTTYEi:
.LFB2118:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	bne	.L4717
	ldr	w1, [sp, 28]
	mov	w0, 1
	bl	_ZN5ImGui8LogBeginE12ImGuiLogTypei
	adrp	x0, :got:stdout
	ldr	x0, [x0, #:got_lo12:stdout]
	ldr	x1, [x0]
	ldr	x0, [sp, 40]
	str	x1, [x0, 23536]
	b	.L4714
.L4717:
	nop
.L4714:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2118:
	.size	_ZN5ImGui8LogToTTYEi, .-_ZN5ImGui8LogToTTYEi
	.section	.rodata
	.align	3
.LC659:
	.string	"ab"
	.align	3
.LC660:
	.string	"void ImGui::LogToFile(int, const char*)"
	.text
	.align	2
	.global	_ZN5ImGui9LogToFileEiPKc
	.type	_ZN5ImGui9LogToFileEiPKc, %function
_ZN5ImGui9LogToFileEiPKc:
.LFB2119:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	str	x1, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	bne	.L4725
	ldr	x0, [sp, 16]
	cmp	x0, 0
	bne	.L4721
	ldr	x0, [sp, 32]
	ldr	x0, [x0, 40]
	str	x0, [sp, 16]
.L4721:
	ldr	x0, [sp, 16]
	cmp	x0, 0
	beq	.L4726
	ldr	x0, [sp, 16]
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L4726
	adrp	x0, .LC659
	add	x1, x0, :lo12:.LC659
	ldr	x0, [sp, 16]
	bl	_Z10ImFileOpenPKcS0_
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	bne	.L4724
	adrp	x0, .LC660
	add	x3, x0, :lo12:.LC660
	mov	w2, 12196
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L4724:
	ldr	w1, [sp, 28]
	mov	w0, 2
	bl	_ZN5ImGui8LogBeginE12ImGuiLogTypei
	ldr	x0, [sp, 32]
	ldr	x1, [sp, 40]
	str	x1, [x0, 23536]
	b	.L4718
.L4725:
	nop
	b	.L4718
.L4726:
	nop
.L4718:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2119:
	.size	_ZN5ImGui9LogToFileEiPKc, .-_ZN5ImGui9LogToFileEiPKc
	.align	2
	.global	_ZN5ImGui14LogToClipboardEi
	.type	_ZN5ImGui14LogToClipboardEi, %function
_ZN5ImGui14LogToClipboardEi:
.LFB2120:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	bne	.L4730
	ldr	w1, [sp, 28]
	mov	w0, 4
	bl	_ZN5ImGui8LogBeginE12ImGuiLogTypei
	b	.L4727
.L4730:
	nop
.L4727:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2120:
	.size	_ZN5ImGui14LogToClipboardEi, .-_ZN5ImGui14LogToClipboardEi
	.align	2
	.global	_ZN5ImGui11LogToBufferEi
	.type	_ZN5ImGui11LogToBufferEi, %function
_ZN5ImGui11LogToBufferEi:
.LFB2121:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	cmp	w0, 0
	bne	.L4734
	ldr	w1, [sp, 28]
	mov	w0, 3
	bl	_ZN5ImGui8LogBeginE12ImGuiLogTypei
	b	.L4731
.L4734:
	nop
.L4731:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2121:
	.size	_ZN5ImGui11LogToBufferEi, .-_ZN5ImGui11LogToBufferEi
	.section	.rodata
	.align	3
.LC661:
	.string	"void ImGui::LogFinish()"
	.text
	.align	2
	.global	_ZN5ImGui9LogFinishEv
	.type	_ZN5ImGui9LogFinishEv, %function
_ZN5ImGui9LogFinishEv:
.LFB2122:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3048]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4744
	adrp	x0, .LC653
	add	x0, x0, :lo12:.LC653
	bl	_ZN5ImGui7LogTextEPKcz
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w0, [x0, 7148]
	cmp	w0, 4
	beq	.L4738
	cmp	w0, 4
	bgt	.L4739
	cmp	w0, 3
	beq	.L4745
	cmp	w0, 3
	bgt	.L4739
	cmp	w0, 2
	beq	.L4741
	cmp	w0, 2
	bgt	.L4739
	cmp	w0, 0
	beq	.L4742
	cmp	w0, 1
	bne	.L4739
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 23536]
	bl	fflush
	b	.L4739
.L4741:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 23536]
	bl	_Z11ImFileCloseP8_IO_FILE
	b	.L4739
.L4738:
	ldr	x1, [sp, 24]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5emptyEv
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4746
	ldr	x1, [sp, 24]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5beginEv
	bl	_ZN5ImGui16SetClipboardTextEPKc
	b	.L4746
.L4742:
	adrp	x0, .LC661
	add	x3, x0, :lo12:.LC661
	mov	w2, 12245
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L4745:
	nop
	b	.L4739
.L4746:
	nop
.L4739:
	ldr	x0, [sp, 24]
	add	x0, x0, 20480
	strb	wzr, [x0, 3048]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	wzr, [x0, 7148]
	ldr	x0, [sp, 24]
	str	xzr, [x0, 23536]
	ldr	x1, [sp, 24]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBuffer5clearEv
	b	.L4735
.L4744:
	nop
.L4735:
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2122:
	.size	_ZN5ImGui9LogFinishEv, .-_ZN5ImGui9LogFinishEv
	.section	.rodata
	.align	3
.LC662:
	.string	"LogButtons"
	.align	3
.LC663:
	.string	"Log To TTY"
	.align	3
.LC664:
	.string	"Log To File"
	.align	3
.LC665:
	.string	"Log To Clipboard"
	.align	3
.LC666:
	.string	"Default Depth"
	.text
	.align	2
	.global	_ZN5ImGui10LogButtonsEv
	.type	_ZN5ImGui10LogButtonsEv, %function
_ZN5ImGui10LogButtonsEv:
.LFB2123:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 40]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	adrp	x0, .LC662
	add	x0, x0, :lo12:.LC662
	bl	_ZN5ImGui6PushIDEPKc
	add	x0, sp, 24
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 24
	mov	x1, x0
	adrp	x0, .LC663
	add	x0, x0, :lo12:.LC663
	bl	_ZN5ImGui6ButtonEPKcRK6ImVec2
	and	w0, w0, 255
	strb	w0, [sp, 21]
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	add	x0, sp, 24
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 24
	mov	x1, x0
	adrp	x0, .LC664
	add	x0, x0, :lo12:.LC664
	bl	_ZN5ImGui6ButtonEPKcRK6ImVec2
	and	w0, w0, 255
	strb	w0, [sp, 22]
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	add	x0, sp, 24
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 24
	mov	x1, x0
	adrp	x0, .LC665
	add	x0, x0, :lo12:.LC665
	bl	_ZN5ImGui6ButtonEPKcRK6ImVec2
	and	w0, w0, 255
	strb	w0, [sp, 23]
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	mov	w0, 0
	bl	_ZN5ImGui22PushAllowKeyboardFocusEb
	mov	w0, 1117782016
	fmov	s0, w0
	bl	_ZN5ImGui16SetNextItemWidthEf
	ldr	x1, [sp, 32]
	mov	x0, 23592
	add	x0, x1, x0
	mov	w5, 0
	mov	x4, 0
	mov	w3, 9
	mov	w2, 0
	mov	x1, x0
	adrp	x0, .LC666
	add	x0, x0, :lo12:.LC666
	bl	_ZN5ImGui9SliderIntEPKcPiiiS1_i
	bl	_ZN5ImGui21PopAllowKeyboardFocusEv
	bl	_ZN5ImGui5PopIDEv
	ldrb	w0, [sp, 21]
	cmp	w0, 0
	beq	.L4748
	mov	w0, -1
	bl	_ZN5ImGui8LogToTTYEi
.L4748:
	ldrb	w0, [sp, 22]
	cmp	w0, 0
	beq	.L4749
	mov	x1, 0
	mov	w0, -1
	bl	_ZN5ImGui9LogToFileEiPKc
.L4749:
	ldrb	w0, [sp, 23]
	cmp	w0, 0
	beq	.L4752
	mov	w0, -1
	bl	_ZN5ImGui14LogToClipboardEi
.L4752:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 40]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4751
	bl	__stack_chk_fail
.L4751:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2123:
	.size	_ZN5ImGui10LogButtonsEv, .-_ZN5ImGui10LogButtonsEv
	.section	.rodata
	.align	3
.LC667:
	.string	"void ImGui::UpdateSettings()"
	.align	3
.LC668:
	.string	"g.SettingsWindows.empty()"
	.text
	.align	2
	.type	_ZN5ImGuiL14UpdateSettingsEv, %function
_ZN5ImGuiL14UpdateSettingsEv:
.LFB2124:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 20480
	ldrb	w0, [x0, 2897]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4754
	ldr	x1, [sp, 24]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4755
	adrp	x0, .LC667
	add	x3, x0, :lo12:.LC667
	mov	w2, 12309
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC668
	add	x0, x0, :lo12:.LC668
	bl	__assert_fail
.L4755:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 32]
	cmp	x0, 0
	beq	.L4756
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 32]
	bl	_ZN5ImGui23LoadIniSettingsFromDiskEPKc
.L4756:
	ldr	x0, [sp, 24]
	add	x0, x0, 20480
	mov	w1, 1
	strb	w1, [x0, 2897]
.L4754:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	s0, [x0, 6996]
	fcmpe	s0, #0.0
	bgt	.L4762
	b	.L4764
.L4762:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	s1, [x0, 6996]
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 24]
	fsub	s0, s1, s0
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	s0, [x0, 6996]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	s0, [x0, 6996]
	fcmpe	s0, #0.0
	bls	.L4763
	b	.L4764
.L4763:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 32]
	cmp	x0, 0
	beq	.L4760
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 32]
	bl	_ZN5ImGui21SaveIniSettingsToDiskEPKc
	b	.L4761
.L4760:
	ldr	x0, [sp, 24]
	mov	w1, 1
	strb	w1, [x0, 220]
.L4761:
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	wzr, [x0, 6996]
.L4764:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2124:
	.size	_ZN5ImGuiL14UpdateSettingsEv, .-_ZN5ImGuiL14UpdateSettingsEv
	.align	2
	.global	_ZN5ImGui20MarkIniSettingsDirtyEv
	.type	_ZN5ImGui20MarkIniSettingsDirtyEv, %function
_ZN5ImGui20MarkIniSettingsDirtyEv:
.LFB2125:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	ldr	s0, [x0, 6996]
	fcmpe	s0, #0.0
	bls	.L4768
	b	.L4769
.L4768:
	ldr	x0, [sp, 8]
	ldr	s0, [x0, 28]
	ldr	x0, [sp, 8]
	add	x0, x0, 16384
	str	s0, [x0, 6996]
.L4769:
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2125:
	.size	_ZN5ImGui20MarkIniSettingsDirtyEv, .-_ZN5ImGui20MarkIniSettingsDirtyEv
	.align	2
	.global	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow
	.type	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow, %function
_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow:
.LFB2126:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 12]
	and	w0, w0, 256
	cmp	w0, 0
	bne	.L4774
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	s0, [x0, 6996]
	fcmpe	s0, #0.0
	bls	.L4773
	b	.L4774
.L4773:
	ldr	x0, [sp, 24]
	ldr	s0, [x0, 28]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	str	s0, [x0, 6996]
.L4774:
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2126:
	.size	_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow, .-_ZN5ImGui20MarkIniSettingsDirtyEP11ImGuiWindow
	.section	.rodata
	.align	3
.LC669:
	.string	"###"
	.text
	.align	2
	.global	_ZN5ImGui23CreateNewWindowSettingsEPKc
	.type	_ZN5ImGui23CreateNewWindowSettingsEPKc, %function
_ZN5ImGui23CreateNewWindowSettingsEPKc:
.LFB2127:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -80
	str	x0, [sp, 40]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 56]
	adrp	x0, .LC669
	add	x1, x0, :lo12:.LC669
	ldr	x0, [sp, 40]
	bl	strstr
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L4776
	ldr	x0, [sp, 64]
	str	x0, [sp, 40]
.L4776:
	ldr	x0, [sp, 40]
	bl	strlen
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	add	x0, x0, 17
	str	x0, [sp, 80]
	ldr	x1, [sp, 56]
	mov	x0, 23416
	add	x0, x1, x0
	ldr	x1, [sp, 80]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE11alloc_chunkEm
	str	x0, [sp, 88]
	ldr	x2, [sp, 88]
	mov	w1, w19
	mov	x0, 16
	bl	_Znwm12ImNewWrapperPv
	bl	_ZN19ImGuiWindowSettingsC1Ev
	mov	w2, 0
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 40]
	bl	_Z9ImHashStrPKcmj
	mov	w1, w0
	ldr	x0, [sp, 88]
	str	w1, [x0]
	ldr	x0, [sp, 88]
	bl	_ZN19ImGuiWindowSettings7GetNameEv
	mov	x3, x0
	ldr	x0, [sp, 72]
	add	x0, x0, 1
	mov	x2, x0
	ldr	x1, [sp, 40]
	mov	x0, x3
	bl	memcpy
	ldr	x0, [sp, 88]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2127:
	.size	_ZN5ImGui23CreateNewWindowSettingsEPKc, .-_ZN5ImGui23CreateNewWindowSettingsEPKc
	.align	2
	.global	_ZN5ImGui18FindWindowSettingsEj
	.type	_ZN5ImGui18FindWindowSettingsEj, %function
_ZN5ImGui18FindWindowSettingsEj:
.LFB2128:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	w0, [sp, 28]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv
	str	x0, [sp, 32]
	b	.L4779
.L4782:
	ldr	x0, [sp, 32]
	ldr	w0, [x0]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bne	.L4780
	ldr	x0, [sp, 32]
	b	.L4781
.L4780:
	ldr	x1, [sp, 40]
	mov	x0, 23416
	add	x0, x1, x0
	ldr	x1, [sp, 32]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_
	str	x0, [sp, 32]
.L4779:
	ldr	x0, [sp, 32]
	cmp	x0, 0
	bne	.L4782
	mov	x0, 0
.L4781:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2128:
	.size	_ZN5ImGui18FindWindowSettingsEj, .-_ZN5ImGui18FindWindowSettingsEj
	.align	2
	.global	_ZN5ImGui26FindOrCreateWindowSettingsEPKc
	.type	_ZN5ImGui26FindOrCreateWindowSettingsEPKc, %function
_ZN5ImGui26FindOrCreateWindowSettingsEPKc:
.LFB2129:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	mov	w2, 0
	mov	x1, 0
	ldr	x0, [sp, 24]
	bl	_Z9ImHashStrPKcmj
	bl	_ZN5ImGui18FindWindowSettingsEj
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L4784
	ldr	x0, [sp, 40]
	b	.L4785
.L4784:
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui23CreateNewWindowSettingsEPKc
	nop
.L4785:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2129:
	.size	_ZN5ImGui26FindOrCreateWindowSettingsEPKc, .-_ZN5ImGui26FindOrCreateWindowSettingsEPKc
	.section	.rodata
	.align	3
.LC670:
	.string	"void ImGui::AddSettingsHandler(const ImGuiSettingsHandler*)"
	.align	3
.LC671:
	.string	"FindSettingsHandler(handler->TypeName) == __null"
	.text
	.align	2
	.global	_ZN5ImGui18AddSettingsHandlerEPK20ImGuiSettingsHandler
	.type	_ZN5ImGui18AddSettingsHandlerEPK20ImGuiSettingsHandler, %function
_ZN5ImGui18AddSettingsHandlerEPK20ImGuiSettingsHandler:
.LFB2130:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	bl	_ZN5ImGui19FindSettingsHandlerEPKc
	cmp	x0, 0
	beq	.L4787
	adrp	x0, .LC670
	add	x3, x0, :lo12:.LC670
	mov	w2, 12386
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC671
	add	x0, x0, :lo12:.LC671
	bl	__assert_fail
.L4787:
	ldr	x1, [sp, 40]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	x1, [sp, 24]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerE9push_backERKS0_
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2130:
	.size	_ZN5ImGui18AddSettingsHandlerEPK20ImGuiSettingsHandler, .-_ZN5ImGui18AddSettingsHandlerEPK20ImGuiSettingsHandler
	.align	2
	.global	_ZN5ImGui21RemoveSettingsHandlerEPKc
	.type	_ZN5ImGui21RemoveSettingsHandlerEPKc, %function
_ZN5ImGui21RemoveSettingsHandlerEPKc:
.LFB2131:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui19FindSettingsHandlerEPKc
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L4790
	ldr	x1, [sp, 32]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	x1, [sp, 40]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerE5eraseEPKS0_
.L4790:
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2131:
	.size	_ZN5ImGui21RemoveSettingsHandlerEPKc, .-_ZN5ImGui21RemoveSettingsHandlerEPKc
	.align	2
	.global	_ZN5ImGui19FindSettingsHandlerEPKc
	.type	_ZN5ImGui19FindSettingsHandlerEPKc, %function
_ZN5ImGui19FindSettingsHandlerEPKc:
.LFB2132:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	mov	w2, 0
	mov	x1, 0
	ldr	x0, [sp, 24]
	bl	_Z9ImHashStrPKcmj
	str	w0, [sp, 36]
	str	wzr, [sp, 32]
	b	.L4792
.L4795:
	ldr	x1, [sp, 40]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 32]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4793
	ldr	x1, [sp, 40]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 32]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	b	.L4794
.L4793:
	ldr	w0, [sp, 32]
	add	w0, w0, 1
	str	w0, [sp, 32]
.L4792:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7016]
	ldr	w1, [sp, 32]
	cmp	w1, w0
	blt	.L4795
	mov	x0, 0
.L4794:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2132:
	.size	_ZN5ImGui19FindSettingsHandlerEPKc, .-_ZN5ImGui19FindSettingsHandlerEPKc
	.align	2
	.global	_ZN5ImGui16ClearIniSettingsEv
	.type	_ZN5ImGui16ClearIniSettingsEv, %function
_ZN5ImGui16ClearIniSettingsEv:
.LFB2133:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	mov	x0, 23384
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBuffer5clearEv
	str	wzr, [sp, 36]
	b	.L4797
.L4799:
	ldr	x1, [sp, 40]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	ldr	x0, [x0, 16]
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4798
	ldr	x1, [sp, 40]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	ldr	x19, [x0, 16]
	ldr	x1, [sp, 40]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	mov	x1, x0
	ldr	x0, [sp, 40]
	blr	x19
.L4798:
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L4797:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7016]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	blt	.L4799
	nop
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2133:
	.size	_ZN5ImGui16ClearIniSettingsEv, .-_ZN5ImGui16ClearIniSettingsEv
	.section	.rodata
	.align	3
.LC672:
	.string	"rb"
	.text
	.align	2
	.global	_ZN5ImGui23LoadIniSettingsFromDiskEPKc
	.type	_ZN5ImGui23LoadIniSettingsFromDiskEPKc, %function
_ZN5ImGui23LoadIniSettingsFromDiskEPKc:
.LFB2134:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	str	xzr, [sp, 40]
	add	x0, sp, 40
	mov	w3, 0
	mov	x2, x0
	adrp	x0, .LC672
	add	x1, x0, :lo12:.LC672
	ldr	x0, [sp, 24]
	bl	_Z18ImFileLoadToMemoryPKcS0_Pmi
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	cmp	x0, 0
	beq	.L4805
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L4803
	ldr	x0, [sp, 40]
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm
.L4803:
	ldr	x0, [sp, 48]
	bl	_ZN5ImGui7MemFreeEPv
	b	.L4800
.L4805:
	nop
.L4800:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4804
	bl	__stack_chk_fail
.L4804:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2134:
	.size	_ZN5ImGui23LoadIniSettingsFromDiskEPKc, .-_ZN5ImGui23LoadIniSettingsFromDiskEPKc
	.section	.rodata
	.align	3
.LC673:
	.string	"void ImGui::LoadIniSettingsFromMemory(const char*, size_t)"
	.text
	.align	2
	.global	_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm
	.type	_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm, %function
_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm:
.LFB2135:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -128
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L4807
	adrp	x0, .LC673
	add	x3, x0, :lo12:.LC673
	mov	w2, 12431
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC214
	add	x0, x0, :lo12:.LC214
	bl	__assert_fail
.L4807:
	ldr	x0, [sp, 32]
	cmp	x0, 0
	bne	.L4808
	ldr	x0, [sp, 40]
	bl	strlen
	str	x0, [sp, 32]
.L4808:
	ldr	x1, [sp, 88]
	mov	x0, 23384
	add	x0, x1, x0
	ldr	x1, [sp, 32]
	add	w1, w1, 1
	bl	_ZN8ImVectorIcE6resizeEi
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 23392]
	str	x0, [sp, 96]
	ldr	x1, [sp, 96]
	ldr	x0, [sp, 32]
	add	x0, x1, x0
	str	x0, [sp, 104]
	ldr	x2, [sp, 32]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 96]
	bl	memcpy
	ldr	x0, [sp, 104]
	strb	wzr, [x0]
	str	wzr, [sp, 48]
	b	.L4809
.L4811:
	ldr	x1, [sp, 88]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 48]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	ldr	x0, [x0, 24]
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4810
	ldr	x1, [sp, 88]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 48]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	ldr	x19, [x0, 24]
	ldr	x1, [sp, 88]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 48]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	mov	x1, x0
	ldr	x0, [sp, 88]
	blr	x19
.L4810:
	ldr	w0, [sp, 48]
	add	w0, w0, 1
	str	w0, [sp, 48]
.L4809:
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 7016]
	ldr	w1, [sp, 48]
	cmp	w1, w0
	blt	.L4811
	str	xzr, [sp, 56]
	str	xzr, [sp, 64]
	str	xzr, [sp, 72]
	ldr	x0, [sp, 96]
	str	x0, [sp, 80]
	b	.L4812
.L4814:
	ldr	x0, [sp, 80]
	add	x0, x0, 1
	str	x0, [sp, 80]
.L4813:
	ldr	x0, [sp, 80]
	ldrb	w0, [x0]
	cmp	w0, 10
	beq	.L4814
	ldr	x0, [sp, 80]
	ldrb	w0, [x0]
	cmp	w0, 13
	beq	.L4814
	ldr	x0, [sp, 80]
	str	x0, [sp, 72]
	b	.L4815
.L4817:
	ldr	x0, [sp, 72]
	add	x0, x0, 1
	str	x0, [sp, 72]
.L4815:
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 104]
	cmp	x1, x0
	bcs	.L4816
	ldr	x0, [sp, 72]
	ldrb	w0, [x0]
	cmp	w0, 10
	beq	.L4816
	ldr	x0, [sp, 72]
	ldrb	w0, [x0]
	cmp	w0, 13
	bne	.L4817
.L4816:
	ldr	x0, [sp, 72]
	strb	wzr, [x0]
	ldr	x0, [sp, 80]
	ldrb	w0, [x0]
	cmp	w0, 59
	beq	.L4831
	ldr	x0, [sp, 80]
	ldrb	w0, [x0]
	cmp	w0, 91
	bne	.L4820
	ldr	x1, [sp, 72]
	ldr	x0, [sp, 80]
	cmp	x1, x0
	bls	.L4820
	ldr	x0, [sp, 72]
	sub	x0, x0, #1
	ldrb	w0, [x0]
	cmp	w0, 93
	bne	.L4820
	ldr	x0, [sp, 72]
	sub	x0, x0, #1
	strb	wzr, [x0]
	ldr	x0, [sp, 72]
	sub	x0, x0, #1
	str	x0, [sp, 112]
	ldr	x0, [sp, 80]
	add	x0, x0, 1
	str	x0, [sp, 120]
	mov	w2, 93
	ldr	x1, [sp, 112]
	ldr	x0, [sp, 120]
	bl	_Z13ImStrchrRangePKcS0_c
	str	x0, [sp, 128]
	ldr	x0, [sp, 128]
	cmp	x0, 0
	beq	.L4821
	ldr	x0, [sp, 128]
	add	x0, x0, 1
	mov	w2, 91
	ldr	x1, [sp, 112]
	bl	_Z13ImStrchrRangePKcS0_c
	b	.L4822
.L4821:
	mov	x0, 0
.L4822:
	str	x0, [sp, 136]
	ldr	x0, [sp, 128]
	cmp	x0, 0
	beq	.L4832
	ldr	x0, [sp, 136]
	cmp	x0, 0
	beq	.L4832
	ldr	x0, [sp, 128]
	strb	wzr, [x0]
	ldr	x0, [sp, 136]
	add	x0, x0, 1
	str	x0, [sp, 136]
	ldr	x0, [sp, 120]
	bl	_ZN5ImGui19FindSettingsHandlerEPKc
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L4825
	ldr	x0, [sp, 64]
	ldr	x3, [x0, 32]
	ldr	x2, [sp, 136]
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 88]
	blr	x3
	b	.L4826
.L4825:
	mov	x0, 0
.L4826:
	str	x0, [sp, 56]
	b	.L4819
.L4820:
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L4819
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L4819
	ldr	x0, [sp, 64]
	ldr	x4, [x0, 40]
	ldr	x3, [sp, 80]
	ldr	x2, [sp, 56]
	ldr	x1, [sp, 64]
	ldr	x0, [sp, 88]
	blr	x4
	b	.L4819
.L4831:
	nop
	b	.L4819
.L4832:
	nop
.L4819:
	ldr	x0, [sp, 72]
	add	x0, x0, 1
	str	x0, [sp, 80]
.L4812:
	ldr	x1, [sp, 80]
	ldr	x0, [sp, 104]
	cmp	x1, x0
	bcc	.L4813
	ldr	x0, [sp, 88]
	add	x0, x0, 20480
	mov	w1, 1
	strb	w1, [x0, 2897]
	ldr	x2, [sp, 32]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 96]
	bl	memcpy
	str	wzr, [sp, 52]
	b	.L4828
.L4830:
	ldr	x1, [sp, 88]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	ldr	x0, [x0, 48]
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4829
	ldr	x1, [sp, 88]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	ldr	x19, [x0, 48]
	ldr	x1, [sp, 88]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	mov	x1, x0
	ldr	x0, [sp, 88]
	blr	x19
.L4829:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L4828:
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 7016]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	blt	.L4830
	nop
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2135:
	.size	_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm, .-_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm
	.section	.rodata
	.align	3
.LC674:
	.string	"wt"
	.text
	.align	2
	.global	_ZN5ImGui21SaveIniSettingsToDiskEPKc
	.type	_ZN5ImGui21SaveIniSettingsToDiskEPKc, %function
_ZN5ImGui21SaveIniSettingsToDiskEPKc:
.LFB2136:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	add	x0, x0, 16384
	str	wzr, [x0, 6996]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L4839
	str	xzr, [sp, 40]
	add	x0, sp, 40
	bl	_ZN5ImGui23SaveIniSettingsToMemoryEPm
	str	x0, [sp, 56]
	adrp	x0, .LC674
	add	x1, x0, :lo12:.LC674
	ldr	x0, [sp, 24]
	bl	_Z10ImFileOpenPKcS0_
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	cmp	x0, 0
	beq	.L4840
	ldr	x0, [sp, 40]
	ldr	x3, [sp, 64]
	mov	x2, x0
	mov	x1, 1
	ldr	x0, [sp, 56]
	bl	_Z11ImFileWritePKvyyP8_IO_FILE
	ldr	x0, [sp, 64]
	bl	_Z11ImFileCloseP8_IO_FILE
	b	.L4833
.L4839:
	nop
	b	.L4833
.L4840:
	nop
.L4833:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4838
	bl	__stack_chk_fail
.L4838:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2136:
	.size	_ZN5ImGui21SaveIniSettingsToDiskEPKc, .-_ZN5ImGui21SaveIniSettingsToDiskEPKc
	.align	2
	.global	_ZN5ImGui23SaveIniSettingsToMemoryEPm
	.type	_ZN5ImGui23SaveIniSettingsToMemoryEPm, %function
_ZN5ImGui23SaveIniSettingsToMemoryEPm:
.LFB2137:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	wzr, [x0, 6996]
	ldr	x1, [sp, 40]
	mov	x0, 23384
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIcE6resizeEi
	ldr	x1, [sp, 40]
	mov	x0, 23384
	add	x0, x1, x0
	strb	wzr, [sp, 35]
	add	x1, sp, 35
	bl	_ZN8ImVectorIcE9push_backERKc
	str	wzr, [sp, 36]
	b	.L4842
.L4843:
	ldr	x1, [sp, 40]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x3, [x0, 56]
	ldr	x1, [sp, 40]
	mov	x0, 23384
	add	x0, x1, x0
	mov	x2, x0
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 40]
	blr	x3
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L4842:
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w0, [x0, 7016]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	blt	.L4843
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L4844
	ldr	x1, [sp, 40]
	mov	x0, 23384
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer4sizeEv
	sxtw	x1, w0
	ldr	x0, [sp, 24]
	str	x1, [x0]
.L4844:
	ldr	x1, [sp, 40]
	mov	x0, 23384
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5c_strEv
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 56]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L4846
	bl	__stack_chk_fail
.L4846:
	mov	x0, x1
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2137:
	.size	_ZN5ImGui23SaveIniSettingsToMemoryEPm, .-_ZN5ImGui23SaveIniSettingsToMemoryEPm
	.align	2
	.type	_ZL30WindowSettingsHandler_ClearAllP12ImGuiContextP20ImGuiSettingsHandler, %function
_ZL30WindowSettingsHandler_ClearAllP12ImGuiContextP20ImGuiSettingsHandler:
.LFB2138:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	str	x0, [sp, 40]
	str	wzr, [sp, 36]
	b	.L4848
.L4849:
	ldr	x1, [sp, 40]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	mov	w1, -1
	str	w1, [x0, 628]
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L4848:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bne	.L4849
	ldr	x1, [sp, 40]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2138:
	.size	_ZL30WindowSettingsHandler_ClearAllP12ImGuiContextP20ImGuiSettingsHandler, .-_ZL30WindowSettingsHandler_ClearAllP12ImGuiContextP20ImGuiSettingsHandler
	.align	2
	.type	_ZL30WindowSettingsHandler_ReadOpenP12ImGuiContextP20ImGuiSettingsHandlerPKc, %function
_ZL30WindowSettingsHandler_ReadOpenP12ImGuiContextP20ImGuiSettingsHandlerPKc:
.LFB2139:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui26FindOrCreateWindowSettingsEPKc
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	w0, [x0]
	str	w0, [sp, 60]
	add	x0, sp, 72
	bl	_ZN19ImGuiWindowSettingsC1Ev
	ldr	x0, [sp, 64]
	mov	x1, x0
	add	x0, sp, 72
	ldr	x2, [x0]
	str	x2, [x1]
	ldr	x0, [x0, 6]
	str	x0, [x1, 6]
	ldr	x0, [sp, 64]
	ldr	w1, [sp, 60]
	str	w1, [x0]
	ldr	x0, [sp, 64]
	mov	w1, 1
	strb	w1, [x0, 13]
	ldr	x0, [sp, 64]
	mov	x1, x0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x3, [sp, 88]
	ldr	x2, [x0]
	subs	x3, x3, x2
	mov	x2, 0
	beq	.L4852
	bl	__stack_chk_fail
.L4852:
	mov	x0, x1
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2139:
	.size	_ZL30WindowSettingsHandler_ReadOpenP12ImGuiContextP20ImGuiSettingsHandlerPKc, .-_ZL30WindowSettingsHandler_ReadOpenP12ImGuiContextP20ImGuiSettingsHandlerPKc
	.section	.rodata
	.align	3
.LC675:
	.string	"Pos=%i,%i"
	.align	3
.LC676:
	.string	"Size=%i,%i"
	.align	3
.LC677:
	.string	"Collapsed=%d"
	.text
	.align	2
	.type	_ZL30WindowSettingsHandler_ReadLineP12ImGuiContextP20ImGuiSettingsHandlerPvPKc, %function
_ZL30WindowSettingsHandler_ReadLineP12ImGuiContextP20ImGuiSettingsHandlerPvPKc:
.LFB2140:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	str	x3, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	x0, [sp, 24]
	str	x0, [sp, 64]
	add	x1, sp, 52
	add	x0, sp, 48
	mov	x3, x1
	mov	x2, x0
	adrp	x0, .LC675
	add	x1, x0, :lo12:.LC675
	ldr	x0, [sp, 16]
	bl	__isoc99_sscanf
	cmp	w0, 2
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4854
	ldr	w0, [sp, 48]
	sxth	w1, w0
	ldr	w0, [sp, 52]
	sxth	w2, w0
	add	x0, sp, 56
	bl	_ZN8ImVec2ihC1Ess
	ldr	x0, [sp, 64]
	ldr	w1, [sp, 56]
	str	w1, [x0, 4]
	b	.L4858
.L4854:
	add	x1, sp, 52
	add	x0, sp, 48
	mov	x3, x1
	mov	x2, x0
	adrp	x0, .LC676
	add	x1, x0, :lo12:.LC676
	ldr	x0, [sp, 16]
	bl	__isoc99_sscanf
	cmp	w0, 2
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4856
	ldr	w0, [sp, 48]
	sxth	w1, w0
	ldr	w0, [sp, 52]
	sxth	w2, w0
	add	x0, sp, 56
	bl	_ZN8ImVec2ihC1Ess
	ldr	x0, [sp, 64]
	ldr	w1, [sp, 56]
	str	w1, [x0, 8]
	b	.L4858
.L4856:
	add	x0, sp, 56
	mov	x2, x0
	adrp	x0, .LC677
	add	x1, x0, :lo12:.LC677
	ldr	x0, [sp, 16]
	bl	__isoc99_sscanf
	cmp	w0, 1
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4858
	ldr	w0, [sp, 56]
	cmp	w0, 0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 64]
	strb	w1, [x0, 12]
.L4858:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4857
	bl	__stack_chk_fail
.L4857:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2140:
	.size	_ZL30WindowSettingsHandler_ReadLineP12ImGuiContextP20ImGuiSettingsHandlerPvPKc, .-_ZL30WindowSettingsHandler_ReadLineP12ImGuiContextP20ImGuiSettingsHandlerPvPKc
	.align	2
	.type	_ZL30WindowSettingsHandler_ApplyAllP12ImGuiContextP20ImGuiSettingsHandler, %function
_ZL30WindowSettingsHandler_ApplyAllP12ImGuiContextP20ImGuiSettingsHandler:
.LFB2141:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	str	x0, [sp, 48]
	ldr	x1, [sp, 48]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv
	str	x0, [sp, 40]
	b	.L4860
.L4863:
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 13]
	cmp	w0, 0
	beq	.L4861
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	bl	_ZN5ImGui14FindWindowByIDEj
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L4862
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 56]
	bl	_ZL19ApplyWindowSettingsP11ImGuiWindowP19ImGuiWindowSettings
.L4862:
	ldr	x0, [sp, 40]
	strb	wzr, [x0, 13]
.L4861:
	ldr	x1, [sp, 48]
	mov	x0, 23416
	add	x0, x1, x0
	ldr	x1, [sp, 40]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_
	str	x0, [sp, 40]
.L4860:
	ldr	x0, [sp, 40]
	cmp	x0, 0
	bne	.L4863
	nop
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2141:
	.size	_ZL30WindowSettingsHandler_ApplyAllP12ImGuiContextP20ImGuiSettingsHandler, .-_ZL30WindowSettingsHandler_ApplyAllP12ImGuiContextP20ImGuiSettingsHandler
	.section	.rodata
	.align	3
.LC678:
	.string	"void WindowSettingsHandler_WriteAll(ImGuiContext*, ImGuiSettingsHandler*, ImGuiTextBuffer*)"
	.align	3
.LC679:
	.string	"settings->ID == window->ID"
	.align	3
.LC680:
	.string	"[%s][%s]\n"
	.align	3
.LC681:
	.string	"Pos=%d,%d\n"
	.align	3
.LC682:
	.string	"Size=%d,%d\n"
	.align	3
.LC683:
	.string	"Collapsed=%d\n"
	.text
	.align	2
	.type	_ZL30WindowSettingsHandler_WriteAllP12ImGuiContextP20ImGuiSettingsHandlerP15ImGuiTextBuffer, %function
_ZL30WindowSettingsHandler_WriteAllP12ImGuiContextP20ImGuiSettingsHandlerP15ImGuiTextBuffer:
.LFB2142:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -112
	.cfi_offset 20, -104
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	ldr	x0, [sp, 56]
	str	x0, [sp, 96]
	str	wzr, [sp, 76]
	b	.L4865
.L4872:
	ldr	x1, [sp, 96]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 76]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 12]
	and	w0, w0, 256
	cmp	w0, 0
	bne	.L4876
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 628]
	cmn	w0, #1
	beq	.L4868
	ldr	x1, [sp, 96]
	mov	x0, 23416
	add	x2, x1, x0
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 628]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15ptr_from_offsetEi
	b	.L4869
.L4868:
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 8]
	bl	_ZN5ImGui18FindWindowSettingsEj
.L4869:
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	cmp	x0, 0
	bne	.L4870
	ldr	x0, [sp, 112]
	ldr	x0, [x0]
	bl	_ZN5ImGui23CreateNewWindowSettingsEPKc
	str	x0, [sp, 80]
	ldr	x1, [sp, 96]
	mov	x0, 23416
	add	x0, x1, x0
	ldr	x1, [sp, 80]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_
	mov	w1, w0
	ldr	x0, [sp, 112]
	str	w1, [x0, 628]
.L4870:
	ldr	x0, [sp, 80]
	ldr	w1, [x0]
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 8]
	cmp	w1, w0
	beq	.L4871
	adrp	x0, .LC678
	add	x3, x0, :lo12:.LC678
	mov	w2, 12589
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC679
	add	x0, x0, :lo12:.LC679
	bl	__assert_fail
.L4871:
	ldr	x0, [sp, 112]
	add	x1, x0, 24
	add	x0, sp, 72
	bl	_ZN8ImVec2ihC1ERK6ImVec2
	ldr	x0, [sp, 80]
	ldr	w1, [sp, 72]
	str	w1, [x0, 4]
	ldr	x0, [sp, 112]
	add	x1, x0, 40
	add	x0, sp, 72
	bl	_ZN8ImVec2ihC1ERK6ImVec2
	ldr	x0, [sp, 80]
	ldr	w1, [sp, 72]
	str	w1, [x0, 8]
	ldr	x0, [sp, 112]
	ldrb	w1, [x0, 153]
	ldr	x0, [sp, 80]
	strb	w1, [x0, 12]
	b	.L4867
.L4876:
	nop
.L4867:
	ldr	w0, [sp, 76]
	add	w0, w0, 1
	str	w0, [sp, 76]
.L4865:
	ldr	x0, [sp, 96]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 76]
	cmp	w1, w0
	bne	.L4872
	ldr	x19, [sp, 40]
	ldr	x0, [sp, 40]
	bl	_ZNK15ImGuiTextBuffer4sizeEv
	mov	w20, w0
	ldr	x1, [sp, 96]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv
	mov	w1, w0
	mov	w0, w1
	lsl	w0, w0, 1
	add	w0, w0, w1
	lsl	w0, w0, 1
	add	w0, w20, w0
	mov	w1, w0
	mov	x0, x19
	bl	_ZN15ImGuiTextBuffer7reserveEi
	ldr	x1, [sp, 96]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv
	str	x0, [sp, 88]
	b	.L4873
.L4874:
	ldr	x0, [sp, 88]
	bl	_ZN19ImGuiWindowSettings7GetNameEv
	str	x0, [sp, 104]
	ldr	x0, [sp, 48]
	ldr	x0, [x0]
	ldr	x3, [sp, 104]
	mov	x2, x0
	adrp	x0, .LC680
	add	x1, x0, :lo12:.LC680
	ldr	x0, [sp, 40]
	bl	_ZN15ImGuiTextBuffer7appendfEPKcz
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 4]
	mov	w1, w0
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 6]
	mov	w3, w0
	mov	w2, w1
	adrp	x0, .LC681
	add	x1, x0, :lo12:.LC681
	ldr	x0, [sp, 40]
	bl	_ZN15ImGuiTextBuffer7appendfEPKcz
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 8]
	mov	w1, w0
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 10]
	mov	w3, w0
	mov	w2, w1
	adrp	x0, .LC682
	add	x1, x0, :lo12:.LC682
	ldr	x0, [sp, 40]
	bl	_ZN15ImGuiTextBuffer7appendfEPKcz
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 12]
	mov	w2, w0
	adrp	x0, .LC683
	add	x1, x0, :lo12:.LC683
	ldr	x0, [sp, 40]
	bl	_ZN15ImGuiTextBuffer7appendfEPKcz
	mov	x2, 0
	adrp	x0, .LC653
	add	x1, x0, :lo12:.LC653
	ldr	x0, [sp, 40]
	bl	_ZN15ImGuiTextBuffer6appendEPKcS1_
	ldr	x1, [sp, 96]
	mov	x0, 23416
	add	x0, x1, x0
	ldr	x1, [sp, 88]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_
	str	x0, [sp, 88]
.L4873:
	ldr	x0, [sp, 88]
	cmp	x0, 0
	bne	.L4874
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4875
	bl	__stack_chk_fail
.L4875:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2142:
	.size	_ZL30WindowSettingsHandler_WriteAllP12ImGuiContextP20ImGuiSettingsHandlerP15ImGuiTextBuffer, .-_ZL30WindowSettingsHandler_WriteAllP12ImGuiContextP20ImGuiSettingsHandlerP15ImGuiTextBuffer
	.align	2
	.global	_ZN5ImGui23LocalizeRegisterEntriesEPK13ImGuiLocEntryi
	.type	_ZN5ImGui23LocalizeRegisterEntriesEPK13ImGuiLocEntryi, %function
_ZN5ImGui23LocalizeRegisterEntriesEPK13ImGuiLocEntryi:
.LFB2143:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	str	wzr, [sp, 20]
	b	.L4878
.L4879:
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 4
	ldr	x1, [sp, 8]
	add	x0, x1, x0
	ldrsw	x1, [sp, 20]
	lsl	x1, x1, 4
	ldr	x2, [sp, 8]
	add	x1, x2, x1
	ldr	w1, [x1]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	sxtw	x1, w1
	add	x1, x1, 2934
	str	x2, [x0, x1, lsl 3]
	ldr	w0, [sp, 20]
	add	w0, w0, 1
	str	w0, [sp, 20]
.L4878:
	ldr	w1, [sp, 20]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	blt	.L4879
	nop
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2143:
	.size	_ZN5ImGui23LocalizeRegisterEntriesEPK13ImGuiLocEntryi, .-_ZN5ImGui23LocalizeRegisterEntriesEPK13ImGuiLocEntryi
	.align	2
	.global	_ZN5ImGui15GetMainViewportEv
	.type	_ZN5ImGui15GetMainViewportEv, %function
_ZN5ImGui15GetMainViewportEv:
.LFB2144:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x1, [sp, 24]
	mov	x0, 18520
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2144:
	.size	_ZN5ImGui15GetMainViewportEv, .-_ZN5ImGui15GetMainViewportEv
	.align	2
	.global	_ZN5ImGui17SetWindowViewportEP11ImGuiWindowP14ImGuiViewportP
	.type	_ZN5ImGui17SetWindowViewportEP11ImGuiWindowP14ImGuiViewportP, %function
_ZN5ImGui17SetWindowViewportEP11ImGuiWindowP14ImGuiViewportP:
.LFB2145:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	x1, [sp]
	str	x1, [x0, 16]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2145:
	.size	_ZN5ImGui17SetWindowViewportEP11ImGuiWindowP14ImGuiViewportP, .-_ZN5ImGui17SetWindowViewportEP11ImGuiWindowP14ImGuiViewportP
	.section	.rodata
	.align	3
.LC684:
	.string	"void ImGui::UpdateViewportsNewFrame()"
	.align	3
.LC685:
	.string	"g.Viewports.Size == 1"
	.text
	.align	2
	.type	_ZN5ImGuiL23UpdateViewportsNewFrameEv, %function
_ZN5ImGuiL23UpdateViewportsNewFrameEv:
.LFB2146:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	cmp	w0, 1
	beq	.L4884
	adrp	x0, .LC684
	add	x3, x0, :lo12:.LC684
	mov	w2, 12646
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC685
	add	x0, x0, :lo12:.LC685
	bl	__assert_fail
.L4884:
	ldr	x1, [sp, 32]
	mov	x0, 18520
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	mov	w1, 5
	str	w1, [x0]
	add	x0, sp, 24
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 24]
	str	x1, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	x1, [sp, 32]
	ldr	x1, [x1, 16]
	str	x1, [x0, 12]
	str	wzr, [sp, 20]
	b	.L4885
.L4886:
	ldr	x1, [sp, 32]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 20]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 48]
	ldr	x1, [x1, 168]
	str	x1, [x0, 152]
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 48]
	ldr	x1, [x1, 176]
	str	x1, [x0, 160]
	add	x0, sp, 24
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 48]
	ldr	x1, [sp, 24]
	str	x1, [x0, 176]
	ldr	x0, [sp, 48]
	add	x1, x0, 176
	ldr	x0, [sp, 48]
	ldr	x1, [x1]
	str	x1, [x0, 168]
	ldr	x0, [sp, 48]
	bl	_ZN14ImGuiViewportP14UpdateWorkRectEv
	ldr	w0, [sp, 20]
	add	w0, w0, 1
	str	w0, [sp, 20]
.L4885:
	ldr	x0, [sp, 32]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L4886
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4887
	bl	__stack_chk_fail
.L4887:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2146:
	.size	_ZN5ImGuiL23UpdateViewportsNewFrameEv, .-_ZN5ImGuiL23UpdateViewportsNewFrameEv
	.align	2
	.type	_ZL30GetClipboardTextFn_DefaultImplPv, %function
_ZL30GetClipboardTextFn_DefaultImplPv:
.LFB2147:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	mov	x0, 23312
	add	x0, x1, x0
	bl	_ZNK8ImVectorIcE5emptyEv
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4889
	mov	x0, 0
	b	.L4891
.L4889:
	ldr	x1, [sp, 40]
	mov	x0, 23312
	add	x0, x1, x0
	bl	_ZN8ImVectorIcE5beginEv
.L4891:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2147:
	.size	_ZL30GetClipboardTextFn_DefaultImplPv, .-_ZL30GetClipboardTextFn_DefaultImplPv
	.align	2
	.type	_ZL30SetClipboardTextFn_DefaultImplPvPKc, %function
_ZL30SetClipboardTextFn_DefaultImplPvPKc:
.LFB2148:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x1, [sp, 32]
	mov	x0, 23312
	add	x0, x1, x0
	bl	_ZN8ImVectorIcE5clearEv
	ldr	x0, [sp, 16]
	bl	strlen
	mov	x1, x0
	ldr	x0, [sp, 16]
	add	x0, x0, x1
	str	x0, [sp, 40]
	ldr	x1, [sp, 32]
	mov	x0, 23312
	add	x2, x1, x0
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 16]
	sub	x0, x1, x0
	add	w0, w0, 1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIcE6resizeEi
	ldr	x1, [sp, 32]
	mov	x0, 23312
	add	x0, x1, x0
	mov	w1, 0
	bl	_ZN8ImVectorIcEixEi
	mov	x3, x0
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 16]
	sub	x0, x1, x0
	mov	x2, x0
	ldr	x1, [sp, 16]
	mov	x0, x3
	bl	memcpy
	ldr	x1, [sp, 32]
	mov	x0, 23312
	add	x2, x1, x0
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 16]
	sub	x0, x1, x0
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIcEixEi
	strb	wzr, [x0]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2148:
	.size	_ZL30SetClipboardTextFn_DefaultImplPvPKc, .-_ZL30SetClipboardTextFn_DefaultImplPvPKc
	.align	2
	.type	_ZL32SetPlatformImeDataFn_DefaultImplP13ImGuiViewportP20ImGuiPlatformImeData, %function
_ZL32SetPlatformImeDataFn_DefaultImplP13ImGuiViewportP20ImGuiPlatformImeData:
.LFB2149:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2149:
	.size	_ZL32SetPlatformImeDataFn_DefaultImplP13ImGuiViewportP20ImGuiPlatformImeData, .-_ZL32SetPlatformImeDataFn_DefaultImplP13ImGuiViewportP20ImGuiPlatformImeData
	.align	2
	.global	_ZN5ImGui28DebugRenderViewportThumbnailEP10ImDrawListP14ImGuiViewportPRK6ImRect
	.type	_ZN5ImGui28DebugRenderViewportThumbnailEP10ImDrawListP14ImGuiViewportPRK6ImRect, %function
_ZN5ImGui28DebugRenderViewportThumbnailEP10ImDrawListP14ImGuiViewportPRK6ImRect:
.LFB2150:
	.cfi_startproc
	stp	x29, x30, [sp, -288]!
	.cfi_def_cfa_offset 288
	.cfi_offset 29, -288
	.cfi_offset 30, -280
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	stp	x21, x22, [sp, 32]
	str	d8, [sp, 48]
	.cfi_offset 19, -272
	.cfi_offset 20, -264
	.cfi_offset 21, -256
	.cfi_offset 22, -248
	.cfi_offset 72, -240
	str	x0, [sp, 88]
	str	x1, [sp, 80]
	str	x2, [sp, 72]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 280]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 208]
	ldr	x0, [sp, 208]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 216]
	ldr	x0, [sp, 72]
	bl	_ZNK6ImRect7GetSizeEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 264]
	str	s0, [sp, 268]
	ldr	x0, [sp, 80]
	add	x1, x0, 12
	add	x0, sp, 264
	bl	_ZdvRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 120]
	str	s0, [sp, 124]
	ldr	x19, [sp, 72]
	ldr	x0, [sp, 80]
	add	x0, x0, 4
	add	x1, sp, 120
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 264]
	str	s0, [sp, 268]
	add	x0, sp, 264
	mov	x1, x0
	mov	x0, x19
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 128]
	str	s0, [sp, 132]
	fmov	s0, 1.0e+0
	str	s0, [sp, 116]
	ldr	x0, [sp, 216]
	ldr	x19, [x0, 632]
	ldr	x20, [sp, 72]
	ldr	x0, [sp, 72]
	add	x21, x0, 8
	ldr	s0, [sp, 116]
	mov	w0, 52429
	movk	w0, 0x3ecc, lsl 16
	fmov	s1, w0
	fmul	s0, s0, s1
	mov	w0, 5
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, w0
	mov	x2, x21
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
	str	wzr, [sp, 112]
	b	.L4895
.L4903:
	ldr	x1, [sp, 208]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 112]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 224]
	ldr	x0, [sp, 224]
	ldrb	w0, [x0, 151]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4905
	ldr	x0, [sp, 224]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L4905
	ldr	x0, [sp, 224]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 232]
	str	s4, [sp, 236]
	str	s1, [sp, 240]
	str	s0, [sp, 244]
	ldr	x0, [sp, 224]
	bl	_ZNK11ImGuiWindow12TitleBarRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 248]
	str	s4, [sp, 252]
	str	s1, [sp, 256]
	str	s0, [sp, 260]
	add	x1, sp, 120
	add	x0, sp, 232
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 160]
	str	s0, [sp, 164]
	add	x1, sp, 160
	add	x0, sp, 128
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 168]
	str	s0, [sp, 172]
	add	x0, sp, 168
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 176]
	str	s0, [sp, 180]
	add	x1, sp, 120
	add	x0, sp, 232
	add	x0, x0, 8
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 184]
	str	s0, [sp, 188]
	add	x1, sp, 184
	add	x0, sp, 128
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 192]
	str	s0, [sp, 196]
	add	x0, sp, 192
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 200]
	str	s0, [sp, 204]
	add	x2, sp, 200
	add	x1, sp, 176
	add	x0, sp, 264
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x0, sp, 512
	ldp	x0, x1, [x0, -248]
	stp	x0, x1, [sp, 232]
	add	x1, sp, 120
	add	x0, sp, 248
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	add	x1, sp, 136
	add	x0, sp, 128
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 144]
	str	s0, [sp, 148]
	add	x0, sp, 144
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 152]
	str	s0, [sp, 156]
	ldr	s0, [sp, 256]
	ldr	s1, [sp, 252]
	add	x0, sp, 160
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 120
	add	x0, sp, 160
	bl	_ZmlRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 168]
	str	s0, [sp, 172]
	add	x1, sp, 168
	add	x0, sp, 128
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 176]
	str	s0, [sp, 180]
	add	x0, sp, 176
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 184]
	str	s0, [sp, 188]
	add	x0, sp, 192
	fmov	s1, 5.0e+0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 192
	add	x0, sp, 184
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 200]
	str	s0, [sp, 204]
	add	x2, sp, 200
	add	x1, sp, 152
	add	x0, sp, 264
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	add	x0, sp, 512
	ldp	x0, x1, [x0, -248]
	stp	x0, x1, [sp, 248]
	add	x0, sp, 232
	ldr	x1, [sp, 72]
	bl	_ZN6ImRect12ClipWithFullERKS_
	add	x0, sp, 248
	ldr	x1, [sp, 72]
	bl	_ZN6ImRect12ClipWithFullERKS_
	ldr	x0, [sp, 208]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4899
	ldr	x0, [sp, 224]
	ldr	x1, [x0, 872]
	ldr	x0, [sp, 208]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0, 872]
	cmp	x1, x0
	bne	.L4899
	mov	w0, 1
	b	.L4900
.L4899:
	mov	w0, 0
.L4900:
	strb	w0, [sp, 111]
	ldr	x0, [sp, 216]
	ldr	x19, [x0, 632]
	ldr	s0, [sp, 116]
	mov	w0, 2
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x0, sp, 232
	add	x1, x0, 8
	add	x0, sp, 232
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
	ldr	x0, [sp, 216]
	ldr	x19, [x0, 632]
	ldrb	w0, [sp, 111]
	cmp	w0, 0
	beq	.L4901
	mov	w0, 11
	b	.L4902
.L4901:
	mov	w0, 10
.L4902:
	ldr	s0, [sp, 116]
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x0, sp, 248
	add	x1, x0, 8
	add	x0, sp, 248
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
	ldr	x0, [sp, 216]
	ldr	x19, [x0, 632]
	ldr	s0, [sp, 116]
	mov	w0, 5
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, w0
	add	x0, sp, 232
	add	x1, x0, 8
	add	x0, sp, 232
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, w2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldr	x0, [sp, 216]
	ldr	x19, [x0, 632]
	ldr	x0, [sp, 208]
	ldr	x20, [x0, 15352]
	ldr	x0, [sp, 208]
	ldr	s8, [x0, 15360]
	ldr	s0, [sp, 116]
	mov	w0, 0
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w22, w0
	ldr	x0, [sp, 224]
	ldr	x21, [x0]
	ldr	x0, [sp, 224]
	ldr	x0, [x0]
	mov	x1, 0
	bl	_ZN5ImGui19FindRenderedTextEndEPKcS1_
	mov	x1, x0
	add	x0, sp, 248
	mov	x6, 0
	movi	v1.2s, #0
	mov	x5, x1
	mov	x4, x21
	mov	w3, w22
	mov	x2, x0
	fmov	s0, s8
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4
	b	.L4898
.L4905:
	nop
.L4898:
	ldr	w0, [sp, 112]
	add	w0, w0, 1
	str	w0, [sp, 112]
.L4895:
	ldr	x0, [sp, 208]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 112]
	cmp	w1, w0
	bne	.L4903
	ldr	x19, [sp, 88]
	ldr	x20, [sp, 72]
	ldr	x0, [sp, 72]
	add	x21, x0, 8
	ldr	s0, [sp, 116]
	mov	w0, 5
	bl	_ZN5ImGui11GetColorU32Eif
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, w0
	mov	x2, x21
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 280]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4904
	bl	__stack_chk_fail
.L4904:
	ldr	d8, [sp, 48]
	ldp	x19, x20, [sp, 16]
	ldp	x21, x22, [sp, 32]
	ldp	x29, x30, [sp], 288
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 21
	.cfi_restore 22
	.cfi_restore 19
	.cfi_restore 20
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2150:
	.size	_ZN5ImGui28DebugRenderViewportThumbnailEP10ImDrawListP14ImGuiViewportPRK6ImRect, .-_ZN5ImGui28DebugRenderViewportThumbnailEP10ImDrawListP14ImGuiViewportPRK6ImRect
	.align	2
	.type	_ZL25RenderViewportsThumbnailsv, %function
_ZL25RenderViewportsThumbnailsv:
.LFB2151:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 104]
	fmov	s0, 1.25e-1
	str	s0, [sp, 36]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 120]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 124]
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [sp, 128]
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [sp, 132]
	str	wzr, [sp, 28]
	b	.L4907
.L4908:
	ldr	x1, [sp, 96]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	bl	_ZNK14ImGuiViewportP11GetMainRectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 136]
	str	s4, [sp, 140]
	str	s1, [sp, 144]
	str	s0, [sp, 148]
	add	x1, sp, 136
	add	x0, sp, 120
	bl	_ZN6ImRect3AddERKS_
	ldr	w0, [sp, 28]
	add	w0, w0, 1
	str	w0, [sp, 28]
.L4907:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	blt	.L4908
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 224]
	str	x0, [sp, 40]
	add	x0, sp, 120
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	add	x1, sp, 136
	add	x0, sp, 40
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	str	wzr, [sp, 32]
	b	.L4909
.L4910:
	ldr	x1, [sp, 96]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 32]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	add	x0, x0, 4
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	add	x1, sp, 56
	add	x0, sp, 48
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	ldr	x0, [sp, 112]
	add	x2, x0, 4
	ldr	x0, [sp, 112]
	add	x0, x0, 12
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	add	x0, sp, 72
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x1, sp, 80
	add	x0, sp, 48
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	add	x2, sp, 88
	add	x1, sp, 64
	add	x0, sp, 136
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	x0, [sp, 104]
	ldr	x0, [x0, 632]
	add	x1, sp, 136
	mov	x2, x1
	ldr	x1, [sp, 112]
	bl	_ZN5ImGui28DebugRenderViewportThumbnailEP10ImDrawListP14ImGuiViewportPRK6ImRect
	ldr	w0, [sp, 32]
	add	w0, w0, 1
	str	w0, [sp, 32]
.L4909:
	ldr	x0, [sp, 96]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 32]
	cmp	w1, w0
	blt	.L4910
	add	x0, sp, 120
	bl	_ZNK6ImRect7GetSizeEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	add	x0, sp, 88
	ldr	s0, [sp, 36]
	bl	_ZmlRK6ImVec2f
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	add	x0, sp, 136
	bl	_ZN5ImGui5DummyERK6ImVec2
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4911
	bl	__stack_chk_fail
.L4911:
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2151:
	.size	_ZL25RenderViewportsThumbnailsv, .-_ZL25RenderViewportsThumbnailsv
	.section	.rodata
	.align	3
.LC686:
	.string	"Text: \"%s\""
	.align	3
.LC687:
	.string	"list"
	.align	3
.LC688:
	.string	"Offset"
	.align	3
.LC689:
	.string	"UTF-8"
	.align	3
.LC690:
	.string	"Glyph"
	.align	3
.LC691:
	.string	"Codepoint"
	.align	3
.LC692:
	.string	"%d"
	.align	3
.LC693:
	.string	"0x%02X"
	.align	3
.LC694:
	.string	"[invalid]"
	.align	3
.LC695:
	.string	"[missing]"
	.align	3
.LC696:
	.string	"U+%04X"
	.text
	.align	2
	.global	_ZN5ImGui17DebugTextEncodingEPKc
	.type	_ZN5ImGui17DebugTextEncodingEPKc, %function
_ZN5ImGui17DebugTextEncodingEPKc:
.LFB2152:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x1, [sp, 24]
	adrp	x0, .LC686
	add	x0, x0, :lo12:.LC686
	bl	_ZN5ImGui4TextEPKcz
	add	x0, sp, 40
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 40
	movi	v0.2s, #0
	mov	x3, x0
	mov	w2, 10176
	mov	w1, 4
	adrp	x0, .LC687
	add	x0, x0, :lo12:.LC687
	bl	_ZN5ImGui10BeginTableEPKciiRK6ImVec2f
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4925
	mov	w2, 0
	movi	v0.2s, #0
	mov	w1, 0
	adrp	x0, .LC688
	add	x0, x0, :lo12:.LC688
	bl	_ZN5ImGui16TableSetupColumnEPKcifj
	mov	w2, 0
	movi	v0.2s, #0
	mov	w1, 0
	adrp	x0, .LC689
	add	x0, x0, :lo12:.LC689
	bl	_ZN5ImGui16TableSetupColumnEPKcifj
	mov	w2, 0
	movi	v0.2s, #0
	mov	w1, 0
	adrp	x0, .LC690
	add	x0, x0, :lo12:.LC690
	bl	_ZN5ImGui16TableSetupColumnEPKcifj
	mov	w2, 0
	movi	v0.2s, #0
	mov	w1, 0
	adrp	x0, .LC691
	add	x0, x0, :lo12:.LC691
	bl	_ZN5ImGui16TableSetupColumnEPKcifj
	bl	_ZN5ImGui15TableHeadersRowEv
	ldr	x0, [sp, 24]
	str	x0, [sp, 48]
	b	.L4915
.L4923:
	add	x0, sp, 40
	mov	x2, 0
	ldr	x1, [sp, 48]
	bl	_Z18ImTextCharFromUtf8PjPKcS1_
	str	w0, [sp, 36]
	bl	_ZN5ImGui15TableNextColumnEv
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 24]
	sub	x0, x1, x0
	mov	w1, w0
	adrp	x0, .LC692
	add	x0, x0, :lo12:.LC692
	bl	_ZN5ImGui4TextEPKcz
	bl	_ZN5ImGui15TableNextColumnEv
	str	wzr, [sp, 32]
	b	.L4916
.L4918:
	ldr	w0, [sp, 32]
	cmp	w0, 0
	ble	.L4917
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
.L4917:
	ldrsw	x0, [sp, 32]
	ldr	x1, [sp, 48]
	add	x0, x1, x0
	ldrb	w0, [x0]
	mov	w1, w0
	adrp	x0, .LC693
	add	x0, x0, :lo12:.LC693
	bl	_ZN5ImGui4TextEPKcz
	ldr	w0, [sp, 32]
	add	w0, w0, 1
	str	w0, [sp, 32]
.L4916:
	ldr	w1, [sp, 32]
	ldr	w0, [sp, 36]
	cmp	w1, w0
	blt	.L4918
	bl	_ZN5ImGui15TableNextColumnEv
	bl	_ZN5ImGui7GetFontEv
	ldr	w1, [sp, 40]
	and	w1, w1, 65535
	bl	_ZNK6ImFont19FindGlyphNoFallbackEt
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4919
	ldrsw	x0, [sp, 36]
	ldr	x1, [sp, 48]
	add	x0, x1, x0
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZN5ImGui15TextUnformattedEPKcS1_
	b	.L4920
.L4919:
	ldr	w1, [sp, 40]
	mov	w0, 65533
	cmp	w1, w0
	bne	.L4921
	adrp	x0, .LC694
	add	x0, x0, :lo12:.LC694
	b	.L4922
.L4921:
	adrp	x0, .LC695
	add	x0, x0, :lo12:.LC695
.L4922:
	mov	x1, 0
	bl	_ZN5ImGui15TextUnformattedEPKcS1_
.L4920:
	bl	_ZN5ImGui15TableNextColumnEv
	ldr	w0, [sp, 40]
	mov	w1, w0
	adrp	x0, .LC696
	add	x0, x0, :lo12:.LC696
	bl	_ZN5ImGui4TextEPKcz
	ldrsw	x0, [sp, 36]
	ldr	x1, [sp, 48]
	add	x0, x1, x0
	str	x0, [sp, 48]
.L4915:
	ldr	x0, [sp, 48]
	ldrb	w0, [x0]
	cmp	w0, 0
	bne	.L4923
	bl	_ZN5ImGui8EndTableEv
	b	.L4912
.L4925:
	nop
.L4912:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4924
	bl	__stack_chk_fail
.L4924:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2152:
	.size	_ZN5ImGui17DebugTextEncodingEPKc, .-_ZN5ImGui17DebugTextEncodingEPKc
	.section	.rodata
	.align	3
.LC697:
	.string	"(?)"
	.text
	.align	2
	.type	_ZL17MetricsHelpMarkerPKc, %function
_ZL17MetricsHelpMarkerPKc:
.LFB2153:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, .LC697
	add	x0, x0, :lo12:.LC697
	bl	_ZN5ImGui12TextDisabledEPKcz
	mov	w0, 4096
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4928
	bl	_ZN5ImGui12BeginTooltipEv
	bl	_ZN5ImGui11GetFontSizeEv
	mov	w0, 1108082688
	fmov	s1, w0
	fmul	s0, s0, s1
	bl	_ZN5ImGui15PushTextWrapPosEf
	mov	x1, 0
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui15TextUnformattedEPKcS1_
	bl	_ZN5ImGui14PopTextWrapPosEv
	bl	_ZN5ImGui10EndTooltipEv
.L4928:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2153:
	.size	_ZL17MetricsHelpMarkerPKc, .-_ZL17MetricsHelpMarkerPKc
	.section	.rodata
	.align	3
.LC698:
	.string	"Atlas texture (%dx%d pixels)"
	.align	3
.LC699:
	.string	"Atlas texture"
	.text
	.align	2
	.global	_ZN5ImGui13ShowFontAtlasEP11ImFontAtlas
	.type	_ZN5ImGui13ShowFontAtlasEP11ImFontAtlas, %function
_ZN5ImGui13ShowFontAtlasEP11ImFontAtlas:
.LFB2154:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -112
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	str	wzr, [sp, 52]
	b	.L4930
.L4931:
	ldr	x0, [sp, 40]
	add	x0, x0, 72
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIP6ImFontEixEi
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	bl	_ZN5ImGui6PushIDEPKv
	ldr	x0, [sp, 80]
	bl	_ZN5ImGui13DebugNodeFontEP6ImFont
	bl	_ZN5ImGui5PopIDEv
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L4930:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 72]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	blt	.L4931
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 48]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 52]
	mov	w3, w0
	mov	w2, w1
	adrp	x0, .LC698
	add	x1, x0, :lo12:.LC698
	adrp	x0, .LC699
	add	x0, x0, :lo12:.LC699
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4934
	fmov	s0, 1.0e+0
	str	s0, [sp, 88]
	fmov	s0, 1.0e+0
	str	s0, [sp, 92]
	fmov	s0, 1.0e+0
	str	s0, [sp, 96]
	fmov	s0, 1.0e+0
	str	s0, [sp, 100]
	fmov	s0, 1.0e+0
	str	s0, [sp, 104]
	fmov	s0, 1.0e+0
	str	s0, [sp, 108]
	fmov	s0, 1.0e+0
	str	s0, [sp, 112]
	fmov	s0, 5.0e-1
	str	s0, [sp, 116]
	ldr	x0, [sp, 40]
	ldr	x19, [x0, 8]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 48]
	scvtf	s2, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 52]
	scvtf	s0, s0
	add	x0, sp, 56
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 64
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 72
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x4, sp, 104
	add	x3, sp, 88
	add	x2, sp, 72
	add	x1, sp, 64
	add	x0, sp, 56
	mov	x5, x4
	mov	x4, x3
	mov	x3, x2
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN5ImGui5ImageEPvRK6ImVec2S3_S3_RK6ImVec4S6_
	bl	_ZN5ImGui7TreePopEv
.L4934:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4933
	bl	__stack_chk_fail
.L4933:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2154:
	.size	_ZN5ImGui13ShowFontAtlasEP11ImFontAtlas, .-_ZN5ImGui13ShowFontAtlasEP11ImFontAtlas
	.section	.rodata
	.align	3
.LC700:
	.string	"static ImRect ImGui::ShowMetricsWindow(bool*)::Funcs::GetTableRect(ImGuiTable*, int, int)"
	.text
	.align	2
	.type	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs12GetTableRectEP10ImGuiTableii, %function
_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs12GetTableRectEP10ImGuiTableii:
.LFB2156:
	.cfi_startproc
	stp	x29, x30, [sp, -128]!
	.cfi_def_cfa_offset 128
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	str	w2, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 120]
	mov	x1, 0
	ldr	x0, [sp, 24]
	ldrsh	w0, [x0, 128]
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui20TableGetInstanceDataEP10ImGuiTablei
	str	x0, [sp, 40]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	bne	.L4936
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0, 240]
	b	.L4937
.L4936:
	ldr	w0, [sp, 20]
	cmp	w0, 1
	bne	.L4938
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0, 256]
	b	.L4937
.L4938:
	ldr	w0, [sp, 20]
	cmp	w0, 2
	bne	.L4939
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0, 272]
	b	.L4937
.L4939:
	ldr	w0, [sp, 20]
	cmp	w0, 3
	bne	.L4940
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0, 352]
	b	.L4937
.L4940:
	ldr	w0, [sp, 20]
	cmp	w0, 4
	bne	.L4941
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0, 288]
	b	.L4937
.L4941:
	ldr	w0, [sp, 20]
	cmp	w0, 5
	bne	.L4942
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0, 304]
	b	.L4937
.L4942:
	ldr	w0, [sp, 20]
	cmp	w0, 6
	bne	.L4943
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	ldr	w1, [sp, 16]
	bl	_ZN6ImSpanI16ImGuiTableColumnEixEi
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldr	s4, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	s5, [x0, 292]
	ldr	x0, [sp, 96]
	ldr	s2, [x0, 12]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 292]
	ldr	x0, [sp, 40]
	ldr	s0, [x0]
	fadd	s0, s1, s0
	add	x0, sp, 104
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 104]
	b	.L4937
.L4943:
	ldr	w0, [sp, 20]
	cmp	w0, 7
	bne	.L4944
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	ldr	w1, [sp, 16]
	bl	_ZN6ImSpanI16ImGuiTableColumnEixEi
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 52]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 276]
	ldr	x0, [sp, 88]
	ldr	s2, [x0, 56]
	ldr	x0, [sp, 24]
	ldr	s3, [x0, 284]
	add	x0, sp, 104
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 104]
	b	.L4937
.L4944:
	ldr	w0, [sp, 20]
	cmp	w0, 8
	bne	.L4945
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	ldr	w1, [sp, 16]
	bl	_ZN6ImSpanI16ImGuiTableColumnEixEi
	str	x0, [sp, 80]
	ldr	x0, [sp, 80]
	ldp	x0, x1, [x0, 32]
	b	.L4937
.L4945:
	ldr	w0, [sp, 20]
	cmp	w0, 9
	bne	.L4946
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	ldr	w1, [sp, 16]
	bl	_ZN6ImSpanI16ImGuiTableColumnEixEi
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	ldr	s4, [x0, 52]
	ldr	x0, [sp, 24]
	ldr	s5, [x0, 292]
	ldr	x0, [sp, 72]
	ldr	s2, [x0, 72]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 292]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	add	x0, sp, 104
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 104]
	b	.L4937
.L4946:
	ldr	w0, [sp, 20]
	cmp	w0, 10
	bne	.L4947
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	ldr	w1, [sp, 16]
	bl	_ZN6ImSpanI16ImGuiTableColumnEixEi
	str	x0, [sp, 64]
	ldr	x0, [sp, 64]
	ldr	s4, [x0, 52]
	ldr	x0, [sp, 24]
	ldr	s5, [x0, 292]
	ldr	x0, [sp, 64]
	ldr	s2, [x0, 76]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 292]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	add	x0, sp, 104
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 104]
	b	.L4937
.L4947:
	ldr	w0, [sp, 20]
	cmp	w0, 11
	bne	.L4948
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	ldr	w1, [sp, 16]
	bl	_ZN6ImSpanI16ImGuiTableColumnEixEi
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	s4, [x0, 52]
	ldr	x0, [sp, 24]
	ldr	s5, [x0, 292]
	ldr	x0, [sp, 56]
	ldr	s2, [x0, 64]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 292]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	add	x0, sp, 104
	fmov	s3, s0
	fmov	s1, s5
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 104]
	b	.L4937
.L4948:
	ldr	w0, [sp, 20]
	cmp	w0, 12
	bne	.L4949
	ldr	x0, [sp, 24]
	add	x0, x0, 24
	ldr	w1, [sp, 16]
	bl	_ZN6ImSpanI16ImGuiTableColumnEixEi
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldr	s4, [x0, 52]
	ldr	x0, [sp, 24]
	ldr	s1, [x0, 292]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fadd	s0, s1, s0
	ldr	x0, [sp, 48]
	ldr	s1, [x0, 68]
	ldr	x0, [sp, 24]
	ldr	s2, [x0, 300]
	add	x0, sp, 104
	fmov	s3, s2
	fmov	s2, s1
	fmov	s1, s0
	fmov	s0, s4
	bl	_ZN6ImRectC1Effff
	ldp	x0, x1, [sp, 104]
	b	.L4937
.L4949:
	adrp	x0, .LC700
	add	x3, x0, :lo12:.LC700
	mov	w2, 13044
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L4937:
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 120]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4950
	bl	__stack_chk_fail
.L4950:
	ldp	x29, x30, [sp], 128
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2156:
	.size	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs12GetTableRectEP10ImGuiTableii, .-_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs12GetTableRectEP10ImGuiTableii
	.section	.rodata
	.align	3
.LC701:
	.string	"static ImRect ImGui::ShowMetricsWindow(bool*)::Funcs::GetWindowRect(ImGuiWindow*, int)"
	.text
	.align	2
	.type	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs13GetWindowRectEP11ImGuiWindowi, %function
_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs13GetWindowRectEP11ImGuiWindowi:
.LFB2157:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	ldr	w0, [sp, 20]
	cmp	w0, 0
	bne	.L4952
	ldr	x0, [sp, 24]
	bl	_ZNK11ImGuiWindow4RectEv
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	mov	x0, 0
	mov	x1, 0
	fmov	w2, s5
	bfi	x0, x2, 0, 32
	fmov	w2, s4
	bfi	x0, x2, 32, 32
	fmov	w2, s1
	bfi	x1, x2, 0, 32
	fmov	w2, s0
	bfi	x1, x2, 32, 32
	b	.L4953
.L4952:
	ldr	w0, [sp, 20]
	cmp	w0, 1
	bne	.L4954
	ldr	x0, [sp, 24]
	add	x0, x0, 512
	ldp	x0, x1, [x0, -56]
	b	.L4953
.L4954:
	ldr	w0, [sp, 20]
	cmp	w0, 2
	bne	.L4955
	ldr	x0, [sp, 24]
	add	x0, x0, 512
	ldp	x0, x1, [x0, -40]
	b	.L4953
.L4955:
	ldr	w0, [sp, 20]
	cmp	w0, 3
	bne	.L4956
	ldr	x0, [sp, 24]
	add	x0, x0, 512
	ldp	x0, x1, [x0, -24]
	b	.L4953
.L4956:
	ldr	w0, [sp, 20]
	cmp	w0, 4
	bne	.L4957
	ldr	x0, [sp, 24]
	add	x0, x0, 512
	ldp	x0, x1, [x0, -8]
	b	.L4953
.L4957:
	ldr	w0, [sp, 20]
	cmp	w0, 5
	bne	.L4958
	ldr	x0, [sp, 24]
	add	x2, x0, 472
	ldr	x0, [sp, 24]
	add	x0, x0, 100
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	ldr	x0, [sp, 24]
	add	x1, x0, 72
	add	x0, sp, 56
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 40]
	str	s0, [sp, 44]
	ldr	x0, [sp, 24]
	add	x1, x0, 48
	add	x0, sp, 40
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	add	x2, sp, 48
	add	x1, sp, 40
	add	x0, sp, 56
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldp	x0, x1, [sp, 56]
	b	.L4953
.L4958:
	ldr	w0, [sp, 20]
	cmp	w0, 6
	bne	.L4959
	ldr	x0, [sp, 24]
	add	x2, x0, 472
	ldr	x0, [sp, 24]
	add	x0, x0, 100
	mov	x1, x0
	mov	x0, x2
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	ldr	x0, [sp, 24]
	add	x1, x0, 72
	add	x0, sp, 56
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 40]
	str	s0, [sp, 44]
	ldr	x0, [sp, 24]
	add	x1, x0, 56
	add	x0, sp, 40
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 48]
	str	s0, [sp, 52]
	add	x2, sp, 48
	add	x1, sp, 40
	add	x0, sp, 56
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldp	x0, x1, [sp, 56]
	b	.L4953
.L4959:
	ldr	w0, [sp, 20]
	cmp	w0, 7
	bne	.L4960
	ldr	x0, [sp, 24]
	add	x0, x0, 512
	ldp	x0, x1, [x0, 40]
	b	.L4953
.L4960:
	adrp	x0, .LC701
	add	x3, x0, :lo12:.LC701
	mov	w2, 13058
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L4953:
	mov	x2, x0
	mov	x3, x1
	lsr	w4, w2, 0
	mov	x2, x0
	mov	x3, x1
	lsr	x2, x2, 32
	mov	w5, w2
	mov	x2, x0
	mov	x3, x1
	lsr	w2, w3, 0
	lsr	x0, x1, 32
	fmov	s0, w4
	fmov	s1, w5
	fmov	s2, w2
	fmov	s3, w0
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L4961
	bl	__stack_chk_fail
.L4961:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2157:
	.size	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs13GetWindowRectEP11ImGuiWindowi, .-_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs13GetWindowRectEP11ImGuiWindowi
	.local	_ZZN5ImGui17ShowMetricsWindowEPbE3buf
	.comm	_ZZN5ImGui17ShowMetricsWindowEPbE3buf,100,8
	.align	2
	.type	_ZZN5ImGui17ShowMetricsWindowEPbEN4Func26WindowComparerByBeginOrderEPKvS3_, %function
_ZZN5ImGui17ShowMetricsWindowEPbEN4Func26WindowComparerByBeginOrderEPKvS3_:
.LFB2158:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	x0, [x0]
	ldrsh	w0, [x0, 168]
	mov	w1, w0
	ldr	x0, [sp]
	ldr	x0, [x0]
	ldrsh	w0, [x0, 168]
	sub	w0, w1, w0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2158:
	.size	_ZZN5ImGui17ShowMetricsWindowEPbEN4Func26WindowComparerByBeginOrderEPKvS3_, .-_ZZN5ImGui17ShowMetricsWindowEPbEN4Func26WindowComparerByBeginOrderEPKvS3_
	.section	.rodata
	.align	3
.LC702:
	.string	"Dear ImGui Metrics/Debugger"
	.align	3
.LC703:
	.string	"Dear ImGui %s"
	.align	3
.LC704:
	.string	"Application average %.3f ms/frame (%.1f FPS)"
	.align	3
.LC705:
	.string	"%d vertices, %d indices (%d triangles)"
	.align	3
.LC706:
	.string	"%d visible windows, %d active allocations"
	.align	3
.LC709:
	.string	"Tools"
	.align	3
.LC710:
	.string	"UTF-8 Encoding viewer"
	.align	3
.LC711:
	.string	"You can also call ImGui::DebugTextEncoding() from your code with a given string to test that your UTF-8 encoding settings are correct."
	.align	3
.LC712:
	.string	"##Text"
	.align	3
.LC713:
	.string	"Show Item Picker"
	.align	3
.LC714:
	.string	"Will call the IM_DEBUG_BREAK() macro to break in debugger.\nWarning: If you don't have a debugger attached, this will probably crash."
	.align	3
.LC715:
	.string	"Show Debug Log"
	.align	3
.LC716:
	.string	"You can also call ImGui::ShowDebugLogWindow() from your code."
	.align	3
.LC717:
	.string	"Show Stack Tool"
	.align	3
.LC718:
	.string	"You can also call ImGui::ShowStackToolWindow() from your code."
	.align	3
.LC719:
	.string	"Show windows begin order"
	.align	3
.LC720:
	.string	"Show windows rectangles"
	.align	3
.LC721:
	.string	"##show_windows_rect_type"
	.align	3
.LC722:
	.string	"'%s':"
	.align	3
.LC723:
	.string	"(%6.1f,%6.1f) (%6.1f,%6.1f) Size (%6.1f,%6.1f) %s"
	.align	3
.LC724:
	.string	"Show tables rectangles"
	.align	3
.LC725:
	.string	"##show_table_rects_type"
	.align	3
.LC726:
	.string	"Table 0x%08X (%d columns, in '%s')"
	.align	3
.LC727:
	.string	"(%6.1f,%6.1f) (%6.1f,%6.1f) Size (%6.1f,%6.1f) Col %d %s"
	.align	3
.LC728:
	.string	"Window (%d)"
	.align	3
.LC729:
	.string	"By display order"
	.align	3
.LC730:
	.string	"By focus order (root windows)"
	.align	3
.LC731:
	.string	"By submission order (begin stack)"
	.align	3
.LC732:
	.string	"DrawLists (%d)"
	.align	3
.LC733:
	.string	"DrawLists"
	.align	3
.LC734:
	.string	"Show ImDrawCmd mesh when hovering"
	.align	3
.LC735:
	.string	"Show ImDrawCmd bounding boxes when hovering"
	.align	3
.LC736:
	.string	"DrawList"
	.align	3
.LC737:
	.string	"Viewports (%d)"
	.align	3
.LC738:
	.string	"Viewports"
	.align	3
.LC739:
	.string	"Popups (%d)"
	.align	3
.LC740:
	.string	"Popups"
	.align	3
.LC741:
	.string	"Child;"
	.align	3
.LC742:
	.string	"Menu;"
	.align	3
.LC743:
	.string	"PopupID: %08x, Window: '%s' (%s%s), BackupNavWindow '%s', ParentWindow '%s'"
	.align	3
.LC744:
	.string	"Tab Bars (%d)"
	.align	3
.LC745:
	.string	"TabBars"
	.align	3
.LC746:
	.string	"TabBar"
	.align	3
.LC747:
	.string	"Tables (%d)"
	.align	3
.LC748:
	.string	"Tables"
	.align	3
.LC749:
	.string	"Fonts (%d)"
	.align	3
.LC750:
	.string	"Fonts"
	.align	3
.LC751:
	.string	"InputText"
	.align	3
.LC752:
	.string	"Settings"
	.align	3
.LC753:
	.string	"Clear"
	.align	3
.LC754:
	.string	"Save to memory"
	.align	3
.LC755:
	.string	"Save to disk"
	.align	3
.LC756:
	.string	"\"%s\""
	.align	3
.LC757:
	.string	"SettingsDirtyTimer %.2f"
	.align	3
.LC758:
	.string	"Settings handlers: (%d)"
	.align	3
.LC759:
	.string	"SettingsHandlers"
	.align	3
.LC760:
	.string	"%s"
	.align	3
.LC761:
	.string	"Settings packed data: Window: %d bytes"
	.align	3
.LC762:
	.string	"SettingsWindows"
	.align	3
.LC763:
	.string	"Settings packed data: Tables: %d bytes"
	.align	3
.LC764:
	.string	"SettingsTables"
	.align	3
.LC765:
	.string	"Settings unpacked data (.ini): %d bytes"
	.align	3
.LC766:
	.string	"SettingsIniData"
	.align	3
.LC767:
	.string	"##Ini"
	.align	3
.LC768:
	.string	"Key Owners & Shortcut Routing"
	.align	3
.LC769:
	.string	"Key Owners:"
	.align	3
.LC770:
	.string	"##owners"
	.align	3
.LC771:
	.string	" LockUntilRelease"
	.align	3
.LC772:
	.string	" LockThisFrame"
	.align	3
.LC773:
	.string	"%s: 0x%08X%s"
	.align	3
.LC774:
	.string	"Shortcut Routing:"
	.align	3
.LC775:
	.string	"##routes"
	.align	3
.LC776:
	.string	"%s: 0x%08X"
	.align	3
.LC777:
	.string	"(ActiveIdUsing: AllKeyboardKeys: %d, NavDirMask: 0x%X)"
	.align	3
.LC778:
	.string	"Internal state"
	.align	3
.LC779:
	.string	"WINDOWING"
	.align	3
.LC780:
	.string	"HoveredWindow: '%s'"
	.align	3
.LC781:
	.string	"HoveredWindow->Root: '%s'"
	.align	3
.LC782:
	.string	"HoveredWindowUnderMovingWindow: '%s'"
	.align	3
.LC783:
	.string	"MovingWindow: '%s'"
	.align	3
.LC784:
	.string	"ITEMS"
	.align	3
.LC785:
	.string	"ActiveId: 0x%08X/0x%08X (%.2f sec), AllowOverlap: %d, Source: %s"
	.align	3
.LC786:
	.string	"ActiveIdWindow: '%s'"
	.align	3
.LC787:
	.string	"ActiveIdUsing: AllKeyboardKeys: %d, NavDirMask: %X"
	.align	3
.LC788:
	.string	"HoveredId: 0x%08X (%.2f sec), AllowOverlap: %d"
	.align	3
.LC789:
	.string	"HoverDelayId: 0x%08X, Timer: %.2f, ClearTimer: %.2f"
	.align	3
.LC790:
	.string	"DragDrop: %d, SourceId = 0x%08X, Payload \"%s\" (%d bytes)"
	.align	3
.LC791:
	.string	"NAV,FOCUS"
	.align	3
.LC792:
	.string	"NavWindow: '%s'"
	.align	3
.LC793:
	.string	"NavId: 0x%08X, NavLayer: %d"
	.align	3
.LC794:
	.string	"NavInputSource: %s"
	.align	3
.LC795:
	.string	"NavActive: %d, NavVisible: %d"
	.align	3
.LC796:
	.string	"NavActivateId/DownId/PressedId/InputId: %08X/%08X/%08X/%08X"
	.align	3
.LC797:
	.string	"NavActivateFlags: %04X"
	.align	3
.LC798:
	.string	"NavDisableHighlight: %d, NavDisableMouseHover: %d"
	.align	3
.LC799:
	.string	"NavFocusScopeId = 0x%08X"
	.align	3
.LC800:
	.string	"NavWindowingTarget: '%s'"
	.text
	.align	2
	.global	_ZN5ImGui17ShowMetricsWindowEPb
	.type	_ZN5ImGui17ShowMetricsWindowEPb, %function
_ZN5ImGui17ShowMetricsWindowEPb:
.LFB2155:
	.cfi_startproc
	sub	sp, sp, #704
	.cfi_def_cfa_offset 704
	stp	x29, x30, [sp]
	.cfi_offset 29, -704
	.cfi_offset 30, -696
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	str	x21, [sp, 32]
	stp	d8, d9, [sp, 48]
	stp	d10, d11, [sp, 64]
	str	d12, [sp, 40]
	.cfi_offset 19, -688
	.cfi_offset 20, -680
	.cfi_offset 21, -672
	.cfi_offset 72, -656
	.cfi_offset 73, -648
	.cfi_offset 74, -640
	.cfi_offset 75, -632
	.cfi_offset 76, -664
	str	x0, [sp, 88]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 696]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 240]
	ldr	x0, [sp, 240]
	add	x0, x0, 8
	str	x0, [sp, 248]
	ldr	x1, [sp, 240]
	mov	x0, 23648
	add	x0, x1, x0
	str	x0, [sp, 256]
	ldr	x0, [sp, 256]
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L4965
	ldr	x0, [sp, 256]
	bl	_ZN5ImGui18ShowDebugLogWindowEPb
.L4965:
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 1]
	cmp	w0, 0
	beq	.L4966
	ldr	x0, [sp, 256]
	add	x0, x0, 1
	bl	_ZN5ImGui19ShowStackToolWindowEPb
.L4966:
	mov	w2, 0
	ldr	x1, [sp, 88]
	adrp	x0, .LC702
	add	x0, x0, :lo12:.LC702
	bl	_ZN5ImGui5BeginEPKcPbi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4967
	bl	_ZN5ImGui16GetCurrentWindowEv
	ldrsh	w0, [x0, 162]
	cmp	w0, 1
	ble	.L4968
.L4967:
	mov	w0, 1
	b	.L4969
.L4968:
	mov	w0, 0
.L4969:
	cmp	w0, 0
	beq	.L4970
	bl	_ZN5ImGui3EndEv
	b	.L4964
.L4970:
	bl	_ZN5ImGui10GetVersionEv
	mov	x1, x0
	adrp	x0, .LC703
	add	x0, x0, :lo12:.LC703
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 248]
	ldr	s0, [x0, 216]
	mov	w0, 1148846080
	fmov	s1, w0
	fdiv	s0, s1, s0
	fcvt	d2, s0
	ldr	x0, [sp, 248]
	ldr	s0, [x0, 216]
	fcvt	d0, s0
	fmov	d1, d0
	fmov	d0, d2
	adrp	x0, .LC704
	add	x0, x0, :lo12:.LC704
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 248]
	ldr	w4, [x0, 220]
	ldr	x0, [sp, 248]
	ldr	w2, [x0, 224]
	ldr	x0, [sp, 248]
	ldr	w0, [x0, 224]
	mov	w1, 21846
	movk	w1, 0x5555, lsl 16
	smull	x1, w0, w1
	lsr	x1, x1, 32
	asr	w0, w0, 31
	sub	w0, w1, w0
	mov	w3, w0
	mov	w1, w4
	adrp	x0, .LC705
	add	x0, x0, :lo12:.LC705
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 248]
	ldr	w1, [x0, 228]
	ldr	x0, [sp, 248]
	ldr	w0, [x0, 236]
	mov	w2, w0
	adrp	x0, .LC706
	add	x0, x0, :lo12:.LC706
	bl	_ZN5ImGui4TextEPKcz
	bl	_ZN5ImGui9SeparatorEv
	adrp	x0, .LC707
	add	x1, x0, :lo12:.LC707
	add	x0, sp, 400
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	ldp	q0, q1, [x1, 32]
	stp	q0, q1, [x0, 32]
	adrp	x0, .LC708
	add	x1, x0, :lo12:.LC708
	add	x0, sp, 464
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	ldp	q0, q1, [x1, 32]
	stp	q0, q1, [x0, 32]
	ldp	q0, q1, [x1, 64]
	stp	q0, q1, [x0, 64]
	ldr	x1, [x1, 96]
	str	x1, [x0, 96]
	ldr	x0, [sp, 256]
	ldr	w0, [x0, 8]
	cmp	w0, 0
	bge	.L4972
	ldr	x0, [sp, 256]
	mov	w1, 4
	str	w1, [x0, 8]
.L4972:
	ldr	x0, [sp, 256]
	ldr	w0, [x0, 12]
	cmp	w0, 0
	bge	.L4973
	ldr	x0, [sp, 256]
	mov	w1, 2
	str	w1, [x0, 12]
.L4973:
	adrp	x0, .LC709
	add	x0, x0, :lo12:.LC709
	bl	_ZN5ImGui8TreeNodeEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4974
	adrp	x0, .LC710
	add	x0, x0, :lo12:.LC710
	bl	_ZN5ImGui8TreeNodeEPKc
	and	w0, w0, 255
	strb	w0, [sp, 97]
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC711
	add	x0, x0, :lo12:.LC711
	bl	_ZL17MetricsHelpMarkerPKc
	ldrb	w0, [sp, 97]
	cmp	w0, 0
	beq	.L4975
	mov	w0, -2139095040
	fmov	s0, w0
	bl	_ZN5ImGui16SetNextItemWidthEf
	mov	x5, 0
	mov	x4, 0
	mov	w3, 0
	mov	x2, 100
	adrp	x0, _ZZN5ImGui17ShowMetricsWindowEPbE3buf
	add	x1, x0, :lo12:_ZZN5ImGui17ShowMetricsWindowEPbE3buf
	adrp	x0, .LC712
	add	x0, x0, :lo12:.LC712
	bl	_ZN5ImGui9InputTextEPKcPcmiPFiP26ImGuiInputTextCallbackDataEPv
	adrp	x0, _ZZN5ImGui17ShowMetricsWindowEPbE3buf
	add	x0, x0, :lo12:_ZZN5ImGui17ShowMetricsWindowEPbE3buf
	ldrb	w0, [x0]
	cmp	w0, 0
	beq	.L4976
	adrp	x0, _ZZN5ImGui17ShowMetricsWindowEPbE3buf
	add	x0, x0, :lo12:_ZZN5ImGui17ShowMetricsWindowEPbE3buf
	bl	_ZN5ImGui17DebugTextEncodingEPKc
.L4976:
	bl	_ZN5ImGui7TreePopEv
.L4975:
	ldr	x1, [sp, 240]
	mov	x0, 23641
	add	x0, x1, x0
	mov	x1, x0
	adrp	x0, .LC713
	add	x0, x0, :lo12:.LC713
	bl	_ZN5ImGui8CheckboxEPKcPb
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4977
	ldr	x0, [sp, 240]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3161]
	cmp	w0, 0
	beq	.L4977
	mov	w0, 1
	b	.L4978
.L4977:
	mov	w0, 0
.L4978:
	cmp	w0, 0
	beq	.L4979
	bl	_ZN5ImGui20DebugStartItemPickerEv
.L4979:
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC714
	add	x0, x0, :lo12:.LC714
	bl	_ZL17MetricsHelpMarkerPKc
	ldr	x0, [sp, 256]
	mov	x1, x0
	adrp	x0, .LC715
	add	x0, x0, :lo12:.LC715
	bl	_ZN5ImGui8CheckboxEPKcPb
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC716
	add	x0, x0, :lo12:.LC716
	bl	_ZL17MetricsHelpMarkerPKc
	ldr	x0, [sp, 256]
	add	x0, x0, 1
	mov	x1, x0
	adrp	x0, .LC717
	add	x0, x0, :lo12:.LC717
	bl	_ZN5ImGui8CheckboxEPKcPb
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC718
	add	x0, x0, :lo12:.LC718
	bl	_ZL17MetricsHelpMarkerPKc
	ldr	x0, [sp, 256]
	add	x0, x0, 3
	mov	x1, x0
	adrp	x0, .LC719
	add	x0, x0, :lo12:.LC719
	bl	_ZN5ImGui8CheckboxEPKcPb
	ldr	x0, [sp, 256]
	add	x0, x0, 2
	mov	x1, x0
	adrp	x0, .LC720
	add	x0, x0, :lo12:.LC720
	bl	_ZN5ImGui8CheckboxEPKcPb
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	bl	_ZN5ImGui11GetFontSizeEv
	fmov	s1, s0
	fmov	s0, 1.2e+1
	fmul	s0, s1, s0
	bl	_ZN5ImGui16SetNextItemWidthEf
	ldr	x0, [sp, 256]
	add	x0, x0, 8
	add	x1, sp, 400
	mov	w4, 8
	mov	w3, 8
	mov	x2, x1
	mov	x1, x0
	adrp	x0, .LC721
	add	x0, x0, :lo12:.LC721
	bl	_ZN5ImGui5ComboEPKcPiPKS1_ii
	and	w1, w0, 255
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 2]
	orr	w0, w1, w0
	and	w0, w0, 255
	cmp	w0, 0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 256]
	strb	w1, [x0, 2]
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 2]
	cmp	w0, 0
	beq	.L4980
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4980
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0]
	mov	x1, x0
	adrp	x0, .LC722
	add	x0, x0, :lo12:.LC722
	bl	_ZN5ImGui10BulletTextEPKcz
	movi	v0.2s, #0
	bl	_ZN5ImGui6IndentEf
	str	wzr, [sp, 100]
	b	.L4981
.L4982:
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18536]
	ldr	w1, [sp, 100]
	bl	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs13GetWindowRectEP11ImGuiWindowi
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	ldr	s0, [sp, 384]
	fcvt	d8, s0
	ldr	s0, [sp, 388]
	fcvt	d9, s0
	ldr	s0, [sp, 392]
	fcvt	d10, s0
	ldr	s0, [sp, 396]
	fcvt	d11, s0
	add	x0, sp, 384
	bl	_ZNK6ImRect8GetWidthEv
	fcvt	d12, s0
	add	x0, sp, 384
	bl	_ZNK6ImRect9GetHeightEv
	fcvt	d0, s0
	ldrsw	x0, [sp, 100]
	lsl	x0, x0, 3
	add	x1, sp, 400
	ldr	x0, [x1, x0]
	mov	x1, x0
	fmov	d5, d0
	fmov	d4, d12
	fmov	d3, d11
	fmov	d2, d10
	fmov	d1, d9
	fmov	d0, d8
	adrp	x0, .LC723
	add	x0, x0, :lo12:.LC723
	bl	_ZN5ImGui4TextEPKcz
	ldr	w0, [sp, 100]
	add	w0, w0, 1
	str	w0, [sp, 100]
.L4981:
	ldr	w0, [sp, 100]
	cmp	w0, 7
	ble	.L4982
	movi	v0.2s, #0
	bl	_ZN5ImGui8UnindentEf
.L4980:
	ldr	x0, [sp, 256]
	add	x0, x0, 4
	mov	x1, x0
	adrp	x0, .LC724
	add	x0, x0, :lo12:.LC724
	bl	_ZN5ImGui8CheckboxEPKcPb
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	bl	_ZN5ImGui11GetFontSizeEv
	fmov	s1, s0
	fmov	s0, 1.2e+1
	fmul	s0, s1, s0
	bl	_ZN5ImGui16SetNextItemWidthEf
	ldr	x0, [sp, 256]
	add	x0, x0, 12
	add	x1, sp, 464
	mov	w4, 13
	mov	w3, 13
	mov	x2, x1
	mov	x1, x0
	adrp	x0, .LC725
	add	x0, x0, :lo12:.LC725
	bl	_ZN5ImGui5ComboEPKcPiPKS1_ii
	and	w1, w0, 255
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 4]
	orr	w0, w1, w0
	and	w0, w0, 255
	cmp	w0, 0
	cset	w0, ne
	and	w1, w0, 255
	ldr	x0, [sp, 256]
	strb	w1, [x0, 4]
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 4]
	cmp	w0, 0
	beq	.L4983
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L4983
	str	wzr, [sp, 104]
	b	.L4984
.L4998:
	ldr	x1, [sp, 240]
	mov	x0, 19184
	add	x0, x1, x0
	ldr	w1, [sp, 104]
	bl	_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi
	str	x0, [sp, 264]
	ldr	x0, [sp, 264]
	cmp	x0, 0
	beq	.L5106
	ldr	x0, [sp, 264]
	ldr	w1, [x0, 112]
	ldr	x0, [sp, 240]
	ldr	w0, [x0, 15904]
	sub	w0, w0, #1
	cmp	w1, w0
	blt	.L5106
	ldr	x0, [sp, 264]
	ldr	x1, [x0, 384]
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18536]
	cmp	x1, x0
	beq	.L4986
	ldr	x0, [sp, 264]
	ldr	x1, [x0, 392]
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18536]
	cmp	x1, x0
	bne	.L5106
.L4986:
	ldr	x0, [sp, 264]
	ldr	w1, [x0]
	ldr	x0, [sp, 264]
	ldr	w2, [x0, 116]
	ldr	x0, [sp, 264]
	ldr	x0, [x0, 384]
	ldr	x0, [x0]
	mov	x3, x0
	adrp	x0, .LC726
	add	x0, x0, :lo12:.LC726
	bl	_ZN5ImGui10BulletTextEPKcz
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4988
	bl	_ZN5ImGui21GetForegroundDrawListEv
	mov	x20, x0
	ldr	x0, [sp, 264]
	add	x19, x0, 240
	add	x0, sp, 200
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 200
	mov	x1, x0
	mov	x0, x19
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 208]
	str	s0, [sp, 212]
	ldr	x0, [sp, 264]
	add	x19, x0, 248
	add	x0, sp, 216
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 216
	mov	x1, x0
	mov	x0, x19
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 384]
	str	s0, [sp, 388]
	add	x1, sp, 384
	add	x0, sp, 208
	fmov	s1, 2.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711681
	mov	x2, x1
	mov	x1, x0
	mov	x0, x20
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L4988:
	movi	v0.2s, #0
	bl	_ZN5ImGui6IndentEf
	str	wzr, [sp, 108]
	b	.L4989
.L4997:
	ldr	w0, [sp, 108]
	cmp	w0, 5
	ble	.L4990
	ldr	w0, [sp, 108]
	cmp	w0, 6
	beq	.L4991
	ldr	w0, [sp, 108]
	cmp	w0, 8
	bne	.L5107
.L4991:
	str	wzr, [sp, 112]
	b	.L4993
.L4995:
	ldr	w2, [sp, 112]
	ldr	w1, [sp, 108]
	ldr	x0, [sp, 264]
	bl	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs12GetTableRectEP10ImGuiTableii
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	ldr	s0, [sp, 384]
	fcvt	d8, s0
	ldr	s0, [sp, 388]
	fcvt	d9, s0
	ldr	s0, [sp, 392]
	fcvt	d10, s0
	ldr	s0, [sp, 396]
	fcvt	d11, s0
	add	x0, sp, 384
	bl	_ZNK6ImRect8GetWidthEv
	fcvt	d12, s0
	add	x0, sp, 384
	bl	_ZNK6ImRect9GetHeightEv
	fcvt	d0, s0
	ldrsw	x0, [sp, 108]
	lsl	x0, x0, 3
	add	x1, sp, 464
	ldr	x0, [x1, x0]
	add	x5, sp, 568
	mov	x4, x0
	ldr	w3, [sp, 112]
	fmov	d5, d0
	fmov	d4, d12
	fmov	d3, d11
	fmov	d2, d10
	fmov	d1, d9
	fmov	d0, d8
	adrp	x0, .LC727
	add	x2, x0, :lo12:.LC727
	mov	x1, 128
	mov	x0, x5
	bl	_Z14ImFormatStringPcmPKcz
	add	x0, sp, 216
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 216
	add	x0, sp, 568
	mov	x3, x1
	mov	w2, 0
	mov	w1, 0
	bl	_ZN5ImGui10SelectableEPKcbiRK6ImVec2
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4994
	bl	_ZN5ImGui21GetForegroundDrawListEv
	mov	x19, x0
	add	x0, sp, 192
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 192
	add	x0, sp, 384
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 200]
	str	s0, [sp, 204]
	add	x0, sp, 208
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 208
	add	x0, sp, 384
	add	x0, x0, 8
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 216]
	str	s0, [sp, 220]
	add	x1, sp, 216
	add	x0, sp, 200
	fmov	s1, 2.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711681
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L4994:
	ldr	w0, [sp, 112]
	add	w0, w0, 1
	str	w0, [sp, 112]
.L4993:
	ldr	x0, [sp, 264]
	ldr	w0, [x0, 116]
	ldr	w1, [sp, 112]
	cmp	w1, w0
	blt	.L4995
	b	.L4992
.L4990:
	mov	w2, -1
	ldr	w1, [sp, 108]
	ldr	x0, [sp, 264]
	bl	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs12GetTableRectEP10ImGuiTableii
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	ldr	s0, [sp, 384]
	fcvt	d8, s0
	ldr	s0, [sp, 388]
	fcvt	d9, s0
	ldr	s0, [sp, 392]
	fcvt	d10, s0
	ldr	s0, [sp, 396]
	fcvt	d11, s0
	add	x0, sp, 384
	bl	_ZNK6ImRect8GetWidthEv
	fcvt	d12, s0
	add	x0, sp, 384
	bl	_ZNK6ImRect9GetHeightEv
	fcvt	d0, s0
	ldrsw	x0, [sp, 108]
	lsl	x0, x0, 3
	add	x1, sp, 464
	ldr	x0, [x1, x0]
	add	x4, sp, 568
	mov	x3, x0
	fmov	d5, d0
	fmov	d4, d12
	fmov	d3, d11
	fmov	d2, d10
	fmov	d1, d9
	fmov	d0, d8
	adrp	x0, .LC723
	add	x2, x0, :lo12:.LC723
	mov	x1, 128
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
	add	x0, sp, 216
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 216
	add	x0, sp, 568
	mov	x3, x1
	mov	w2, 0
	mov	w1, 0
	bl	_ZN5ImGui10SelectableEPKcbiRK6ImVec2
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4992
	bl	_ZN5ImGui21GetForegroundDrawListEv
	mov	x19, x0
	add	x0, sp, 192
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 192
	add	x0, sp, 384
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 200]
	str	s0, [sp, 204]
	add	x0, sp, 208
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 208
	add	x0, sp, 384
	add	x0, x0, 8
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 216]
	str	s0, [sp, 220]
	add	x1, sp, 216
	add	x0, sp, 200
	fmov	s1, 2.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711681
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	b	.L4992
.L5107:
	nop
.L4992:
	ldr	w0, [sp, 108]
	add	w0, w0, 1
	str	w0, [sp, 108]
.L4989:
	ldr	w0, [sp, 108]
	cmp	w0, 12
	ble	.L4997
	movi	v0.2s, #0
	bl	_ZN5ImGui8UnindentEf
	b	.L4987
.L5106:
	nop
.L4987:
	ldr	w0, [sp, 104]
	add	w0, w0, 1
	str	w0, [sp, 104]
.L4984:
	ldr	x1, [sp, 240]
	mov	x0, 19184
	add	x0, x1, x0
	bl	_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv
	mov	w1, w0
	ldr	w0, [sp, 104]
	cmp	w0, w1
	cset	w0, lt
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L4998
.L4983:
	bl	_ZN5ImGui7TreePopEv
.L4974:
	ldr	x0, [sp, 240]
	ldr	w0, [x0, 15936]
	mov	w2, w0
	adrp	x0, .LC728
	add	x1, x0, :lo12:.LC728
	adrp	x0, .LC205
	add	x0, x0, :lo12:.LC205
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L4999
	ldr	x1, [sp, 240]
	mov	x0, 15936
	add	x2, x1, x0
	adrp	x0, .LC729
	add	x1, x0, :lo12:.LC729
	mov	x0, x2
	bl	_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc
	ldr	x1, [sp, 240]
	mov	x0, 15952
	add	x2, x1, x0
	adrp	x0, .LC730
	add	x1, x0, :lo12:.LC730
	mov	x0, x2
	bl	_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc
	adrp	x0, .LC731
	add	x0, x0, :lo12:.LC731
	bl	_ZN5ImGui8TreeNodeEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5000
	ldr	x1, [sp, 240]
	mov	x0, 15968
	add	x0, x1, x0
	str	x0, [sp, 272]
	mov	w1, 0
	ldr	x0, [sp, 272]
	bl	_ZN8ImVectorIP11ImGuiWindowE6resizeEi
	str	wzr, [sp, 116]
	b	.L5001
.L5003:
	ldr	x1, [sp, 240]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 116]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	ldr	w0, [x0, 576]
	add	w1, w0, 1
	ldr	x0, [sp, 240]
	ldr	w0, [x0, 15904]
	cmp	w1, w0
	cset	w0, ge
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5002
	ldr	x1, [sp, 240]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 116]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	mov	x1, x0
	ldr	x0, [sp, 272]
	bl	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_
.L5002:
	ldr	w0, [sp, 116]
	add	w0, w0, 1
	str	w0, [sp, 116]
.L5001:
	ldr	x0, [sp, 240]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 116]
	cmp	w1, w0
	blt	.L5003
	ldr	x0, [sp, 272]
	ldr	x4, [x0, 8]
	ldr	x0, [sp, 272]
	ldr	w0, [x0]
	sxtw	x1, w0
	adrp	x0, _ZZN5ImGui17ShowMetricsWindowEPbEN4Func26WindowComparerByBeginOrderEPKvS3_
	add	x3, x0, :lo12:_ZZN5ImGui17ShowMetricsWindowEPbEN4Func26WindowComparerByBeginOrderEPKvS3_
	mov	x2, 8
	mov	x0, x4
	bl	_ZL7ImQsortPvmmPFiPKvS1_E
	ldr	x0, [sp, 272]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 272]
	ldr	w0, [x0]
	mov	x2, 0
	mov	w1, w0
	mov	x0, x3
	bl	_ZN5ImGui38DebugNodeWindowsListByBeginStackParentEPP11ImGuiWindowiS1_
	bl	_ZN5ImGui7TreePopEv
.L5000:
	bl	_ZN5ImGui7TreePopEv
.L4999:
	str	wzr, [sp, 120]
	str	wzr, [sp, 124]
	b	.L5004
.L5005:
	ldr	x1, [sp, 240]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 124]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	add	x0, x0, 120
	bl	_ZNK17ImDrawDataBuilder16GetDrawListCountEv
	mov	w1, w0
	ldr	w0, [sp, 120]
	add	w0, w0, w1
	str	w0, [sp, 120]
	ldr	w0, [sp, 124]
	add	w0, w0, 1
	str	w0, [sp, 124]
.L5004:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 124]
	cmp	w1, w0
	blt	.L5005
	ldr	w2, [sp, 120]
	adrp	x0, .LC732
	add	x1, x0, :lo12:.LC732
	adrp	x0, .LC733
	add	x0, x0, :lo12:.LC733
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5006
	ldr	x0, [sp, 256]
	add	x0, x0, 5
	mov	x1, x0
	adrp	x0, .LC734
	add	x0, x0, :lo12:.LC734
	bl	_ZN5ImGui8CheckboxEPKcPb
	ldr	x0, [sp, 256]
	add	x0, x0, 6
	mov	x1, x0
	adrp	x0, .LC735
	add	x0, x0, :lo12:.LC735
	bl	_ZN5ImGui8CheckboxEPKcPb
	str	wzr, [sp, 128]
	b	.L5007
.L5012:
	ldr	x1, [sp, 240]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 128]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	str	x0, [sp, 280]
	str	wzr, [sp, 132]
	b	.L5008
.L5011:
	str	wzr, [sp, 136]
	b	.L5009
.L5010:
	ldrsw	x0, [sp, 132]
	add	x0, x0, 7
	lsl	x0, x0, 4
	ldr	x1, [sp, 280]
	add	x0, x1, x0
	add	x0, x0, 8
	ldr	w1, [sp, 136]
	bl	_ZN8ImVectorIP10ImDrawListEixEi
	ldr	x1, [x0]
	adrp	x0, .LC736
	add	x2, x0, :lo12:.LC736
	mov	x0, 0
	bl	_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowPK10ImDrawListPKc
	ldr	w0, [sp, 136]
	add	w0, w0, 1
	str	w0, [sp, 136]
.L5009:
	ldr	x1, [sp, 280]
	ldrsw	x0, [sp, 132]
	add	x0, x0, 7
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 136]
	cmp	w1, w0
	blt	.L5010
	ldr	w0, [sp, 132]
	add	w0, w0, 1
	str	w0, [sp, 132]
.L5008:
	ldr	w0, [sp, 132]
	cmp	w0, 1
	ble	.L5011
	ldr	w0, [sp, 128]
	add	w0, w0, 1
	str	w0, [sp, 128]
.L5007:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 128]
	cmp	w1, w0
	blt	.L5012
	bl	_ZN5ImGui7TreePopEv
.L5006:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	mov	w2, w0
	adrp	x0, .LC737
	add	x1, x0, :lo12:.LC737
	adrp	x0, .LC738
	add	x0, x0, :lo12:.LC738
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5013
	bl	_ZN5ImGui25GetTreeNodeToLabelSpacingEv
	bl	_ZN5ImGui6IndentEf
	bl	_ZL25RenderViewportsThumbnailsv
	bl	_ZN5ImGui25GetTreeNodeToLabelSpacingEv
	bl	_ZN5ImGui8UnindentEf
	str	wzr, [sp, 140]
	b	.L5014
.L5015:
	ldr	x1, [sp, 240]
	mov	x0, 18520
	add	x0, x1, x0
	ldr	w1, [sp, 140]
	bl	_ZN8ImVectorIP14ImGuiViewportPEixEi
	ldr	x0, [x0]
	bl	_ZN5ImGui17DebugNodeViewportEP14ImGuiViewportP
	ldr	w0, [sp, 140]
	add	w0, w0, 1
	str	w0, [sp, 140]
.L5014:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2136]
	ldr	w1, [sp, 140]
	cmp	w1, w0
	blt	.L5015
	bl	_ZN5ImGui7TreePopEv
.L5013:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	mov	w2, w0
	adrp	x0, .LC739
	add	x1, x0, :lo12:.LC739
	adrp	x0, .LC740
	add	x0, x0, :lo12:.LC740
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5016
	str	wzr, [sp, 144]
	b	.L5017
.L5028:
	ldr	x1, [sp, 240]
	mov	x0, 18480
	add	x0, x1, x0
	ldr	w1, [sp, 144]
	bl	_ZN8ImVectorI14ImGuiPopupDataEixEi
	str	x0, [sp, 288]
	ldr	x0, [sp, 288]
	ldr	x0, [x0, 8]
	str	x0, [sp, 296]
	ldr	x0, [sp, 288]
	ldr	w7, [x0]
	ldr	x0, [sp, 296]
	cmp	x0, 0
	beq	.L5018
	ldr	x0, [sp, 296]
	ldr	x0, [x0]
	b	.L5019
.L5018:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5019:
	ldr	x1, [sp, 296]
	cmp	x1, 0
	beq	.L5020
	ldr	x1, [sp, 296]
	ldr	w1, [x1, 12]
	and	w1, w1, 16777216
	cmp	w1, 0
	beq	.L5020
	adrp	x1, .LC741
	add	x1, x1, :lo12:.LC741
	b	.L5021
.L5020:
	adrp	x1, .LC67
	add	x1, x1, :lo12:.LC67
.L5021:
	ldr	x2, [sp, 296]
	cmp	x2, 0
	beq	.L5022
	ldr	x2, [sp, 296]
	ldr	w2, [x2, 12]
	and	w2, w2, 268435456
	cmp	w2, 0
	beq	.L5022
	adrp	x2, .LC742
	add	x2, x2, :lo12:.LC742
	b	.L5023
.L5022:
	adrp	x2, .LC67
	add	x2, x2, :lo12:.LC67
.L5023:
	ldr	x3, [sp, 288]
	ldr	x3, [x3, 16]
	cmp	x3, 0
	beq	.L5024
	ldr	x3, [sp, 288]
	ldr	x3, [x3, 16]
	ldr	x3, [x3]
	b	.L5025
.L5024:
	adrp	x3, .LC188
	add	x3, x3, :lo12:.LC188
.L5025:
	ldr	x4, [sp, 296]
	cmp	x4, 0
	beq	.L5026
	ldr	x4, [sp, 296]
	ldr	x4, [x4, 840]
	cmp	x4, 0
	beq	.L5026
	ldr	x4, [sp, 296]
	ldr	x4, [x4, 840]
	ldr	x4, [x4]
	b	.L5027
.L5026:
	adrp	x4, .LC188
	add	x4, x4, :lo12:.LC188
.L5027:
	mov	x6, x4
	mov	x5, x3
	mov	x4, x2
	mov	x3, x1
	mov	x2, x0
	mov	w1, w7
	adrp	x0, .LC743
	add	x0, x0, :lo12:.LC743
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	w0, [sp, 144]
	add	w0, w0, 1
	str	w0, [sp, 144]
.L5017:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2096]
	ldr	w1, [sp, 144]
	cmp	w1, w0
	blt	.L5028
	bl	_ZN5ImGui7TreePopEv
.L5016:
	ldr	x1, [sp, 240]
	mov	x0, 19264
	add	x0, x1, x0
	bl	_ZNK6ImPoolI11ImGuiTabBarE13GetAliveCountEv
	mov	w2, w0
	adrp	x0, .LC744
	add	x1, x0, :lo12:.LC744
	adrp	x0, .LC745
	add	x0, x0, :lo12:.LC745
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5029
	str	wzr, [sp, 148]
	b	.L5030
.L5032:
	ldr	x1, [sp, 240]
	mov	x0, 19264
	add	x0, x1, x0
	ldr	w1, [sp, 148]
	bl	_ZN6ImPoolI11ImGuiTabBarE13TryGetMapDataEi
	str	x0, [sp, 304]
	ldr	x0, [sp, 304]
	cmp	x0, 0
	beq	.L5031
	ldr	x0, [sp, 304]
	bl	_ZN5ImGui6PushIDEPKv
	adrp	x0, .LC746
	add	x1, x0, :lo12:.LC746
	ldr	x0, [sp, 304]
	bl	_ZN5ImGui15DebugNodeTabBarEP11ImGuiTabBarPKc
	bl	_ZN5ImGui5PopIDEv
.L5031:
	ldr	w0, [sp, 148]
	add	w0, w0, 1
	str	w0, [sp, 148]
.L5030:
	ldr	x1, [sp, 240]
	mov	x0, 19264
	add	x0, x1, x0
	bl	_ZNK6ImPoolI11ImGuiTabBarE10GetMapSizeEv
	mov	w1, w0
	ldr	w0, [sp, 148]
	cmp	w0, w1
	cset	w0, lt
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5032
	bl	_ZN5ImGui7TreePopEv
.L5029:
	ldr	x1, [sp, 240]
	mov	x0, 19184
	add	x0, x1, x0
	bl	_ZNK6ImPoolI10ImGuiTableE13GetAliveCountEv
	mov	w2, w0
	adrp	x0, .LC747
	add	x1, x0, :lo12:.LC747
	adrp	x0, .LC748
	add	x0, x0, :lo12:.LC748
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5033
	str	wzr, [sp, 152]
	b	.L5034
.L5036:
	ldr	x1, [sp, 240]
	mov	x0, 19184
	add	x0, x1, x0
	ldr	w1, [sp, 152]
	bl	_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi
	str	x0, [sp, 312]
	ldr	x0, [sp, 312]
	cmp	x0, 0
	beq	.L5035
	ldr	x0, [sp, 312]
	bl	_ZN5ImGui14DebugNodeTableEP10ImGuiTable
.L5035:
	ldr	w0, [sp, 152]
	add	w0, w0, 1
	str	w0, [sp, 152]
.L5034:
	ldr	x1, [sp, 240]
	mov	x0, 19184
	add	x0, x1, x0
	bl	_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv
	mov	w1, w0
	ldr	w0, [sp, 152]
	cmp	w0, w1
	cset	w0, lt
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5036
	bl	_ZN5ImGui7TreePopEv
.L5033:
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 88]
	str	x0, [sp, 320]
	ldr	x0, [sp, 320]
	ldr	w0, [x0, 72]
	mov	w2, w0
	adrp	x0, .LC749
	add	x1, x0, :lo12:.LC749
	adrp	x0, .LC750
	add	x0, x0, :lo12:.LC750
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5037
	ldr	x0, [sp, 320]
	bl	_ZN5ImGui13ShowFontAtlasEP11ImFontAtlas
	bl	_ZN5ImGui7TreePopEv
.L5037:
	adrp	x0, .LC751
	add	x0, x0, :lo12:.LC751
	bl	_ZN5ImGui8TreeNodeEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5038
	ldr	x1, [sp, 240]
	mov	x0, 19360
	add	x0, x1, x0
	bl	_ZN5ImGui23DebugNodeInputTextStateEP19ImGuiInputTextState
	bl	_ZN5ImGui7TreePopEv
.L5038:
	adrp	x0, .LC752
	add	x0, x0, :lo12:.LC752
	bl	_ZN5ImGui8TreeNodeEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5039
	adrp	x0, .LC753
	add	x0, x0, :lo12:.LC753
	bl	_ZN5ImGui11SmallButtonEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5040
	bl	_ZN5ImGui16ClearIniSettingsEv
.L5040:
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC754
	add	x0, x0, :lo12:.LC754
	bl	_ZN5ImGui11SmallButtonEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5041
	mov	x0, 0
	bl	_ZN5ImGui23SaveIniSettingsToMemoryEPm
.L5041:
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC755
	add	x0, x0, :lo12:.LC755
	bl	_ZN5ImGui11SmallButtonEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5042
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 32]
	bl	_ZN5ImGui21SaveIniSettingsToDiskEPKc
.L5042:
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 32]
	cmp	x0, 0
	beq	.L5043
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 32]
	mov	x1, x0
	adrp	x0, .LC756
	add	x0, x0, :lo12:.LC756
	bl	_ZN5ImGui4TextEPKcz
	b	.L5044
.L5043:
	mov	x1, 0
	adrp	x0, .LC570
	add	x0, x0, :lo12:.LC570
	bl	_ZN5ImGui15TextUnformattedEPKcS1_
.L5044:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	s0, [x0, 6996]
	fcvt	d0, s0
	adrp	x0, .LC757
	add	x0, x0, :lo12:.LC757
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 7016]
	mov	w2, w0
	adrp	x0, .LC758
	add	x1, x0, :lo12:.LC758
	adrp	x0, .LC759
	add	x0, x0, :lo12:.LC759
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5045
	str	wzr, [sp, 156]
	b	.L5046
.L5047:
	ldr	x1, [sp, 240]
	mov	x0, 23400
	add	x0, x1, x0
	ldr	w1, [sp, 156]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	ldr	x0, [x0]
	mov	x1, x0
	adrp	x0, .LC760
	add	x0, x0, :lo12:.LC760
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	w0, [sp, 156]
	add	w0, w0, 1
	str	w0, [sp, 156]
.L5046:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 7016]
	ldr	w1, [sp, 156]
	cmp	w1, w0
	blt	.L5047
	bl	_ZN5ImGui7TreePopEv
.L5045:
	ldr	x1, [sp, 240]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv
	mov	w2, w0
	adrp	x0, .LC761
	add	x1, x0, :lo12:.LC761
	adrp	x0, .LC762
	add	x0, x0, :lo12:.LC762
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5048
	ldr	x1, [sp, 240]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv
	str	x0, [sp, 224]
	b	.L5049
.L5050:
	ldr	x0, [sp, 224]
	bl	_ZN5ImGui23DebugNodeWindowSettingsEP19ImGuiWindowSettings
	ldr	x1, [sp, 240]
	mov	x0, 23416
	add	x0, x1, x0
	ldr	x1, [sp, 224]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_
	str	x0, [sp, 224]
.L5049:
	ldr	x0, [sp, 224]
	cmp	x0, 0
	bne	.L5050
	bl	_ZN5ImGui7TreePopEv
.L5048:
	ldr	x1, [sp, 240]
	mov	x0, 23432
	add	x0, x1, x0
	bl	_ZNK13ImChunkStreamI18ImGuiTableSettingsE4sizeEv
	mov	w2, w0
	adrp	x0, .LC763
	add	x1, x0, :lo12:.LC763
	adrp	x0, .LC764
	add	x0, x0, :lo12:.LC764
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5051
	ldr	x1, [sp, 240]
	mov	x0, 23432
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv
	str	x0, [sp, 232]
	b	.L5052
.L5053:
	ldr	x0, [sp, 232]
	bl	_ZN5ImGui22DebugNodeTableSettingsEP18ImGuiTableSettings
	ldr	x1, [sp, 240]
	mov	x0, 23432
	add	x0, x1, x0
	ldr	x1, [sp, 232]
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsE10next_chunkEPS0_
	str	x0, [sp, 232]
.L5052:
	ldr	x0, [sp, 232]
	cmp	x0, 0
	bne	.L5053
	bl	_ZN5ImGui7TreePopEv
.L5051:
	ldr	x1, [sp, 240]
	mov	x0, 23384
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer4sizeEv
	mov	w2, w0
	adrp	x0, .LC765
	add	x1, x0, :lo12:.LC765
	adrp	x0, .LC766
	add	x0, x0, :lo12:.LC766
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5054
	ldr	x1, [sp, 240]
	mov	x0, 23384
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5c_strEv
	mov	x20, x0
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 7000]
	sxtw	x19, w0
	bl	_ZN5ImGui17GetTextLineHeightEv
	fmov	s1, s0
	fmov	s0, 2.0e+1
	fmul	s0, s1, s0
	add	x0, sp, 384
	fmov	s1, s0
	mov	w1, -2139095040
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 384
	mov	x6, 0
	mov	x5, 0
	mov	w4, 16384
	mov	x3, x0
	mov	x2, x19
	mov	x1, x20
	adrp	x0, .LC767
	add	x0, x0, :lo12:.LC767
	bl	_ZN5ImGui18InputTextMultilineEPKcPcmRK6ImVec2iPFiP26ImGuiInputTextCallbackDataEPv
	bl	_ZN5ImGui7TreePopEv
.L5054:
	bl	_ZN5ImGui7TreePopEv
.L5039:
	adrp	x0, .LC768
	add	x0, x0, :lo12:.LC768
	bl	_ZN5ImGui8TreeNodeEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5055
	mov	x1, 0
	adrp	x0, .LC769
	add	x0, x0, :lo12:.LC769
	bl	_ZN5ImGui15TextUnformattedEPKcS1_
	bl	_ZN5ImGui28GetTextLineHeightWithSpacingEv
	fmov	s1, s0
	fmov	s0, 8.0e+0
	fmul	s0, s1, s0
	add	x0, sp, 384
	fmov	s1, s0
	mov	w1, -2139095040
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 384
	mov	x1, x0
	adrp	x0, .LC770
	add	x0, x0, :lo12:.LC770
	bl	_ZN5ImGui12BeginListBoxEPKcRK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5056
	mov	w0, 512
	str	w0, [sp, 160]
	b	.L5057
.L5064:
	ldr	w0, [sp, 160]
	bl	_ZN5ImGui15GetKeyOwnerDataE8ImGuiKey
	str	x0, [sp, 328]
	ldr	x0, [sp, 328]
	ldr	w0, [x0]
	cmn	w0, #1
	beq	.L5108
	ldr	w0, [sp, 160]
	bl	_ZN5ImGui10GetKeyNameE8ImGuiKey
	mov	x4, x0
	ldr	x0, [sp, 328]
	ldr	w1, [x0]
	ldr	x0, [sp, 328]
	ldrb	w0, [x0, 9]
	cmp	w0, 0
	beq	.L5060
	adrp	x0, .LC771
	add	x0, x0, :lo12:.LC771
	b	.L5061
.L5060:
	ldr	x0, [sp, 328]
	ldrb	w0, [x0, 8]
	cmp	w0, 0
	beq	.L5062
	adrp	x0, .LC772
	add	x0, x0, :lo12:.LC772
	b	.L5061
.L5062:
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
.L5061:
	mov	x3, x0
	mov	w2, w1
	mov	x1, x4
	adrp	x0, .LC773
	add	x0, x0, :lo12:.LC773
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 328]
	ldr	w0, [x0]
	bl	_ZN5ImGui22DebugLocateItemOnHoverEj
	b	.L5059
.L5108:
	nop
.L5059:
	ldr	w0, [sp, 160]
	add	w0, w0, 1
	str	w0, [sp, 160]
.L5057:
	ldr	w0, [sp, 160]
	cmp	w0, 651
	ble	.L5064
	bl	_ZN5ImGui10EndListBoxEv
.L5056:
	mov	x1, 0
	adrp	x0, .LC774
	add	x0, x0, :lo12:.LC774
	bl	_ZN5ImGui15TextUnformattedEPKcS1_
	bl	_ZN5ImGui28GetTextLineHeightWithSpacingEv
	fmov	s1, s0
	fmov	s0, 8.0e+0
	fmul	s0, s1, s0
	add	x0, sp, 384
	fmov	s1, s0
	mov	w1, -2139095040
	fmov	s0, w1
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 384
	mov	x1, x0
	adrp	x0, .LC775
	add	x0, x0, :lo12:.LC775
	bl	_ZN5ImGui12BeginListBoxEPKcRK6ImVec2
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5065
	mov	w0, 512
	str	w0, [sp, 164]
	b	.L5066
.L5069:
	ldr	x1, [sp, 240]
	mov	x0, 17856
	add	x0, x1, x0
	str	x0, [sp, 336]
	ldr	w0, [sp, 164]
	sub	w1, w0, #512
	ldr	x0, [sp, 336]
	sxtw	x1, w1
	ldrh	w0, [x0, x1, lsl 1]
	strh	w0, [sp, 98]
	b	.L5067
.L5068:
	ldr	x0, [sp, 336]
	add	x0, x0, 280
	ldrsh	w1, [sp, 98]
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi
	str	x0, [sp, 344]
	ldr	x0, [sp, 344]
	ldrh	w0, [x0, 2]
	mov	w1, w0
	ldr	w0, [sp, 164]
	orr	w0, w1, w0
	add	x1, sp, 568
	mov	w2, 64
	bl	_ZN5ImGui15GetKeyChordNameEiPci
	ldr	x0, [sp, 344]
	ldr	w1, [x0, 8]
	add	x0, sp, 568
	mov	w2, w1
	mov	x1, x0
	adrp	x0, .LC776
	add	x0, x0, :lo12:.LC776
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 344]
	ldr	w0, [x0, 8]
	bl	_ZN5ImGui22DebugLocateItemOnHoverEj
	ldr	x0, [sp, 344]
	ldrh	w0, [x0]
	strh	w0, [sp, 98]
.L5067:
	ldrsh	w0, [sp, 98]
	cmn	w0, #1
	bne	.L5068
	ldr	w0, [sp, 164]
	add	w0, w0, 1
	str	w0, [sp, 164]
.L5066:
	ldr	w0, [sp, 164]
	cmp	w0, 651
	ble	.L5069
	bl	_ZN5ImGui10EndListBoxEv
.L5065:
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldrb	w0, [x0, 1788]
	mov	w1, w0
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 1784]
	mov	w2, w0
	adrp	x0, .LC777
	add	x0, x0, :lo12:.LC777
	bl	_ZN5ImGui4TextEPKcz
	bl	_ZN5ImGui7TreePopEv
.L5055:
	adrp	x0, .LC778
	add	x0, x0, :lo12:.LC778
	bl	_ZN5ImGui8TreeNodeEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5070
	adrp	x0, .LC779
	add	x0, x0, :lo12:.LC779
	bl	_ZN5ImGui4TextEPKcz
	movi	v0.2s, #0
	bl	_ZN5ImGui6IndentEf
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	beq	.L5071
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16040]
	ldr	x0, [x0]
	b	.L5072
.L5071:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5072:
	mov	x1, x0
	adrp	x0, .LC780
	add	x0, x0, :lo12:.LC780
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16040]
	cmp	x0, 0
	beq	.L5073
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16040]
	ldr	x0, [x0, 856]
	ldr	x0, [x0]
	b	.L5074
.L5073:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5074:
	mov	x1, x0
	adrp	x0, .LC781
	add	x0, x0, :lo12:.LC781
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16048]
	cmp	x0, 0
	beq	.L5075
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16048]
	ldr	x0, [x0]
	b	.L5076
.L5075:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5076:
	mov	x1, x0
	adrp	x0, .LC782
	add	x0, x0, :lo12:.LC782
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16056]
	cmp	x0, 0
	beq	.L5077
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16056]
	ldr	x0, [x0]
	b	.L5078
.L5077:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5078:
	mov	x1, x0
	adrp	x0, .LC783
	add	x0, x0, :lo12:.LC783
	bl	_ZN5ImGui4TextEPKcz
	movi	v0.2s, #0
	bl	_ZN5ImGui8UnindentEf
	adrp	x0, .LC784
	add	x0, x0, :lo12:.LC784
	bl	_ZN5ImGui4TextEPKcz
	movi	v0.2s, #0
	bl	_ZN5ImGui6IndentEf
	ldr	x0, [sp, 240]
	ldr	w19, [x0, 16108]
	ldr	x0, [sp, 240]
	ldr	w20, [x0, 16152]
	ldr	x0, [sp, 240]
	ldr	s0, [x0, 16116]
	fcvt	d8, s0
	ldr	x0, [sp, 240]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3833]
	mov	w21, w0
	ldr	x0, [sp, 240]
	ldr	w0, [x0, 16144]
	bl	_ZL18GetInputSourceName16ImGuiInputSource
	mov	x4, x0
	mov	w3, w21
	fmov	d0, d8
	mov	w2, w20
	mov	w1, w19
	adrp	x0, .LC785
	add	x0, x0, :lo12:.LC785
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	ldr	w0, [x0, 16108]
	bl	_ZN5ImGui22DebugLocateItemOnHoverEj
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16136]
	cmp	x0, 0
	beq	.L5079
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 16136]
	ldr	x0, [x0]
	b	.L5080
.L5079:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5080:
	mov	x1, x0
	adrp	x0, .LC786
	add	x0, x0, :lo12:.LC786
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldrb	w0, [x0, 1788]
	mov	w1, w0
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 1784]
	mov	w2, w0
	adrp	x0, .LC787
	add	x0, x0, :lo12:.LC787
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	ldr	w1, [x0, 16092]
	ldr	x0, [sp, 240]
	ldr	s0, [x0, 16100]
	fcvt	d0, s0
	ldr	x0, [sp, 240]
	add	x0, x0, 12288
	ldrb	w0, [x0, 3808]
	mov	w2, w0
	adrp	x0, .LC788
	add	x0, x0, :lo12:.LC788
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w1, [x0, 2952]
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	s0, [x0, 2960]
	fcvt	d2, s0
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	s0, [x0, 2964]
	fcvt	d0, s0
	fmov	d1, d0
	fmov	d0, d2
	adrp	x0, .LC789
	add	x0, x0, :lo12:.LC789
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2580]
	mov	w5, w0
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w2, [x0, 2612]
	ldr	x1, [sp, 240]
	mov	x0, 19008
	add	x1, x1, x0
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2608]
	mov	w4, w0
	mov	x3, x1
	mov	w1, w5
	adrp	x0, .LC790
	add	x0, x0, :lo12:.LC790
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2612]
	bl	_ZN5ImGui22DebugLocateItemOnHoverEj
	movi	v0.2s, #0
	bl	_ZN5ImGui8UnindentEf
	adrp	x0, .LC791
	add	x0, x0, :lo12:.LC791
	bl	_ZN5ImGui4TextEPKcz
	movi	v0.2s, #0
	bl	_ZN5ImGui6IndentEf
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18536]
	cmp	x0, 0
	beq	.L5081
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18536]
	ldr	x0, [x0]
	b	.L5082
.L5081:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5082:
	mov	x1, x0
	adrp	x0, .LC792
	add	x0, x0, :lo12:.LC792
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w1, [x0, 2160]
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2212]
	mov	w2, w0
	adrp	x0, .LC793
	add	x0, x0, :lo12:.LC793
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2160]
	bl	_ZN5ImGui22DebugLocateItemOnHoverEj
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2208]
	bl	_ZL18GetInputSourceName16ImGuiInputSource
	mov	x1, x0
	adrp	x0, .LC794
	add	x0, x0, :lo12:.LC794
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	ldrb	w0, [x0, 221]
	mov	w1, w0
	ldr	x0, [sp, 240]
	ldrb	w0, [x0, 222]
	mov	w2, w0
	adrp	x0, .LC795
	add	x0, x0, :lo12:.LC795
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w1, [x0, 2168]
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w2, [x0, 2172]
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w3, [x0, 2176]
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2180]
	mov	w4, w0
	adrp	x0, .LC796
	add	x0, x0, :lo12:.LC796
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2184]
	mov	w1, w0
	adrp	x0, .LC797
	add	x0, x0, :lo12:.LC797
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2218]
	mov	w1, w0
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldrb	w0, [x0, 2219]
	mov	w2, w0
	adrp	x0, .LC798
	add	x0, x0, :lo12:.LC798
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	add	x0, x0, 16384
	ldr	w0, [x0, 2164]
	mov	w1, w0
	adrp	x0, .LC799
	add	x0, x0, :lo12:.LC799
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18904]
	cmp	x0, 0
	beq	.L5083
	ldr	x0, [sp, 240]
	ldr	x0, [x0, 18904]
	ldr	x0, [x0]
	b	.L5084
.L5083:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5084:
	mov	x1, x0
	adrp	x0, .LC800
	add	x0, x0, :lo12:.LC800
	bl	_ZN5ImGui4TextEPKcz
	movi	v0.2s, #0
	bl	_ZN5ImGui8UnindentEf
	bl	_ZN5ImGui7TreePopEv
.L5070:
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 2]
	cmp	w0, 0
	bne	.L5085
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 3]
	cmp	w0, 0
	beq	.L5086
.L5085:
	str	wzr, [sp, 168]
	b	.L5087
.L5091:
	ldr	x1, [sp, 240]
	mov	x0, 15936
	add	x0, x1, x0
	ldr	w1, [sp, 168]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	str	x0, [sp, 352]
	ldr	x0, [sp, 352]
	ldrb	w0, [x0, 151]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5109
	ldr	x0, [sp, 352]
	bl	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow
	str	x0, [sp, 360]
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 2]
	cmp	w0, 0
	beq	.L5090
	ldr	x0, [sp, 256]
	ldr	w0, [x0, 8]
	mov	w1, w0
	ldr	x0, [sp, 352]
	bl	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs13GetWindowRectEP11ImGuiWindowi
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	add	x0, sp, 384
	add	x1, x0, 8
	add	x0, sp, 384
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -8388353
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 360]
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L5090:
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 3]
	cmp	w0, 0
	beq	.L5089
	ldr	x0, [sp, 352]
	ldr	w0, [x0, 12]
	and	w0, w0, 16777216
	cmp	w0, 0
	bne	.L5089
	ldr	x0, [sp, 352]
	ldrsh	w0, [x0, 168]
	add	x4, sp, 568
	mov	w3, w0
	adrp	x0, .LC692
	add	x2, x0, :lo12:.LC692
	mov	x1, 32
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
	bl	_ZN5ImGui11GetFontSizeEv
	str	s0, [sp, 180]
	ldr	x19, [sp, 360]
	ldr	x0, [sp, 352]
	add	x20, x0, 24
	ldr	x0, [sp, 352]
	add	x21, x0, 24
	add	x0, sp, 216
	ldr	s1, [sp, 180]
	ldr	s0, [sp, 180]
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 216
	mov	x1, x0
	mov	x0, x21
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 384]
	str	s0, [sp, 388]
	add	x0, sp, 384
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, 25800
	movk	w3, 0xff64, lsl 16
	mov	x2, x0
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi
	ldr	x0, [sp, 352]
	add	x0, x0, 24
	add	x1, sp, 568
	mov	x4, 0
	mov	x3, x1
	mov	w2, -1
	mov	x1, x0
	ldr	x0, [sp, 360]
	bl	_ZN10ImDrawList7AddTextERK6ImVec2jPKcS4_
	b	.L5089
.L5109:
	nop
.L5089:
	ldr	w0, [sp, 168]
	add	w0, w0, 1
	str	w0, [sp, 168]
.L5087:
	ldr	x0, [sp, 240]
	ldr	w0, [x0, 15936]
	ldr	w1, [sp, 168]
	cmp	w1, w0
	blt	.L5091
.L5086:
	ldr	x0, [sp, 256]
	ldrb	w0, [x0, 4]
	cmp	w0, 0
	beq	.L5092
	str	wzr, [sp, 172]
	b	.L5093
.L5104:
	ldr	x1, [sp, 240]
	mov	x0, 19184
	add	x0, x1, x0
	ldr	w1, [sp, 172]
	bl	_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi
	str	x0, [sp, 368]
	ldr	x0, [sp, 368]
	cmp	x0, 0
	beq	.L5110
	ldr	x0, [sp, 368]
	ldr	w1, [x0, 112]
	ldr	x0, [sp, 240]
	ldr	w0, [x0, 15904]
	sub	w0, w0, #1
	cmp	w1, w0
	blt	.L5110
	ldr	x0, [sp, 368]
	ldr	x0, [x0, 384]
	bl	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow
	str	x0, [sp, 376]
	ldr	x0, [sp, 256]
	ldr	w0, [x0, 12]
	cmp	w0, 5
	ble	.L5097
	str	wzr, [sp, 176]
	b	.L5098
.L5103:
	ldr	x0, [sp, 256]
	ldr	w0, [x0, 12]
	ldr	w2, [sp, 176]
	mov	w1, w0
	ldr	x0, [sp, 368]
	bl	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs12GetTableRectEP10ImGuiTableii
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	ldr	x0, [sp, 368]
	ldrsb	w0, [x0, 500]
	mov	w1, w0
	ldr	w0, [sp, 176]
	cmp	w0, w1
	bne	.L5099
	mov	w0, -8323073
	b	.L5100
.L5099:
	mov	w0, -8388353
.L5100:
	str	w0, [sp, 184]
	ldr	x0, [sp, 368]
	ldrsb	w0, [x0, 500]
	mov	w1, w0
	ldr	w0, [sp, 176]
	cmp	w0, w1
	bne	.L5101
	fmov	s0, 3.0e+0
	b	.L5102
.L5101:
	fmov	s0, 1.0e+0
.L5102:
	str	s0, [sp, 188]
	add	x0, sp, 384
	add	x1, x0, 8
	add	x0, sp, 384
	ldr	s1, [sp, 188]
	mov	w4, 0
	movi	v0.2s, #0
	ldr	w3, [sp, 184]
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 376]
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldr	w0, [sp, 176]
	add	w0, w0, 1
	str	w0, [sp, 176]
.L5098:
	ldr	x0, [sp, 368]
	ldr	w0, [x0, 116]
	ldr	w1, [sp, 176]
	cmp	w1, w0
	blt	.L5103
	b	.L5096
.L5097:
	ldr	x0, [sp, 256]
	ldr	w0, [x0, 12]
	mov	w2, -1
	mov	w1, w0
	ldr	x0, [sp, 368]
	bl	_ZZN5ImGui17ShowMetricsWindowEPbEN5Funcs12GetTableRectEP10ImGuiTableii
	fmov	s5, s0
	fmov	s4, s1
	fmov	s1, s2
	fmov	s0, s3
	str	s5, [sp, 384]
	str	s4, [sp, 388]
	str	s1, [sp, 392]
	str	s0, [sp, 396]
	add	x0, sp, 384
	add	x1, x0, 8
	add	x0, sp, 384
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -8388353
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 376]
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	b	.L5096
.L5110:
	nop
.L5096:
	ldr	w0, [sp, 172]
	add	w0, w0, 1
	str	w0, [sp, 172]
.L5093:
	ldr	x1, [sp, 240]
	mov	x0, 19184
	add	x0, x1, x0
	bl	_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv
	mov	w1, w0
	ldr	w0, [sp, 172]
	cmp	w0, w1
	cset	w0, lt
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5104
.L5092:
	bl	_ZN5ImGui3EndEv
.L4964:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 696]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5105
	bl	__stack_chk_fail
.L5105:
	ldp	d8, d9, [sp, 48]
	ldp	d10, d11, [sp, 64]
	ldr	d12, [sp, 40]
	ldp	x19, x20, [sp, 16]
	ldr	x21, [sp, 32]
	ldp	x29, x30, [sp]
	add	sp, sp, 704
	.cfi_restore 29
	.cfi_restore 30
	.cfi_restore 21
	.cfi_restore 19
	.cfi_restore 20
	.cfi_restore 76
	.cfi_restore 74
	.cfi_restore 75
	.cfi_restore 72
	.cfi_restore 73
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2155:
	.size	_ZN5ImGui17ShowMetricsWindowEPb, .-_ZN5ImGui17ShowMetricsWindowEPb
	.section	.rodata
	.align	3
.LC9:
	.string	"OuterRect"
	.align	3
.LC10:
	.string	"OuterRectClipped"
	.align	3
.LC11:
	.string	"InnerRect"
	.align	3
.LC12:
	.string	"InnerClipRect"
	.align	3
.LC13:
	.string	"WorkRect"
	.align	3
.LC14:
	.string	"Content"
	.align	3
.LC15:
	.string	"ContentIdeal"
	.align	3
.LC16:
	.string	"ContentRegionRect"
	.data
	.align	3
.LC707:
	.xword	.LC9
	.xword	.LC10
	.xword	.LC11
	.xword	.LC12
	.xword	.LC13
	.xword	.LC14
	.xword	.LC15
	.xword	.LC16
	.section	.rodata
	.align	3
.LC18:
	.string	"HostClipRect"
	.align	3
.LC19:
	.string	"BackgroundClipRect"
	.align	3
.LC20:
	.string	"ColumnsRect"
	.align	3
.LC21:
	.string	"ColumnsWorkRect"
	.align	3
.LC22:
	.string	"ColumnsClipRect"
	.align	3
.LC23:
	.string	"ColumnsContentHeadersUsed"
	.align	3
.LC24:
	.string	"ColumnsContentHeadersIdeal"
	.align	3
.LC25:
	.string	"ColumnsContentFrozen"
	.align	3
.LC26:
	.string	"ColumnsContentUnfrozen"
	.data
	.align	3
.LC708:
	.xword	.LC9
	.xword	.LC11
	.xword	.LC13
	.xword	.LC18
	.xword	.LC12
	.xword	.LC19
	.xword	.LC20
	.xword	.LC21
	.xword	.LC22
	.xword	.LC23
	.xword	.LC24
	.xword	.LC25
	.xword	.LC26
	.text
	.section	.rodata
	.align	3
.LC801:
	.string	"Columns Id: 0x%08X, Count: %d, Flags: 0x%04X"
	.align	3
.LC802:
	.string	"Width: %.1f (MinX: %.1f, MaxX: %.1f)"
	.align	3
.LC803:
	.string	"Column %02d: OffsetNorm %.3f (= %.1f px)"
	.text
	.align	2
	.global	_ZN5ImGui16DebugNodeColumnsEP15ImGuiOldColumns
	.type	_ZN5ImGui16DebugNodeColumnsEP15ImGuiOldColumns, %function
_ZN5ImGui16DebugNodeColumnsEP15ImGuiOldColumns:
.LFB2159:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -48
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	uxtw	x0, w0
	mov	x5, x0
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w2, [x0, 16]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	mov	w4, w0
	mov	w3, w2
	mov	w2, w1
	adrp	x0, .LC801
	add	x1, x0, :lo12:.LC801
	mov	x0, x5
	bl	_ZN5ImGui8TreeNodeEPKvPKcz
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5116
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 24]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 20]
	fsub	s0, s1, s0
	fcvt	d3, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 20]
	fcvt	d1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 24]
	fcvt	d0, s0
	fmov	d2, d0
	fmov	d0, d3
	adrp	x0, .LC802
	add	x0, x0, :lo12:.LC802
	bl	_ZN5ImGui10BulletTextEPKcz
	str	wzr, [sp, 60]
	b	.L5114
.L5115:
	ldr	x0, [sp, 40]
	add	x0, x0, 96
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorI18ImGuiOldColumnDataEixEi
	ldr	s0, [x0]
	fcvt	d8, s0
	ldr	x0, [sp, 40]
	add	x0, x0, 96
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorI18ImGuiOldColumnDataEixEi
	ldr	s0, [x0]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui23GetColumnOffsetFromNormEPK15ImGuiOldColumnsf
	fcvt	d0, s0
	fmov	d1, d0
	fmov	d0, d8
	ldr	w1, [sp, 60]
	adrp	x0, .LC803
	add	x0, x0, :lo12:.LC803
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L5114:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 96]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	blt	.L5115
	bl	_ZN5ImGui7TreePopEv
	b	.L5111
.L5116:
	nop
.L5111:
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2159:
	.size	_ZN5ImGui16DebugNodeColumnsEP15ImGuiOldColumns, .-_ZN5ImGui16DebugNodeColumnsEP15ImGuiOldColumns
	.section	.rodata
	.align	3
.LC804:
	.string	"%s: '%s' %d vtx, %d indices, %d cmds"
	.align	3
.LC805:
	.string	"CURRENTLY APPENDING"
	.align	3
.LC806:
	.string	"Warning: owning Window is inactive. This DrawList is not being rendered!"
	.align	3
.LC807:
	.string	"Callback %p, user_data %p"
	.align	3
.LC808:
	.string	"DrawCmd:%5d tris, Tex 0x%p, ClipRect (%4.0f,%4.0f)-(%4.0f,%4.0f)"
	.align	3
.LC809:
	.string	"Mesh: ElemCount: %d, VtxOffset: +%d, IdxOffset: +%d, Area: ~%0.f px"
	.align	3
.LC810:
	.string	"Vert:"
	.align	3
.LC811:
	.string	"     "
	.align	3
.LC812:
	.string	"%s %04d: pos (%8.2f,%8.2f), uv (%.6f,%.6f), col %08X\n"
	.text
	.align	2
	.global	_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowPK10ImDrawListPKc
	.type	_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowPK10ImDrawListPKc, %function
_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowPK10ImDrawListPKc:
.LFB2160:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2160
	sub	sp, sp, #560
	.cfi_def_cfa_offset 560
	stp	x29, x30, [sp]
	.cfi_offset 29, -560
	.cfi_offset 30, -552
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -544
	.cfi_offset 20, -536
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 552]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 136]
	ldr	x1, [sp, 136]
	mov	x0, 23648
	add	x0, x1, x0
	str	x0, [sp, 144]
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	str	w0, [sp, 80]
	ldr	w0, [sp, 80]
	cmp	w0, 0
	ble	.L5118
	ldr	x0, [sp, 48]
	bl	_ZNK8ImVectorI9ImDrawCmdE4backEv
	ldr	w0, [x0, 32]
	cmp	w0, 0
	bne	.L5118
	ldr	x0, [sp, 48]
	bl	_ZNK8ImVectorI9ImDrawCmdE4backEv
	ldr	x0, [x0, 40]
	cmp	x0, 0
	bne	.L5118
	mov	w0, 1
	b	.L5119
.L5118:
	mov	w0, 0
.L5119:
	cmp	w0, 0
	beq	.L5120
	ldr	w0, [sp, 80]
	sub	w0, w0, #1
	str	w0, [sp, 80]
.L5120:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 64]
	cmp	x0, 0
	beq	.L5121
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 64]
	b	.L5122
.L5121:
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
.L5122:
	ldr	x1, [sp, 48]
	ldr	w2, [x1, 32]
	ldr	x1, [sp, 48]
	ldr	w1, [x1, 16]
	ldr	w6, [sp, 80]
	mov	w5, w1
	mov	w4, w2
	mov	x3, x0
	ldr	x2, [sp, 40]
	adrp	x0, .LC804
	add	x1, x0, :lo12:.LC804
	ldr	x0, [sp, 48]
.LEHB24:
	bl	_ZN5ImGui8TreeNodeEPKvPKcz
	and	w0, w0, 255
	strb	w0, [sp, 78]
	bl	_ZN5ImGui17GetWindowDrawListEv
	mov	x1, x0
	ldr	x0, [sp, 48]
	cmp	x0, x1
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5123
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	add	x0, sp, 192
	fmov	s3, 1.0e+0
	mov	w1, 52429
	movk	w1, 0x3ecc, lsl 16
	fmov	s2, w1
	mov	w1, 52429
	movk	w1, 0x3ecc, lsl 16
	fmov	s1, w1
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec4C1Effff
	add	x2, sp, 192
	adrp	x0, .LC805
	add	x1, x0, :lo12:.LC805
	mov	x0, x2
	bl	_ZN5ImGui11TextColoredERK6ImVec4PKcz
	ldrb	w0, [sp, 78]
	cmp	w0, 0
	beq	.L5168
	bl	_ZN5ImGui7TreePopEv
	b	.L5168
.L5123:
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow
	str	x0, [sp, 152]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L5126
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5126
	ldr	x0, [sp, 152]
	cmp	x0, 0
	beq	.L5126
	mov	w0, 1
	b	.L5127
.L5126:
	mov	w0, 0
.L5127:
	cmp	w0, 0
	beq	.L5128
	ldr	x19, [sp, 152]
	ldr	x0, [sp, 56]
	add	x20, x0, 24
	ldr	x0, [sp, 56]
	add	x2, x0, 24
	ldr	x0, [sp, 56]
	add	x0, x0, 32
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 192]
	str	s0, [sp, 196]
	add	x0, sp, 192
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711681
	mov	x2, x0
	mov	x1, x20
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L5128:
	ldrb	w0, [sp, 78]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5169
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L5130
	ldr	x0, [sp, 56]
	ldrb	w0, [x0, 151]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5130
	adrp	x0, .LC806
	add	x0, x0, :lo12:.LC806
	bl	_ZN5ImGui12TextDisabledEPKcz
.L5130:
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 8]
	str	x0, [sp, 120]
	b	.L5131
.L5164:
	ldr	x0, [sp, 120]
	ldr	x0, [x0, 40]
	cmp	x0, 0
	beq	.L5132
	ldr	x0, [sp, 120]
	ldr	x1, [x0, 40]
	ldr	x0, [sp, 120]
	ldr	x0, [x0, 48]
	mov	x2, x0
	adrp	x0, .LC807
	add	x0, x0, :lo12:.LC807
	bl	_ZN5ImGui10BulletTextEPKcz
	b	.L5163
.L5132:
	ldr	x0, [sp, 120]
	ldr	w1, [x0, 32]
	mov	w0, 43691
	movk	w0, 0xaaaa, lsl 16
	umull	x0, w1, w0
	lsr	x0, x0, 32
	lsr	w1, w0, 1
	ldr	x0, [sp, 120]
	ldr	x2, [x0, 16]
	ldr	x0, [sp, 120]
	ldr	s0, [x0]
	fcvt	d4, s0
	ldr	x0, [sp, 120]
	ldr	s0, [x0, 4]
	fcvt	d1, s0
	ldr	x0, [sp, 120]
	ldr	s0, [x0, 8]
	fcvt	d2, s0
	ldr	x0, [sp, 120]
	ldr	s0, [x0, 12]
	fcvt	d0, s0
	add	x5, sp, 248
	fmov	d3, d0
	fmov	d0, d4
	mov	x4, x2
	mov	w3, w1
	adrp	x0, .LC808
	add	x2, x0, :lo12:.LC808
	mov	x1, 300
	mov	x0, x5
	bl	_Z14ImFormatStringPcmPKcz
	ldr	x0, [sp, 48]
	bl	_ZNK8ImVectorI9ImDrawCmdE5beginEv
	mov	x1, x0
	ldr	x0, [sp, 120]
	sub	x0, x0, x1
	asr	x1, x0, 3
	mov	x0, 28087
	movk	x0, 0xb6db, lsl 16
	movk	x0, 0xdb6d, lsl 32
	movk	x0, 0x6db6, lsl 48
	mul	x0, x1, x0
	mov	x3, x0
	add	x0, sp, 248
	mov	x2, x0
	adrp	x0, .LC760
	add	x1, x0, :lo12:.LC760
	mov	x0, x3
	bl	_ZN5ImGui8TreeNodeEPKvPKcz
	and	w0, w0, 255
	strb	w0, [sp, 79]
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5134
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 5]
	cmp	w0, 0
	bne	.L5135
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 6]
	cmp	w0, 0
	beq	.L5134
.L5135:
	ldr	x0, [sp, 152]
	cmp	x0, 0
	beq	.L5134
	mov	w0, 1
	b	.L5136
.L5134:
	mov	w0, 0
.L5136:
	cmp	w0, 0
	beq	.L5137
	ldr	x0, [sp, 144]
	ldrb	w1, [x0, 5]
	ldr	x0, [sp, 144]
	ldrb	w0, [x0, 6]
	mov	w4, w0
	mov	w3, w1
	ldr	x2, [sp, 120]
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 152]
	bl	_ZN5ImGui38DebugNodeDrawCmdShowMeshAndBoundingBoxEP10ImDrawListPKS0_PK9ImDrawCmdbb
.L5137:
	ldrb	w0, [sp, 79]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5170
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16]
	cmp	w0, 0
	ble	.L5139
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 24]
	b	.L5140
.L5139:
	mov	x0, 0
.L5140:
	str	x0, [sp, 160]
	ldr	x0, [sp, 48]
	ldr	x2, [x0, 40]
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 24]
	uxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	str	x0, [sp, 168]
	str	wzr, [sp, 84]
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 28]
	str	w0, [sp, 88]
	b	.L5141
.L5146:
	stp	xzr, xzr, [sp, 224]
	str	xzr, [sp, 240]
	str	wzr, [sp, 92]
	b	.L5142
.L5145:
	ldr	x0, [sp, 160]
	cmp	x0, 0
	beq	.L5143
	ldr	w0, [sp, 88]
	lsl	x0, x0, 1
	ldr	x1, [sp, 160]
	add	x0, x1, x0
	ldrh	w0, [x0]
	and	x1, x0, 65535
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x1, x0
	b	.L5144
.L5143:
	ldr	w1, [sp, 88]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x1, x0
.L5144:
	ldr	x0, [sp, 168]
	add	x2, x0, x1
	ldrsw	x0, [sp, 92]
	lsl	x0, x0, 3
	add	x1, sp, 224
	ldr	x2, [x2]
	str	x2, [x1, x0]
	ldr	w0, [sp, 92]
	add	w0, w0, 1
	str	w0, [sp, 92]
	ldr	w0, [sp, 88]
	add	w0, w0, 1
	str	w0, [sp, 88]
.L5142:
	ldr	w0, [sp, 92]
	cmp	w0, 2
	ble	.L5145
	add	x0, sp, 224
	add	x2, x0, 16
	add	x0, sp, 224
	add	x1, x0, 8
	add	x0, sp, 224
	bl	_Z14ImTriangleAreaRK6ImVec2S1_S1_
	fmov	s1, s0
	ldr	s0, [sp, 84]
	fadd	s0, s0, s1
	str	s0, [sp, 84]
.L5141:
	ldr	x0, [sp, 120]
	ldr	w1, [x0, 28]
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 32]
	add	w0, w1, w0
	ldr	w1, [sp, 88]
	cmp	w1, w0
	bcc	.L5146
	ldr	x0, [sp, 120]
	ldr	w1, [x0, 32]
	ldr	x0, [sp, 120]
	ldr	w2, [x0, 24]
	ldr	x0, [sp, 120]
	ldr	w0, [x0, 28]
	ldr	s0, [sp, 84]
	fcvt	d0, s0
	add	x6, sp, 248
	mov	w5, w0
	mov	w4, w2
	mov	w3, w1
	adrp	x0, .LC809
	add	x2, x0, :lo12:.LC809
	mov	x1, 300
	mov	x0, x6
	bl	_Z14ImFormatStringPcmPKcz
	add	x0, sp, 192
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 192
	add	x0, sp, 248
	mov	x3, x1
	mov	w2, 0
	mov	w1, 0
	bl	_ZN5ImGui10SelectableEPKcbiRK6ImVec2
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5147
	ldr	x0, [sp, 152]
	cmp	x0, 0
	beq	.L5147
	mov	w0, 1
	b	.L5148
.L5147:
	mov	w0, 0
.L5148:
	cmp	w0, 0
	beq	.L5149
	mov	w4, 0
	mov	w3, 1
	ldr	x2, [sp, 120]
	ldr	x1, [sp, 48]
	ldr	x0, [sp, 152]
	bl	_ZN5ImGui38DebugNodeDrawCmdShowMeshAndBoundingBoxEP10ImDrawListPKS0_PK9ImDrawCmdbb
.LEHE24:
.L5149:
	add	x0, sp, 192
	bl	_ZN16ImGuiListClipperC1Ev
	ldr	x0, [sp, 120]
	ldr	w1, [x0, 32]
	mov	w0, 43691
	movk	w0, 0xaaaa, lsl 16
	umull	x0, w1, w0
	lsr	x0, x0, 32
	lsr	w0, w0, 1
	mov	w1, w0
	add	x0, sp, 192
	fmov	s0, -1.0e+0
.LEHB25:
	bl	_ZN16ImGuiListClipper5BeginEif
	b	.L5150
.L5162:
	ldr	w0, [sp, 192]
	str	w0, [sp, 96]
	ldr	x0, [sp, 120]
	ldr	w2, [x0, 28]
	ldr	w1, [sp, 192]
	mov	w0, w1
	lsl	w0, w0, 1
	add	w0, w0, w1
	add	w0, w2, w0
	str	w0, [sp, 100]
	b	.L5151
.L5161:
	add	x0, sp, 248
	str	x0, [sp, 128]
	add	x0, sp, 248
	add	x0, x0, 300
	str	x0, [sp, 176]
	stp	xzr, xzr, [sp, 224]
	str	xzr, [sp, 240]
	str	wzr, [sp, 104]
	b	.L5152
.L5157:
	ldr	x0, [sp, 160]
	cmp	x0, 0
	beq	.L5153
	ldrsw	x0, [sp, 100]
	lsl	x0, x0, 1
	ldr	x1, [sp, 160]
	add	x0, x1, x0
	ldrh	w0, [x0]
	and	x1, x0, 65535
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x1, x0
	b	.L5154
.L5153:
	ldrsw	x1, [sp, 100]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x1, x0
.L5154:
	ldr	x0, [sp, 168]
	add	x0, x0, x1
	str	x0, [sp, 184]
	ldrsw	x0, [sp, 104]
	lsl	x0, x0, 3
	add	x1, sp, 224
	ldr	x2, [sp, 184]
	ldr	x2, [x2]
	str	x2, [x1, x0]
	ldr	x1, [sp, 176]
	ldr	x0, [sp, 128]
	sub	x0, x1, x0
	mov	x6, x0
	ldr	w0, [sp, 104]
	cmp	w0, 0
	bne	.L5155
	adrp	x0, .LC810
	add	x0, x0, :lo12:.LC810
	b	.L5156
.L5155:
	adrp	x0, .LC811
	add	x0, x0, :lo12:.LC811
.L5156:
	ldr	x1, [sp, 184]
	ldr	s0, [x1]
	fcvt	d4, s0
	ldr	x1, [sp, 184]
	ldr	s0, [x1, 4]
	fcvt	d1, s0
	ldr	x1, [sp, 184]
	ldr	s0, [x1, 8]
	fcvt	d2, s0
	ldr	x1, [sp, 184]
	ldr	s0, [x1, 12]
	fcvt	d0, s0
	ldr	x1, [sp, 184]
	ldr	w1, [x1, 16]
	mov	w5, w1
	fmov	d3, d0
	fmov	d0, d4
	ldr	w4, [sp, 100]
	mov	x3, x0
	adrp	x0, .LC812
	add	x2, x0, :lo12:.LC812
	mov	x1, x6
	ldr	x0, [sp, 128]
	bl	_Z14ImFormatStringPcmPKcz
	sxtw	x0, w0
	ldr	x1, [sp, 128]
	add	x0, x1, x0
	str	x0, [sp, 128]
	ldr	w0, [sp, 104]
	add	w0, w0, 1
	str	w0, [sp, 104]
	ldr	w0, [sp, 100]
	add	w0, w0, 1
	str	w0, [sp, 100]
.L5152:
	ldr	w0, [sp, 104]
	cmp	w0, 2
	ble	.L5157
	add	x0, sp, 112
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 112
	add	x0, sp, 248
	mov	x3, x1
	mov	w2, 0
	mov	w1, 0
	bl	_ZN5ImGui10SelectableEPKcbiRK6ImVec2
	ldr	x0, [sp, 152]
	cmp	x0, 0
	beq	.L5158
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5158
	mov	w0, 1
	b	.L5159
.L5158:
	mov	w0, 0
.L5159:
	cmp	w0, 0
	beq	.L5160
	ldr	x0, [sp, 152]
	ldr	w0, [x0, 48]
	str	w0, [sp, 108]
	ldr	x0, [sp, 152]
	ldr	w0, [x0, 48]
	and	w1, w0, -2
	ldr	x0, [sp, 152]
	str	w1, [x0, 48]
	add	x0, sp, 224
	fmov	s0, 1.0e+0
	mov	w4, 1
	mov	w3, -16711681
	mov	w2, 3
	mov	x1, x0
	ldr	x0, [sp, 152]
	bl	_ZN10ImDrawList11AddPolylineEPK6ImVec2ijif
	ldr	x0, [sp, 152]
	ldr	w1, [sp, 108]
	str	w1, [x0, 48]
.L5160:
	ldr	w0, [sp, 96]
	add	w0, w0, 1
	str	w0, [sp, 96]
.L5151:
	ldr	w0, [sp, 196]
	ldr	w1, [sp, 96]
	cmp	w1, w0
	blt	.L5161
.L5150:
	add	x0, sp, 192
	bl	_ZN16ImGuiListClipper4StepEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5162
	bl	_ZN5ImGui7TreePopEv
.LEHE25:
	add	x0, sp, 192
	bl	_ZN16ImGuiListClipperD1Ev
	b	.L5163
.L5170:
	nop
.L5163:
	ldr	x0, [sp, 120]
	add	x0, x0, 56
	str	x0, [sp, 120]
.L5131:
	ldr	x0, [sp, 48]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 80]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldr	x1, [sp, 120]
	cmp	x1, x0
	bcc	.L5164
.LEHB26:
	bl	_ZN5ImGui7TreePopEv
	b	.L5117
.L5167:
	mov	x19, x0
	add	x0, sp, 192
	bl	_ZN16ImGuiListClipperD1Ev
	mov	x0, x19
	bl	_Unwind_Resume
.LEHE26:
.L5168:
	nop
	b	.L5117
.L5169:
	nop
.L5117:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 552]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5166
	bl	__stack_chk_fail
.L5166:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp]
	add	sp, sp, 560
	.cfi_restore 29
	.cfi_restore 30
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2160:
	.section	.gcc_except_table
.LLSDA2160:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2160-.LLSDACSB2160
.LLSDACSB2160:
	.uleb128 .LEHB24-.LFB2160
	.uleb128 .LEHE24-.LEHB24
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB25-.LFB2160
	.uleb128 .LEHE25-.LEHB25
	.uleb128 .L5167-.LFB2160
	.uleb128 0
	.uleb128 .LEHB26-.LFB2160
	.uleb128 .LEHE26-.LEHB26
	.uleb128 0
	.uleb128 0
.LLSDACSE2160:
	.text
	.size	_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowPK10ImDrawListPKc, .-_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowPK10ImDrawListPKc
	.section	.rodata
	.align	3
.LC813:
	.string	"void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList*, const ImDrawList*, const ImDrawCmd*, bool, bool)"
	.align	3
.LC814:
	.string	"show_mesh || show_aabb"
	.text
	.align	2
	.global	_ZN5ImGui38DebugNodeDrawCmdShowMeshAndBoundingBoxEP10ImDrawListPKS0_PK9ImDrawCmdbb
	.type	_ZN5ImGui38DebugNodeDrawCmdShowMeshAndBoundingBoxEP10ImDrawListPKS0_PK9ImDrawCmdbb, %function
_ZN5ImGui38DebugNodeDrawCmdShowMeshAndBoundingBoxEP10ImDrawListPKS0_PK9ImDrawCmdbb:
.LFB2161:
	.cfi_startproc
	stp	x29, x30, [sp, -176]!
	.cfi_def_cfa_offset 176
	.cfi_offset 29, -176
	.cfi_offset 30, -168
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -160
	str	x0, [sp, 56]
	str	x1, [sp, 48]
	str	x2, [sp, 40]
	strb	w3, [sp, 39]
	strb	w4, [sp, 38]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 168]
	mov	x1, 0
	ldrb	w0, [sp, 39]
	cmp	w0, 0
	bne	.L5172
	ldrb	w0, [sp, 38]
	cmp	w0, 0
	bne	.L5172
	adrp	x0, .LC813
	add	x3, x0, :lo12:.LC813
	mov	w2, 13567
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC814
	add	x0, x0, :lo12:.LC814
	bl	__assert_fail
.L5172:
	ldr	x1, [sp, 40]
	add	x0, sp, 112
	bl	_ZN6ImRectC1ERK6ImVec4
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 128]
	mov	w0, 2139095039
	fmov	s0, w0
	str	s0, [sp, 132]
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [sp, 136]
	mvni	v0.2s, 0x80, lsl 16
	str	s0, [sp, 140]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 48]
	str	w0, [sp, 72]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 48]
	and	w1, w0, -2
	ldr	x0, [sp, 56]
	str	w1, [x0, 48]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 28]
	str	w0, [sp, 64]
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 28]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 32]
	add	w0, w1, w0
	str	w0, [sp, 76]
	b	.L5173
.L5181:
	ldr	x0, [sp, 48]
	ldr	w0, [x0, 16]
	cmp	w0, 0
	ble	.L5174
	ldr	x0, [sp, 48]
	ldr	x0, [x0, 24]
	b	.L5175
.L5174:
	mov	x0, 0
.L5175:
	str	x0, [sp, 96]
	ldr	x0, [sp, 48]
	ldr	x2, [x0, 40]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 24]
	uxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	str	x0, [sp, 104]
	stp	xzr, xzr, [sp, 144]
	str	xzr, [sp, 160]
	str	wzr, [sp, 68]
	b	.L5176
.L5179:
	ldr	x0, [sp, 96]
	cmp	x0, 0
	beq	.L5177
	ldr	w0, [sp, 64]
	lsl	x0, x0, 1
	ldr	x1, [sp, 96]
	add	x0, x1, x0
	ldrh	w0, [x0]
	and	x1, x0, 65535
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x1, x0
	b	.L5178
.L5177:
	ldr	w1, [sp, 64]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x1, x0
.L5178:
	ldr	x0, [sp, 104]
	add	x2, x0, x1
	ldrsw	x0, [sp, 68]
	lsl	x0, x0, 3
	add	x1, sp, 144
	ldr	x2, [x2]
	str	x2, [x1, x0]
	add	x1, sp, 144
	ldrsw	x0, [sp, 68]
	lsl	x0, x0, 3
	add	x1, x1, x0
	add	x0, sp, 128
	bl	_ZN6ImRect3AddERK6ImVec2
	ldr	w0, [sp, 68]
	add	w0, w0, 1
	str	w0, [sp, 68]
	ldr	w0, [sp, 64]
	add	w0, w0, 1
	str	w0, [sp, 64]
.L5176:
	ldr	w0, [sp, 68]
	cmp	w0, 2
	ble	.L5179
	ldrb	w0, [sp, 39]
	cmp	w0, 0
	beq	.L5173
	add	x0, sp, 144
	fmov	s0, 1.0e+0
	mov	w4, 1
	mov	w3, -16711681
	mov	w2, 3
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN10ImDrawList11AddPolylineEPK6ImVec2ijif
.L5173:
	ldr	w1, [sp, 64]
	ldr	w0, [sp, 76]
	cmp	w1, w0
	bcc	.L5181
	ldrb	w0, [sp, 38]
	cmp	w0, 0
	beq	.L5182
	ldr	x19, [sp, 56]
	add	x0, sp, 112
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 112
	add	x0, x0, 8
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	add	x1, sp, 88
	add	x0, sp, 80
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -65281
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldr	x19, [sp, 56]
	add	x0, sp, 128
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	add	x0, sp, 128
	add	x0, x0, 8
	bl	_ZL7ImFloorRK6ImVec2
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 88]
	str	s0, [sp, 92]
	add	x1, sp, 88
	add	x0, sp, 80
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -256
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L5182:
	ldr	x0, [sp, 56]
	ldr	w1, [sp, 72]
	str	w1, [x0, 48]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 168]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5183
	bl	__stack_chk_fail
.L5183:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 176
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2161:
	.size	_ZN5ImGui38DebugNodeDrawCmdShowMeshAndBoundingBoxEP10ImDrawListPKS0_PK9ImDrawCmdbb, .-_ZN5ImGui38DebugNodeDrawCmdShowMeshAndBoundingBoxEP10ImDrawListPKS0_PK9ImDrawCmdbb
	.section	.rodata
	.align	3
.LC815:
	.string	"Font: \"%s\"\n%.2f px, %d glyphs, %d file(s)"
	.align	3
.LC816:
	.string	"Set as default"
	.align	3
.LC817:
	.string	"The quick brown fox jumps over the lazy dog"
	.align	3
.LC818:
	.string	"%.1f"
	.align	3
.LC819:
	.string	"Font scale"
	.align	3
.LC820:
	.ascii	"Note than the default embedded font is NOT meant to be scale"
	.ascii	"d.\n\nFont are currently rendered into bitmaps at a given si"
	.ascii	"ze at the time of bui"
	.string	"lding the atlas. You may oversample them to get some flexibility with scaling. You can also render at multiple sizes and select which one to use at runtime.\n\n(Glimmer of hope: the atlas system will be rewritten in the future to make scaling more flexible.)"
	.align	3
.LC821:
	.string	"Ascent: %f, Descent: %f, Height: %f"
	.align	3
.LC822:
	.string	"Fallback character: '%s' (U+%04X)"
	.align	3
.LC823:
	.string	"Ellipsis character: '%s' (U+%04X)"
	.align	3
.LC824:
	.string	"Texture Area: about %d px ~%dx%d px"
	.align	3
.LC825:
	.string	"Input %d: '%s', Oversample: (%d,%d), PixelSnapH: %d, Offset: (%.1f,%.1f)"
	.align	3
.LC826:
	.string	"Glyphs (%d)"
	.align	3
.LC827:
	.string	"Glyphs"
	.align	3
.LC828:
	.string	"glyphs"
	.align	3
.LC829:
	.string	"glyph"
	.align	3
.LC830:
	.string	"U+%04X..U+%04X (%d %s)"
	.text
	.align	2
	.global	_ZN5ImGui13DebugNodeFontEP6ImFont
	.type	_ZN5ImGui13DebugNodeFontEP6ImFont, %function
_ZN5ImGui13DebugNodeFontEP6ImFont:
.LFB2162:
	.cfi_startproc
	stp	x29, x30, [sp, -160]!
	.cfi_def_cfa_offset 160
	.cfi_offset 29, -160
	.cfi_offset 30, -152
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -144
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 72]
	cmp	x0, 0
	beq	.L5185
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 72]
	add	x0, x0, 86
	b	.L5186
.L5185:
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
.L5186:
	ldr	x1, [sp, 40]
	ldr	s0, [x1, 20]
	fcvt	d0, s0
	ldr	x1, [sp, 40]
	ldr	w2, [x1, 40]
	ldr	x1, [sp, 40]
	ldrsh	w1, [x1, 80]
	mov	w4, w1
	mov	w3, w2
	mov	x2, x0
	adrp	x0, .LC815
	add	x1, x0, :lo12:.LC815
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui8TreeNodeEPKvPKcz
	and	w0, w0, 255
	strb	w0, [sp, 59]
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC816
	add	x0, x0, :lo12:.LC816
	bl	_ZN5ImGui11SmallButtonEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5187
	ldr	x19, [sp, 40]
	bl	_ZN5ImGui5GetIOEv
	str	x19, [x0, 96]
.L5187:
	ldrb	w0, [sp, 59]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5216
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui8PushFontEP6ImFont
	adrp	x0, .LC817
	add	x0, x0, :lo12:.LC817
	bl	_ZN5ImGui4TextEPKcz
	bl	_ZN5ImGui7PopFontEv
	bl	_ZN5ImGui11GetFontSizeEv
	fmov	s1, s0
	fmov	s0, 8.0e+0
	fmul	s0, s1, s0
	bl	_ZN5ImGui16SetNextItemWidthEf
	ldr	x0, [sp, 40]
	add	x1, x0, 92
	mov	w3, 0
	adrp	x0, .LC818
	add	x2, x0, :lo12:.LC818
	fmov	s2, 2.0e+0
	mov	w0, 39322
	movk	w0, 0x3e99, lsl 16
	fmov	s1, w0
	mov	w0, 55050
	movk	w0, 0x3ba3, lsl 16
	fmov	s0, w0
	adrp	x0, .LC819
	add	x0, x0, :lo12:.LC819
	bl	_ZN5ImGui9DragFloatEPKcPffffS1_i
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC820
	add	x0, x0, :lo12:.LC820
	bl	_ZL17MetricsHelpMarkerPKc
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 96]
	fcvt	d3, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 100]
	fcvt	d4, s0
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 96]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 100]
	fsub	s0, s1, s0
	fcvt	d0, s0
	fmov	d2, d0
	fmov	d1, d4
	fmov	d0, d3
	adrp	x0, .LC821
	add	x0, x0, :lo12:.LC821
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 40]
	ldrh	w0, [x0, 82]
	mov	w1, w0
	add	x0, sp, 144
	bl	_Z16ImTextCharToUtf8Pcj
	mov	x1, x0
	ldr	x0, [sp, 40]
	ldrh	w0, [x0, 82]
	mov	w2, w0
	adrp	x0, .LC822
	add	x0, x0, :lo12:.LC822
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 40]
	ldrh	w0, [x0, 84]
	mov	w1, w0
	add	x0, sp, 144
	bl	_Z16ImTextCharToUtf8Pcj
	mov	x1, x0
	ldr	x0, [sp, 40]
	ldrh	w0, [x0, 84]
	mov	w2, w0
	adrp	x0, .LC823
	add	x0, x0, :lo12:.LC823
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 104]
	scvtf	s0, s0
	bl	sqrtf
	fcvtzs	s0, s0
	str	s0, [sp, 80]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 104]
	ldr	w3, [sp, 80]
	ldr	w2, [sp, 80]
	mov	w1, w0
	adrp	x0, .LC824
	add	x0, x0, :lo12:.LC824
	bl	_ZN5ImGui4TextEPKcz
	str	wzr, [sp, 60]
	b	.L5190
.L5192:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 72]
	cmp	x0, 0
	beq	.L5191
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 72]
	ldrsw	x1, [sp, 60]
	mov	x0, x1
	lsl	x0, x0, 4
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	str	x0, [sp, 136]
	ldr	x0, [sp, 136]
	cmp	x0, 0
	beq	.L5191
	ldr	x0, [sp, 136]
	add	x1, x0, 86
	ldr	x0, [sp, 136]
	ldr	w2, [x0, 24]
	ldr	x0, [sp, 136]
	ldr	w3, [x0, 28]
	ldr	x0, [sp, 136]
	ldrb	w0, [x0, 32]
	mov	w4, w0
	ldr	x0, [sp, 136]
	ldr	s0, [x0, 44]
	fcvt	d2, s0
	ldr	x0, [sp, 136]
	ldr	s0, [x0, 48]
	fcvt	d0, s0
	fmov	d1, d0
	fmov	d0, d2
	mov	w5, w4
	mov	w4, w3
	mov	w3, w2
	mov	x2, x1
	ldr	w1, [sp, 60]
	adrp	x0, .LC825
	add	x0, x0, :lo12:.LC825
	bl	_ZN5ImGui10BulletTextEPKcz
.L5191:
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L5190:
	ldr	x0, [sp, 40]
	ldrsh	w0, [x0, 80]
	mov	w1, w0
	ldr	w0, [sp, 60]
	cmp	w0, w1
	blt	.L5192
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 40]
	mov	w2, w0
	adrp	x0, .LC826
	add	x1, x0, :lo12:.LC826
	adrp	x0, .LC827
	add	x0, x0, :lo12:.LC827
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5193
	bl	_ZN5ImGui17GetWindowDrawListEv
	str	x0, [sp, 120]
	fmov	s0, 1.0e+0
	mov	w0, 0
	bl	_ZN5ImGui11GetColorU32Eif
	str	w0, [sp, 84]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 20]
	str	s0, [sp, 88]
	bl	_ZN5ImGui8GetStyleEv
	ldr	s0, [x0, 80]
	str	s0, [sp, 92]
	str	wzr, [sp, 64]
	b	.L5194
.L5214:
	ldr	w0, [sp, 64]
	and	w0, w0, 4095
	cmp	w0, 0
	bne	.L5195
	ldr	w0, [sp, 64]
	add	w0, w0, 4095
	mov	w2, w0
	ldr	w1, [sp, 64]
	ldr	x0, [sp, 40]
	bl	_ZN6ImFont18IsGlyphRangeUnusedEjj
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5195
	mov	w0, 1
	b	.L5196
.L5195:
	mov	w0, 0
.L5196:
	cmp	w0, 0
	beq	.L5197
	ldr	w0, [sp, 64]
	add	w0, w0, 3840
	str	w0, [sp, 64]
	b	.L5213
.L5197:
	str	wzr, [sp, 68]
	str	wzr, [sp, 72]
	b	.L5199
.L5201:
	ldr	w0, [sp, 64]
	and	w1, w0, 65535
	ldr	w0, [sp, 72]
	and	w0, w0, 65535
	add	w0, w1, w0
	and	w0, w0, 65535
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZNK6ImFont19FindGlyphNoFallbackEt
	cmp	x0, 0
	cset	w0, ne
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5200
	ldr	w0, [sp, 68]
	add	w0, w0, 1
	str	w0, [sp, 68]
.L5200:
	ldr	w0, [sp, 72]
	add	w0, w0, 1
	str	w0, [sp, 72]
.L5199:
	ldr	w0, [sp, 72]
	cmp	w0, 255
	bls	.L5201
	ldr	w0, [sp, 68]
	cmp	w0, 0
	ble	.L5217
	ldr	w0, [sp, 64]
	mov	x6, x0
	ldr	w0, [sp, 64]
	add	w1, w0, 255
	ldr	w0, [sp, 68]
	cmp	w0, 1
	ble	.L5203
	adrp	x0, .LC828
	add	x0, x0, :lo12:.LC828
	b	.L5204
.L5203:
	adrp	x0, .LC829
	add	x0, x0, :lo12:.LC829
.L5204:
	mov	x5, x0
	ldr	w4, [sp, 68]
	mov	w3, w1
	ldr	w2, [sp, 64]
	adrp	x0, .LC830
	add	x1, x0, :lo12:.LC830
	mov	x0, x6
	bl	_ZN5ImGui8TreeNodeEPKvPKcz
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5218
	bl	_ZN5ImGui18GetCursorScreenPosEv
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	str	wzr, [sp, 76]
	b	.L5206
.L5212:
	ldr	s1, [sp, 96]
	ldr	w0, [sp, 76]
	and	w0, w0, 15
	ucvtf	s2, w0
	ldr	s3, [sp, 88]
	ldr	s0, [sp, 92]
	fadd	s0, s3, s0
	fmul	s0, s2, s0
	fadd	s4, s1, s0
	ldr	s1, [sp, 100]
	ldr	w0, [sp, 76]
	fmov	s0, w0
	ushr	v0.2s, v0.2s, 4
	ucvtf	s2, s0
	ldr	s3, [sp, 88]
	ldr	s0, [sp, 92]
	fadd	s0, s3, s0
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	add	x0, sp, 104
	fmov	s1, s0
	fmov	s0, s4
	bl	_ZN6ImVec2C1Eff
	ldr	s1, [sp, 104]
	ldr	s0, [sp, 88]
	fadd	s2, s1, s0
	ldr	s1, [sp, 108]
	ldr	s0, [sp, 88]
	fadd	s0, s1, s0
	add	x0, sp, 112
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	ldr	w0, [sp, 64]
	and	w1, w0, 65535
	ldr	w0, [sp, 76]
	and	w0, w0, 65535
	add	w0, w1, w0
	and	w0, w0, 65535
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZNK6ImFont19FindGlyphNoFallbackEt
	str	x0, [sp, 128]
	ldr	x0, [sp, 128]
	cmp	x0, 0
	beq	.L5207
	mov	w0, 1694498815
	b	.L5208
.L5207:
	mov	w0, 855638015
.L5208:
	add	x2, sp, 112
	add	x1, sp, 104
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, w0
	ldr	x0, [sp, 120]
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldr	x0, [sp, 128]
	cmp	x0, 0
	beq	.L5219
	ldr	w0, [sp, 64]
	and	w1, w0, 65535
	ldr	w0, [sp, 76]
	and	w0, w0, 65535
	add	w0, w1, w0
	and	w1, w0, 65535
	add	x0, sp, 104
	mov	w4, w1
	ldr	w3, [sp, 84]
	mov	x2, x0
	ldr	s0, [sp, 88]
	ldr	x1, [sp, 120]
	ldr	x0, [sp, 40]
	bl	_ZNK6ImFont10RenderCharEP10ImDrawListfRK6ImVec2jt
	add	x1, sp, 112
	add	x0, sp, 104
	mov	w2, 1
	bl	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5210
	bl	_ZN5ImGui12BeginTooltipEv
	ldr	x1, [sp, 128]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui18DebugNodeFontGlyphEP6ImFontPK11ImFontGlyph
	bl	_ZN5ImGui10EndTooltipEv
	b	.L5210
.L5219:
	nop
.L5210:
	ldr	w0, [sp, 76]
	add	w0, w0, 1
	str	w0, [sp, 76]
.L5206:
	ldr	w0, [sp, 76]
	cmp	w0, 255
	bls	.L5212
	ldr	s1, [sp, 88]
	ldr	s0, [sp, 92]
	fadd	s1, s1, s0
	fmov	s0, 1.6e+1
	fmul	s2, s1, s0
	ldr	s1, [sp, 88]
	ldr	s0, [sp, 92]
	fadd	s1, s1, s0
	fmov	s0, 1.6e+1
	fmul	s0, s1, s0
	add	x0, sp, 112
	fmov	s1, s0
	fmov	s0, s2
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 112
	bl	_ZN5ImGui5DummyERK6ImVec2
	bl	_ZN5ImGui7TreePopEv
	b	.L5213
.L5217:
	nop
	b	.L5213
.L5218:
	nop
.L5213:
	ldr	w0, [sp, 64]
	add	w0, w0, 256
	str	w0, [sp, 64]
.L5194:
	ldr	w1, [sp, 64]
	mov	w0, 65535
	cmp	w1, w0
	bls	.L5214
	bl	_ZN5ImGui7TreePopEv
.L5193:
	bl	_ZN5ImGui7TreePopEv
	b	.L5184
.L5216:
	nop
.L5184:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5215
	bl	__stack_chk_fail
.L5215:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 160
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2162:
	.size	_ZN5ImGui13DebugNodeFontEP6ImFont, .-_ZN5ImGui13DebugNodeFontEP6ImFont
	.section	.rodata
	.align	3
.LC831:
	.string	"Codepoint: U+%04X"
	.align	3
.LC832:
	.string	"Visible: %d"
	.align	3
.LC833:
	.string	"AdvanceX: %.1f"
	.align	3
.LC834:
	.string	"Pos: (%.2f,%.2f)->(%.2f,%.2f)"
	.align	3
.LC835:
	.string	"UV: (%.3f,%.3f)->(%.3f,%.3f)"
	.text
	.align	2
	.global	_ZN5ImGui18DebugNodeFontGlyphEP6ImFontPK11ImFontGlyph
	.type	_ZN5ImGui18DebugNodeFontGlyphEP6ImFontPK11ImFontGlyph, %function
_ZN5ImGui18DebugNodeFontGlyphEP6ImFontPK11ImFontGlyph:
.LFB2163:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	lsr	w0, w0, 2
	mov	w1, w0
	adrp	x0, .LC831
	add	x0, x0, :lo12:.LC831
	bl	_ZN5ImGui4TextEPKcz
	bl	_ZN5ImGui9SeparatorEv
	ldr	x0, [sp, 16]
	ldr	w0, [x0]
	ubfx	x0, x0, 1, 1
	and	w0, w0, 255
	mov	w1, w0
	adrp	x0, .LC832
	add	x0, x0, :lo12:.LC832
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 4]
	fcvt	d0, s0
	adrp	x0, .LC833
	add	x0, x0, :lo12:.LC833
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 8]
	fcvt	d4, s0
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 12]
	fcvt	d1, s0
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 16]
	fcvt	d2, s0
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 20]
	fcvt	d0, s0
	fmov	d3, d0
	fmov	d0, d4
	adrp	x0, .LC834
	add	x0, x0, :lo12:.LC834
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 24]
	fcvt	d4, s0
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 28]
	fcvt	d1, s0
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 32]
	fcvt	d2, s0
	ldr	x0, [sp, 16]
	ldr	s0, [x0, 36]
	fcvt	d0, s0
	fmov	d3, d0
	fmov	d0, d4
	adrp	x0, .LC835
	add	x0, x0, :lo12:.LC835
	bl	_ZN5ImGui4TextEPKcz
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2163:
	.size	_ZN5ImGui18DebugNodeFontGlyphEP6ImFontPK11ImFontGlyph, .-_ZN5ImGui18DebugNodeFontGlyphEP6ImFontPK11ImFontGlyph
	.section	.rodata
	.align	3
.LC836:
	.string	"%s: %d entries, %d bytes"
	.align	3
.LC837:
	.string	"Key 0x%08X Value { i: %d }"
	.text
	.align	2
	.global	_ZN5ImGui16DebugNodeStorageEP12ImGuiStoragePKc
	.type	_ZN5ImGui16DebugNodeStorageEP12ImGuiStoragePKc, %function
_ZN5ImGui16DebugNodeStorageEP12ImGuiStoragePKc:
.LFB2164:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -48
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	ldr	x0, [sp, 40]
	ldr	w19, [x0]
	ldr	x0, [sp, 40]
	bl	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE13size_in_bytesEv
	mov	w4, w0
	mov	w3, w19
	ldr	x2, [sp, 32]
	adrp	x0, .LC836
	add	x1, x0, :lo12:.LC836
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5226
	str	wzr, [sp, 52]
	b	.L5224
.L5225:
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 52]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	w1, [x0]
	ldr	x0, [sp, 56]
	ldr	w0, [x0, 8]
	mov	w2, w0
	adrp	x0, .LC837
	add	x0, x0, :lo12:.LC837
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L5224:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	blt	.L5225
	bl	_ZN5ImGui7TreePopEv
	b	.L5221
.L5226:
	nop
.L5221:
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2164:
	.size	_ZN5ImGui16DebugNodeStorageEP12ImGuiStoragePKc, .-_ZN5ImGui16DebugNodeStorageEP12ImGuiStoragePKc
	.section	.rodata
	.align	3
.LC838:
	.string	" *Inactive*"
	.align	3
.LC839:
	.string	"%s 0x%08X (%d tabs)%s"
	.align	3
.LC840:
	.string	"  { "
	.align	3
.LC841:
	.string	", "
	.align	3
.LC842:
	.string	"???"
	.align	3
.LC843:
	.string	"%s'%s'"
	.align	3
.LC844:
	.string	" ... }"
	.align	3
.LC845:
	.string	" } "
	.align	3
.LC846:
	.string	"<"
	.align	3
.LC847:
	.string	">"
	.align	3
.LC848:
	.string	"%02d%c Tab 0x%08X '%s' Offset: %.2f, Width: %.2f/%.2f"
	.text
	.align	2
	.global	_ZN5ImGui15DebugNodeTabBarEP11ImGuiTabBarPKc
	.type	_ZN5ImGui15DebugNodeTabBarEP11ImGuiTabBarPKc, %function
_ZN5ImGui15DebugNodeTabBarEP11ImGuiTabBarPKc:
.LFB2165:
	.cfi_startproc
	stp	x29, x30, [sp, -384]!
	.cfi_def_cfa_offset 384
	.cfi_offset 29, -384
	.cfi_offset 30, -376
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -368
	.cfi_offset 20, -360
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 376]
	mov	x1, 0
	add	x0, sp, 120
	str	x0, [sp, 80]
	add	x0, sp, 120
	add	x0, x0, 256
	str	x0, [sp, 88]
	ldr	x0, [sp, 40]
	ldr	w19, [x0, 40]
	bl	_ZN5ImGui13GetFrameCountEv
	sub	w0, w0, #2
	cmp	w19, w0
	cset	w0, ge
	strb	w0, [sp, 54]
	ldr	x1, [sp, 88]
	ldr	x0, [sp, 80]
	sub	x0, x1, x0
	mov	x7, x0
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 20]
	ldr	x0, [sp, 40]
	ldr	w2, [x0]
	ldrb	w0, [sp, 54]
	cmp	w0, 0
	beq	.L5228
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
	b	.L5229
.L5228:
	adrp	x0, .LC838
	add	x0, x0, :lo12:.LC838
.L5229:
	mov	x6, x0
	mov	w5, w2
	mov	w4, w1
	ldr	x3, [sp, 32]
	adrp	x0, .LC839
	add	x2, x0, :lo12:.LC839
	mov	x1, x7
	ldr	x0, [sp, 80]
	bl	_Z14ImFormatStringPcmPKcz
	sxtw	x0, w0
	ldr	x1, [sp, 80]
	add	x0, x1, x0
	str	x0, [sp, 80]
	ldr	x1, [sp, 88]
	ldr	x0, [sp, 80]
	sub	x0, x1, x0
	mov	x1, x0
	adrp	x0, .LC840
	add	x2, x0, :lo12:.LC840
	ldr	x0, [sp, 80]
	bl	_Z14ImFormatStringPcmPKcz
	sxtw	x0, w0
	ldr	x1, [sp, 80]
	add	x0, x1, x0
	str	x0, [sp, 80]
	str	wzr, [sp, 56]
	b	.L5230
.L5235:
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 56]
	bl	_ZN8ImVectorI12ImGuiTabItemEixEi
	str	x0, [sp, 112]
	ldr	x1, [sp, 88]
	ldr	x0, [sp, 80]
	sub	x0, x1, x0
	mov	x20, x0
	ldr	w0, [sp, 56]
	cmp	w0, 0
	ble	.L5231
	adrp	x0, .LC841
	add	x19, x0, :lo12:.LC841
	b	.L5232
.L5231:
	adrp	x0, .LC67
	add	x19, x0, :lo12:.LC67
.L5232:
	ldr	x0, [sp, 112]
	ldr	w0, [x0, 32]
	cmn	w0, #1
	beq	.L5233
	ldr	x1, [sp, 112]
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem
	b	.L5234
.L5233:
	adrp	x0, .LC842
	add	x0, x0, :lo12:.LC842
.L5234:
	mov	x4, x0
	mov	x3, x19
	adrp	x0, .LC843
	add	x2, x0, :lo12:.LC843
	mov	x1, x20
	ldr	x0, [sp, 80]
	bl	_Z14ImFormatStringPcmPKcz
	sxtw	x0, w0
	ldr	x1, [sp, 80]
	add	x0, x1, x0
	str	x0, [sp, 80]
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	str	w0, [sp, 56]
.L5230:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	mov	w1, 3
	bl	_Z5ImMinIiET_S0_S0_
	mov	w1, w0
	ldr	w0, [sp, 56]
	cmp	w0, w1
	cset	w0, lt
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5235
	ldr	x1, [sp, 88]
	ldr	x0, [sp, 80]
	sub	x0, x1, x0
	mov	x1, x0
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	cmp	w0, 3
	ble	.L5236
	adrp	x0, .LC844
	add	x0, x0, :lo12:.LC844
	b	.L5237
.L5236:
	adrp	x0, .LC845
	add	x0, x0, :lo12:.LC845
.L5237:
	mov	x2, x0
	ldr	x0, [sp, 80]
	bl	_Z14ImFormatStringPcmPKcz
	sxtw	x0, w0
	ldr	x1, [sp, 80]
	add	x0, x1, x0
	str	x0, [sp, 80]
	ldrb	w0, [sp, 54]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5238
	mov	w0, 1
	bl	_ZN5ImGui17GetStyleColorVec4Ei
	mov	x1, x0
	mov	w0, 0
	bl	_ZN5ImGui14PushStyleColorEiRK6ImVec4
.L5238:
	add	x0, sp, 120
	mov	x2, x0
	adrp	x0, .LC760
	add	x1, x0, :lo12:.LC760
	ldr	x0, [sp, 32]
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	strb	w0, [sp, 55]
	ldrb	w0, [sp, 54]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5239
	mov	w0, 1
	bl	_ZN5ImGui13PopStyleColorEi
.L5239:
	ldrb	w0, [sp, 54]
	cmp	w0, 0
	beq	.L5240
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5240
	mov	w0, 1
	b	.L5241
.L5240:
	mov	w0, 0
.L5241:
	cmp	w0, 0
	beq	.L5242
	bl	_ZN5ImGui21GetForegroundDrawListEv
	str	x0, [sp, 96]
	ldr	x0, [sp, 40]
	add	x1, x0, 44
	ldr	x0, [sp, 40]
	add	x0, x0, 52
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711681
	mov	x2, x0
	ldr	x0, [sp, 96]
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	ldr	x19, [sp, 96]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 92]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 48]
	add	x0, sp, 64
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 92]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 56]
	add	x0, sp, 72
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 64
	fmov	s0, 1.0e+0
	mov	w3, -16711936
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddLineERK6ImVec2S2_jf
	ldr	x19, [sp, 96]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 96]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 48]
	add	x0, sp, 64
	bl	_ZN6ImVec2C1Eff
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 96]
	ldr	x0, [sp, 40]
	ldr	s1, [x0, 56]
	add	x0, sp, 72
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 64
	fmov	s0, 1.0e+0
	mov	w3, -16711936
	mov	x2, x1
	mov	x1, x0
	mov	x0, x19
	bl	_ZN10ImDrawList7AddLineERK6ImVec2S2_jf
.L5242:
	ldrb	w0, [sp, 55]
	cmp	w0, 0
	beq	.L5253
	str	wzr, [sp, 60]
	b	.L5244
.L5251:
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 60]
	bl	_ZN8ImVectorI12ImGuiTabItemEixEi
	str	x0, [sp, 104]
	ldr	x0, [sp, 104]
	bl	_ZN5ImGui6PushIDEPKv
	adrp	x0, .LC846
	add	x0, x0, :lo12:.LC846
	bl	_ZN5ImGui11SmallButtonEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5245
	mov	w2, -1
	ldr	x1, [sp, 104]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui18TabBarQueueReorderEP11ImGuiTabBarPK12ImGuiTabItemi
.L5245:
	fmov	s1, 2.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC847
	add	x0, x0, :lo12:.LC847
	bl	_ZN5ImGui11SmallButtonEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5246
	mov	w2, 1
	ldr	x1, [sp, 104]
	ldr	x0, [sp, 40]
	bl	_ZN5ImGui18TabBarQueueReorderEP11ImGuiTabBarPK12ImGuiTabItemi
.L5246:
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x0, [sp, 104]
	ldr	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 24]
	cmp	w1, w0
	bne	.L5247
	mov	w19, 42
	b	.L5248
.L5247:
	mov	w19, 32
.L5248:
	ldr	x0, [sp, 104]
	ldr	w20, [x0]
	ldr	x0, [sp, 104]
	ldr	w0, [x0, 32]
	cmn	w0, #1
	beq	.L5249
	ldr	x1, [sp, 104]
	ldr	x0, [sp, 40]
	bl	_ZNK11ImGuiTabBar10GetTabNameEPK12ImGuiTabItem
	b	.L5250
.L5249:
	adrp	x0, .LC842
	add	x0, x0, :lo12:.LC842
.L5250:
	ldr	x1, [sp, 104]
	ldr	s0, [x1, 16]
	fcvt	d3, s0
	ldr	x1, [sp, 104]
	ldr	s0, [x1, 20]
	fcvt	d1, s0
	ldr	x1, [sp, 104]
	ldr	s0, [x1, 24]
	fcvt	d0, s0
	fmov	d2, d0
	fmov	d0, d3
	mov	x4, x0
	mov	w3, w20
	mov	w2, w19
	ldr	w1, [sp, 60]
	adrp	x0, .LC848
	add	x0, x0, :lo12:.LC848
	bl	_ZN5ImGui4TextEPKcz
	bl	_ZN5ImGui5PopIDEv
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L5244:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	blt	.L5251
	bl	_ZN5ImGui7TreePopEv
.L5253:
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 376]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5252
	bl	__stack_chk_fail
.L5252:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 384
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2165:
	.size	_ZN5ImGui15DebugNodeTabBarEP11ImGuiTabBarPKc, .-_ZN5ImGui15DebugNodeTabBarEP11ImGuiTabBarPKc
	.section	.rodata
	.align	3
.LC849:
	.string	"Viewport #%d"
	.align	3
.LC850:
	.string	"viewport0"
	.align	3
.LC851:
	.string	"Main Pos: (%.0f,%.0f), Size: (%.0f,%.0f)\nWorkArea Offset Left: %.0f Top: %.0f, Right: %.0f, Bottom: %.0f"
	.align	3
.LC852:
	.string	" IsPlatformWindow"
	.align	3
.LC853:
	.string	" IsPlatformMonitor"
	.align	3
.LC854:
	.string	" OwnedByApp"
	.align	3
.LC855:
	.string	"Flags: 0x%04X =%s%s%s"
	.text
	.align	2
	.global	_ZN5ImGui17DebugNodeViewportEP14ImGuiViewportP
	.type	_ZN5ImGui17DebugNodeViewportEP14ImGuiViewportP, %function
_ZN5ImGui17DebugNodeViewportEP14ImGuiViewportP:
.LFB2166:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	d8, [sp, 16]
	.cfi_offset 72, -48
	str	x0, [sp, 40]
	mov	w1, 2
	mov	w0, 1
	bl	_ZN5ImGui15SetNextItemOpenEbi
	mov	w2, 0
	adrp	x0, .LC849
	add	x1, x0, :lo12:.LC849
	adrp	x0, .LC850
	add	x0, x0, :lo12:.LC850
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5266
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	str	w0, [sp, 60]
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 4]
	fcvt	d8, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 8]
	fcvt	d1, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 12]
	fcvt	d2, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 16]
	fcvt	d3, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 152]
	fcvt	d4, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 156]
	fcvt	d5, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 160]
	fcvt	d6, s0
	ldr	x0, [sp, 40]
	ldr	s0, [x0, 164]
	fcvt	d0, s0
	fmov	d7, d0
	fmov	d0, d8
	adrp	x0, .LC851
	add	x0, x0, :lo12:.LC851
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	x0, [sp, 40]
	ldr	w5, [x0]
	ldr	w0, [sp, 60]
	and	w0, w0, 1
	cmp	w0, 0
	beq	.L5256
	adrp	x0, .LC852
	add	x0, x0, :lo12:.LC852
	b	.L5257
.L5256:
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
.L5257:
	ldr	w1, [sp, 60]
	and	w1, w1, 2
	cmp	w1, 0
	beq	.L5258
	adrp	x1, .LC853
	add	x1, x1, :lo12:.LC853
	b	.L5259
.L5258:
	adrp	x1, .LC67
	add	x1, x1, :lo12:.LC67
.L5259:
	ldr	w2, [sp, 60]
	and	w2, w2, 4
	cmp	w2, 0
	beq	.L5260
	adrp	x2, .LC854
	add	x2, x2, :lo12:.LC854
	b	.L5261
.L5260:
	adrp	x2, .LC67
	add	x2, x2, :lo12:.LC67
.L5261:
	mov	x4, x2
	mov	x3, x1
	mov	x2, x0
	mov	w1, w5
	adrp	x0, .LC855
	add	x0, x0, :lo12:.LC855
	bl	_ZN5ImGui10BulletTextEPKcz
	str	wzr, [sp, 52]
	b	.L5262
.L5265:
	str	wzr, [sp, 56]
	b	.L5263
.L5264:
	ldrsw	x0, [sp, 52]
	add	x0, x0, 7
	lsl	x0, x0, 4
	ldr	x1, [sp, 40]
	add	x0, x1, x0
	add	x0, x0, 8
	ldr	w1, [sp, 56]
	bl	_ZN8ImVectorIP10ImDrawListEixEi
	ldr	x1, [x0]
	adrp	x0, .LC736
	add	x2, x0, :lo12:.LC736
	mov	x0, 0
	bl	_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowPK10ImDrawListPKc
	ldr	w0, [sp, 56]
	add	w0, w0, 1
	str	w0, [sp, 56]
.L5263:
	ldr	x1, [sp, 40]
	ldrsw	x0, [sp, 52]
	add	x0, x0, 7
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 56]
	cmp	w1, w0
	blt	.L5264
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L5262:
	ldr	w0, [sp, 52]
	cmp	w0, 1
	ble	.L5265
	bl	_ZN5ImGui7TreePopEv
.L5266:
	nop
	ldr	d8, [sp, 16]
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2166:
	.size	_ZN5ImGui17DebugNodeViewportEP14ImGuiViewportP, .-_ZN5ImGui17DebugNodeViewportEP14ImGuiViewportP
	.section	.rodata
	.align	3
.LC856:
	.string	"%s: NULL"
	.align	3
.LC857:
	.string	"%s '%s'%s"
	.align	3
.LC858:
	.string	"Note: some memory buffers have been compacted/freed."
	.align	3
.LC859:
	.string	"Pos: (%.1f,%.1f), Size: (%.1f,%.1f), ContentSize (%.1f,%.1f) Ideal (%.1f,%.1f)"
	.align	3
.LC860:
	.string	"Child "
	.align	3
.LC861:
	.string	"Tooltip "
	.align	3
.LC862:
	.string	"Popup "
	.align	3
.LC863:
	.string	"Modal "
	.align	3
.LC864:
	.string	"ChildMenu "
	.align	3
.LC865:
	.string	"NoSavedSettings "
	.align	3
.LC866:
	.string	"NoMouseInputs"
	.align	3
.LC867:
	.string	"NoNavInputs"
	.align	3
.LC868:
	.string	"AlwaysAutoResize"
	.align	3
.LC869:
	.string	"Flags: 0x%08X (%s%s%s%s%s%s%s%s%s..)"
	.align	3
.LC870:
	.string	"Scroll: (%.2f/%.2f,%.2f/%.2f) Scrollbar:%s%s"
	.align	3
.LC871:
	.string	"Active: %d/%d, WriteAccessed: %d, BeginOrderWithinContext: %d"
	.align	3
.LC872:
	.string	"Appearing: %d, Hidden: %d (CanSkip %d Cannot %d), SkipItems: %d"
	.align	3
.LC873:
	.string	"NavLastIds[%d]: 0x%08X"
	.align	3
.LC874:
	.string	"NavLastIds[%d]: 0x%08X at +(%.1f,%.1f)(%.1f,%.1f)"
	.align	3
.LC875:
	.string	"NavLayersActiveMask: %X, NavLastChildNavWindow: %s"
	.align	3
.LC876:
	.string	"RootWindow"
	.align	3
.LC877:
	.string	"ParentWindow"
	.align	3
.LC878:
	.string	"ChildWindows"
	.align	3
.LC879:
	.string	"Columns sets (%d)"
	.align	3
.LC880:
	.string	"Columns"
	.align	3
.LC881:
	.string	"Storage"
	.text
	.align	2
	.global	_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc
	.type	_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc, %function
_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc:
.LFB2167:
	.cfi_startproc
	sub	sp, sp, #160
	.cfi_def_cfa_offset 160
	stp	x29, x30, [sp, 32]
	.cfi_offset 29, -128
	.cfi_offset 30, -120
	add	x29, sp, 32
	stp	x19, x20, [sp, 48]
	str	d8, [sp, 64]
	.cfi_offset 19, -112
	.cfi_offset 20, -104
	.cfi_offset 72, -96
	str	x0, [sp, 88]
	str	x1, [sp, 80]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 152]
	mov	x1, 0
	ldr	x0, [sp, 88]
	cmp	x0, 0
	bne	.L5268
	ldr	x1, [sp, 80]
	adrp	x0, .LC856
	add	x0, x0, :lo12:.LC856
	bl	_ZN5ImGui10BulletTextEPKcz
	b	.L5267
.L5268:
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 128]
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 151]
	strb	w0, [sp, 110]
	ldr	x0, [sp, 128]
	ldr	x0, [x0, 18536]
	ldr	x1, [sp, 88]
	cmp	x1, x0
	bne	.L5270
	mov	w0, 1
	b	.L5271
.L5270:
	mov	w0, 0
.L5271:
	str	w0, [sp, 120]
	ldrb	w0, [sp, 110]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5272
	mov	w0, 1
	bl	_ZN5ImGui17GetStyleColorVec4Ei
	mov	x1, x0
	mov	w0, 0
	bl	_ZN5ImGui14PushStyleColorEiRK6ImVec4
.L5272:
	ldr	x0, [sp, 88]
	ldr	x1, [x0]
	ldrb	w0, [sp, 110]
	cmp	w0, 0
	beq	.L5273
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
	b	.L5274
.L5273:
	adrp	x0, .LC838
	add	x0, x0, :lo12:.LC838
.L5274:
	mov	x5, x0
	mov	x4, x1
	ldr	x3, [sp, 80]
	adrp	x0, .LC857
	add	x2, x0, :lo12:.LC857
	ldr	w1, [sp, 120]
	ldr	x0, [sp, 80]
	bl	_ZN5ImGui10TreeNodeExEPKciS1_z
	and	w0, w0, 255
	strb	w0, [sp, 111]
	ldrb	w0, [sp, 110]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5275
	mov	w0, 1
	bl	_ZN5ImGui13PopStyleColorEi
.L5275:
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5276
	ldrb	w0, [sp, 110]
	cmp	w0, 0
	beq	.L5276
	mov	w0, 1
	b	.L5277
.L5276:
	mov	w0, 0
.L5277:
	cmp	w0, 0
	beq	.L5278
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow
	mov	x20, x0
	ldr	x0, [sp, 88]
	add	x19, x0, 24
	ldr	x0, [sp, 88]
	add	x2, x0, 24
	ldr	x0, [sp, 88]
	add	x0, x0, 32
	mov	x1, x0
	mov	x0, x2
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 136]
	str	s0, [sp, 140]
	add	x0, sp, 136
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711681
	mov	x2, x0
	mov	x1, x19
	mov	x0, x20
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
.L5278:
	ldrb	w0, [sp, 111]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5325
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 948]
	cmp	w0, 0
	beq	.L5280
	adrp	x0, .LC858
	add	x0, x0, :lo12:.LC858
	bl	_ZN5ImGui12TextDisabledEPKcz
.L5280:
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 12]
	str	w0, [sp, 124]
	ldr	x0, [sp, 88]
	ldr	x1, [x0, 632]
	adrp	x0, .LC736
	add	x2, x0, :lo12:.LC736
	ldr	x0, [sp, 88]
	bl	_ZN5ImGui17DebugNodeDrawListEP11ImGuiWindowPK10ImDrawListPKc
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 24]
	fcvt	d8, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 28]
	fcvt	d1, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 32]
	fcvt	d2, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 36]
	fcvt	d3, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 48]
	fcvt	d4, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 52]
	fcvt	d5, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 56]
	fcvt	d6, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 60]
	fcvt	d0, s0
	fmov	d7, d0
	fmov	d0, d8
	adrp	x0, .LC859
	add	x0, x0, :lo12:.LC859
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	w0, [sp, 124]
	and	w0, w0, 16777216
	cmp	w0, 0
	beq	.L5281
	adrp	x0, .LC860
	add	x8, x0, :lo12:.LC860
	b	.L5282
.L5281:
	adrp	x0, .LC67
	add	x8, x0, :lo12:.LC67
.L5282:
	ldr	w0, [sp, 124]
	and	w0, w0, 33554432
	cmp	w0, 0
	beq	.L5283
	adrp	x0, .LC861
	add	x3, x0, :lo12:.LC861
	b	.L5284
.L5283:
	adrp	x0, .LC67
	add	x3, x0, :lo12:.LC67
.L5284:
	ldr	w0, [sp, 124]
	and	w0, w0, 67108864
	cmp	w0, 0
	beq	.L5285
	adrp	x0, .LC862
	add	x4, x0, :lo12:.LC862
	b	.L5286
.L5285:
	adrp	x0, .LC67
	add	x4, x0, :lo12:.LC67
.L5286:
	ldr	w0, [sp, 124]
	and	w0, w0, 134217728
	cmp	w0, 0
	beq	.L5287
	adrp	x0, .LC863
	add	x5, x0, :lo12:.LC863
	b	.L5288
.L5287:
	adrp	x0, .LC67
	add	x5, x0, :lo12:.LC67
.L5288:
	ldr	w0, [sp, 124]
	and	w0, w0, 268435456
	cmp	w0, 0
	beq	.L5289
	adrp	x0, .LC864
	add	x6, x0, :lo12:.LC864
	b	.L5290
.L5289:
	adrp	x0, .LC67
	add	x6, x0, :lo12:.LC67
.L5290:
	ldr	w0, [sp, 124]
	and	w0, w0, 256
	cmp	w0, 0
	beq	.L5291
	adrp	x0, .LC865
	add	x7, x0, :lo12:.LC865
	b	.L5292
.L5291:
	adrp	x0, .LC67
	add	x7, x0, :lo12:.LC67
.L5292:
	ldr	w0, [sp, 124]
	and	w0, w0, 512
	cmp	w0, 0
	beq	.L5293
	adrp	x0, .LC866
	add	x0, x0, :lo12:.LC866
	b	.L5294
.L5293:
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
.L5294:
	ldr	w1, [sp, 124]
	and	w1, w1, 262144
	cmp	w1, 0
	beq	.L5295
	adrp	x1, .LC867
	add	x1, x1, :lo12:.LC867
	b	.L5296
.L5295:
	adrp	x1, .LC67
	add	x1, x1, :lo12:.LC67
.L5296:
	ldr	w2, [sp, 124]
	and	w2, w2, 64
	cmp	w2, 0
	beq	.L5297
	adrp	x2, .LC868
	add	x2, x2, :lo12:.LC868
	b	.L5298
.L5297:
	adrp	x2, .LC67
	add	x2, x2, :lo12:.LC67
.L5298:
	str	x2, [sp, 16]
	str	x1, [sp, 8]
	str	x0, [sp]
	mov	x2, x8
	ldr	w1, [sp, 124]
	adrp	x0, .LC869
	add	x0, x0, :lo12:.LC869
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 100]
	fcvt	d4, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 108]
	fcvt	d1, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 104]
	fcvt	d2, s0
	ldr	x0, [sp, 88]
	ldr	s0, [x0, 112]
	fcvt	d0, s0
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 148]
	cmp	w0, 0
	beq	.L5299
	adrp	x0, .LC355
	add	x0, x0, :lo12:.LC355
	b	.L5300
.L5299:
	adrp	x0, .LC67
	add	x0, x0, :lo12:.LC67
.L5300:
	ldr	x1, [sp, 88]
	ldrb	w1, [x1, 149]
	cmp	w1, 0
	beq	.L5301
	adrp	x1, .LC356
	add	x1, x1, :lo12:.LC356
	b	.L5302
.L5301:
	adrp	x1, .LC67
	add	x1, x1, :lo12:.LC67
.L5302:
	mov	x2, x1
	mov	x1, x0
	fmov	d3, d0
	fmov	d0, d4
	adrp	x0, .LC870
	add	x0, x0, :lo12:.LC870
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 150]
	mov	w1, w0
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 151]
	mov	w2, w0
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 152]
	mov	w3, w0
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 150]
	cmp	w0, 0
	bne	.L5303
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 151]
	cmp	w0, 0
	beq	.L5304
.L5303:
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 168]
	b	.L5305
.L5304:
	mov	w0, -1
.L5305:
	mov	w4, w0
	adrp	x0, .LC871
	add	x0, x0, :lo12:.LC871
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 156]
	mov	w1, w0
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 157]
	mov	w2, w0
	ldr	x0, [sp, 88]
	ldrsb	w0, [x0, 184]
	mov	w3, w0
	ldr	x0, [sp, 88]
	ldrsb	w0, [x0, 185]
	mov	w4, w0
	ldr	x0, [sp, 88]
	ldrb	w0, [x0, 155]
	mov	w5, w0
	adrp	x0, .LC872
	add	x0, x0, :lo12:.LC872
	bl	_ZN5ImGui10BulletTextEPKcz
	str	wzr, [sp, 112]
	b	.L5306
.L5311:
	ldr	x1, [sp, 88]
	ldrsw	x0, [sp, 112]
	add	x0, x0, 56
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x0, x1, [x0, 8]
	stp	x0, x1, [sp, 136]
	ldr	s1, [sp, 136]
	ldr	s0, [sp, 148]
	fcmpe	s1, s0
	bge	.L5323
	b	.L5307
.L5323:
	ldr	s1, [sp, 140]
	ldr	s0, [sp, 148]
	fcmpe	s1, s0
	bge	.L5324
	b	.L5307
.L5324:
	ldr	x0, [sp, 88]
	ldrsw	x1, [sp, 112]
	add	x1, x1, 224
	ldr	w0, [x0, x1, lsl 2]
	mov	w2, w0
	ldr	w1, [sp, 112]
	adrp	x0, .LC873
	add	x0, x0, :lo12:.LC873
	bl	_ZN5ImGui10BulletTextEPKcz
	b	.L5310
.L5307:
	ldr	x0, [sp, 88]
	ldrsw	x1, [sp, 112]
	add	x1, x1, 224
	ldr	w0, [x0, x1, lsl 2]
	ldr	s0, [sp, 136]
	fcvt	d4, s0
	ldr	s0, [sp, 140]
	fcvt	d1, s0
	ldr	s0, [sp, 144]
	fcvt	d2, s0
	ldr	s0, [sp, 148]
	fcvt	d0, s0
	fmov	d3, d0
	fmov	d0, d4
	mov	w2, w0
	ldr	w1, [sp, 112]
	adrp	x0, .LC874
	add	x0, x0, :lo12:.LC874
	bl	_ZN5ImGui10BulletTextEPKcz
.L5310:
	ldr	x0, [sp, 88]
	ldrsw	x1, [sp, 112]
	add	x1, x1, 224
	ldr	w0, [x0, x1, lsl 2]
	bl	_ZN5ImGui22DebugLocateItemOnHoverEj
	ldr	w0, [sp, 112]
	add	w0, w0, 1
	str	w0, [sp, 112]
.L5306:
	ldr	w0, [sp, 112]
	cmp	w0, 1
	ble	.L5311
	ldr	x0, [sp, 88]
	ldrsh	w0, [x0, 316]
	mov	w1, w0
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 888]
	cmp	x0, 0
	beq	.L5312
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 888]
	ldr	x0, [x0]
	b	.L5313
.L5312:
	adrp	x0, .LC188
	add	x0, x0, :lo12:.LC188
.L5313:
	mov	x2, x0
	adrp	x0, .LC875
	add	x0, x0, :lo12:.LC875
	bl	_ZN5ImGui10BulletTextEPKcz
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 856]
	ldr	x1, [sp, 88]
	cmp	x1, x0
	beq	.L5314
	ldr	x0, [sp, 88]
	ldr	x2, [x0, 856]
	adrp	x0, .LC876
	add	x1, x0, :lo12:.LC876
	mov	x0, x2
	bl	_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc
.L5314:
	ldr	x0, [sp, 88]
	ldr	x0, [x0, 840]
	cmp	x0, 0
	beq	.L5315
	ldr	x0, [sp, 88]
	ldr	x2, [x0, 840]
	adrp	x0, .LC877
	add	x1, x0, :lo12:.LC877
	mov	x0, x2
	bl	_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc
.L5315:
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 368]
	cmp	w0, 0
	ble	.L5316
	ldr	x0, [sp, 88]
	add	x2, x0, 368
	adrp	x0, .LC878
	add	x1, x0, :lo12:.LC878
	mov	x0, x2
	bl	_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc
.L5316:
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 608]
	cmp	w0, 0
	ble	.L5317
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 608]
	mov	w2, w0
	adrp	x0, .LC879
	add	x1, x0, :lo12:.LC879
	adrp	x0, .LC880
	add	x0, x0, :lo12:.LC880
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5317
	mov	w0, 1
	b	.L5318
.L5317:
	mov	w0, 0
.L5318:
	cmp	w0, 0
	beq	.L5319
	str	wzr, [sp, 116]
	b	.L5320
.L5321:
	ldr	x0, [sp, 88]
	add	x0, x0, 608
	ldr	w1, [sp, 116]
	bl	_ZN8ImVectorI15ImGuiOldColumnsEixEi
	bl	_ZN5ImGui16DebugNodeColumnsEP15ImGuiOldColumns
	ldr	w0, [sp, 116]
	add	w0, w0, 1
	str	w0, [sp, 116]
.L5320:
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 608]
	ldr	w1, [sp, 116]
	cmp	w1, w0
	blt	.L5321
	bl	_ZN5ImGui7TreePopEv
.L5319:
	ldr	x0, [sp, 88]
	add	x2, x0, 592
	adrp	x0, .LC881
	add	x1, x0, :lo12:.LC881
	mov	x0, x2
	bl	_ZN5ImGui16DebugNodeStorageEP12ImGuiStoragePKc
	bl	_ZN5ImGui7TreePopEv
	b	.L5267
.L5325:
	nop
.L5267:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 152]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5322
	bl	__stack_chk_fail
.L5322:
	ldr	d8, [sp, 64]
	ldp	x19, x20, [sp, 48]
	ldp	x29, x30, [sp, 32]
	add	sp, sp, 160
	.cfi_restore 29
	.cfi_restore 30
	.cfi_restore 19
	.cfi_restore 20
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2167:
	.size	_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc, .-_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc
	.section	.rodata
	.align	3
.LC882:
	.string	"0x%08X \"%s\" Pos (%d,%d) Size (%d,%d) Collapsed=%d"
	.text
	.align	2
	.global	_ZN5ImGui23DebugNodeWindowSettingsEP19ImGuiWindowSettings
	.type	_ZN5ImGui23DebugNodeWindowSettingsEP19ImGuiWindowSettings, %function
_ZN5ImGui23DebugNodeWindowSettingsEP19ImGuiWindowSettings:
.LFB2168:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x19, [sp, 16]
	.cfi_offset 19, -32
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldr	w19, [x0]
	ldr	x0, [sp, 40]
	bl	_ZN19ImGuiWindowSettings7GetNameEv
	mov	x1, x0
	ldr	x0, [sp, 40]
	ldrsh	w0, [x0, 4]
	mov	w2, w0
	ldr	x0, [sp, 40]
	ldrsh	w0, [x0, 6]
	mov	w3, w0
	ldr	x0, [sp, 40]
	ldrsh	w0, [x0, 8]
	mov	w4, w0
	ldr	x0, [sp, 40]
	ldrsh	w0, [x0, 10]
	mov	w5, w0
	ldr	x0, [sp, 40]
	ldrb	w0, [x0, 12]
	mov	w7, w0
	mov	w6, w5
	mov	w5, w4
	mov	w4, w3
	mov	w3, w2
	mov	x2, x1
	mov	w1, w19
	adrp	x0, .LC882
	add	x0, x0, :lo12:.LC882
	bl	_ZN5ImGui4TextEPKcz
	nop
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2168:
	.size	_ZN5ImGui23DebugNodeWindowSettingsEP19ImGuiWindowSettings, .-_ZN5ImGui23DebugNodeWindowSettingsEP19ImGuiWindowSettings
	.section	.rodata
	.align	3
.LC883:
	.string	"%s (%d)"
	.text
	.align	2
	.global	_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc
	.type	_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc, %function
_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc:
.LFB2169:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	mov	w3, w0
	ldr	x2, [sp, 16]
	adrp	x0, .LC883
	add	x1, x0, :lo12:.LC883
	ldr	x0, [sp, 16]
	bl	_ZN5ImGui8TreeNodeEPKcS1_z
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5332
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w0, w0, #1
	str	w0, [sp, 44]
	b	.L5330
.L5331:
	ldr	w1, [sp, 44]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x0, [x0]
	bl	_ZN5ImGui6PushIDEPKv
	ldr	w1, [sp, 44]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP11ImGuiWindowEixEi
	ldr	x2, [x0]
	adrp	x0, .LC205
	add	x1, x0, :lo12:.LC205
	mov	x0, x2
	bl	_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc
	bl	_ZN5ImGui5PopIDEv
	ldr	w0, [sp, 44]
	sub	w0, w0, #1
	str	w0, [sp, 44]
.L5330:
	ldr	w0, [sp, 44]
	cmp	w0, 0
	bge	.L5331
	bl	_ZN5ImGui7TreePopEv
	b	.L5327
.L5332:
	nop
.L5327:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2169:
	.size	_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc, .-_ZN5ImGui20DebugNodeWindowsListEP8ImVectorIP11ImGuiWindowEPKc
	.section	.rodata
	.align	3
.LC884:
	.string	"[%04d] Window"
	.text
	.align	2
	.global	_ZN5ImGui38DebugNodeWindowsListByBeginStackParentEPP11ImGuiWindowiS1_
	.type	_ZN5ImGui38DebugNodeWindowsListByBeginStackParentEPP11ImGuiWindowiS1_, %function
_ZN5ImGui38DebugNodeWindowsListByBeginStackParentEPP11ImGuiWindowiS1_:
.LFB2170:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	str	wzr, [sp, 52]
	b	.L5334
.L5337:
	ldrsw	x0, [sp, 52]
	lsl	x0, x0, 3
	ldr	x1, [sp, 40]
	add	x0, x1, x0
	ldr	x0, [x0]
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	ldr	x0, [x0, 848]
	ldr	x1, [sp, 24]
	cmp	x1, x0
	bne	.L5339
	ldr	x0, [sp, 56]
	ldrsh	w0, [x0, 168]
	add	x4, sp, 64
	mov	w3, w0
	adrp	x0, .LC884
	add	x2, x0, :lo12:.LC884
	mov	x1, 20
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
	add	x0, sp, 64
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui15DebugNodeWindowEP11ImGuiWindowPKc
	movi	v0.2s, #0
	bl	_ZN5ImGui6IndentEf
	ldrsw	x0, [sp, 52]
	add	x0, x0, 1
	lsl	x0, x0, 3
	ldr	x1, [sp, 40]
	add	x3, x1, x0
	ldr	w1, [sp, 36]
	ldr	w0, [sp, 52]
	sub	w0, w1, w0
	sub	w0, w0, #1
	ldr	x2, [sp, 56]
	mov	w1, w0
	mov	x0, x3
	bl	_ZN5ImGui38DebugNodeWindowsListByBeginStackParentEPP11ImGuiWindowiS1_
	movi	v0.2s, #0
	bl	_ZN5ImGui8UnindentEf
	b	.L5336
.L5339:
	nop
.L5336:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L5334:
	ldr	w1, [sp, 52]
	ldr	w0, [sp, 36]
	cmp	w1, w0
	blt	.L5337
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5338
	bl	__stack_chk_fail
.L5338:
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2170:
	.size	_ZN5ImGui38DebugNodeWindowsListByBeginStackParentEPP11ImGuiWindowiS1_, .-_ZN5ImGui38DebugNodeWindowsListByBeginStackParentEPP11ImGuiWindowiS1_
	.align	2
	.global	_ZN5ImGui8DebugLogEPKcz
	.type	_ZN5ImGui8DebugLogEPKcz, %function
_ZN5ImGui8DebugLogEPKcz:
.LFB2171:
	.cfi_startproc
	stp	x29, x30, [sp, -304]!
	.cfi_def_cfa_offset 304
	.cfi_offset 29, -304
	.cfi_offset 30, -296
	mov	x29, sp
	str	x0, [sp, 56]
	str	x1, [sp, 248]
	str	x2, [sp, 256]
	str	x3, [sp, 264]
	str	x4, [sp, 272]
	str	x5, [sp, 280]
	str	x6, [sp, 288]
	str	x7, [sp, 296]
	str	q0, [sp, 112]
	str	q1, [sp, 128]
	str	q2, [sp, 144]
	str	q3, [sp, 160]
	str	q4, [sp, 176]
	str	q5, [sp, 192]
	str	q6, [sp, 208]
	str	q7, [sp, 224]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 104]
	mov	x1, 0
	add	x0, sp, 304
	str	x0, [sp, 72]
	add	x0, sp, 304
	str	x0, [sp, 80]
	add	x0, sp, 240
	str	x0, [sp, 88]
	mov	w0, -56
	str	w0, [sp, 96]
	mov	w0, -128
	str	w0, [sp, 100]
	add	x0, sp, 16
	add	x1, sp, 72
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 16
	mov	x1, x0
	ldr	x0, [sp, 56]
	bl	_ZN5ImGui9DebugLogVEPKcSt9__va_list
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 104]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5341
	bl	__stack_chk_fail
.L5341:
	ldp	x29, x30, [sp], 304
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2171:
	.size	_ZN5ImGui8DebugLogEPKcz, .-_ZN5ImGui8DebugLogEPKcz
	.section	.rodata
	.align	3
.LC885:
	.string	"[%05d] "
	.text
	.align	2
	.global	_ZN5ImGui9DebugLogVEPKcSt9__va_list
	.type	_ZN5ImGui9DebugLogVEPKcSt9__va_list, %function
_ZN5ImGui9DebugLogVEPKcSt9__va_list:
.LFB2172:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	str	x0, [sp, 72]
	mov	x19, x1
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 88]
	ldr	x1, [sp, 88]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer4sizeEv
	str	w0, [sp, 84]
	ldr	x1, [sp, 88]
	mov	x0, 23600
	add	x3, x1, x0
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 15904]
	mov	w2, w0
	adrp	x0, .LC885
	add	x1, x0, :lo12:.LC885
	mov	x0, x3
	bl	_ZN15ImGuiTextBuffer7appendfEPKcz
	ldr	x1, [sp, 88]
	mov	x0, 23600
	add	x3, x1, x0
	add	x0, sp, 32
	mov	x1, x19
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	add	x0, sp, 32
	mov	x2, x0
	ldr	x1, [sp, 72]
	mov	x0, x3
	bl	_ZN15ImGuiTextBuffer8appendfvEPKcSt9__va_list
	ldr	x0, [sp, 88]
	add	x0, x0, 16384
	ldr	w0, [x0, 7212]
	and	w0, w0, 1024
	cmp	w0, 0
	beq	.L5343
	ldr	x1, [sp, 88]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5beginEv
	mov	x1, x0
	ldrsw	x0, [sp, 84]
	add	x0, x1, x0
	mov	x1, x0
	adrp	x0, .LC760
	add	x0, x0, :lo12:.LC760
	bl	printf
.L5343:
	ldr	x1, [sp, 88]
	mov	x0, 23616
	add	x19, x1, x0
	ldr	x1, [sp, 88]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5c_strEv
	mov	x20, x0
	ldr	x1, [sp, 88]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer4sizeEv
	mov	w3, w0
	ldr	w2, [sp, 84]
	mov	x1, x20
	mov	x0, x19
	bl	_ZN14ImGuiTextIndex6appendEPKcii
	nop
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2172:
	.size	_ZN5ImGui9DebugLogVEPKcSt9__va_list, .-_ZN5ImGui9DebugLogVEPKcSt9__va_list
	.section	.rodata
	.align	3
.LC886:
	.string	"Dear ImGui Debug Log"
	.align	3
.LC887:
	.string	"Log events:"
	.align	3
.LC888:
	.string	"All"
	.align	3
.LC889:
	.string	"ActiveId"
	.align	3
.LC890:
	.string	"Focus"
	.align	3
.LC891:
	.string	"Popup"
	.align	3
.LC892:
	.string	"Clipper"
	.align	3
.LC893:
	.string	"IO"
	.align	3
.LC894:
	.string	"Copy"
	.align	3
.LC895:
	.string	"##log"
	.align	3
.LC896:
	.string	"%X"
	.text
	.align	2
	.global	_ZN5ImGui18ShowDebugLogWindowEPb
	.type	_ZN5ImGui18ShowDebugLogWindowEPb, %function
_ZN5ImGui18ShowDebugLogWindowEPb:
.LFB2173:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2173
	stp	x29, x30, [sp, -208]!
	.cfi_def_cfa_offset 208
	.cfi_offset 29, -208
	.cfi_offset 30, -200
	mov	x29, sp
	str	x19, [sp, 16]
	str	d8, [sp, 24]
	.cfi_offset 19, -192
	.cfi_offset 72, -184
	str	x0, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 200]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 112]
	ldr	x0, [sp, 112]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 2
	cmp	w0, 0
	bne	.L5345
	bl	_ZN5ImGui11GetFontSizeEv
	fmov	s1, s0
	fmov	s0, 1.2e+1
	fmul	s0, s1, s0
	add	x0, sp, 168
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 168
	mov	w1, 4
	bl	_ZN5ImGui17SetNextWindowSizeERK6ImVec2i
.L5345:
	mov	w2, 0
	ldr	x1, [sp, 40]
	adrp	x0, .LC886
	add	x0, x0, :lo12:.LC886
.LEHB27:
	bl	_ZN5ImGui5BeginEPKcPbi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5346
	bl	_ZN5ImGui16GetCurrentWindowEv
	ldrsh	w0, [x0, 162]
	cmp	w0, 1
	ble	.L5347
.L5346:
	mov	w0, 1
	b	.L5348
.L5347:
	mov	w0, 0
.L5348:
	cmp	w0, 0
	beq	.L5349
	bl	_ZN5ImGui3EndEv
	b	.L5344
.L5349:
	bl	_ZN5ImGui23AlignTextToFramePaddingEv
	adrp	x0, .LC887
	add	x0, x0, :lo12:.LC887
	bl	_ZN5ImGui4TextEPKcz
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x1, [sp, 112]
	mov	x0, 23596
	add	x0, x1, x0
	mov	w2, 63
	mov	x1, x0
	adrp	x0, .LC888
	add	x0, x0, :lo12:.LC888
	bl	_ZN5ImGui13CheckboxFlagsEPKcPii
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x1, [sp, 112]
	mov	x0, 23596
	add	x0, x1, x0
	mov	w2, 1
	mov	x1, x0
	adrp	x0, .LC889
	add	x0, x0, :lo12:.LC889
	bl	_ZN5ImGui13CheckboxFlagsEPKcPii
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x1, [sp, 112]
	mov	x0, 23596
	add	x0, x1, x0
	mov	w2, 2
	mov	x1, x0
	adrp	x0, .LC890
	add	x0, x0, :lo12:.LC890
	bl	_ZN5ImGui13CheckboxFlagsEPKcPii
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x1, [sp, 112]
	mov	x0, 23596
	add	x0, x1, x0
	mov	w2, 4
	mov	x1, x0
	adrp	x0, .LC891
	add	x0, x0, :lo12:.LC891
	bl	_ZN5ImGui13CheckboxFlagsEPKcPii
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x1, [sp, 112]
	mov	x0, 23596
	add	x0, x1, x0
	mov	w2, 8
	mov	x1, x0
	adrp	x0, .LC4
	add	x0, x0, :lo12:.LC4
	bl	_ZN5ImGui13CheckboxFlagsEPKcPii
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x1, [sp, 112]
	mov	x0, 23596
	add	x0, x1, x0
	mov	w2, 16
	mov	x1, x0
	adrp	x0, .LC892
	add	x0, x0, :lo12:.LC892
	bl	_ZN5ImGui13CheckboxFlagsEPKcPii
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	x1, [sp, 112]
	mov	x0, 23596
	add	x0, x1, x0
	mov	w2, 32
	mov	x1, x0
	adrp	x0, .LC893
	add	x0, x0, :lo12:.LC893
	bl	_ZN5ImGui13CheckboxFlagsEPKcPii
	adrp	x0, .LC753
	add	x0, x0, :lo12:.LC753
	bl	_ZN5ImGui11SmallButtonEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5351
	ldr	x1, [sp, 112]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBuffer5clearEv
	ldr	x1, [sp, 112]
	mov	x0, 23616
	add	x0, x1, x0
	bl	_ZN14ImGuiTextIndex5clearEv
.L5351:
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC894
	add	x0, x0, :lo12:.LC894
	bl	_ZN5ImGui11SmallButtonEPKc
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5352
	ldr	x1, [sp, 112]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5c_strEv
	bl	_ZN5ImGui16SetClipboardTextEPKc
.L5352:
	add	x0, sp, 168
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 168
	mov	w3, 49152
	mov	w2, 1
	mov	x1, x0
	adrp	x0, .LC895
	add	x0, x0, :lo12:.LC895
	bl	_ZN5ImGui10BeginChildEPKcRK6ImVec2bi
.LEHE27:
	add	x0, sp, 168
	bl	_ZN16ImGuiListClipperC1Ev
	ldr	x1, [sp, 112]
	mov	x0, 23616
	add	x0, x1, x0
	bl	_ZN14ImGuiTextIndex4sizeEv
	mov	w1, w0
	add	x0, sp, 168
	fmov	s0, -1.0e+0
.LEHB28:
	bl	_ZN16ImGuiListClipper5BeginEif
	b	.L5353
.L5366:
	ldr	w0, [sp, 168]
	str	w0, [sp, 52]
	b	.L5354
.L5365:
	ldr	x1, [sp, 112]
	mov	x0, 23616
	add	x19, x1, x0
	ldr	x1, [sp, 112]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5c_strEv
	ldr	w2, [sp, 52]
	mov	x1, x0
	mov	x0, x19
	bl	_ZN14ImGuiTextIndex14get_line_beginEPKci
	str	x0, [sp, 120]
	ldr	x1, [sp, 112]
	mov	x0, 23616
	add	x19, x1, x0
	ldr	x1, [sp, 112]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZNK15ImGuiTextBuffer5c_strEv
	ldr	w2, [sp, 52]
	mov	x1, x0
	mov	x0, x19
	bl	_ZN14ImGuiTextIndex12get_line_endEPKci
	str	x0, [sp, 128]
	ldr	x1, [sp, 128]
	ldr	x0, [sp, 120]
	bl	_ZN5ImGui15TextUnformattedEPKcS1_
	ldr	x1, [sp, 112]
	mov	x0, 18432
	add	x0, x1, x0
	ldp	x0, x1, [x0, -208]
	stp	x0, x1, [sp, 136]
	mov	w0, 0
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5355
	ldr	x0, [sp, 120]
	str	x0, [sp, 104]
	b	.L5356
.L5364:
	str	wzr, [sp, 48]
	ldr	x0, [sp, 104]
	ldrb	w0, [x0]
	cmp	w0, 48
	bne	.L5357
	ldr	x0, [sp, 104]
	add	x0, x0, 1
	ldrb	w0, [x0]
	cmp	w0, 120
	beq	.L5358
	ldr	x0, [sp, 104]
	add	x0, x0, 1
	ldrb	w0, [x0]
	cmp	w0, 88
	bne	.L5357
.L5358:
	ldr	x0, [sp, 104]
	add	x3, x0, 2
	add	x0, sp, 48
	mov	x2, x0
	adrp	x0, .LC896
	add	x1, x0, :lo12:.LC896
	mov	x0, x3
	bl	__isoc99_sscanf
	cmp	w0, 1
	beq	.L5359
.L5357:
	mov	w0, 1
	b	.L5360
.L5359:
	mov	w0, 0
.L5360:
	cmp	w0, 0
	bne	.L5371
	fmov	s0, -1.0e+0
	mov	w2, 0
	ldr	x1, [sp, 104]
	ldr	x0, [sp, 120]
	bl	_ZN5ImGui12CalcTextSizeEPKcS1_bf
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	ldr	x0, [sp, 104]
	add	x0, x0, 10
	fmov	s0, -1.0e+0
	mov	w2, 0
	mov	x1, x0
	ldr	x0, [sp, 104]
	bl	_ZN5ImGui12CalcTextSizeEPKcS1_bf
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 64]
	str	s0, [sp, 68]
	ldr	s0, [sp, 56]
	add	x0, sp, 72
	movi	v1.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 72
	add	x0, sp, 136
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 80]
	str	s0, [sp, 84]
	ldr	s1, [sp, 56]
	ldr	s0, [sp, 64]
	fadd	s0, s1, s0
	ldr	s1, [sp, 68]
	add	x0, sp, 88
	bl	_ZN6ImVec2C1Eff
	add	x1, sp, 88
	add	x0, sp, 136
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 96]
	str	s0, [sp, 100]
	add	x2, sp, 96
	add	x1, sp, 80
	add	x0, sp, 152
	bl	_ZN6ImRectC1ERK6ImVec2S2_
	ldr	x1, [sp, 112]
	mov	x0, 18432
	add	x2, x1, x0
	ldp	x0, x1, [sp, 152]
	stp	x0, x1, [x2, -208]
	ldr	x1, [sp, 112]
	mov	x0, 18224
	add	x3, x1, x0
	ldr	x1, [sp, 112]
	mov	x0, 18232
	add	x0, x1, x0
	mov	w2, 1
	mov	x1, x0
	mov	x0, x3
	bl	_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5363
	ldr	w0, [sp, 48]
	bl	_ZN5ImGui22DebugLocateItemOnHoverEj
.L5363:
	ldr	x0, [sp, 104]
	add	x0, x0, 10
	str	x0, [sp, 104]
	b	.L5362
.L5371:
	nop
.L5362:
	ldr	x0, [sp, 104]
	add	x0, x0, 1
	str	x0, [sp, 104]
.L5356:
	ldr	x0, [sp, 128]
	sub	x0, x0, #10
	ldr	x1, [sp, 104]
	cmp	x1, x0
	bcc	.L5364
.L5355:
	ldr	w0, [sp, 52]
	add	w0, w0, 1
	str	w0, [sp, 52]
.L5354:
	ldr	w0, [sp, 172]
	ldr	w1, [sp, 52]
	cmp	w1, w0
	blt	.L5365
.L5353:
	add	x0, sp, 168
	bl	_ZN16ImGuiListClipper4StepEv
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5366
	bl	_ZN5ImGui10GetScrollYEv
	fmov	s8, s0
	bl	_ZN5ImGui13GetScrollMaxYEv
	fcmpe	s8, s0
	cset	w0, ge
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5367
	fmov	s0, 1.0e+0
	bl	_ZN5ImGui14SetScrollHereYEf
.L5367:
	bl	_ZN5ImGui8EndChildEv
	bl	_ZN5ImGui3EndEv
.LEHE28:
	add	x0, sp, 168
	bl	_ZN16ImGuiListClipperD1Ev
	b	.L5344
.L5370:
	mov	x19, x0
	add	x0, sp, 168
	bl	_ZN16ImGuiListClipperD1Ev
	mov	x0, x19
.LEHB29:
	bl	_Unwind_Resume
.LEHE29:
.L5344:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 200]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5369
	bl	__stack_chk_fail
.L5369:
	ldr	d8, [sp, 24]
	ldr	x19, [sp, 16]
	ldp	x29, x30, [sp], 208
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 72
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2173:
	.section	.gcc_except_table
.LLSDA2173:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2173-.LLSDACSB2173
.LLSDACSB2173:
	.uleb128 .LEHB27-.LFB2173
	.uleb128 .LEHE27-.LEHB27
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB28-.LFB2173
	.uleb128 .LEHE28-.LEHB28
	.uleb128 .L5370-.LFB2173
	.uleb128 0
	.uleb128 .LEHB29-.LFB2173
	.uleb128 .LEHE29-.LEHB29
	.uleb128 0
	.uleb128 0
.LLSDACSE2173:
	.text
	.size	_ZN5ImGui18ShowDebugLogWindowEPb, .-_ZN5ImGui18ShowDebugLogWindowEPb
	.section	.rodata
	.align	2
	.type	_ZL23DEBUG_LOCATE_ITEM_COLOR, %object
	.size	_ZL23DEBUG_LOCATE_ITEM_COLOR, 4
_ZL23DEBUG_LOCATE_ITEM_COLOR:
	.word	-16711936
	.text
	.align	2
	.global	_ZN5ImGui15DebugLocateItemEj
	.type	_ZN5ImGui15DebugLocateItemEj, %function
_ZN5ImGui15DebugLocateItemEj:
.LFB2174:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	w0, [sp, 12]
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16384
	ldr	w1, [sp, 12]
	str	w1, [x0, 1804]
	ldr	x0, [sp, 24]
	add	x0, x0, 20480
	mov	w1, 2
	strb	w1, [x0, 3160]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2174:
	.size	_ZN5ImGui15DebugLocateItemEj, .-_ZN5ImGui15DebugLocateItemEj
	.align	2
	.global	_ZN5ImGui22DebugLocateItemOnHoverEj
	.type	_ZN5ImGui22DebugLocateItemOnHoverEj, %function
_ZN5ImGui22DebugLocateItemOnHoverEj:
.LFB2175:
	.cfi_startproc
	stp	x29, x30, [sp, -96]!
	.cfi_def_cfa_offset 96
	.cfi_offset 29, -96
	.cfi_offset 30, -88
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -80
	.cfi_offset 20, -72
	str	w0, [sp, 44]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 88]
	mov	x1, 0
	ldr	w0, [sp, 44]
	cmp	w0, 0
	beq	.L5374
	mov	w0, 160
	bl	_ZN5ImGui13IsItemHoveredEi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5375
.L5374:
	mov	w0, 1
	b	.L5376
.L5375:
	mov	w0, 0
.L5376:
	cmp	w0, 0
	bne	.L5380
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 80]
	ldr	w0, [sp, 44]
	bl	_ZN5ImGui15DebugLocateItemEj
	ldr	x0, [sp, 80]
	ldr	x0, [x0, 16032]
	bl	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow
	mov	x20, x0
	ldr	x1, [sp, 80]
	mov	x0, 18224
	add	x19, x1, x0
	add	x0, sp, 48
	fmov	s1, 3.0e+0
	fmov	s0, 3.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 48
	mov	x1, x0
	mov	x0, x19
	bl	_ZmiRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 56]
	str	s0, [sp, 60]
	ldr	x1, [sp, 80]
	mov	x0, 18232
	add	x19, x1, x0
	add	x0, sp, 64
	fmov	s1, 3.0e+0
	fmov	s0, 3.0e+0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 64
	mov	x1, x0
	mov	x0, x19
	bl	_ZplRK6ImVec2S1_
	fmov	s2, s0
	fmov	s0, s1
	str	s2, [sp, 72]
	str	s0, [sp, 76]
	add	x1, sp, 72
	add	x0, sp, 56
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711936
	mov	x2, x1
	mov	x1, x0
	mov	x0, x20
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	b	.L5373
.L5380:
	nop
.L5373:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 88]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5379
	bl	__stack_chk_fail
.L5379:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 96
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2175:
	.size	_ZN5ImGui22DebugLocateItemOnHoverEj, .-_ZN5ImGui22DebugLocateItemOnHoverEj
	.align	2
	.global	_ZN5ImGui34DebugLocateItemResolveWithLastItemEv
	.type	_ZN5ImGui34DebugLocateItemResolveWithLastItemEv, %function
_ZN5ImGui34DebugLocateItemResolveWithLastItemEv:
.LFB2176:
	.cfi_startproc
	stp	x29, x30, [sp, -144]!
	.cfi_def_cfa_offset 144
	.cfi_offset 29, -144
	.cfi_offset 30, -136
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 136]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	mov	x0, 18432
	add	x0, x1, x0
	sub	x1, x0, #220
	add	x0, sp, 72
	ldp	q0, q1, [x1]
	stp	q0, q1, [x0]
	ldr	q0, [x1, 32]
	str	q0, [x0, 32]
	ldr	q0, [x1, 44]
	str	q0, [x0, 44]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	wzr, [x0, 1804]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 16032]
	bl	_ZN5ImGui21GetForegroundDrawListEP11ImGuiWindow
	str	x0, [sp, 48]
	add	x0, sp, 4
	ldp	x0, x1, [x0, 80]
	stp	x0, x1, [sp, 56]
	add	x0, sp, 56
	fmov	s0, 3.0e+0
	bl	_ZN6ImRect6ExpandEf
	ldr	x0, [sp, 40]
	add	x0, x0, 3584
	ldr	x0, [x0, -4]
	str	x0, [sp, 24]
	ldr	s1, [sp, 24]
	ldr	s0, [sp, 56]
	fcmpe	s1, s0
	bmi	.L5395
	b	.L5399
.L5395:
	ldr	s0, [sp, 56]
	b	.L5384
.L5399:
	ldr	s1, [sp, 24]
	ldr	s0, [sp, 64]
	fcmpe	s1, s0
	bgt	.L5396
	b	.L5400
.L5396:
	ldr	s0, [sp, 64]
	b	.L5384
.L5400:
	ldr	s0, [sp, 24]
.L5384:
	ldr	s2, [sp, 28]
	ldr	s1, [sp, 60]
	fcmpe	s2, s1
	bmi	.L5397
	b	.L5401
.L5397:
	ldr	s1, [sp, 60]
	b	.L5390
.L5401:
	ldr	s2, [sp, 28]
	ldr	s1, [sp, 68]
	fcmpe	s2, s1
	bgt	.L5398
	b	.L5402
.L5398:
	ldr	s1, [sp, 68]
	b	.L5390
.L5402:
	ldr	s1, [sp, 28]
.L5390:
	add	x0, sp, 32
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 56
	add	x1, x0, 8
	add	x0, sp, 56
	fmov	s1, 1.0e+0
	mov	w4, 0
	movi	v0.2s, #0
	mov	w3, -16711936
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif
	add	x1, sp, 32
	add	x0, sp, 24
	fmov	s0, 1.0e+0
	mov	w3, -16711936
	mov	x2, x1
	mov	x1, x0
	ldr	x0, [sp, 48]
	bl	_ZN10ImDrawList7AddLineERK6ImVec2S2_jf
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 136]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5394
	bl	__stack_chk_fail
.L5394:
	ldp	x29, x30, [sp], 144
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2176:
	.size	_ZN5ImGui34DebugLocateItemResolveWithLastItemEv, .-_ZN5ImGui34DebugLocateItemResolveWithLastItemEv
	.section	.rodata
	.align	3
.LC897:
	.string	"HoveredId: 0x%08X"
	.align	3
.LC898:
	.string	"Press ESC to abort picking."
	.align	3
.LC900:
	.string	"Remap w/ Ctrl+Shift: click anywhere to select new mouse button."
	.align	3
.LC901:
	.string	"Click %s Button to break in debugger! (remap w/ Ctrl+Shift)"
	.text
	.align	2
	.type	_ZN5ImGuiL25UpdateDebugToolItemPickerEv, %function
_ZN5ImGuiL25UpdateDebugToolItemPickerEv:
.LFB2177:
	.cfi_startproc
	stp	x29, x30, [sp, -80]!
	.cfi_def_cfa_offset 80
	.cfi_offset 29, -80
	.cfi_offset 30, -72
	mov	x29, sp
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 72]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	str	wzr, [x0, 7260]
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3161]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5418
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16092]
	str	w0, [sp, 36]
	mov	w0, 7
	bl	_ZN5ImGui14SetMouseCursorEi
	mov	w1, 1
	mov	w0, 526
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5406
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	strb	wzr, [x0, 3161]
.L5406:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 3608]
	cmp	w0, 12288
	cset	w0, eq
	strb	w0, [sp, 31]
	ldrb	w0, [sp, 31]
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5407
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3162]
	mov	w1, 0
	bl	_ZN5ImGui14IsMouseClickedEib
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5407
	ldr	w0, [sp, 36]
	cmp	w0, 0
	beq	.L5407
	mov	w0, 1
	b	.L5408
.L5407:
	mov	w0, 0
.L5408:
	cmp	w0, 0
	beq	.L5409
	ldr	x0, [sp, 40]
	add	x0, x0, 16384
	ldr	w1, [sp, 36]
	str	w1, [x0, 7260]
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	strb	wzr, [x0, 3161]
.L5409:
	str	wzr, [sp, 32]
	b	.L5410
.L5414:
	ldrb	w0, [sp, 31]
	cmp	w0, 0
	beq	.L5411
	mov	w1, 0
	ldr	w0, [sp, 32]
	bl	_ZN5ImGui14IsMouseClickedEib
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5411
	mov	w0, 1
	b	.L5412
.L5411:
	mov	w0, 0
.L5412:
	cmp	w0, 0
	beq	.L5413
	ldr	w0, [sp, 32]
	and	w1, w0, 255
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	strb	w1, [x0, 3162]
.L5413:
	ldr	w0, [sp, 32]
	add	w0, w0, 1
	str	w0, [sp, 32]
.L5410:
	ldr	w0, [sp, 32]
	cmp	w0, 2
	ble	.L5414
	mov	w0, 13107
	movk	w0, 0x3f33, lsl 16
	fmov	s0, w0
	bl	_ZN5ImGui20SetNextWindowBgAlphaEf
	bl	_ZN5ImGui12BeginTooltipEv
	ldr	w1, [sp, 36]
	adrp	x0, .LC897
	add	x0, x0, :lo12:.LC897
	bl	_ZN5ImGui4TextEPKcz
	adrp	x0, .LC898
	add	x0, x0, :lo12:.LC898
	bl	_ZN5ImGui4TextEPKcz
	adrp	x0, .LC899
	add	x0, x0, :lo12:.LC899
	add	x2, sp, 48
	mov	x3, x0
	ldp	x0, x1, [x3]
	stp	x0, x1, [x2]
	ldr	x0, [x3, 16]
	str	x0, [x2, 16]
	ldrb	w0, [sp, 31]
	cmp	w0, 0
	beq	.L5415
	adrp	x0, .LC900
	add	x0, x0, :lo12:.LC900
	bl	_ZN5ImGui4TextEPKcz
	b	.L5416
.L5415:
	ldr	w0, [sp, 36]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	bl	_ZN5ImGui17GetStyleColorVec4Ei
	mov	x3, x0
	ldr	x0, [sp, 40]
	add	x0, x0, 20480
	ldrb	w0, [x0, 3162]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x1, sp, 48
	ldr	x0, [x1, x0]
	mov	x2, x0
	adrp	x0, .LC901
	add	x1, x0, :lo12:.LC901
	mov	x0, x3
	bl	_ZN5ImGui11TextColoredERK6ImVec4PKcz
.L5416:
	bl	_ZN5ImGui10EndTooltipEv
	b	.L5403
.L5418:
	nop
.L5403:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 72]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5417
	bl	__stack_chk_fail
.L5417:
	ldp	x29, x30, [sp], 80
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2177:
	.size	_ZN5ImGuiL25UpdateDebugToolItemPickerEv, .-_ZN5ImGuiL25UpdateDebugToolItemPickerEv
	.section	.rodata
	.align	3
.LC28:
	.string	"Left"
	.align	3
.LC29:
	.string	"Right"
	.align	3
.LC30:
	.string	"Middle"
	.data
	.align	3
.LC899:
	.xword	.LC28
	.xword	.LC29
	.xword	.LC30
	.text
	.align	2
	.type	_ZN5ImGuiL27UpdateDebugToolStackQueriesEv, %function
_ZN5ImGuiL27UpdateDebugToolStackQueriesEv:
.LFB2178:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 32]
	ldr	x1, [sp, 32]
	mov	x0, 23664
	add	x0, x1, x0
	str	x0, [sp, 40]
	ldr	x0, [sp, 32]
	str	wzr, [x0, 16084]
	ldr	x0, [sp, 32]
	ldr	w1, [x0, 15904]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w0, w0, 1
	cmp	w1, w0
	bne	.L5431
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16092]
	cmp	w0, 0
	beq	.L5422
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16092]
	b	.L5423
.L5422:
	ldr	x0, [sp, 32]
	ldr	w0, [x0, 16108]
.L5423:
	str	w0, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 8]
	ldr	w1, [sp, 24]
	cmp	w1, w0
	beq	.L5424
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 24]
	str	w1, [x0, 8]
	ldr	x0, [sp, 40]
	mov	w1, -1
	str	w1, [x0, 4]
	ldr	x0, [sp, 40]
	add	x0, x0, 16
	mov	w1, 0
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEi
.L5424:
	ldr	w0, [sp, 24]
	cmp	w0, 0
	beq	.L5432
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L5426
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bge	.L5426
	ldr	x0, [sp, 40]
	add	x0, x0, 16
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	ldrb	w0, [x0, 5]
	cmp	w0, 0
	bne	.L5427
	ldr	x0, [sp, 40]
	add	x0, x0, 16
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	ldrsb	w0, [x0, 4]
	cmp	w0, 2
	ble	.L5428
.L5427:
	mov	w0, 1
	b	.L5429
.L5428:
	mov	w0, 0
.L5429:
	cmp	w0, 0
	beq	.L5426
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	str	w1, [x0, 4]
.L5426:
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	str	w0, [sp, 28]
	ldr	w0, [sp, 28]
	cmn	w0, #1
	bne	.L5430
	ldr	x0, [sp, 32]
	ldr	w1, [sp, 24]
	str	w1, [x0, 16084]
.L5430:
	ldr	w0, [sp, 28]
	cmp	w0, 0
	blt	.L5419
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 28]
	cmp	w1, w0
	bge	.L5419
	ldr	x0, [sp, 40]
	add	x0, x0, 16
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	ldr	w1, [x0]
	ldr	x0, [sp, 32]
	str	w1, [x0, 16084]
	ldr	x0, [sp, 40]
	add	x0, x0, 16
	ldr	w1, [sp, 28]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	ldrsb	w1, [x0, 4]
	and	w1, w1, 255
	add	w1, w1, 1
	and	w1, w1, 255
	sxtb	w1, w1
	strb	w1, [x0, 4]
	b	.L5419
.L5431:
	nop
	b	.L5419
.L5432:
	nop
.L5419:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2178:
	.size	_ZN5ImGuiL27UpdateDebugToolStackQueriesEv, .-_ZN5ImGuiL27UpdateDebugToolStackQueriesEv
	.section	.rodata
	.align	3
.LC902:
	.string	"void ImGui::DebugHookIdInfo(ImGuiID, ImGuiDataType, const void*, const void*)"
	.align	3
.LC903:
	.string	"tool->StackLevel >= 0"
	.align	3
.LC904:
	.string	"info->ID == id && info->QueryFrameCount > 0"
	.align	3
.LC905:
	.string	"%.*s"
	.align	3
.LC906:
	.string	"(void*)0x%p"
	.align	3
.LC907:
	.string	"0x%08X [override]"
	.text
	.align	2
	.global	_ZN5ImGui15DebugHookIdInfoEjiPKvS1_
	.type	_ZN5ImGui15DebugHookIdInfoEjiPKvS1_, %function
_ZN5ImGui15DebugHookIdInfoEjiPKvS1_:
.LFB2179:
	.cfi_startproc
	stp	x29, x30, [sp, -176]!
	.cfi_def_cfa_offset 176
	.cfi_offset 29, -176
	.cfi_offset 30, -168
	mov	x29, sp
	stp	x19, x20, [sp, 16]
	.cfi_offset 19, -160
	.cfi_offset 20, -152
	str	w0, [sp, 60]
	str	w1, [sp, 56]
	str	x2, [sp, 48]
	str	x3, [sp, 40]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 168]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 16032]
	str	x0, [sp, 80]
	ldr	x1, [sp, 72]
	mov	x0, 23664
	add	x0, x1, x0
	str	x0, [sp, 88]
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 4]
	cmn	w0, #1
	bne	.L5434
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 4]
	add	w1, w0, 1
	ldr	x0, [sp, 88]
	str	w1, [x0, 4]
	ldr	x0, [sp, 88]
	add	x19, x0, 16
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 208]
	add	w20, w0, 1
	add	x0, sp, 104
	bl	_ZN19ImGuiStackLevelInfoC1Ev
	add	x0, sp, 104
	mov	x2, x0
	mov	w1, w20
	mov	x0, x19
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEiRKS0_
	str	wzr, [sp, 68]
	b	.L5435
.L5438:
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 208]
	ldr	w1, [sp, 68]
	cmp	w1, w0
	bge	.L5436
	ldr	x0, [sp, 80]
	add	x0, x0, 208
	ldr	w1, [sp, 68]
	bl	_ZN8ImVectorIjEixEi
	ldr	w19, [x0]
	b	.L5437
.L5436:
	ldr	w19, [sp, 60]
.L5437:
	ldr	x0, [sp, 88]
	add	x0, x0, 16
	ldr	w1, [sp, 68]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	str	w19, [x0]
	ldr	w0, [sp, 68]
	add	w0, w0, 1
	str	w0, [sp, 68]
.L5435:
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 208]
	ldr	w1, [sp, 68]
	cmp	w1, w0
	ble	.L5438
	b	.L5433
.L5434:
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	bge	.L5440
	adrp	x0, .LC902
	add	x3, x0, :lo12:.LC902
	mov	w2, 14076
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC903
	add	x0, x0, :lo12:.LC903
	bl	__assert_fail
.L5440:
	ldr	x0, [sp, 88]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 208]
	cmp	w1, w0
	bne	.L5455
	ldr	x0, [sp, 88]
	add	x2, x0, 16
	ldr	x0, [sp, 88]
	ldr	w0, [x0, 4]
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	str	x0, [sp, 96]
	ldr	x0, [sp, 96]
	ldr	w0, [x0]
	ldr	w1, [sp, 60]
	cmp	w1, w0
	bne	.L5442
	ldr	x0, [sp, 96]
	ldrsb	w0, [x0, 4]
	cmp	w0, 0
	bgt	.L5454
.L5442:
	adrp	x0, .LC902
	add	x3, x0, :lo12:.LC902
	mov	w2, 14080
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC904
	add	x0, x0, :lo12:.LC904
	bl	__assert_fail
.L5454:
	ldr	w0, [sp, 56]
	cmp	w0, 13
	beq	.L5444
	ldr	w0, [sp, 56]
	cmp	w0, 13
	bgt	.L5445
	ldr	w0, [sp, 56]
	cmp	w0, 12
	beq	.L5446
	ldr	w0, [sp, 56]
	cmp	w0, 12
	bgt	.L5445
	ldr	w0, [sp, 56]
	cmp	w0, 4
	beq	.L5447
	ldr	w0, [sp, 56]
	cmp	w0, 11
	beq	.L5448
	b	.L5445
.L5447:
	ldr	x0, [sp, 96]
	add	x4, x0, 7
	ldr	x0, [sp, 48]
	mov	w3, w0
	adrp	x0, .LC692
	add	x2, x0, :lo12:.LC692
	mov	x1, 57
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
	b	.L5449
.L5448:
	ldr	x0, [sp, 96]
	add	x19, x0, 7
	ldr	x0, [sp, 40]
	cmp	x0, 0
	beq	.L5450
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 48]
	sub	x0, x1, x0
	b	.L5451
.L5450:
	ldr	x0, [sp, 48]
	bl	strlen
.L5451:
	ldr	x4, [sp, 48]
	mov	w3, w0
	adrp	x0, .LC905
	add	x2, x0, :lo12:.LC905
	mov	x1, 57
	mov	x0, x19
	bl	_Z14ImFormatStringPcmPKcz
	b	.L5449
.L5446:
	ldr	x0, [sp, 96]
	add	x4, x0, 7
	ldr	x3, [sp, 48]
	adrp	x0, .LC906
	add	x2, x0, :lo12:.LC906
	mov	x1, 57
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
	b	.L5449
.L5444:
	ldr	x0, [sp, 96]
	ldrb	w0, [x0, 7]
	cmp	w0, 0
	bne	.L5456
	ldr	x0, [sp, 96]
	add	x4, x0, 7
	ldr	w3, [sp, 60]
	adrp	x0, .LC907
	add	x2, x0, :lo12:.LC907
	mov	x1, 57
	mov	x0, x4
	bl	_Z14ImFormatStringPcmPKcz
	b	.L5449
.L5445:
	adrp	x0, .LC902
	add	x3, x0, :lo12:.LC902
	mov	w2, 14099
	adrp	x0, .LC46
	add	x1, x0, :lo12:.LC46
	adrp	x0, .LC155
	add	x0, x0, :lo12:.LC155
	bl	__assert_fail
.L5449:
	ldr	x0, [sp, 96]
	mov	w1, 1
	strb	w1, [x0, 5]
	ldr	w0, [sp, 56]
	sxtb	w1, w0
	ldr	x0, [sp, 96]
	strb	w1, [x0, 6]
	b	.L5433
.L5455:
	nop
	b	.L5433
.L5456:
	nop
.L5433:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 168]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5453
	bl	__stack_chk_fail
.L5453:
	ldp	x19, x20, [sp, 16]
	ldp	x29, x30, [sp], 176
	.cfi_restore 30
	.cfi_restore 29
	.cfi_restore 19
	.cfi_restore 20
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2179:
	.size	_ZN5ImGui15DebugHookIdInfoEjiPKvS1_, .-_ZN5ImGui15DebugHookIdInfoEjiPKvS1_
	.section	.rodata
	.align	3
.LC908:
	.string	"\"%s\" [window]"
	.text
	.align	2
	.type	_ZL24StackToolFormatLevelInfoP14ImGuiStackToolibPcm, %function
_ZL24StackToolFormatLevelInfoP14ImGuiStackToolibPcm:
.LFB2180:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	strb	w2, [sp, 35]
	str	x3, [sp, 24]
	str	x4, [sp, 16]
	ldr	x0, [sp, 40]
	add	x0, x0, 16
	ldr	w1, [sp, 36]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	str	x0, [sp, 48]
	ldr	x0, [sp, 48]
	ldrb	w0, [x0, 7]
	cmp	w0, 0
	bne	.L5458
	ldr	w0, [sp, 36]
	cmp	w0, 0
	bne	.L5458
	ldr	x0, [sp, 48]
	ldr	w0, [x0]
	bl	_ZN5ImGui14FindWindowByIDEj
	b	.L5459
.L5458:
	mov	x0, 0
.L5459:
	str	x0, [sp, 56]
	ldr	x0, [sp, 56]
	cmp	x0, 0
	beq	.L5460
	ldrb	w0, [sp, 35]
	cmp	w0, 0
	beq	.L5461
	adrp	x0, .LC908
	add	x0, x0, :lo12:.LC908
	b	.L5462
.L5461:
	adrp	x0, .LC760
	add	x0, x0, :lo12:.LC760
.L5462:
	ldr	x1, [sp, 56]
	ldr	x1, [x1]
	mov	x3, x1
	mov	x2, x0
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_Z14ImFormatStringPcmPKcz
	b	.L5463
.L5460:
	ldr	x0, [sp, 48]
	ldrb	w0, [x0, 5]
	cmp	w0, 0
	beq	.L5464
	ldrb	w0, [sp, 35]
	cmp	w0, 0
	beq	.L5465
	ldr	x0, [sp, 48]
	ldrsb	w0, [x0, 6]
	cmp	w0, 11
	bne	.L5465
	adrp	x0, .LC756
	add	x0, x0, :lo12:.LC756
	b	.L5466
.L5465:
	adrp	x0, .LC760
	add	x0, x0, :lo12:.LC760
.L5466:
	ldr	x1, [sp, 48]
	add	x1, x1, 7
	mov	x3, x1
	mov	x2, x0
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_Z14ImFormatStringPcmPKcz
	b	.L5463
.L5464:
	ldr	x0, [sp, 40]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 16]
	cmp	w1, w0
	bge	.L5467
	ldr	x0, [sp, 24]
	strb	wzr, [x0]
	mov	w0, 0
	b	.L5463
.L5467:
	adrp	x0, .LC842
	add	x2, x0, :lo12:.LC842
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_Z14ImFormatStringPcmPKcz
	nop
.L5463:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2180:
	.size	_ZL24StackToolFormatLevelInfoP14ImGuiStackToolibPcm, .-_ZL24StackToolFormatLevelInfoP14ImGuiStackToolibPcm
	.section	.rodata
	.align	3
.LC909:
	.string	"Dear ImGui Stack Tool"
	.align	3
.LC910:
	.string	"HoveredId: 0x%08X, ActiveId:  0x%08X"
	.align	3
.LC911:
	.ascii	"Hover an item with the mouse to display elements of the ID S"
	.ascii	"tack lea"
	.string	"ding to the item's final ID.\nEach level of the stack correspond to a PushID() call.\nAll levels of the stack are hashed together to make the final ID of a widget (ID displayed at the bottom level of the stack).\nRead FAQ entry about the ID stack for details."
	.align	3
.LC912:
	.string	"Ctrl+C: copy path to clipboard"
	.align	3
.LC913:
	.string	"*COPIED*"
	.align	3
.LC914:
	.string	"##table"
	.align	3
.LC915:
	.string	"0xDDDDDDDD"
	.align	3
.LC916:
	.string	"Seed"
	.align	3
.LC917:
	.string	"PushID"
	.align	3
.LC918:
	.string	"Result"
	.align	3
.LC919:
	.string	"0x%08X"
	.text
	.align	2
	.global	_ZN5ImGui19ShowStackToolWindowEPb
	.type	_ZN5ImGui19ShowStackToolWindowEPb, %function
_ZN5ImGui19ShowStackToolWindowEPb:
.LFB2181:
	.cfi_startproc
	stp	x29, x30, [sp, -384]!
	.cfi_def_cfa_offset 384
	.cfi_offset 29, -384
	.cfi_offset 30, -376
	mov	x29, sp
	str	x0, [sp, 24]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 376]
	mov	x1, 0
	adrp	x0, GImGui
	add	x0, x0, :lo12:GImGui
	ldr	x0, [x0]
	str	x0, [sp, 72]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldr	w0, [x0, 1888]
	and	w0, w0, 2
	cmp	w0, 0
	bne	.L5469
	bl	_ZN5ImGui11GetFontSizeEv
	fmov	s1, s0
	fmov	s0, 8.0e+0
	fmul	s0, s1, s0
	add	x0, sp, 104
	fmov	s1, s0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 104
	mov	w1, 4
	bl	_ZN5ImGui17SetNextWindowSizeERK6ImVec2i
.L5469:
	mov	w2, 0
	ldr	x1, [sp, 24]
	adrp	x0, .LC909
	add	x0, x0, :lo12:.LC909
	bl	_ZN5ImGui5BeginEPKcPbi
	and	w0, w0, 255
	eor	w0, w0, 1
	and	w0, w0, 255
	cmp	w0, 0
	bne	.L5470
	bl	_ZN5ImGui16GetCurrentWindowEv
	ldrsh	w0, [x0, 162]
	cmp	w0, 1
	ble	.L5471
.L5470:
	mov	w0, 1
	b	.L5472
.L5471:
	mov	w0, 0
.L5472:
	cmp	w0, 0
	beq	.L5473
	bl	_ZN5ImGui3EndEv
	b	.L5468
.L5473:
	ldr	x1, [sp, 72]
	mov	x0, 23664
	add	x0, x1, x0
	str	x0, [sp, 80]
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 16092]
	str	w0, [sp, 48]
	ldr	x0, [sp, 72]
	ldr	w0, [x0, 16108]
	str	w0, [sp, 52]
	ldr	w2, [sp, 52]
	ldr	w1, [sp, 48]
	adrp	x0, .LC910
	add	x0, x0, :lo12:.LC910
	bl	_ZN5ImGui4TextEPKcz
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	adrp	x0, .LC911
	add	x0, x0, :lo12:.LC911
	bl	_ZL17MetricsHelpMarkerPKc
	ldr	x0, [sp, 72]
	ldr	d0, [x0, 15896]
	fcvt	s1, d0
	ldr	x0, [sp, 80]
	ldr	s0, [x0, 36]
	fsub	s0, s1, s0
	str	s0, [sp, 56]
	ldr	x0, [sp, 80]
	add	x0, x0, 32
	mov	x1, x0
	adrp	x0, .LC912
	add	x0, x0, :lo12:.LC912
	bl	_ZN5ImGui8CheckboxEPKcPb
	fmov	s1, -1.0e+0
	movi	v0.2s, #0
	bl	_ZN5ImGui8SameLineEff
	ldr	s0, [sp, 56]
	fcmpe	s0, #0.0
	bge	.L5499
	b	.L5475
.L5499:
	ldr	s1, [sp, 56]
	fmov	s0, 7.5e-1
	fcmpe	s1, s0
	bmi	.L5500
	b	.L5475
.L5500:
	fmov	s1, 2.5e-1
	ldr	s0, [sp, 56]
	bl	fmodf
	fmov	s1, s0
	fmov	s0, 1.25e-1
	fcmpe	s1, s0
	bmi	.L5501
	b	.L5475
.L5501:
	add	x0, sp, 104
	fmov	s3, 1.0e+0
	mov	w1, 39322
	movk	w1, 0x3e99, lsl 16
	fmov	s2, w1
	fmov	s1, 1.0e+0
	fmov	s0, 1.0e+0
	bl	_ZN6ImVec4C1Effff
	b	.L5479
.L5475:
	add	x0, sp, 104
	bl	_ZN6ImVec4C1Ev
.L5479:
	add	x2, sp, 104
	adrp	x0, .LC913
	add	x1, x0, :lo12:.LC913
	mov	x0, x2
	bl	_ZN5ImGui11TextColoredERK6ImVec4PKcz
	ldr	x0, [sp, 80]
	ldrb	w0, [x0, 32]
	cmp	w0, 0
	beq	.L5480
	mov	w0, 4096
	bl	_ZN5ImGui9IsKeyDownE8ImGuiKey
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5480
	mov	w1, 1
	mov	w0, 548
	bl	_ZN5ImGui12IsKeyPressedE8ImGuiKeyb
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5480
	mov	w0, 1
	b	.L5481
.L5480:
	mov	w0, 0
.L5481:
	cmp	w0, 0
	beq	.L5482
	ldr	x0, [sp, 72]
	ldr	d0, [x0, 15896]
	fcvt	s0, d0
	ldr	x0, [sp, 80]
	str	s0, [x0, 36]
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 23976]
	str	x0, [sp, 64]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldr	w0, [x0, 7584]
	sxtw	x0, w0
	ldr	x1, [sp, 64]
	add	x0, x1, x0
	str	x0, [sp, 88]
	str	wzr, [sp, 36]
	b	.L5483
.L5489:
	ldr	x0, [sp, 64]
	add	x1, x0, 1
	str	x1, [sp, 64]
	mov	w1, 47
	strb	w1, [x0]
	add	x0, sp, 120
	mov	x4, 256
	mov	x3, x0
	mov	w2, 0
	ldr	w1, [sp, 36]
	ldr	x0, [sp, 80]
	bl	_ZL24StackToolFormatLevelInfoP14ImGuiStackToolibPcm
	str	wzr, [sp, 40]
	b	.L5484
.L5487:
	ldrsw	x0, [sp, 40]
	add	x1, sp, 120
	ldrb	w0, [x1, x0]
	cmp	w0, 47
	bne	.L5485
	ldr	x0, [sp, 64]
	add	x1, x0, 1
	str	x1, [sp, 64]
	mov	w1, 92
	strb	w1, [x0]
.L5485:
	ldrsw	x0, [sp, 40]
	add	x1, sp, 120
	ldrb	w2, [x1, x0]
	ldr	x0, [sp, 64]
	add	x1, x0, 1
	str	x1, [sp, 64]
	mov	w1, w2
	strb	w1, [x0]
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
.L5484:
	ldrsw	x0, [sp, 40]
	add	x1, sp, 120
	ldrb	w0, [x1, x0]
	cmp	w0, 0
	beq	.L5486
	ldr	x0, [sp, 64]
	add	x0, x0, 2
	ldr	x1, [sp, 88]
	cmp	x1, x0
	bhi	.L5487
.L5486:
	ldr	w0, [sp, 36]
	add	w0, w0, 1
	str	w0, [sp, 36]
.L5483:
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	bge	.L5488
	ldr	x0, [sp, 64]
	add	x0, x0, 3
	ldr	x1, [sp, 88]
	cmp	x1, x0
	bhi	.L5489
.L5488:
	ldr	x0, [sp, 64]
	strb	wzr, [x0]
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 23976]
	bl	_ZN5ImGui16SetClipboardTextEPKc
.L5482:
	ldr	x0, [sp, 72]
	ldr	w1, [x0, 15904]
	ldr	x0, [sp, 80]
	str	w1, [x0]
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 16]
	cmp	w0, 0
	ble	.L5490
	add	x0, sp, 104
	movi	v1.2s, #0
	movi	v0.2s, #0
	bl	_ZN6ImVec2C1Eff
	add	x0, sp, 104
	movi	v0.2s, #0
	mov	x3, x0
	mov	w2, 1920
	mov	w1, 3
	adrp	x0, .LC914
	add	x0, x0, :lo12:.LC914
	bl	_ZN5ImGui10BeginTableEPKciiRK6ImVec2f
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L5490
	mov	w0, 1
	b	.L5491
.L5490:
	mov	w0, 0
.L5491:
	cmp	w0, 0
	beq	.L5492
	fmov	s0, -1.0e+0
	mov	w2, 0
	mov	x1, 0
	adrp	x0, .LC915
	add	x0, x0, :lo12:.LC915
	bl	_ZN5ImGui12CalcTextSizeEPKcS1_bf
	fmov	s2, s0
	fmov	s0, s1
	fmov	x0, d2
	fmov	w1, s0
	bfi	x0, x1, 32, 32
	sbfx	x0, x0, 0, 32
	fmov	s0, w0
	str	s0, [sp, 60]
	mov	w2, 0
	ldr	s0, [sp, 60]
	mov	w1, 16
	adrp	x0, .LC916
	add	x0, x0, :lo12:.LC916
	bl	_ZN5ImGui16TableSetupColumnEPKcifj
	mov	w2, 0
	movi	v0.2s, #0
	mov	w1, 8
	adrp	x0, .LC917
	add	x0, x0, :lo12:.LC917
	bl	_ZN5ImGui16TableSetupColumnEPKcifj
	mov	w2, 0
	ldr	s0, [sp, 60]
	mov	w1, 16
	adrp	x0, .LC918
	add	x0, x0, :lo12:.LC918
	bl	_ZN5ImGui16TableSetupColumnEPKcifj
	bl	_ZN5ImGui15TableHeadersRowEv
	str	wzr, [sp, 44]
	b	.L5493
.L5497:
	ldr	x0, [sp, 80]
	add	x0, x0, 16
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	str	x0, [sp, 96]
	bl	_ZN5ImGui15TableNextColumnEv
	ldr	w0, [sp, 44]
	cmp	w0, 0
	ble	.L5494
	ldr	x0, [sp, 80]
	add	x2, x0, 16
	ldr	w0, [sp, 44]
	sub	w0, w0, #1
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	ldr	w0, [x0]
	b	.L5495
.L5494:
	mov	w0, 0
.L5495:
	mov	w1, w0
	adrp	x0, .LC919
	add	x0, x0, :lo12:.LC919
	bl	_ZN5ImGui4TextEPKcz
	bl	_ZN5ImGui15TableNextColumnEv
	ldr	x0, [sp, 72]
	ldr	x1, [x0, 23976]
	ldr	x0, [sp, 72]
	add	x0, x0, 16384
	ldr	w0, [x0, 7584]
	sxtw	x0, w0
	mov	x4, x0
	mov	x3, x1
	mov	w2, 1
	ldr	w1, [sp, 44]
	ldr	x0, [sp, 80]
	bl	_ZL24StackToolFormatLevelInfoP14ImGuiStackToolibPcm
	ldr	x0, [sp, 72]
	ldr	x0, [x0, 23976]
	mov	x1, 0
	bl	_ZN5ImGui15TextUnformattedEPKcS1_
	bl	_ZN5ImGui15TableNextColumnEv
	ldr	x0, [sp, 96]
	ldr	w0, [x0]
	mov	w1, w0
	adrp	x0, .LC919
	add	x0, x0, :lo12:.LC919
	bl	_ZN5ImGui4TextEPKcz
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 16]
	sub	w0, w0, #1
	ldr	w1, [sp, 44]
	cmp	w1, w0
	bne	.L5496
	fmov	s0, 1.0e+0
	mov	w0, 24
	bl	_ZN5ImGui11GetColorU32Eif
	mov	w2, -1
	mov	w1, w0
	mov	w0, 3
	bl	_ZN5ImGui15TableSetBgColorEiji
.L5496:
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L5493:
	ldr	x0, [sp, 80]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	blt	.L5497
	bl	_ZN5ImGui8EndTableEv
.L5492:
	bl	_ZN5ImGui3EndEv
.L5468:
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 376]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5498
	bl	__stack_chk_fail
.L5498:
	ldp	x29, x30, [sp], 384
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2181:
	.size	_ZN5ImGui19ShowStackToolWindowEPb, .-_ZN5ImGui19ShowStackToolWindowEPb
	.section	.text._ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE5emptyEv,"axG",@progbits,_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE5emptyEv,comdat
	.align	2
	.weak	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE5emptyEv
	.type	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE5emptyEv, %function
_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE5emptyEv:
.LFB2182:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2182:
	.size	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE5emptyEv, .-_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE5emptyEv
	.section	.text._ZN8ImVectorIcEC2Ev,"axG",@progbits,_ZN8ImVectorIcEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIcEC2Ev
	.type	_ZN8ImVectorIcEC2Ev, %function
_ZN8ImVectorIcEC2Ev:
.LFB2184:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2184:
	.size	_ZN8ImVectorIcEC2Ev, .-_ZN8ImVectorIcEC2Ev
	.weak	_ZN8ImVectorIcEC1Ev
	.set	_ZN8ImVectorIcEC1Ev,_ZN8ImVectorIcEC2Ev
	.section	.text._ZN8ImVectorIcED2Ev,"axG",@progbits,_ZN8ImVectorIcED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIcED2Ev
	.type	_ZN8ImVectorIcED2Ev, %function
_ZN8ImVectorIcED2Ev:
.LFB2187:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2187
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5507
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5507:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2187:
	.section	.gcc_except_table
.LLSDA2187:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2187-.LLSDACSB2187
.LLSDACSB2187:
.LLSDACSE2187:
	.section	.text._ZN8ImVectorIcED2Ev,"axG",@progbits,_ZN8ImVectorIcED5Ev,comdat
	.size	_ZN8ImVectorIcED2Ev, .-_ZN8ImVectorIcED2Ev
	.weak	_ZN8ImVectorIcED1Ev
	.set	_ZN8ImVectorIcED1Ev,_ZN8ImVectorIcED2Ev
	.section	.rodata
	.align	3
.LC920:
	.string	"const T& ImVector<T>::front() const [with T = char]"
	.align	3
.LC921:
	.string	"Size > 0"
	.section	.text._ZNK8ImVectorIcE5frontEv,"axG",@progbits,_ZNK8ImVectorIcE5frontEv,comdat
	.align	2
	.weak	_ZNK8ImVectorIcE5frontEv
	.type	_ZNK8ImVectorIcE5frontEv, %function
_ZNK8ImVectorIcE5frontEv:
.LFB2189:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L5509
	adrp	x0, .LC920
	add	x3, x0, :lo12:.LC920
	mov	w2, 1796
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L5509:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2189:
	.size	_ZNK8ImVectorIcE5frontEv, .-_ZNK8ImVectorIcE5frontEv
	.section	.text._ZN8ImVectorIcE5clearEv,"axG",@progbits,_ZN8ImVectorIcE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIcE5clearEv
	.type	_ZN8ImVectorIcE5clearEv, %function
_ZN8ImVectorIcE5clearEv:
.LFB2191:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5513
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5513:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2191:
	.size	_ZN8ImVectorIcE5clearEv, .-_ZN8ImVectorIcE5clearEv
	.section	.text._ZN8ImVectorIcE7reserveEi,"axG",@progbits,_ZN8ImVectorIcE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIcE7reserveEi
	.type	_ZN8ImVectorIcE7reserveEi, %function
_ZN8ImVectorIcE7reserveEi:
.LFB2192:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5518
	ldrsw	x0, [sp, 20]
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5517
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5517:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L5514
.L5518:
	nop
.L5514:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2192:
	.size	_ZN8ImVectorIcE7reserveEi, .-_ZN8ImVectorIcE7reserveEi
	.section	.text._ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE5clearEv,"axG",@progbits,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE5clearEv
	.type	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE5clearEv, %function
_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE5clearEv:
.LFB2193:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5521
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5521:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2193:
	.size	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE5clearEv, .-_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE5clearEv
	.section	.text._ZN8ImVectorI13ImDrawChannelEC2Ev,"axG",@progbits,_ZN8ImVectorI13ImDrawChannelEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImDrawChannelEC2Ev
	.type	_ZN8ImVectorI13ImDrawChannelEC2Ev, %function
_ZN8ImVectorI13ImDrawChannelEC2Ev:
.LFB2195:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2195:
	.size	_ZN8ImVectorI13ImDrawChannelEC2Ev, .-_ZN8ImVectorI13ImDrawChannelEC2Ev
	.weak	_ZN8ImVectorI13ImDrawChannelEC1Ev
	.set	_ZN8ImVectorI13ImDrawChannelEC1Ev,_ZN8ImVectorI13ImDrawChannelEC2Ev
	.section	.text._ZN8ImVectorI13ImDrawChannelED2Ev,"axG",@progbits,_ZN8ImVectorI13ImDrawChannelED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImDrawChannelED2Ev
	.type	_ZN8ImVectorI13ImDrawChannelED2Ev, %function
_ZN8ImVectorI13ImDrawChannelED2Ev:
.LFB2198:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2198
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5525
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5525:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2198:
	.section	.gcc_except_table
.LLSDA2198:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2198-.LLSDACSB2198
.LLSDACSB2198:
.LLSDACSE2198:
	.section	.text._ZN8ImVectorI13ImDrawChannelED2Ev,"axG",@progbits,_ZN8ImVectorI13ImDrawChannelED5Ev,comdat
	.size	_ZN8ImVectorI13ImDrawChannelED2Ev, .-_ZN8ImVectorI13ImDrawChannelED2Ev
	.weak	_ZN8ImVectorI13ImDrawChannelED1Ev
	.set	_ZN8ImVectorI13ImDrawChannelED1Ev,_ZN8ImVectorI13ImDrawChannelED2Ev
	.section	.text._ZN8ImVectorI9ImDrawCmdEC2Ev,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdEC2Ev
	.type	_ZN8ImVectorI9ImDrawCmdEC2Ev, %function
_ZN8ImVectorI9ImDrawCmdEC2Ev:
.LFB2201:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2201:
	.size	_ZN8ImVectorI9ImDrawCmdEC2Ev, .-_ZN8ImVectorI9ImDrawCmdEC2Ev
	.weak	_ZN8ImVectorI9ImDrawCmdEC1Ev
	.set	_ZN8ImVectorI9ImDrawCmdEC1Ev,_ZN8ImVectorI9ImDrawCmdEC2Ev
	.section	.text._ZN8ImVectorI9ImDrawCmdED2Ev,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdED2Ev
	.type	_ZN8ImVectorI9ImDrawCmdED2Ev, %function
_ZN8ImVectorI9ImDrawCmdED2Ev:
.LFB2204:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2204
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5529
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5529:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2204:
	.section	.gcc_except_table
.LLSDA2204:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2204-.LLSDACSB2204
.LLSDACSB2204:
.LLSDACSE2204:
	.section	.text._ZN8ImVectorI9ImDrawCmdED2Ev,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdED5Ev,comdat
	.size	_ZN8ImVectorI9ImDrawCmdED2Ev, .-_ZN8ImVectorI9ImDrawCmdED2Ev
	.weak	_ZN8ImVectorI9ImDrawCmdED1Ev
	.set	_ZN8ImVectorI9ImDrawCmdED1Ev,_ZN8ImVectorI9ImDrawCmdED2Ev
	.section	.text._ZN8ImVectorItEC2Ev,"axG",@progbits,_ZN8ImVectorItEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorItEC2Ev
	.type	_ZN8ImVectorItEC2Ev, %function
_ZN8ImVectorItEC2Ev:
.LFB2207:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2207:
	.size	_ZN8ImVectorItEC2Ev, .-_ZN8ImVectorItEC2Ev
	.weak	_ZN8ImVectorItEC1Ev
	.set	_ZN8ImVectorItEC1Ev,_ZN8ImVectorItEC2Ev
	.section	.text._ZN8ImVectorItED2Ev,"axG",@progbits,_ZN8ImVectorItED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorItED2Ev
	.type	_ZN8ImVectorItED2Ev, %function
_ZN8ImVectorItED2Ev:
.LFB2210:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2210
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5533
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5533:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2210:
	.section	.gcc_except_table
.LLSDA2210:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2210-.LLSDACSB2210
.LLSDACSB2210:
.LLSDACSE2210:
	.section	.text._ZN8ImVectorItED2Ev,"axG",@progbits,_ZN8ImVectorItED5Ev,comdat
	.size	_ZN8ImVectorItED2Ev, .-_ZN8ImVectorItED2Ev
	.weak	_ZN8ImVectorItED1Ev
	.set	_ZN8ImVectorItED1Ev,_ZN8ImVectorItED2Ev
	.section	.text._ZN8ImVectorI10ImDrawVertEC2Ev,"axG",@progbits,_ZN8ImVectorI10ImDrawVertEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI10ImDrawVertEC2Ev
	.type	_ZN8ImVectorI10ImDrawVertEC2Ev, %function
_ZN8ImVectorI10ImDrawVertEC2Ev:
.LFB2213:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2213:
	.size	_ZN8ImVectorI10ImDrawVertEC2Ev, .-_ZN8ImVectorI10ImDrawVertEC2Ev
	.weak	_ZN8ImVectorI10ImDrawVertEC1Ev
	.set	_ZN8ImVectorI10ImDrawVertEC1Ev,_ZN8ImVectorI10ImDrawVertEC2Ev
	.section	.text._ZN8ImVectorI10ImDrawVertED2Ev,"axG",@progbits,_ZN8ImVectorI10ImDrawVertED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI10ImDrawVertED2Ev
	.type	_ZN8ImVectorI10ImDrawVertED2Ev, %function
_ZN8ImVectorI10ImDrawVertED2Ev:
.LFB2216:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2216
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5537
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5537:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2216:
	.section	.gcc_except_table
.LLSDA2216:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2216-.LLSDACSB2216
.LLSDACSB2216:
.LLSDACSE2216:
	.section	.text._ZN8ImVectorI10ImDrawVertED2Ev,"axG",@progbits,_ZN8ImVectorI10ImDrawVertED5Ev,comdat
	.size	_ZN8ImVectorI10ImDrawVertED2Ev, .-_ZN8ImVectorI10ImDrawVertED2Ev
	.weak	_ZN8ImVectorI10ImDrawVertED1Ev
	.set	_ZN8ImVectorI10ImDrawVertED1Ev,_ZN8ImVectorI10ImDrawVertED2Ev
	.section	.text._ZN8ImVectorI6ImVec4EC2Ev,"axG",@progbits,_ZN8ImVectorI6ImVec4EC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI6ImVec4EC2Ev
	.type	_ZN8ImVectorI6ImVec4EC2Ev, %function
_ZN8ImVectorI6ImVec4EC2Ev:
.LFB2219:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2219:
	.size	_ZN8ImVectorI6ImVec4EC2Ev, .-_ZN8ImVectorI6ImVec4EC2Ev
	.weak	_ZN8ImVectorI6ImVec4EC1Ev
	.set	_ZN8ImVectorI6ImVec4EC1Ev,_ZN8ImVectorI6ImVec4EC2Ev
	.section	.text._ZN8ImVectorI6ImVec4ED2Ev,"axG",@progbits,_ZN8ImVectorI6ImVec4ED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI6ImVec4ED2Ev
	.type	_ZN8ImVectorI6ImVec4ED2Ev, %function
_ZN8ImVectorI6ImVec4ED2Ev:
.LFB2222:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2222
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5541
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5541:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2222:
	.section	.gcc_except_table
.LLSDA2222:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2222-.LLSDACSB2222
.LLSDACSB2222:
.LLSDACSE2222:
	.section	.text._ZN8ImVectorI6ImVec4ED2Ev,"axG",@progbits,_ZN8ImVectorI6ImVec4ED5Ev,comdat
	.size	_ZN8ImVectorI6ImVec4ED2Ev, .-_ZN8ImVectorI6ImVec4ED2Ev
	.weak	_ZN8ImVectorI6ImVec4ED1Ev
	.set	_ZN8ImVectorI6ImVec4ED1Ev,_ZN8ImVectorI6ImVec4ED2Ev
	.section	.text._ZN8ImVectorIPvEC2Ev,"axG",@progbits,_ZN8ImVectorIPvEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIPvEC2Ev
	.type	_ZN8ImVectorIPvEC2Ev, %function
_ZN8ImVectorIPvEC2Ev:
.LFB2225:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2225:
	.size	_ZN8ImVectorIPvEC2Ev, .-_ZN8ImVectorIPvEC2Ev
	.weak	_ZN8ImVectorIPvEC1Ev
	.set	_ZN8ImVectorIPvEC1Ev,_ZN8ImVectorIPvEC2Ev
	.section	.text._ZN8ImVectorIPvED2Ev,"axG",@progbits,_ZN8ImVectorIPvED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIPvED2Ev
	.type	_ZN8ImVectorIPvED2Ev, %function
_ZN8ImVectorIPvED2Ev:
.LFB2228:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2228
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5545
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5545:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2228:
	.section	.gcc_except_table
.LLSDA2228:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2228-.LLSDACSB2228
.LLSDACSB2228:
.LLSDACSE2228:
	.section	.text._ZN8ImVectorIPvED2Ev,"axG",@progbits,_ZN8ImVectorIPvED5Ev,comdat
	.size	_ZN8ImVectorIPvED2Ev, .-_ZN8ImVectorIPvED2Ev
	.weak	_ZN8ImVectorIPvED1Ev
	.set	_ZN8ImVectorIPvED1Ev,_ZN8ImVectorIPvED2Ev
	.section	.text._ZN8ImVectorI6ImVec2EC2Ev,"axG",@progbits,_ZN8ImVectorI6ImVec2EC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI6ImVec2EC2Ev
	.type	_ZN8ImVectorI6ImVec2EC2Ev, %function
_ZN8ImVectorI6ImVec2EC2Ev:
.LFB2231:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2231:
	.size	_ZN8ImVectorI6ImVec2EC2Ev, .-_ZN8ImVectorI6ImVec2EC2Ev
	.weak	_ZN8ImVectorI6ImVec2EC1Ev
	.set	_ZN8ImVectorI6ImVec2EC1Ev,_ZN8ImVectorI6ImVec2EC2Ev
	.section	.text._ZN8ImVectorI6ImVec2ED2Ev,"axG",@progbits,_ZN8ImVectorI6ImVec2ED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI6ImVec2ED2Ev
	.type	_ZN8ImVectorI6ImVec2ED2Ev, %function
_ZN8ImVectorI6ImVec2ED2Ev:
.LFB2234:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2234
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5549
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5549:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2234:
	.section	.gcc_except_table
.LLSDA2234:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2234-.LLSDACSB2234
.LLSDACSB2234:
.LLSDACSE2234:
	.section	.text._ZN8ImVectorI6ImVec2ED2Ev,"axG",@progbits,_ZN8ImVectorI6ImVec2ED5Ev,comdat
	.size	_ZN8ImVectorI6ImVec2ED2Ev, .-_ZN8ImVectorI6ImVec2ED2Ev
	.weak	_ZN8ImVectorI6ImVec2ED1Ev
	.set	_ZN8ImVectorI6ImVec2ED1Ev,_ZN8ImVectorI6ImVec2ED2Ev
	.section	.text._ZN8ImVectorI6ImVec2E9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI6ImVec2E9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI6ImVec2E9push_backERKS0_
	.type	_ZN8ImVectorI6ImVec2E9push_backERKS0_, %function
_ZN8ImVectorI6ImVec2E9push_backERKS0_:
.LFB2237:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5551
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI6ImVec2E14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI6ImVec2E7reserveEi
.L5551:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldr	x1, [x1]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2237:
	.size	_ZN8ImVectorI6ImVec2E9push_backERKS0_, .-_ZN8ImVectorI6ImVec2E9push_backERKS0_
	.section	.text._ZN8ImVectorIjEC2Ev,"axG",@progbits,_ZN8ImVectorIjEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIjEC2Ev
	.type	_ZN8ImVectorIjEC2Ev, %function
_ZN8ImVectorIjEC2Ev:
.LFB2239:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2239:
	.size	_ZN8ImVectorIjEC2Ev, .-_ZN8ImVectorIjEC2Ev
	.weak	_ZN8ImVectorIjEC1Ev
	.set	_ZN8ImVectorIjEC1Ev,_ZN8ImVectorIjEC2Ev
	.section	.text._ZN8ImVectorIjED2Ev,"axG",@progbits,_ZN8ImVectorIjED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIjED2Ev
	.type	_ZN8ImVectorIjED2Ev, %function
_ZN8ImVectorIjED2Ev:
.LFB2242:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2242
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5555
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5555:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2242:
	.section	.gcc_except_table
.LLSDA2242:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2242-.LLSDACSB2242
.LLSDACSB2242:
.LLSDACSE2242:
	.section	.text._ZN8ImVectorIjED2Ev,"axG",@progbits,_ZN8ImVectorIjED5Ev,comdat
	.size	_ZN8ImVectorIjED2Ev, .-_ZN8ImVectorIjED2Ev
	.weak	_ZN8ImVectorIjED1Ev
	.set	_ZN8ImVectorIjED1Ev,_ZN8ImVectorIjED2Ev
	.section	.text._ZN8ImVectorIjE6resizeEi,"axG",@progbits,_ZN8ImVectorIjE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorIjE6resizeEi
	.type	_ZN8ImVectorIjE6resizeEi, %function
_ZN8ImVectorIjE6resizeEi:
.LFB2244:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5557
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIjE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIjE7reserveEi
.L5557:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2244:
	.size	_ZN8ImVectorIjE6resizeEi, .-_ZN8ImVectorIjE6resizeEi
	.section	.rodata
	.align	3
.LC922:
	.string	"T& ImVector<T>::operator[](int) [with T = unsigned int]"
	.align	3
.LC923:
	.string	"i >= 0 && i < Size"
	.section	.text._ZN8ImVectorIjEixEi,"axG",@progbits,_ZN8ImVectorIjEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIjEixEi
	.type	_ZN8ImVectorIjEixEi, %function
_ZN8ImVectorIjEixEi:
.LFB2246:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5559
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5562
.L5559:
	adrp	x0, .LC922
	add	x3, x0, :lo12:.LC922
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5562:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2246:
	.size	_ZN8ImVectorIjEixEi, .-_ZN8ImVectorIjEixEi
	.text
	.align	2
	.type	_Z5ImMinIfET_S0_S0_, %function
_Z5ImMinIfET_S0_S0_:
.LFB2300:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	str	s1, [sp, 8]
	ldr	s1, [sp, 12]
	ldr	s0, [sp, 8]
	fcmpe	s1, s0
	bmi	.L5568
	b	.L5569
.L5568:
	ldr	s0, [sp, 12]
	b	.L5567
.L5569:
	ldr	s0, [sp, 8]
.L5567:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2300:
	.size	_Z5ImMinIfET_S0_S0_, .-_Z5ImMinIfET_S0_S0_
	.align	2
	.type	_Z5ImMaxIfET_S0_S0_, %function
_Z5ImMaxIfET_S0_S0_:
.LFB2301:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	str	s1, [sp, 8]
	ldr	s1, [sp, 12]
	ldr	s0, [sp, 8]
	fcmpe	s1, s0
	bge	.L5575
	b	.L5576
.L5575:
	ldr	s0, [sp, 12]
	b	.L5574
.L5576:
	ldr	s0, [sp, 8]
.L5574:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2301:
	.size	_Z5ImMaxIfET_S0_S0_, .-_Z5ImMaxIfET_S0_S0_
	.section	.text._ZN8ImVectorIjE5clearEv,"axG",@progbits,_ZN8ImVectorIjE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIjE5clearEv
	.type	_ZN8ImVectorIjE5clearEv, %function
_ZN8ImVectorIjE5clearEv:
.LFB2302:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5579
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5579:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2302:
	.size	_ZN8ImVectorIjE5clearEv, .-_ZN8ImVectorIjE5clearEv
	.section	.text._ZN8ImVectorIiE5clearEv,"axG",@progbits,_ZN8ImVectorIiE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIiE5clearEv
	.type	_ZN8ImVectorIiE5clearEv, %function
_ZN8ImVectorIiE5clearEv:
.LFB2303:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5582
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5582:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2303:
	.size	_ZN8ImVectorIiE5clearEv, .-_ZN8ImVectorIiE5clearEv
	.section	.rodata
	.align	3
.LC924:
	.string	"T& ImVector<T>::operator[](int) [with T = int]"
	.section	.text._ZN8ImVectorIiEixEi,"axG",@progbits,_ZN8ImVectorIiEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIiEixEi
	.type	_ZN8ImVectorIiEixEi, %function
_ZN8ImVectorIiEixEi:
.LFB2304:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5584
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5587
.L5584:
	adrp	x0, .LC924
	add	x3, x0, :lo12:.LC924
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5587:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2304:
	.size	_ZN8ImVectorIiEixEi, .-_ZN8ImVectorIiEixEi
	.section	.text._ZN8ImVectorIP10ImDrawListE6resizeEi,"axG",@progbits,_ZN8ImVectorIP10ImDrawListE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP10ImDrawListE6resizeEi
	.type	_ZN8ImVectorIP10ImDrawListE6resizeEi, %function
_ZN8ImVectorIP10ImDrawListE6resizeEi:
.LFB2305:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5589
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP10ImDrawListE7reserveEi
.L5589:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2305:
	.size	_ZN8ImVectorIP10ImDrawListE6resizeEi, .-_ZN8ImVectorIP10ImDrawListE6resizeEi
	.section	.rodata
	.align	3
.LC925:
	.string	"T& ImVector<T>::operator[](int) [with T = char]"
	.section	.text._ZN8ImVectorIcEixEi,"axG",@progbits,_ZN8ImVectorIcEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIcEixEi
	.type	_ZN8ImVectorIcEixEi, %function
_ZN8ImVectorIcEixEi:
.LFB2308:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5591
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5594
.L5591:
	adrp	x0, .LC925
	add	x3, x0, :lo12:.LC925
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5594:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2308:
	.size	_ZN8ImVectorIcEixEi, .-_ZN8ImVectorIcEixEi
	.section	.text._ZN8ImVectorItE5clearEv,"axG",@progbits,_ZN8ImVectorItE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorItE5clearEv
	.type	_ZN8ImVectorItE5clearEv, %function
_ZN8ImVectorItE5clearEv:
.LFB2309:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5597
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5597:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2309:
	.size	_ZN8ImVectorItE5clearEv, .-_ZN8ImVectorItE5clearEv
	.text
	.align	2
	.type	_Z5ImMinIiET_S0_S0_, %function
_Z5ImMinIiET_S0_S0_:
.LFB2310:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	str	w1, [sp, 8]
	ldr	w1, [sp, 12]
	ldr	w0, [sp, 8]
	cmp	w1, w0
	bge	.L5599
	ldr	w0, [sp, 12]
	b	.L5601
.L5599:
	ldr	w0, [sp, 8]
.L5601:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2310:
	.size	_Z5ImMinIiET_S0_S0_, .-_Z5ImMinIiET_S0_S0_
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataEC2Ev,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataEC2Ev
	.type	_ZN8ImVectorI19ImGuiKeyRoutingDataEC2Ev, %function
_ZN8ImVectorI19ImGuiKeyRoutingDataEC2Ev:
.LFB2312:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2312:
	.size	_ZN8ImVectorI19ImGuiKeyRoutingDataEC2Ev, .-_ZN8ImVectorI19ImGuiKeyRoutingDataEC2Ev
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataEC1Ev
	.set	_ZN8ImVectorI19ImGuiKeyRoutingDataEC1Ev,_ZN8ImVectorI19ImGuiKeyRoutingDataEC2Ev
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataED2Ev,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataED2Ev
	.type	_ZN8ImVectorI19ImGuiKeyRoutingDataED2Ev, %function
_ZN8ImVectorI19ImGuiKeyRoutingDataED2Ev:
.LFB2315:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2315
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5605
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5605:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2315:
	.section	.gcc_except_table
.LLSDA2315:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2315-.LLSDACSB2315
.LLSDACSB2315:
.LLSDACSE2315:
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataED2Ev,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataED5Ev,comdat
	.size	_ZN8ImVectorI19ImGuiKeyRoutingDataED2Ev, .-_ZN8ImVectorI19ImGuiKeyRoutingDataED2Ev
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataED1Ev
	.set	_ZN8ImVectorI19ImGuiKeyRoutingDataED1Ev,_ZN8ImVectorI19ImGuiKeyRoutingDataED2Ev
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv
	.type	_ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv, %function
_ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv:
.LFB2317:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5608
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5608:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2317:
	.size	_ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv, .-_ZN8ImVectorI19ImGuiKeyRoutingDataE5clearEv
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeEC2Ev,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeEC2Ev
	.type	_ZN8ImVectorI21ImGuiListClipperRangeEC2Ev, %function
_ZN8ImVectorI21ImGuiListClipperRangeEC2Ev:
.LFB2319:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2319:
	.size	_ZN8ImVectorI21ImGuiListClipperRangeEC2Ev, .-_ZN8ImVectorI21ImGuiListClipperRangeEC2Ev
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeEC1Ev
	.set	_ZN8ImVectorI21ImGuiListClipperRangeEC1Ev,_ZN8ImVectorI21ImGuiListClipperRangeEC2Ev
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeED2Ev,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeED2Ev
	.type	_ZN8ImVectorI21ImGuiListClipperRangeED2Ev, %function
_ZN8ImVectorI21ImGuiListClipperRangeED2Ev:
.LFB2322:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2322
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5612
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5612:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2322:
	.section	.gcc_except_table
.LLSDA2322:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2322-.LLSDACSB2322
.LLSDACSB2322:
.LLSDACSE2322:
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeED2Ev,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeED5Ev,comdat
	.size	_ZN8ImVectorI21ImGuiListClipperRangeED2Ev, .-_ZN8ImVectorI21ImGuiListClipperRangeED2Ev
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeED1Ev
	.set	_ZN8ImVectorI21ImGuiListClipperRangeED1Ev,_ZN8ImVectorI21ImGuiListClipperRangeED2Ev
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeE6resizeEi,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeE6resizeEi
	.type	_ZN8ImVectorI21ImGuiListClipperRangeE6resizeEi, %function
_ZN8ImVectorI21ImGuiListClipperRangeE6resizeEi:
.LFB2324:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5614
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi
.L5614:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2324:
	.size	_ZN8ImVectorI21ImGuiListClipperRangeE6resizeEi, .-_ZN8ImVectorI21ImGuiListClipperRangeE6resizeEi
	.section	.text._ZN8ImVectorI18ImGuiOldColumnDataED2Ev,"axG",@progbits,_ZN8ImVectorI18ImGuiOldColumnDataED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI18ImGuiOldColumnDataED2Ev
	.type	_ZN8ImVectorI18ImGuiOldColumnDataED2Ev, %function
_ZN8ImVectorI18ImGuiOldColumnDataED2Ev:
.LFB2329:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2329
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5617
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5617:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2329:
	.section	.gcc_except_table
.LLSDA2329:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2329-.LLSDACSB2329
.LLSDACSB2329:
.LLSDACSE2329:
	.section	.text._ZN8ImVectorI18ImGuiOldColumnDataED2Ev,"axG",@progbits,_ZN8ImVectorI18ImGuiOldColumnDataED5Ev,comdat
	.size	_ZN8ImVectorI18ImGuiOldColumnDataED2Ev, .-_ZN8ImVectorI18ImGuiOldColumnDataED2Ev
	.weak	_ZN8ImVectorI18ImGuiOldColumnDataED1Ev
	.set	_ZN8ImVectorI18ImGuiOldColumnDataED1Ev,_ZN8ImVectorI18ImGuiOldColumnDataED2Ev
	.section	.text._ZN8ImVectorIP10ImDrawListEC2Ev,"axG",@progbits,_ZN8ImVectorIP10ImDrawListEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIP10ImDrawListEC2Ev
	.type	_ZN8ImVectorIP10ImDrawListEC2Ev, %function
_ZN8ImVectorIP10ImDrawListEC2Ev:
.LFB2332:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2332:
	.size	_ZN8ImVectorIP10ImDrawListEC2Ev, .-_ZN8ImVectorIP10ImDrawListEC2Ev
	.weak	_ZN8ImVectorIP10ImDrawListEC1Ev
	.set	_ZN8ImVectorIP10ImDrawListEC1Ev,_ZN8ImVectorIP10ImDrawListEC2Ev
	.section	.text._ZN8ImVectorIP10ImDrawListED2Ev,"axG",@progbits,_ZN8ImVectorIP10ImDrawListED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIP10ImDrawListED2Ev
	.type	_ZN8ImVectorIP10ImDrawListED2Ev, %function
_ZN8ImVectorIP10ImDrawListED2Ev:
.LFB2335:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2335
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5621
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5621:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2335:
	.section	.gcc_except_table
.LLSDA2335:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2335-.LLSDACSB2335
.LLSDACSB2335:
.LLSDACSE2335:
	.section	.text._ZN8ImVectorIP10ImDrawListED2Ev,"axG",@progbits,_ZN8ImVectorIP10ImDrawListED5Ev,comdat
	.size	_ZN8ImVectorIP10ImDrawListED2Ev, .-_ZN8ImVectorIP10ImDrawListED2Ev
	.weak	_ZN8ImVectorIP10ImDrawListED1Ev
	.set	_ZN8ImVectorIP10ImDrawListED1Ev,_ZN8ImVectorIP10ImDrawListED2Ev
	.section	.text._Z9IM_DELETEI10ImDrawListEvPT_,"axG",@progbits,_Z9IM_DELETEI10ImDrawListEvPT_,comdat
	.align	2
	.weak	_Z9IM_DELETEI10ImDrawListEvPT_
	.type	_Z9IM_DELETEI10ImDrawListEvPT_, %function
_Z9IM_DELETEI10ImDrawListEvPT_:
.LFB2337:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L5624
	ldr	x0, [sp, 24]
	bl	_ZN10ImDrawListD1Ev
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui7MemFreeEPv
.L5624:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2337:
	.size	_Z9IM_DELETEI10ImDrawListEvPT_, .-_Z9IM_DELETEI10ImDrawListEvPT_
	.section	.text._ZN8ImVectorI19ImGuiStackLevelInfoEC2Ev,"axG",@progbits,_ZN8ImVectorI19ImGuiStackLevelInfoEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiStackLevelInfoEC2Ev
	.type	_ZN8ImVectorI19ImGuiStackLevelInfoEC2Ev, %function
_ZN8ImVectorI19ImGuiStackLevelInfoEC2Ev:
.LFB2339:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2339:
	.size	_ZN8ImVectorI19ImGuiStackLevelInfoEC2Ev, .-_ZN8ImVectorI19ImGuiStackLevelInfoEC2Ev
	.weak	_ZN8ImVectorI19ImGuiStackLevelInfoEC1Ev
	.set	_ZN8ImVectorI19ImGuiStackLevelInfoEC1Ev,_ZN8ImVectorI19ImGuiStackLevelInfoEC2Ev
	.section	.text._ZN8ImVectorI19ImGuiStackLevelInfoED2Ev,"axG",@progbits,_ZN8ImVectorI19ImGuiStackLevelInfoED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiStackLevelInfoED2Ev
	.type	_ZN8ImVectorI19ImGuiStackLevelInfoED2Ev, %function
_ZN8ImVectorI19ImGuiStackLevelInfoED2Ev:
.LFB2342:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2342
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5628
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5628:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2342:
	.section	.gcc_except_table
.LLSDA2342:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2342-.LLSDACSB2342
.LLSDACSB2342:
.LLSDACSE2342:
	.section	.text._ZN8ImVectorI19ImGuiStackLevelInfoED2Ev,"axG",@progbits,_ZN8ImVectorI19ImGuiStackLevelInfoED5Ev,comdat
	.size	_ZN8ImVectorI19ImGuiStackLevelInfoED2Ev, .-_ZN8ImVectorI19ImGuiStackLevelInfoED2Ev
	.weak	_ZN8ImVectorI19ImGuiStackLevelInfoED1Ev
	.set	_ZN8ImVectorI19ImGuiStackLevelInfoED1Ev,_ZN8ImVectorI19ImGuiStackLevelInfoED2Ev
	.section	.text._ZN8ImVectorI15ImGuiInputEventEC2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiInputEventEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiInputEventEC2Ev
	.type	_ZN8ImVectorI15ImGuiInputEventEC2Ev, %function
_ZN8ImVectorI15ImGuiInputEventEC2Ev:
.LFB2345:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2345:
	.size	_ZN8ImVectorI15ImGuiInputEventEC2Ev, .-_ZN8ImVectorI15ImGuiInputEventEC2Ev
	.weak	_ZN8ImVectorI15ImGuiInputEventEC1Ev
	.set	_ZN8ImVectorI15ImGuiInputEventEC1Ev,_ZN8ImVectorI15ImGuiInputEventEC2Ev
	.section	.text._ZN8ImVectorI15ImGuiInputEventED2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiInputEventED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiInputEventED2Ev
	.type	_ZN8ImVectorI15ImGuiInputEventED2Ev, %function
_ZN8ImVectorI15ImGuiInputEventED2Ev:
.LFB2348:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2348
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5632
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5632:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2348:
	.section	.gcc_except_table
.LLSDA2348:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2348-.LLSDACSB2348
.LLSDACSB2348:
.LLSDACSE2348:
	.section	.text._ZN8ImVectorI15ImGuiInputEventED2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiInputEventED5Ev,comdat
	.size	_ZN8ImVectorI15ImGuiInputEventED2Ev, .-_ZN8ImVectorI15ImGuiInputEventED2Ev
	.weak	_ZN8ImVectorI15ImGuiInputEventED1Ev
	.set	_ZN8ImVectorI15ImGuiInputEventED1Ev,_ZN8ImVectorI15ImGuiInputEventED2Ev
	.section	.text._ZN8ImVectorIP11ImGuiWindowEC2Ev,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowEC2Ev
	.type	_ZN8ImVectorIP11ImGuiWindowEC2Ev, %function
_ZN8ImVectorIP11ImGuiWindowEC2Ev:
.LFB2351:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2351:
	.size	_ZN8ImVectorIP11ImGuiWindowEC2Ev, .-_ZN8ImVectorIP11ImGuiWindowEC2Ev
	.weak	_ZN8ImVectorIP11ImGuiWindowEC1Ev
	.set	_ZN8ImVectorIP11ImGuiWindowEC1Ev,_ZN8ImVectorIP11ImGuiWindowEC2Ev
	.section	.text._ZN8ImVectorIP11ImGuiWindowED2Ev,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowED2Ev
	.type	_ZN8ImVectorIP11ImGuiWindowED2Ev, %function
_ZN8ImVectorIP11ImGuiWindowED2Ev:
.LFB2354:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2354
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5636
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5636:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2354:
	.section	.gcc_except_table
.LLSDA2354:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2354-.LLSDACSB2354
.LLSDACSB2354:
.LLSDACSE2354:
	.section	.text._ZN8ImVectorIP11ImGuiWindowED2Ev,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowED5Ev,comdat
	.size	_ZN8ImVectorIP11ImGuiWindowED2Ev, .-_ZN8ImVectorIP11ImGuiWindowED2Ev
	.weak	_ZN8ImVectorIP11ImGuiWindowED1Ev
	.set	_ZN8ImVectorIP11ImGuiWindowED1Ev,_ZN8ImVectorIP11ImGuiWindowED2Ev
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataEC2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataEC2Ev
	.type	_ZN8ImVectorI20ImGuiWindowStackDataEC2Ev, %function
_ZN8ImVectorI20ImGuiWindowStackDataEC2Ev:
.LFB2357:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2357:
	.size	_ZN8ImVectorI20ImGuiWindowStackDataEC2Ev, .-_ZN8ImVectorI20ImGuiWindowStackDataEC2Ev
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataEC1Ev
	.set	_ZN8ImVectorI20ImGuiWindowStackDataEC1Ev,_ZN8ImVectorI20ImGuiWindowStackDataEC2Ev
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataED2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataED2Ev
	.type	_ZN8ImVectorI20ImGuiWindowStackDataED2Ev, %function
_ZN8ImVectorI20ImGuiWindowStackDataED2Ev:
.LFB2360:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2360
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5640
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5640:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2360:
	.section	.gcc_except_table
.LLSDA2360:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2360-.LLSDACSB2360
.LLSDACSB2360:
.LLSDACSE2360:
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataED2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataED5Ev,comdat
	.size	_ZN8ImVectorI20ImGuiWindowStackDataED2Ev, .-_ZN8ImVectorI20ImGuiWindowStackDataED2Ev
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataED1Ev
	.set	_ZN8ImVectorI20ImGuiWindowStackDataED1Ev,_ZN8ImVectorI20ImGuiWindowStackDataED2Ev
	.section	.text._ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC2Ev,"axG",@progbits,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC2Ev
	.type	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC2Ev, %function
_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC2Ev:
.LFB2363:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2363:
	.size	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC2Ev, .-_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC2Ev
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC1Ev
	.set	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC1Ev,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEC2Ev
	.section	.text._ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED2Ev,"axG",@progbits,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED2Ev
	.type	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED2Ev, %function
_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED2Ev:
.LFB2366:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2366
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5644
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5644:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2366:
	.section	.gcc_except_table
.LLSDA2366:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2366-.LLSDACSB2366
.LLSDACSB2366:
.LLSDACSE2366:
	.section	.text._ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED2Ev,"axG",@progbits,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED5Ev,comdat
	.size	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED2Ev, .-_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED2Ev
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED1Ev
	.set	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED1Ev,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEED2Ev
	.section	.text._ZN8ImVectorI13ImGuiColorModEC2Ev,"axG",@progbits,_ZN8ImVectorI13ImGuiColorModEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiColorModEC2Ev
	.type	_ZN8ImVectorI13ImGuiColorModEC2Ev, %function
_ZN8ImVectorI13ImGuiColorModEC2Ev:
.LFB2369:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2369:
	.size	_ZN8ImVectorI13ImGuiColorModEC2Ev, .-_ZN8ImVectorI13ImGuiColorModEC2Ev
	.weak	_ZN8ImVectorI13ImGuiColorModEC1Ev
	.set	_ZN8ImVectorI13ImGuiColorModEC1Ev,_ZN8ImVectorI13ImGuiColorModEC2Ev
	.section	.text._ZN8ImVectorI13ImGuiColorModED2Ev,"axG",@progbits,_ZN8ImVectorI13ImGuiColorModED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiColorModED2Ev
	.type	_ZN8ImVectorI13ImGuiColorModED2Ev, %function
_ZN8ImVectorI13ImGuiColorModED2Ev:
.LFB2372:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2372
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5648
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5648:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2372:
	.section	.gcc_except_table
.LLSDA2372:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2372-.LLSDACSB2372
.LLSDACSB2372:
.LLSDACSE2372:
	.section	.text._ZN8ImVectorI13ImGuiColorModED2Ev,"axG",@progbits,_ZN8ImVectorI13ImGuiColorModED5Ev,comdat
	.size	_ZN8ImVectorI13ImGuiColorModED2Ev, .-_ZN8ImVectorI13ImGuiColorModED2Ev
	.weak	_ZN8ImVectorI13ImGuiColorModED1Ev
	.set	_ZN8ImVectorI13ImGuiColorModED1Ev,_ZN8ImVectorI13ImGuiColorModED2Ev
	.section	.text._ZN8ImVectorI13ImGuiStyleModEC2Ev,"axG",@progbits,_ZN8ImVectorI13ImGuiStyleModEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiStyleModEC2Ev
	.type	_ZN8ImVectorI13ImGuiStyleModEC2Ev, %function
_ZN8ImVectorI13ImGuiStyleModEC2Ev:
.LFB2375:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2375:
	.size	_ZN8ImVectorI13ImGuiStyleModEC2Ev, .-_ZN8ImVectorI13ImGuiStyleModEC2Ev
	.weak	_ZN8ImVectorI13ImGuiStyleModEC1Ev
	.set	_ZN8ImVectorI13ImGuiStyleModEC1Ev,_ZN8ImVectorI13ImGuiStyleModEC2Ev
	.section	.text._ZN8ImVectorI13ImGuiStyleModED2Ev,"axG",@progbits,_ZN8ImVectorI13ImGuiStyleModED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiStyleModED2Ev
	.type	_ZN8ImVectorI13ImGuiStyleModED2Ev, %function
_ZN8ImVectorI13ImGuiStyleModED2Ev:
.LFB2378:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2378
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5652
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5652:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2378:
	.section	.gcc_except_table
.LLSDA2378:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2378-.LLSDACSB2378
.LLSDACSB2378:
.LLSDACSE2378:
	.section	.text._ZN8ImVectorI13ImGuiStyleModED2Ev,"axG",@progbits,_ZN8ImVectorI13ImGuiStyleModED5Ev,comdat
	.size	_ZN8ImVectorI13ImGuiStyleModED2Ev, .-_ZN8ImVectorI13ImGuiStyleModED2Ev
	.weak	_ZN8ImVectorI13ImGuiStyleModED1Ev
	.set	_ZN8ImVectorI13ImGuiStyleModED1Ev,_ZN8ImVectorI13ImGuiStyleModED2Ev
	.section	.text._ZN8ImVectorIP6ImFontEC2Ev,"axG",@progbits,_ZN8ImVectorIP6ImFontEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIP6ImFontEC2Ev
	.type	_ZN8ImVectorIP6ImFontEC2Ev, %function
_ZN8ImVectorIP6ImFontEC2Ev:
.LFB2381:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2381:
	.size	_ZN8ImVectorIP6ImFontEC2Ev, .-_ZN8ImVectorIP6ImFontEC2Ev
	.weak	_ZN8ImVectorIP6ImFontEC1Ev
	.set	_ZN8ImVectorIP6ImFontEC1Ev,_ZN8ImVectorIP6ImFontEC2Ev
	.section	.text._ZN8ImVectorIP6ImFontED2Ev,"axG",@progbits,_ZN8ImVectorIP6ImFontED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIP6ImFontED2Ev
	.type	_ZN8ImVectorIP6ImFontED2Ev, %function
_ZN8ImVectorIP6ImFontED2Ev:
.LFB2384:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2384
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5656
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5656:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2384:
	.section	.gcc_except_table
.LLSDA2384:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2384-.LLSDACSB2384
.LLSDACSB2384:
.LLSDACSE2384:
	.section	.text._ZN8ImVectorIP6ImFontED2Ev,"axG",@progbits,_ZN8ImVectorIP6ImFontED5Ev,comdat
	.size	_ZN8ImVectorIP6ImFontED2Ev, .-_ZN8ImVectorIP6ImFontED2Ev
	.weak	_ZN8ImVectorIP6ImFontED1Ev
	.set	_ZN8ImVectorIP6ImFontED1Ev,_ZN8ImVectorIP6ImFontED2Ev
	.section	.text._ZN8ImVectorIiEC2Ev,"axG",@progbits,_ZN8ImVectorIiEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIiEC2Ev
	.type	_ZN8ImVectorIiEC2Ev, %function
_ZN8ImVectorIiEC2Ev:
.LFB2387:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2387:
	.size	_ZN8ImVectorIiEC2Ev, .-_ZN8ImVectorIiEC2Ev
	.weak	_ZN8ImVectorIiEC1Ev
	.set	_ZN8ImVectorIiEC1Ev,_ZN8ImVectorIiEC2Ev
	.section	.text._ZN8ImVectorIiED2Ev,"axG",@progbits,_ZN8ImVectorIiED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIiED2Ev
	.type	_ZN8ImVectorIiED2Ev, %function
_ZN8ImVectorIiED2Ev:
.LFB2390:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2390
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5660
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5660:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2390:
	.section	.gcc_except_table
.LLSDA2390:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2390-.LLSDACSB2390
.LLSDACSB2390:
.LLSDACSE2390:
	.section	.text._ZN8ImVectorIiED2Ev,"axG",@progbits,_ZN8ImVectorIiED5Ev,comdat
	.size	_ZN8ImVectorIiED2Ev, .-_ZN8ImVectorIiED2Ev
	.weak	_ZN8ImVectorIiED1Ev
	.set	_ZN8ImVectorIiED1Ev,_ZN8ImVectorIiED2Ev
	.section	.text._ZN8ImVectorI14ImGuiGroupDataEC2Ev,"axG",@progbits,_ZN8ImVectorI14ImGuiGroupDataEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiGroupDataEC2Ev
	.type	_ZN8ImVectorI14ImGuiGroupDataEC2Ev, %function
_ZN8ImVectorI14ImGuiGroupDataEC2Ev:
.LFB2393:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2393:
	.size	_ZN8ImVectorI14ImGuiGroupDataEC2Ev, .-_ZN8ImVectorI14ImGuiGroupDataEC2Ev
	.weak	_ZN8ImVectorI14ImGuiGroupDataEC1Ev
	.set	_ZN8ImVectorI14ImGuiGroupDataEC1Ev,_ZN8ImVectorI14ImGuiGroupDataEC2Ev
	.section	.text._ZN8ImVectorI14ImGuiGroupDataED2Ev,"axG",@progbits,_ZN8ImVectorI14ImGuiGroupDataED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiGroupDataED2Ev
	.type	_ZN8ImVectorI14ImGuiGroupDataED2Ev, %function
_ZN8ImVectorI14ImGuiGroupDataED2Ev:
.LFB2396:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2396
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5664
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5664:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2396:
	.section	.gcc_except_table
.LLSDA2396:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2396-.LLSDACSB2396
.LLSDACSB2396:
.LLSDACSE2396:
	.section	.text._ZN8ImVectorI14ImGuiGroupDataED2Ev,"axG",@progbits,_ZN8ImVectorI14ImGuiGroupDataED5Ev,comdat
	.size	_ZN8ImVectorI14ImGuiGroupDataED2Ev, .-_ZN8ImVectorI14ImGuiGroupDataED2Ev
	.weak	_ZN8ImVectorI14ImGuiGroupDataED1Ev
	.set	_ZN8ImVectorI14ImGuiGroupDataED1Ev,_ZN8ImVectorI14ImGuiGroupDataED2Ev
	.section	.text._ZN8ImVectorI14ImGuiPopupDataEC2Ev,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataEC2Ev
	.type	_ZN8ImVectorI14ImGuiPopupDataEC2Ev, %function
_ZN8ImVectorI14ImGuiPopupDataEC2Ev:
.LFB2399:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2399:
	.size	_ZN8ImVectorI14ImGuiPopupDataEC2Ev, .-_ZN8ImVectorI14ImGuiPopupDataEC2Ev
	.weak	_ZN8ImVectorI14ImGuiPopupDataEC1Ev
	.set	_ZN8ImVectorI14ImGuiPopupDataEC1Ev,_ZN8ImVectorI14ImGuiPopupDataEC2Ev
	.section	.text._ZN8ImVectorI14ImGuiPopupDataED2Ev,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataED2Ev
	.type	_ZN8ImVectorI14ImGuiPopupDataED2Ev, %function
_ZN8ImVectorI14ImGuiPopupDataED2Ev:
.LFB2402:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2402
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5668
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5668:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2402:
	.section	.gcc_except_table
.LLSDA2402:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2402-.LLSDACSB2402
.LLSDACSB2402:
.LLSDACSE2402:
	.section	.text._ZN8ImVectorI14ImGuiPopupDataED2Ev,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataED5Ev,comdat
	.size	_ZN8ImVectorI14ImGuiPopupDataED2Ev, .-_ZN8ImVectorI14ImGuiPopupDataED2Ev
	.weak	_ZN8ImVectorI14ImGuiPopupDataED1Ev
	.set	_ZN8ImVectorI14ImGuiPopupDataED1Ev,_ZN8ImVectorI14ImGuiPopupDataED2Ev
	.section	.text._ZN8ImVectorIP14ImGuiViewportPEC2Ev,"axG",@progbits,_ZN8ImVectorIP14ImGuiViewportPEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIP14ImGuiViewportPEC2Ev
	.type	_ZN8ImVectorIP14ImGuiViewportPEC2Ev, %function
_ZN8ImVectorIP14ImGuiViewportPEC2Ev:
.LFB2405:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2405:
	.size	_ZN8ImVectorIP14ImGuiViewportPEC2Ev, .-_ZN8ImVectorIP14ImGuiViewportPEC2Ev
	.weak	_ZN8ImVectorIP14ImGuiViewportPEC1Ev
	.set	_ZN8ImVectorIP14ImGuiViewportPEC1Ev,_ZN8ImVectorIP14ImGuiViewportPEC2Ev
	.section	.text._ZN8ImVectorIP14ImGuiViewportPED2Ev,"axG",@progbits,_ZN8ImVectorIP14ImGuiViewportPED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIP14ImGuiViewportPED2Ev
	.type	_ZN8ImVectorIP14ImGuiViewportPED2Ev, %function
_ZN8ImVectorIP14ImGuiViewportPED2Ev:
.LFB2408:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2408
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5672
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5672:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2408:
	.section	.gcc_except_table
.LLSDA2408:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2408-.LLSDACSB2408
.LLSDACSB2408:
.LLSDACSE2408:
	.section	.text._ZN8ImVectorIP14ImGuiViewportPED2Ev,"axG",@progbits,_ZN8ImVectorIP14ImGuiViewportPED5Ev,comdat
	.size	_ZN8ImVectorIP14ImGuiViewportPED2Ev, .-_ZN8ImVectorIP14ImGuiViewportPED2Ev
	.weak	_ZN8ImVectorIP14ImGuiViewportPED1Ev
	.set	_ZN8ImVectorIP14ImGuiViewportPED1Ev,_ZN8ImVectorIP14ImGuiViewportPED2Ev
	.section	.text._ZN8ImVectorIhEC2Ev,"axG",@progbits,_ZN8ImVectorIhEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIhEC2Ev
	.type	_ZN8ImVectorIhEC2Ev, %function
_ZN8ImVectorIhEC2Ev:
.LFB2411:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2411:
	.size	_ZN8ImVectorIhEC2Ev, .-_ZN8ImVectorIhEC2Ev
	.weak	_ZN8ImVectorIhEC1Ev
	.set	_ZN8ImVectorIhEC1Ev,_ZN8ImVectorIhEC2Ev
	.section	.text._ZN8ImVectorIhED2Ev,"axG",@progbits,_ZN8ImVectorIhED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIhED2Ev
	.type	_ZN8ImVectorIhED2Ev, %function
_ZN8ImVectorIhED2Ev:
.LFB2414:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2414
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5676
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5676:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2414:
	.section	.gcc_except_table
.LLSDA2414:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2414-.LLSDACSB2414
.LLSDACSB2414:
.LLSDACSE2414:
	.section	.text._ZN8ImVectorIhED2Ev,"axG",@progbits,_ZN8ImVectorIhED5Ev,comdat
	.size	_ZN8ImVectorIhED2Ev, .-_ZN8ImVectorIhED2Ev
	.weak	_ZN8ImVectorIhED1Ev
	.set	_ZN8ImVectorIhED1Ev,_ZN8ImVectorIhED2Ev
	.section	.text._ZN8ImVectorI20ImGuiListClipperDataEC2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiListClipperDataEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiListClipperDataEC2Ev
	.type	_ZN8ImVectorI20ImGuiListClipperDataEC2Ev, %function
_ZN8ImVectorI20ImGuiListClipperDataEC2Ev:
.LFB2417:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2417:
	.size	_ZN8ImVectorI20ImGuiListClipperDataEC2Ev, .-_ZN8ImVectorI20ImGuiListClipperDataEC2Ev
	.weak	_ZN8ImVectorI20ImGuiListClipperDataEC1Ev
	.set	_ZN8ImVectorI20ImGuiListClipperDataEC1Ev,_ZN8ImVectorI20ImGuiListClipperDataEC2Ev
	.section	.text._ZN8ImVectorI20ImGuiListClipperDataED2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiListClipperDataED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiListClipperDataED2Ev
	.type	_ZN8ImVectorI20ImGuiListClipperDataED2Ev, %function
_ZN8ImVectorI20ImGuiListClipperDataED2Ev:
.LFB2420:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2420
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5680
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5680:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2420:
	.section	.gcc_except_table
.LLSDA2420:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2420-.LLSDACSB2420
.LLSDACSB2420:
.LLSDACSE2420:
	.section	.text._ZN8ImVectorI20ImGuiListClipperDataED2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiListClipperDataED5Ev,comdat
	.size	_ZN8ImVectorI20ImGuiListClipperDataED2Ev, .-_ZN8ImVectorI20ImGuiListClipperDataED2Ev
	.weak	_ZN8ImVectorI20ImGuiListClipperDataED1Ev
	.set	_ZN8ImVectorI20ImGuiListClipperDataED1Ev,_ZN8ImVectorI20ImGuiListClipperDataED2Ev
	.section	.text._ZN8ImVectorI18ImGuiTableTempDataEC2Ev,"axG",@progbits,_ZN8ImVectorI18ImGuiTableTempDataEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI18ImGuiTableTempDataEC2Ev
	.type	_ZN8ImVectorI18ImGuiTableTempDataEC2Ev, %function
_ZN8ImVectorI18ImGuiTableTempDataEC2Ev:
.LFB2423:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2423:
	.size	_ZN8ImVectorI18ImGuiTableTempDataEC2Ev, .-_ZN8ImVectorI18ImGuiTableTempDataEC2Ev
	.weak	_ZN8ImVectorI18ImGuiTableTempDataEC1Ev
	.set	_ZN8ImVectorI18ImGuiTableTempDataEC1Ev,_ZN8ImVectorI18ImGuiTableTempDataEC2Ev
	.section	.text._ZN8ImVectorI18ImGuiTableTempDataED2Ev,"axG",@progbits,_ZN8ImVectorI18ImGuiTableTempDataED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI18ImGuiTableTempDataED2Ev
	.type	_ZN8ImVectorI18ImGuiTableTempDataED2Ev, %function
_ZN8ImVectorI18ImGuiTableTempDataED2Ev:
.LFB2426:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2426
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5684
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5684:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2426:
	.section	.gcc_except_table
.LLSDA2426:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2426-.LLSDACSB2426
.LLSDACSB2426:
.LLSDACSE2426:
	.section	.text._ZN8ImVectorI18ImGuiTableTempDataED2Ev,"axG",@progbits,_ZN8ImVectorI18ImGuiTableTempDataED5Ev,comdat
	.size	_ZN8ImVectorI18ImGuiTableTempDataED2Ev, .-_ZN8ImVectorI18ImGuiTableTempDataED2Ev
	.weak	_ZN8ImVectorI18ImGuiTableTempDataED1Ev
	.set	_ZN8ImVectorI18ImGuiTableTempDataED1Ev,_ZN8ImVectorI18ImGuiTableTempDataED2Ev
	.section	.text._ZN6ImPoolI10ImGuiTableEC2Ev,"axG",@progbits,_ZN6ImPoolI10ImGuiTableEC5Ev,comdat
	.align	2
	.weak	_ZN6ImPoolI10ImGuiTableEC2Ev
	.type	_ZN6ImPoolI10ImGuiTableEC2Ev, %function
_ZN6ImPoolI10ImGuiTableEC2Ev:
.LFB2429:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI10ImGuiTableEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN12ImGuiStorageC1Ev
	ldr	x0, [sp, 24]
	str	wzr, [x0, 36]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 36]
	ldr	x0, [sp, 24]
	str	w1, [x0, 32]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2429:
	.size	_ZN6ImPoolI10ImGuiTableEC2Ev, .-_ZN6ImPoolI10ImGuiTableEC2Ev
	.weak	_ZN6ImPoolI10ImGuiTableEC1Ev
	.set	_ZN6ImPoolI10ImGuiTableEC1Ev,_ZN6ImPoolI10ImGuiTableEC2Ev
	.section	.text._ZN6ImPoolI10ImGuiTableED2Ev,"axG",@progbits,_ZN6ImPoolI10ImGuiTableED5Ev,comdat
	.align	2
	.weak	_ZN6ImPoolI10ImGuiTableED2Ev
	.type	_ZN6ImPoolI10ImGuiTableED2Ev, %function
_ZN6ImPoolI10ImGuiTableED2Ev:
.LFB2432:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2432
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN6ImPoolI10ImGuiTableE5ClearEv
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN12ImGuiStorageD1Ev
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI10ImGuiTableED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2432:
	.section	.gcc_except_table
.LLSDA2432:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2432-.LLSDACSB2432
.LLSDACSB2432:
.LLSDACSE2432:
	.section	.text._ZN6ImPoolI10ImGuiTableED2Ev,"axG",@progbits,_ZN6ImPoolI10ImGuiTableED5Ev,comdat
	.size	_ZN6ImPoolI10ImGuiTableED2Ev, .-_ZN6ImPoolI10ImGuiTableED2Ev
	.weak	_ZN6ImPoolI10ImGuiTableED1Ev
	.set	_ZN6ImPoolI10ImGuiTableED1Ev,_ZN6ImPoolI10ImGuiTableED2Ev
	.section	.text._ZN8ImVectorIfEC2Ev,"axG",@progbits,_ZN8ImVectorIfEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIfEC2Ev
	.type	_ZN8ImVectorIfEC2Ev, %function
_ZN8ImVectorIfEC2Ev:
.LFB2435:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2435:
	.size	_ZN8ImVectorIfEC2Ev, .-_ZN8ImVectorIfEC2Ev
	.weak	_ZN8ImVectorIfEC1Ev
	.set	_ZN8ImVectorIfEC1Ev,_ZN8ImVectorIfEC2Ev
	.section	.text._ZN8ImVectorIfED2Ev,"axG",@progbits,_ZN8ImVectorIfED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIfED2Ev
	.type	_ZN8ImVectorIfED2Ev, %function
_ZN8ImVectorIfED2Ev:
.LFB2438:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2438
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5690
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5690:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2438:
	.section	.gcc_except_table
.LLSDA2438:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2438-.LLSDACSB2438
.LLSDACSB2438:
.LLSDACSE2438:
	.section	.text._ZN8ImVectorIfED2Ev,"axG",@progbits,_ZN8ImVectorIfED5Ev,comdat
	.size	_ZN8ImVectorIfED2Ev, .-_ZN8ImVectorIfED2Ev
	.weak	_ZN8ImVectorIfED1Ev
	.set	_ZN8ImVectorIfED1Ev,_ZN8ImVectorIfED2Ev
	.section	.text._ZN6ImPoolI11ImGuiTabBarEC2Ev,"axG",@progbits,_ZN6ImPoolI11ImGuiTabBarEC5Ev,comdat
	.align	2
	.weak	_ZN6ImPoolI11ImGuiTabBarEC2Ev
	.type	_ZN6ImPoolI11ImGuiTabBarEC2Ev, %function
_ZN6ImPoolI11ImGuiTabBarEC2Ev:
.LFB2441:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI11ImGuiTabBarEC1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN12ImGuiStorageC1Ev
	ldr	x0, [sp, 24]
	str	wzr, [x0, 36]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 36]
	ldr	x0, [sp, 24]
	str	w1, [x0, 32]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2441:
	.size	_ZN6ImPoolI11ImGuiTabBarEC2Ev, .-_ZN6ImPoolI11ImGuiTabBarEC2Ev
	.weak	_ZN6ImPoolI11ImGuiTabBarEC1Ev
	.set	_ZN6ImPoolI11ImGuiTabBarEC1Ev,_ZN6ImPoolI11ImGuiTabBarEC2Ev
	.section	.text._ZN6ImPoolI11ImGuiTabBarED2Ev,"axG",@progbits,_ZN6ImPoolI11ImGuiTabBarED5Ev,comdat
	.align	2
	.weak	_ZN6ImPoolI11ImGuiTabBarED2Ev
	.type	_ZN6ImPoolI11ImGuiTabBarED2Ev, %function
_ZN6ImPoolI11ImGuiTabBarED2Ev:
.LFB2444:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2444
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN6ImPoolI11ImGuiTabBarE5ClearEv
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN12ImGuiStorageD1Ev
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI11ImGuiTabBarED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2444:
	.section	.gcc_except_table
.LLSDA2444:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2444-.LLSDACSB2444
.LLSDACSB2444:
.LLSDACSE2444:
	.section	.text._ZN6ImPoolI11ImGuiTabBarED2Ev,"axG",@progbits,_ZN6ImPoolI11ImGuiTabBarED5Ev,comdat
	.size	_ZN6ImPoolI11ImGuiTabBarED2Ev, .-_ZN6ImPoolI11ImGuiTabBarED2Ev
	.weak	_ZN6ImPoolI11ImGuiTabBarED1Ev
	.set	_ZN6ImPoolI11ImGuiTabBarED1Ev,_ZN6ImPoolI11ImGuiTabBarED2Ev
	.section	.text._ZN8ImVectorI15ImGuiPtrOrIndexEC2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiPtrOrIndexEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiPtrOrIndexEC2Ev
	.type	_ZN8ImVectorI15ImGuiPtrOrIndexEC2Ev, %function
_ZN8ImVectorI15ImGuiPtrOrIndexEC2Ev:
.LFB2447:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2447:
	.size	_ZN8ImVectorI15ImGuiPtrOrIndexEC2Ev, .-_ZN8ImVectorI15ImGuiPtrOrIndexEC2Ev
	.weak	_ZN8ImVectorI15ImGuiPtrOrIndexEC1Ev
	.set	_ZN8ImVectorI15ImGuiPtrOrIndexEC1Ev,_ZN8ImVectorI15ImGuiPtrOrIndexEC2Ev
	.section	.text._ZN8ImVectorI15ImGuiPtrOrIndexED2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiPtrOrIndexED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiPtrOrIndexED2Ev
	.type	_ZN8ImVectorI15ImGuiPtrOrIndexED2Ev, %function
_ZN8ImVectorI15ImGuiPtrOrIndexED2Ev:
.LFB2450:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2450
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5696
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5696:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2450:
	.section	.gcc_except_table
.LLSDA2450:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2450-.LLSDACSB2450
.LLSDACSB2450:
.LLSDACSE2450:
	.section	.text._ZN8ImVectorI15ImGuiPtrOrIndexED2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiPtrOrIndexED5Ev,comdat
	.size	_ZN8ImVectorI15ImGuiPtrOrIndexED2Ev, .-_ZN8ImVectorI15ImGuiPtrOrIndexED2Ev
	.weak	_ZN8ImVectorI15ImGuiPtrOrIndexED1Ev
	.set	_ZN8ImVectorI15ImGuiPtrOrIndexED1Ev,_ZN8ImVectorI15ImGuiPtrOrIndexED2Ev
	.section	.text._ZN8ImVectorI20ImGuiShrinkWidthItemEC2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiShrinkWidthItemEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiShrinkWidthItemEC2Ev
	.type	_ZN8ImVectorI20ImGuiShrinkWidthItemEC2Ev, %function
_ZN8ImVectorI20ImGuiShrinkWidthItemEC2Ev:
.LFB2453:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2453:
	.size	_ZN8ImVectorI20ImGuiShrinkWidthItemEC2Ev, .-_ZN8ImVectorI20ImGuiShrinkWidthItemEC2Ev
	.weak	_ZN8ImVectorI20ImGuiShrinkWidthItemEC1Ev
	.set	_ZN8ImVectorI20ImGuiShrinkWidthItemEC1Ev,_ZN8ImVectorI20ImGuiShrinkWidthItemEC2Ev
	.section	.text._ZN8ImVectorI20ImGuiShrinkWidthItemED2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiShrinkWidthItemED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiShrinkWidthItemED2Ev
	.type	_ZN8ImVectorI20ImGuiShrinkWidthItemED2Ev, %function
_ZN8ImVectorI20ImGuiShrinkWidthItemED2Ev:
.LFB2456:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2456
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5700
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5700:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2456:
	.section	.gcc_except_table
.LLSDA2456:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2456-.LLSDACSB2456
.LLSDACSB2456:
.LLSDACSE2456:
	.section	.text._ZN8ImVectorI20ImGuiShrinkWidthItemED2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiShrinkWidthItemED5Ev,comdat
	.size	_ZN8ImVectorI20ImGuiShrinkWidthItemED2Ev, .-_ZN8ImVectorI20ImGuiShrinkWidthItemED2Ev
	.weak	_ZN8ImVectorI20ImGuiShrinkWidthItemED1Ev
	.set	_ZN8ImVectorI20ImGuiShrinkWidthItemED1Ev,_ZN8ImVectorI20ImGuiShrinkWidthItemED2Ev
	.section	.text._ZN8ImVectorI20ImGuiSettingsHandlerEC2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiSettingsHandlerEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerEC2Ev
	.type	_ZN8ImVectorI20ImGuiSettingsHandlerEC2Ev, %function
_ZN8ImVectorI20ImGuiSettingsHandlerEC2Ev:
.LFB2459:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2459:
	.size	_ZN8ImVectorI20ImGuiSettingsHandlerEC2Ev, .-_ZN8ImVectorI20ImGuiSettingsHandlerEC2Ev
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerEC1Ev
	.set	_ZN8ImVectorI20ImGuiSettingsHandlerEC1Ev,_ZN8ImVectorI20ImGuiSettingsHandlerEC2Ev
	.section	.text._ZN8ImVectorI20ImGuiSettingsHandlerED2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiSettingsHandlerED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerED2Ev
	.type	_ZN8ImVectorI20ImGuiSettingsHandlerED2Ev, %function
_ZN8ImVectorI20ImGuiSettingsHandlerED2Ev:
.LFB2462:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2462
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5704
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5704:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2462:
	.section	.gcc_except_table
.LLSDA2462:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2462-.LLSDACSB2462
.LLSDACSB2462:
.LLSDACSE2462:
	.section	.text._ZN8ImVectorI20ImGuiSettingsHandlerED2Ev,"axG",@progbits,_ZN8ImVectorI20ImGuiSettingsHandlerED5Ev,comdat
	.size	_ZN8ImVectorI20ImGuiSettingsHandlerED2Ev, .-_ZN8ImVectorI20ImGuiSettingsHandlerED2Ev
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerED1Ev
	.set	_ZN8ImVectorI20ImGuiSettingsHandlerED1Ev,_ZN8ImVectorI20ImGuiSettingsHandlerED2Ev
	.section	.text._ZN8ImVectorI16ImGuiContextHookEC2Ev,"axG",@progbits,_ZN8ImVectorI16ImGuiContextHookEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI16ImGuiContextHookEC2Ev
	.type	_ZN8ImVectorI16ImGuiContextHookEC2Ev, %function
_ZN8ImVectorI16ImGuiContextHookEC2Ev:
.LFB2465:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2465:
	.size	_ZN8ImVectorI16ImGuiContextHookEC2Ev, .-_ZN8ImVectorI16ImGuiContextHookEC2Ev
	.weak	_ZN8ImVectorI16ImGuiContextHookEC1Ev
	.set	_ZN8ImVectorI16ImGuiContextHookEC1Ev,_ZN8ImVectorI16ImGuiContextHookEC2Ev
	.section	.text._ZN8ImVectorI16ImGuiContextHookED2Ev,"axG",@progbits,_ZN8ImVectorI16ImGuiContextHookED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI16ImGuiContextHookED2Ev
	.type	_ZN8ImVectorI16ImGuiContextHookED2Ev, %function
_ZN8ImVectorI16ImGuiContextHookED2Ev:
.LFB2468:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2468
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5708
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5708:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2468:
	.section	.gcc_except_table
.LLSDA2468:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2468-.LLSDACSB2468
.LLSDACSB2468:
.LLSDACSE2468:
	.section	.text._ZN8ImVectorI16ImGuiContextHookED2Ev,"axG",@progbits,_ZN8ImVectorI16ImGuiContextHookED5Ev,comdat
	.size	_ZN8ImVectorI16ImGuiContextHookED2Ev, .-_ZN8ImVectorI16ImGuiContextHookED2Ev
	.weak	_ZN8ImVectorI16ImGuiContextHookED1Ev
	.set	_ZN8ImVectorI16ImGuiContextHookED1Ev,_ZN8ImVectorI16ImGuiContextHookED2Ev
	.section	.text._ZN8ImVectorI22ImGuiTableInstanceDataED2Ev,"axG",@progbits,_ZN8ImVectorI22ImGuiTableInstanceDataED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI22ImGuiTableInstanceDataED2Ev
	.type	_ZN8ImVectorI22ImGuiTableInstanceDataED2Ev, %function
_ZN8ImVectorI22ImGuiTableInstanceDataED2Ev:
.LFB2484:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2484
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5711
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5711:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2484:
	.section	.gcc_except_table
.LLSDA2484:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2484-.LLSDACSB2484
.LLSDACSB2484:
.LLSDACSE2484:
	.section	.text._ZN8ImVectorI22ImGuiTableInstanceDataED2Ev,"axG",@progbits,_ZN8ImVectorI22ImGuiTableInstanceDataED5Ev,comdat
	.size	_ZN8ImVectorI22ImGuiTableInstanceDataED2Ev, .-_ZN8ImVectorI22ImGuiTableInstanceDataED2Ev
	.weak	_ZN8ImVectorI22ImGuiTableInstanceDataED1Ev
	.set	_ZN8ImVectorI22ImGuiTableInstanceDataED1Ev,_ZN8ImVectorI22ImGuiTableInstanceDataED2Ev
	.section	.text._ZN8ImVectorI25ImGuiTableColumnSortSpecsED2Ev,"axG",@progbits,_ZN8ImVectorI25ImGuiTableColumnSortSpecsED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI25ImGuiTableColumnSortSpecsED2Ev
	.type	_ZN8ImVectorI25ImGuiTableColumnSortSpecsED2Ev, %function
_ZN8ImVectorI25ImGuiTableColumnSortSpecsED2Ev:
.LFB2490:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2490
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5714
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5714:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2490:
	.section	.gcc_except_table
.LLSDA2490:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2490-.LLSDACSB2490
.LLSDACSB2490:
.LLSDACSE2490:
	.section	.text._ZN8ImVectorI25ImGuiTableColumnSortSpecsED2Ev,"axG",@progbits,_ZN8ImVectorI25ImGuiTableColumnSortSpecsED5Ev,comdat
	.size	_ZN8ImVectorI25ImGuiTableColumnSortSpecsED2Ev, .-_ZN8ImVectorI25ImGuiTableColumnSortSpecsED2Ev
	.weak	_ZN8ImVectorI25ImGuiTableColumnSortSpecsED1Ev
	.set	_ZN8ImVectorI25ImGuiTableColumnSortSpecsED1Ev,_ZN8ImVectorI25ImGuiTableColumnSortSpecsED2Ev
	.section	.rodata
	.align	3
.LC926:
	.string	"T& ImVector<T>::operator[](int) [with T = ImFont*]"
	.section	.text._ZN8ImVectorIP6ImFontEixEi,"axG",@progbits,_ZN8ImVectorIP6ImFontEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP6ImFontEixEi
	.type	_ZN8ImVectorIP6ImFontEixEi, %function
_ZN8ImVectorIP6ImFontEixEi:
.LFB2492:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5716
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5719
.L5716:
	adrp	x0, .LC926
	add	x3, x0, :lo12:.LC926
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5719:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2492:
	.size	_ZN8ImVectorIP6ImFontEixEi, .-_ZN8ImVectorIP6ImFontEixEi
	.section	.rodata
	.align	3
.LC927:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiTableInstanceData]"
	.section	.text._ZN8ImVectorI22ImGuiTableInstanceDataEixEi,"axG",@progbits,_ZN8ImVectorI22ImGuiTableInstanceDataEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI22ImGuiTableInstanceDataEixEi
	.type	_ZN8ImVectorI22ImGuiTableInstanceDataEixEi, %function
_ZN8ImVectorI22ImGuiTableInstanceDataEixEi:
.LFB2493:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5721
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5724
.L5721:
	adrp	x0, .LC927
	add	x3, x0, :lo12:.LC927
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5724:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2493:
	.size	_ZN8ImVectorI22ImGuiTableInstanceDataEixEi, .-_ZN8ImVectorI22ImGuiTableInstanceDataEixEi
	.section	.text._ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	.type	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_, %function
_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_:
.LFB2494:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5726
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI15ImGuiInputEventE7reserveEi
.L5726:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	mov	x2, 24
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2494:
	.size	_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_, .-_ZN8ImVectorI15ImGuiInputEventE9push_backERKS0_
	.section	.text._ZN8ImVectorItE6resizeEi,"axG",@progbits,_ZN8ImVectorItE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorItE6resizeEi
	.type	_ZN8ImVectorItE6resizeEi, %function
_ZN8ImVectorItE6resizeEi:
.LFB2495:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5728
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorItE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorItE7reserveEi
.L5728:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2495:
	.size	_ZN8ImVectorItE6resizeEi, .-_ZN8ImVectorItE6resizeEi
	.section	.rodata
	.align	3
.LC928:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiInputEvent]"
	.section	.text._ZN8ImVectorI15ImGuiInputEventEixEi,"axG",@progbits,_ZN8ImVectorI15ImGuiInputEventEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiInputEventEixEi
	.type	_ZN8ImVectorI15ImGuiInputEventEixEi, %function
_ZN8ImVectorI15ImGuiInputEventEixEi:
.LFB2496:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5730
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5733
.L5730:
	adrp	x0, .LC928
	add	x3, x0, :lo12:.LC928
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5733:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2496:
	.size	_ZN8ImVectorI15ImGuiInputEventEixEi, .-_ZN8ImVectorI15ImGuiInputEventEixEi
	.text
	.align	2
	.type	_Z6ImLerpIiET_S0_S0_f, %function
_Z6ImLerpIiET_S0_S0_f:
.LFB2497:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	str	w1, [sp, 8]
	str	s0, [sp, 4]
	ldr	s0, [sp, 12]
	scvtf	s1, s0
	ldr	w1, [sp, 8]
	ldr	w0, [sp, 12]
	sub	w0, w1, w0
	scvtf	s2, w0
	ldr	s0, [sp, 4]
	fmul	s0, s2, s0
	fadd	s0, s1, s0
	fcvtzs	s0, s0
	fmov	w0, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2497:
	.size	_Z6ImLerpIiET_S0_S0_f, .-_Z6ImLerpIiET_S0_S0_f
	.align	2
	.type	_Z6ImSwapIfEvRT_S1_, %function
_Z6ImSwapIfEvRT_S1_:
.LFB2498:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	s0, [x0]
	str	s0, [sp, 28]
	ldr	x0, [sp]
	ldr	s0, [x0]
	ldr	x0, [sp, 8]
	str	s0, [x0]
	ldr	x0, [sp]
	ldr	s0, [sp, 28]
	str	s0, [x0]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2498:
	.size	_Z6ImSwapIfEvRT_S1_, .-_Z6ImSwapIfEvRT_S1_
	.section	.text._ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv,"axG",@progbits,_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv,comdat
	.align	2
	.weak	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	.type	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv, %function
_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv:
.LFB2499:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	add	x0, x1, x0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2499:
	.size	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv, .-_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	.section	.text._ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv,"axG",@progbits,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv,comdat
	.align	2
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	.type	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv, %function
_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv:
.LFB2500:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	add	x0, x1, x0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2500:
	.size	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv, .-_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE3endEv
	.section	.rodata
	.align	3
.LC929:
	.string	"T* ImVector<T>::insert(const T*, const T&) [with T = ImGuiStorage::ImGuiStoragePair]"
	.align	3
.LC930:
	.string	"it >= Data && it <= Data + Size"
	.section	.text._ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_,"axG",@progbits,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_,comdat
	.align	2
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_
	.type	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_, %function
_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_:
.LFB2501:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bcc	.L5742
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bls	.L5747
.L5742:
	adrp	x0, .LC929
	add	x3, x0, :lo12:.LC929
	mov	w2, 1815
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC930
	add	x0, x0, :lo12:.LC930
	bl	__assert_fail
.L5747:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	sub	x0, x1, x0
	asr	x0, x0, 4
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5744
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE7reserveEi
.L5744:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x0, w0
	ldr	x1, [sp, 56]
	cmp	x1, x0
	bge	.L5745
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 56]
	add	x0, x0, 1
	lsl	x0, x0, 4
	add	x3, x1, x0
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 56]
	lsl	x0, x0, 4
	add	x4, x1, x0
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 56]
	sub	x0, x1, x0
	lsl	x0, x0, 4
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
.L5745:
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 56]
	lsl	x0, x0, 4
	add	x2, x1, x0
	ldr	x0, [sp, 24]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 56]
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2501:
	.size	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_, .-_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE6insertEPKS1_RS3_
	.section	.rodata
	.align	3
.LC931:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiStorage::ImGuiStoragePair]"
	.section	.text._ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi,"axG",@progbits,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi
	.type	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi, %function
_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi:
.LFB2502:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5749
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5752
.L5749:
	adrp	x0, .LC931
	add	x3, x0, :lo12:.LC931
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5752:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2502:
	.size	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi, .-_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi
	.section	.text._ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC2Ev,"axG",@progbits,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC2Ev
	.type	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC2Ev, %function
_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC2Ev:
.LFB2504:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2504:
	.size	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC2Ev, .-_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC2Ev
	.weak	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC1Ev
	.set	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC1Ev,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEC2Ev
	.section	.text._ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED2Ev,"axG",@progbits,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED2Ev
	.type	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED2Ev, %function
_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED2Ev:
.LFB2507:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2507
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5756
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5756:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2507:
	.section	.gcc_except_table
.LLSDA2507:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2507-.LLSDACSB2507
.LLSDACSB2507:
.LLSDACSE2507:
	.section	.text._ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED2Ev,"axG",@progbits,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED5Ev,comdat
	.size	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED2Ev, .-_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED2Ev
	.weak	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED1Ev
	.set	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED1Ev,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEED2Ev
	.section	.text._ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi,"axG",@progbits,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi
	.type	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi, %function
_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi:
.LFB2509:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5758
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi
.L5758:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2509:
	.size	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi, .-_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE6resizeEi
	.section	.text._ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_,"axG",@progbits,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_,comdat
	.align	2
	.weak	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_
	.type	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_, %function
_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_:
.LFB2510:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5760
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi
.L5760:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	add	x2, x1, x0
	ldr	x0, [sp, 16]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2510:
	.size	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_, .-_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE9push_backERKS1_
	.section	.rodata
	.align	3
.LC932:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiTextFilter::ImGuiTextRange]"
	.section	.text._ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi,"axG",@progbits,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi
	.type	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi, %function
_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi:
.LFB2511:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5762
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5765
.L5762:
	adrp	x0, .LC932
	add	x3, x0, :lo12:.LC932
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5765:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2511:
	.size	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi, .-_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi
	.section	.rodata
	.align	3
.LC933:
	.string	"const T& ImVector<T>::operator[](int) const [with T = ImGuiTextFilter::ImGuiTextRange]"
	.section	.text._ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi,"axG",@progbits,_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi
	.type	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi, %function
_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi:
.LFB2512:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5767
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5770
.L5767:
	adrp	x0, .LC933
	add	x3, x0, :lo12:.LC933
	mov	w2, 1789
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5770:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2512:
	.size	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi, .-_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEEixEi
	.section	.text._ZN8ImVectorIcE6resizeEi,"axG",@progbits,_ZN8ImVectorIcE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorIcE6resizeEi
	.type	_ZN8ImVectorIcE6resizeEi, %function
_ZN8ImVectorIcE6resizeEi:
.LFB2513:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5772
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIcE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcE7reserveEi
.L5772:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2513:
	.size	_ZN8ImVectorIcE6resizeEi, .-_ZN8ImVectorIcE6resizeEi
	.section	.text._ZN8ImVectorIiE9push_backERKi,"axG",@progbits,_ZN8ImVectorIiE9push_backERKi,comdat
	.align	2
	.weak	_ZN8ImVectorIiE9push_backERKi
	.type	_ZN8ImVectorIiE9push_backERKi, %function
_ZN8ImVectorIiE9push_backERKi:
.LFB2514:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5774
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIiE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIiE7reserveEi
.L5774:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldr	w1, [x1]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2514:
	.size	_ZN8ImVectorIiE9push_backERKi, .-_ZN8ImVectorIiE9push_backERKi
	.text
	.align	2
	.type	_Z5ImMaxIiET_S0_S0_, %function
_Z5ImMaxIiET_S0_S0_:
.LFB2515:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	str	w1, [sp, 8]
	ldr	w1, [sp, 12]
	ldr	w0, [sp, 8]
	cmp	w1, w0
	blt	.L5776
	ldr	w0, [sp, 12]
	b	.L5778
.L5776:
	ldr	w0, [sp, 8]
.L5778:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2515:
	.size	_Z5ImMaxIiET_S0_S0_, .-_Z5ImMaxIiET_S0_S0_
	.align	2
	.type	_Z7ImClampIiET_S0_S0_S0_, %function
_Z7ImClampIiET_S0_S0_S0_:
.LFB2516:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	w0, [sp, 12]
	str	w1, [sp, 8]
	str	w2, [sp, 4]
	ldr	w1, [sp, 12]
	ldr	w0, [sp, 8]
	cmp	w1, w0
	blt	.L5780
	ldr	w1, [sp, 12]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L5781
	ldr	w0, [sp, 4]
	b	.L5784
.L5781:
	ldr	w0, [sp, 12]
	b	.L5784
.L5780:
	ldr	w0, [sp, 8]
.L5784:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2516:
	.size	_Z7ImClampIiET_S0_S0_S0_, .-_Z7ImClampIiET_S0_S0_S0_
	.section	.rodata
	.align	3
.LC934:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiListClipperRange]"
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeEixEi,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	.type	_ZN8ImVectorI21ImGuiListClipperRangeEixEi, %function
_ZN8ImVectorI21ImGuiListClipperRangeEixEi:
.LFB2517:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5786
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5789
.L5786:
	adrp	x0, .LC934
	add	x3, x0, :lo12:.LC934
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5789:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2517:
	.size	_ZN8ImVectorI21ImGuiListClipperRangeEixEi, .-_ZN8ImVectorI21ImGuiListClipperRangeEixEi
	.text
	.align	2
	.type	_Z6ImSwapI21ImGuiListClipperRangeEvRT_S2_, %function
_Z6ImSwapI21ImGuiListClipperRangeEvRT_S2_:
.LFB2518:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x1, [x0]
	str	x1, [sp, 56]
	mov	x1, 0
	ldr	x1, [sp, 24]
	add	x0, sp, 40
	ldr	x2, [x1]
	str	x2, [x0]
	ldr	w1, [x1, 8]
	str	w1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 16]
	ldr	x2, [x1]
	str	x2, [x0]
	ldr	w1, [x1, 8]
	str	w1, [x0, 8]
	ldr	x0, [sp, 16]
	mov	x1, x0
	add	x0, sp, 40
	ldr	x2, [x0]
	str	x2, [x1]
	ldr	w0, [x0, 8]
	str	w0, [x1, 8]
	nop
	adrp	x0, :got:__stack_chk_guard
	ldr	x0, [x0, #:got_lo12:__stack_chk_guard]
	ldr	x2, [sp, 56]
	ldr	x1, [x0]
	subs	x2, x2, x1
	mov	x1, 0
	beq	.L5791
	bl	__stack_chk_fail
.L5791:
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2518:
	.size	_Z6ImSwapI21ImGuiListClipperRangeEvRT_S2_, .-_Z6ImSwapI21ImGuiListClipperRangeEvRT_S2_
	.section	.rodata
	.align	3
.LC935:
	.string	"T* ImVector<T>::erase(const T*) [with T = ImGuiListClipperRange]"
	.align	3
.LC936:
	.string	"it >= Data && it < Data + Size"
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeE5eraseEPKS0_,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeE5eraseEPKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeE5eraseEPKS0_
	.type	_ZN8ImVectorI21ImGuiListClipperRangeE5eraseEPKS0_, %function
_ZN8ImVectorI21ImGuiListClipperRangeE5eraseEPKS0_:
.LFB2519:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L5793
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L5796
.L5793:
	adrp	x0, .LC935
	add	x3, x0, :lo12:.LC935
	mov	w2, 1812
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC936
	add	x0, x0, :lo12:.LC936
	bl	__assert_fail
.L5796:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	sub	x0, x1, x0
	asr	x1, x0, 2
	mov	x0, -6148914691236517206
	movk	x0, 0xaaab, lsl 0
	mul	x0, x1, x0
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 40]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x3, x2, x0
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 40]
	add	x1, x0, 1
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x4, x2, x0
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 40]
	sub	x1, x1, x0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, #12
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 40]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2519:
	.size	_ZN8ImVectorI21ImGuiListClipperRangeE5eraseEPKS0_, .-_ZN8ImVectorI21ImGuiListClipperRangeE5eraseEPKS0_
	.section	.text._ZN8ImVectorI20ImGuiListClipperDataE6resizeEiRKS0_,"axG",@progbits,_ZN8ImVectorI20ImGuiListClipperDataE6resizeEiRKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiListClipperDataE6resizeEiRKS0_
	.type	_ZN8ImVectorI20ImGuiListClipperDataE6resizeEiRKS0_, %function
_ZN8ImVectorI20ImGuiListClipperDataE6resizeEiRKS0_:
.LFB2520:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	ble	.L5798
	ldr	w1, [sp, 36]
	ldr	x0, [sp, 40]
	bl	_ZNK8ImVectorI20ImGuiListClipperDataE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI20ImGuiListClipperDataE7reserveEi
.L5798:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	ble	.L5799
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	str	w0, [sp, 60]
	b	.L5800
.L5801:
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 60]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	mov	x2, 40
	ldr	x1, [sp, 24]
	bl	memcpy
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L5800:
	ldr	w1, [sp, 60]
	ldr	w0, [sp, 36]
	cmp	w1, w0
	blt	.L5801
.L5799:
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 36]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2520:
	.size	_ZN8ImVectorI20ImGuiListClipperDataE6resizeEiRKS0_, .-_ZN8ImVectorI20ImGuiListClipperDataE6resizeEiRKS0_
	.section	.rodata
	.align	3
.LC937:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiListClipperData]"
	.section	.text._ZN8ImVectorI20ImGuiListClipperDataEixEi,"axG",@progbits,_ZN8ImVectorI20ImGuiListClipperDataEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiListClipperDataEixEi
	.type	_ZN8ImVectorI20ImGuiListClipperDataEixEi, %function
_ZN8ImVectorI20ImGuiListClipperDataEixEi:
.LFB2521:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5803
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5806
.L5803:
	adrp	x0, .LC937
	add	x3, x0, :lo12:.LC937
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5806:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2521:
	.size	_ZN8ImVectorI20ImGuiListClipperDataEixEi, .-_ZN8ImVectorI20ImGuiListClipperDataEixEi
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
	.type	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_, %function
_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_:
.LFB2522:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5808
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi
.L5808:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	mov	x2, 12
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2522:
	.size	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_, .-_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeE10push_frontERKS0_,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeE10push_frontERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeE10push_frontERKS0_
	.type	_ZN8ImVectorI21ImGuiListClipperRangeE10push_frontERKS0_, %function
_ZN8ImVectorI21ImGuiListClipperRangeE10push_frontERKS0_:
.LFB2523:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bne	.L5810
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE9push_backERKS0_
	b	.L5812
.L5810:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x2, [sp, 16]
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE6insertEPKS0_RS2_
.L5812:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2523:
	.size	_ZN8ImVectorI21ImGuiListClipperRangeE10push_frontERKS0_, .-_ZN8ImVectorI21ImGuiListClipperRangeE10push_frontERKS0_
	.section	.text._ZN8ImVectorI13ImGuiColorModE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI13ImGuiColorModE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiColorModE9push_backERKS0_
	.type	_ZN8ImVectorI13ImGuiColorModE9push_backERKS0_, %function
_ZN8ImVectorI13ImGuiColorModE9push_backERKS0_:
.LFB2524:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5814
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI13ImGuiColorModE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI13ImGuiColorModE7reserveEi
.L5814:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	mov	x2, 20
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2524:
	.size	_ZN8ImVectorI13ImGuiColorModE9push_backERKS0_, .-_ZN8ImVectorI13ImGuiColorModE9push_backERKS0_
	.section	.rodata
	.align	3
.LC938:
	.string	"T& ImVector<T>::back() [with T = ImGuiColorMod]"
	.section	.text._ZN8ImVectorI13ImGuiColorModE4backEv,"axG",@progbits,_ZN8ImVectorI13ImGuiColorModE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiColorModE4backEv
	.type	_ZN8ImVectorI13ImGuiColorModE4backEv, %function
_ZN8ImVectorI13ImGuiColorModE4backEv:
.LFB2525:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L5816
	adrp	x0, .LC938
	add	x3, x0, :lo12:.LC938
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L5816:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, #20
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2525:
	.size	_ZN8ImVectorI13ImGuiColorModE4backEv, .-_ZN8ImVectorI13ImGuiColorModE4backEv
	.section	.rodata
	.align	3
.LC939:
	.string	"void ImVector<T>::pop_back() [with T = ImGuiColorMod]"
	.section	.text._ZN8ImVectorI13ImGuiColorModE8pop_backEv,"axG",@progbits,_ZN8ImVectorI13ImGuiColorModE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiColorModE8pop_backEv
	.type	_ZN8ImVectorI13ImGuiColorModE8pop_backEv, %function
_ZN8ImVectorI13ImGuiColorModE8pop_backEv:
.LFB2526:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L5819
	adrp	x0, .LC939
	add	x3, x0, :lo12:.LC939
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L5819:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2526:
	.size	_ZN8ImVectorI13ImGuiColorModE8pop_backEv, .-_ZN8ImVectorI13ImGuiColorModE8pop_backEv
	.section	.text._ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_
	.type	_ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_, %function
_ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_:
.LFB2527:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5821
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI13ImGuiStyleModE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI13ImGuiStyleModE7reserveEi
.L5821:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	mov	x2, 12
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2527:
	.size	_ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_, .-_ZN8ImVectorI13ImGuiStyleModE9push_backERKS0_
	.section	.rodata
	.align	3
.LC940:
	.string	"T& ImVector<T>::back() [with T = ImGuiStyleMod]"
	.section	.text._ZN8ImVectorI13ImGuiStyleModE4backEv,"axG",@progbits,_ZN8ImVectorI13ImGuiStyleModE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiStyleModE4backEv
	.type	_ZN8ImVectorI13ImGuiStyleModE4backEv, %function
_ZN8ImVectorI13ImGuiStyleModE4backEv:
.LFB2528:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L5823
	adrp	x0, .LC940
	add	x3, x0, :lo12:.LC940
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L5823:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, #12
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2528:
	.size	_ZN8ImVectorI13ImGuiStyleModE4backEv, .-_ZN8ImVectorI13ImGuiStyleModE4backEv
	.section	.rodata
	.align	3
.LC941:
	.string	"void ImVector<T>::pop_back() [with T = ImGuiStyleMod]"
	.section	.text._ZN8ImVectorI13ImGuiStyleModE8pop_backEv,"axG",@progbits,_ZN8ImVectorI13ImGuiStyleModE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiStyleModE8pop_backEv
	.type	_ZN8ImVectorI13ImGuiStyleModE8pop_backEv, %function
_ZN8ImVectorI13ImGuiStyleModE8pop_backEv:
.LFB2529:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L5826
	adrp	x0, .LC941
	add	x3, x0, :lo12:.LC941
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L5826:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2529:
	.size	_ZN8ImVectorI13ImGuiStyleModE8pop_backEv, .-_ZN8ImVectorI13ImGuiStyleModE8pop_backEv
	.section	.rodata
	.align	3
.LC942:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiViewportP*]"
	.section	.text._ZN8ImVectorIP14ImGuiViewportPEixEi,"axG",@progbits,_ZN8ImVectorIP14ImGuiViewportPEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP14ImGuiViewportPEixEi
	.type	_ZN8ImVectorIP14ImGuiViewportPEixEi, %function
_ZN8ImVectorIP14ImGuiViewportPEixEi:
.LFB2530:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5828
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5831
.L5828:
	adrp	x0, .LC942
	add	x3, x0, :lo12:.LC942
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5831:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2530:
	.size	_ZN8ImVectorIP14ImGuiViewportPEixEi, .-_ZN8ImVectorIP14ImGuiViewportPEixEi
	.section	.text._ZN8ImVectorI15ImGuiOldColumnsEC2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiOldColumnsEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiOldColumnsEC2Ev
	.type	_ZN8ImVectorI15ImGuiOldColumnsEC2Ev, %function
_ZN8ImVectorI15ImGuiOldColumnsEC2Ev:
.LFB2532:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2532:
	.size	_ZN8ImVectorI15ImGuiOldColumnsEC2Ev, .-_ZN8ImVectorI15ImGuiOldColumnsEC2Ev
	.weak	_ZN8ImVectorI15ImGuiOldColumnsEC1Ev
	.set	_ZN8ImVectorI15ImGuiOldColumnsEC1Ev,_ZN8ImVectorI15ImGuiOldColumnsEC2Ev
	.section	.text._ZN8ImVectorI15ImGuiOldColumnsED2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiOldColumnsED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiOldColumnsED2Ev
	.type	_ZN8ImVectorI15ImGuiOldColumnsED2Ev, %function
_ZN8ImVectorI15ImGuiOldColumnsED2Ev:
.LFB2535:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2535
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5835
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5835:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2535:
	.section	.gcc_except_table
.LLSDA2535:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2535-.LLSDACSB2535
.LLSDACSB2535:
.LLSDACSE2535:
	.section	.text._ZN8ImVectorI15ImGuiOldColumnsED2Ev,"axG",@progbits,_ZN8ImVectorI15ImGuiOldColumnsED5Ev,comdat
	.size	_ZN8ImVectorI15ImGuiOldColumnsED2Ev, .-_ZN8ImVectorI15ImGuiOldColumnsED2Ev
	.weak	_ZN8ImVectorI15ImGuiOldColumnsED1Ev
	.set	_ZN8ImVectorI15ImGuiOldColumnsED1Ev,_ZN8ImVectorI15ImGuiOldColumnsED2Ev
	.section	.text._ZN8ImVectorIjE9push_backERKj,"axG",@progbits,_ZN8ImVectorIjE9push_backERKj,comdat
	.align	2
	.weak	_ZN8ImVectorIjE9push_backERKj
	.type	_ZN8ImVectorIjE9push_backERKj, %function
_ZN8ImVectorIjE9push_backERKj:
.LFB2537:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5837
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIjE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIjE7reserveEi
.L5837:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldr	w1, [x1]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2537:
	.size	_ZN8ImVectorIjE9push_backERKj, .-_ZN8ImVectorIjE9push_backERKj
	.section	.text._Z9IM_DELETEIcEvPT_,"axG",@progbits,_Z9IM_DELETEIcEvPT_,comdat
	.align	2
	.weak	_Z9IM_DELETEIcEvPT_
	.type	_Z9IM_DELETEIcEvPT_, %function
_Z9IM_DELETEIcEvPT_:
.LFB2538:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L5840
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui7MemFreeEPv
.L5840:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2538:
	.size	_Z9IM_DELETEIcEvPT_, .-_Z9IM_DELETEIcEvPT_
	.section	.text._ZN15ImGuiOldColumnsD2Ev,"axG",@progbits,_ZN15ImGuiOldColumnsD5Ev,comdat
	.align	2
	.weak	_ZN15ImGuiOldColumnsD2Ev
	.type	_ZN15ImGuiOldColumnsD2Ev, %function
_ZN15ImGuiOldColumnsD2Ev:
.LFB2541:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 112
	bl	_ZN18ImDrawListSplitterD1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 96
	bl	_ZN8ImVectorI18ImGuiOldColumnDataED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2541:
	.size	_ZN15ImGuiOldColumnsD2Ev, .-_ZN15ImGuiOldColumnsD2Ev
	.weak	_ZN15ImGuiOldColumnsD1Ev
	.set	_ZN15ImGuiOldColumnsD1Ev,_ZN15ImGuiOldColumnsD2Ev
	.section	.text._ZN8ImVectorI15ImGuiOldColumnsE14clear_destructEv,"axG",@progbits,_ZN8ImVectorI15ImGuiOldColumnsE14clear_destructEv,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiOldColumnsE14clear_destructEv
	.type	_ZN8ImVectorI15ImGuiOldColumnsE14clear_destructEv, %function
_ZN8ImVectorI15ImGuiOldColumnsE14clear_destructEv:
.LFB2539:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 44]
	b	.L5843
.L5844:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 44]
	mov	x0, x1
	lsl	x0, x0, 4
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	bl	_ZN15ImGuiOldColumnsD1Ev
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L5843:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	blt	.L5844
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI15ImGuiOldColumnsE5clearEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2539:
	.size	_ZN8ImVectorI15ImGuiOldColumnsE14clear_destructEv, .-_ZN8ImVectorI15ImGuiOldColumnsE14clear_destructEv
	.section	.rodata
	.align	3
.LC943:
	.string	"T& ImVector<T>::back() [with T = unsigned int]"
	.section	.text._ZN8ImVectorIjE4backEv,"axG",@progbits,_ZN8ImVectorIjE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIjE4backEv
	.type	_ZN8ImVectorIjE4backEv, %function
_ZN8ImVectorIjE4backEv:
.LFB2543:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L5846
	adrp	x0, .LC943
	add	x3, x0, :lo12:.LC943
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L5846:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	sub	x0, x0, #4
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2543:
	.size	_ZN8ImVectorIjE4backEv, .-_ZN8ImVectorIjE4backEv
	.section	.text._ZN6ImPoolI10ImGuiTableE10GetByIndexEi,"axG",@progbits,_ZN6ImPoolI10ImGuiTableE10GetByIndexEi,comdat
	.align	2
	.weak	_ZN6ImPoolI10ImGuiTableE10GetByIndexEi
	.type	_ZN6ImPoolI10ImGuiTableE10GetByIndexEi, %function
_ZN6ImPoolI10ImGuiTableE10GetByIndexEi:
.LFB2544:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	bl	_ZN8ImVectorI10ImGuiTableEixEi
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2544:
	.size	_ZN6ImPoolI10ImGuiTableE10GetByIndexEi, .-_ZN6ImPoolI10ImGuiTableE10GetByIndexEi
	.section	.text._ZN8ImVectorI14ImGuiGroupDataE5clearEv,"axG",@progbits,_ZN8ImVectorI14ImGuiGroupDataE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiGroupDataE5clearEv
	.type	_ZN8ImVectorI14ImGuiGroupDataE5clearEv, %function
_ZN8ImVectorI14ImGuiGroupDataE5clearEv:
.LFB2545:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5852
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5852:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2545:
	.size	_ZN8ImVectorI14ImGuiGroupDataE5clearEv, .-_ZN8ImVectorI14ImGuiGroupDataE5clearEv
	.section	.text._ZN8ImVectorIP11ImGuiWindowE5clearEv,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE5clearEv
	.type	_ZN8ImVectorIP11ImGuiWindowE5clearEv, %function
_ZN8ImVectorIP11ImGuiWindowE5clearEv:
.LFB2546:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5855
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5855:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2546:
	.size	_ZN8ImVectorIP11ImGuiWindowE5clearEv, .-_ZN8ImVectorIP11ImGuiWindowE5clearEv
	.section	.text._ZN8ImVectorIfE5clearEv,"axG",@progbits,_ZN8ImVectorIfE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIfE5clearEv
	.type	_ZN8ImVectorIfE5clearEv, %function
_ZN8ImVectorIfE5clearEv:
.LFB2547:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5858
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5858:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2547:
	.size	_ZN8ImVectorIfE5clearEv, .-_ZN8ImVectorIfE5clearEv
	.section	.text._ZN8ImVectorItE7reserveEi,"axG",@progbits,_ZN8ImVectorItE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorItE7reserveEi
	.type	_ZN8ImVectorItE7reserveEi, %function
_ZN8ImVectorItE7reserveEi:
.LFB2548:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5863
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 1
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5862
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 1
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5862:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L5859
.L5863:
	nop
.L5859:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2548:
	.size	_ZN8ImVectorItE7reserveEi, .-_ZN8ImVectorItE7reserveEi
	.section	.text._ZN8ImVectorI10ImDrawVertE7reserveEi,"axG",@progbits,_ZN8ImVectorI10ImDrawVertE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI10ImDrawVertE7reserveEi
	.type	_ZN8ImVectorI10ImDrawVertE7reserveEi, %function
_ZN8ImVectorI10ImDrawVertE7reserveEi:
.LFB2549:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5868
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5867
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L5867:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L5864
.L5868:
	nop
.L5864:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2549:
	.size	_ZN8ImVectorI10ImDrawVertE7reserveEi, .-_ZN8ImVectorI10ImDrawVertE7reserveEi
	.section	.text._ZN12ImGuiContextD2Ev,"axG",@progbits,_ZN12ImGuiContextD5Ev,comdat
	.align	2
	.weak	_ZN12ImGuiContextD2Ev
	.type	_ZN12ImGuiContextD2Ev, %function
_ZN12ImGuiContextD2Ev:
.LFB2552:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x1, [sp, 24]
	mov	x0, 23968
	add	x0, x1, x0
	bl	_ZN8ImVectorIcED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23664
	add	x0, x1, x0
	bl	_ZN14ImGuiStackToolD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23616
	add	x0, x1, x0
	bl	_ZN14ImGuiTextIndexD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23600
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23544
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23448
	add	x0, x1, x0
	bl	_ZN8ImVectorI16ImGuiContextHookED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23432
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23416
	add	x0, x1, x0
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23400
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23384
	add	x0, x1, x0
	bl	_ZN15ImGuiTextBufferD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23328
	add	x0, x1, x0
	bl	_ZN8ImVectorIjED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23312
	add	x0, x1, x0
	bl	_ZN8ImVectorIcED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 23080
	add	x0, x1, x0
	bl	_ZN6ImFontD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19360
	add	x0, x1, x0
	bl	_ZN19ImGuiInputTextStateD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19320
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiShrinkWidthItemED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19304
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiPtrOrIndexED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19264
	add	x0, x1, x0
	bl	_ZN6ImPoolI11ImGuiTabBarED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19240
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImDrawChannelED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19224
	add	x0, x1, x0
	bl	_ZN8ImVectorIfED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19184
	add	x0, x1, x0
	bl	_ZN6ImPoolI10ImGuiTableED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19168
	add	x0, x1, x0
	bl	_ZN8ImVectorI18ImGuiTableTempDataED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19136
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiListClipperDataED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 19096
	add	x0, x1, x0
	bl	_ZN8ImVectorIhED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18520
	add	x0, x1, x0
	bl	_ZN8ImVectorIP14ImGuiViewportPED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18496
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18480
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiPopupDataED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18464
	add	x0, x1, x0
	bl	_ZN8ImVectorI14ImGuiGroupDataED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18448
	add	x0, x1, x0
	bl	_ZN8ImVectorIiED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18432
	add	x0, x1, x0
	bl	_ZN8ImVectorIjED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18416
	add	x0, x1, x0
	bl	_ZN8ImVectorIP6ImFontED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18400
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiStyleModED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 18384
	add	x0, x1, x0
	bl	_ZN8ImVectorI13ImGuiColorModED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 17856
	add	x0, x1, x0
	bl	_ZN20ImGuiKeyRoutingTableD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 16000
	add	x0, x1, x0
	bl	_ZN12ImGuiStorageD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 15984
	add	x0, x1, x0
	bl	_ZN8ImVectorI20ImGuiWindowStackDataED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 15968
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 15952
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 15936
	add	x0, x1, x0
	bl	_ZN8ImVectorIP11ImGuiWindowED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 15368
	add	x0, x1, x0
	bl	_ZN20ImDrawListSharedDataD1Ev
	ldr	x1, [sp, 24]
	mov	x0, 14288
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiInputEventED1Ev
	ldr	x1, [sp, 24]
	mov	x0, 14272
	add	x0, x1, x0
	bl	_ZN8ImVectorI15ImGuiInputEventED1Ev
	ldr	x0, [sp, 24]
	add	x0, x0, 8
	bl	_ZN7ImGuiIOD1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2552:
	.size	_ZN12ImGuiContextD2Ev, .-_ZN12ImGuiContextD2Ev
	.weak	_ZN12ImGuiContextD1Ev
	.set	_ZN12ImGuiContextD1Ev,_ZN12ImGuiContextD2Ev
	.section	.text._Z9IM_DELETEI12ImGuiContextEvPT_,"axG",@progbits,_Z9IM_DELETEI12ImGuiContextEvPT_,comdat
	.align	2
	.weak	_Z9IM_DELETEI12ImGuiContextEvPT_
	.type	_Z9IM_DELETEI12ImGuiContextEvPT_, %function
_Z9IM_DELETEI12ImGuiContextEvPT_:
.LFB2550:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L5872
	ldr	x0, [sp, 24]
	bl	_ZN12ImGuiContextD1Ev
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui7MemFreeEPv
.L5872:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2550:
	.size	_Z9IM_DELETEI12ImGuiContextEvPT_, .-_Z9IM_DELETEI12ImGuiContextEvPT_
	.section	.text._ZN8ImVectorI16ImGuiContextHookE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI16ImGuiContextHookE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI16ImGuiContextHookE9push_backERKS0_
	.type	_ZN8ImVectorI16ImGuiContextHookE9push_backERKS0_, %function
_ZN8ImVectorI16ImGuiContextHookE9push_backERKS0_:
.LFB2554:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5874
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI16ImGuiContextHookE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI16ImGuiContextHookE7reserveEi
.L5874:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 5
	add	x0, x1, x0
	mov	x2, 32
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2554:
	.size	_ZN8ImVectorI16ImGuiContextHookE9push_backERKS0_, .-_ZN8ImVectorI16ImGuiContextHookE9push_backERKS0_
	.section	.rodata
	.align	3
.LC944:
	.string	"T& ImVector<T>::back() [with T = ImGuiContextHook]"
	.section	.text._ZN8ImVectorI16ImGuiContextHookE4backEv,"axG",@progbits,_ZN8ImVectorI16ImGuiContextHookE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI16ImGuiContextHookE4backEv
	.type	_ZN8ImVectorI16ImGuiContextHookE4backEv, %function
_ZN8ImVectorI16ImGuiContextHookE4backEv:
.LFB2555:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L5876
	adrp	x0, .LC944
	add	x3, x0, :lo12:.LC944
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L5876:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 5
	sub	x0, x0, #32
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2555:
	.size	_ZN8ImVectorI16ImGuiContextHookE4backEv, .-_ZN8ImVectorI16ImGuiContextHookE4backEv
	.section	.rodata
	.align	3
.LC945:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiContextHook]"
	.section	.text._ZN8ImVectorI16ImGuiContextHookEixEi,"axG",@progbits,_ZN8ImVectorI16ImGuiContextHookEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI16ImGuiContextHookEixEi
	.type	_ZN8ImVectorI16ImGuiContextHookEixEi, %function
_ZN8ImVectorI16ImGuiContextHookEixEi:
.LFB2556:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5879
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5882
.L5879:
	adrp	x0, .LC945
	add	x3, x0, :lo12:.LC945
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5882:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 5
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2556:
	.size	_ZN8ImVectorI16ImGuiContextHookEixEi, .-_ZN8ImVectorI16ImGuiContextHookEixEi
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataE6resizeEi,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataE6resizeEi
	.type	_ZN8ImVectorI19ImGuiKeyRoutingDataE6resizeEi, %function
_ZN8ImVectorI19ImGuiKeyRoutingDataE6resizeEi:
.LFB2557:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5884
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi
.L5884:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2557:
	.size	_ZN8ImVectorI19ImGuiKeyRoutingDataE6resizeEi, .-_ZN8ImVectorI19ImGuiKeyRoutingDataE6resizeEi
	.section	.rodata
	.align	3
.LC946:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiKeyRoutingData]"
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataEixEi,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi
	.type	_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi, %function
_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi:
.LFB2558:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5886
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5889
.L5886:
	adrp	x0, .LC946
	add	x3, x0, :lo12:.LC946
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5889:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 4
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2558:
	.size	_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi, .-_ZN8ImVectorI19ImGuiKeyRoutingDataEixEi
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_
	.type	_ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_, %function
_ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_:
.LFB2559:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5891
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi
.L5891:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	add	x2, x1, x0
	ldr	x0, [sp, 16]
	ldp	x0, x1, [x0]
	stp	x0, x1, [x2]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2559:
	.size	_ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_, .-_ZN8ImVectorI19ImGuiKeyRoutingDataE9push_backERKS0_
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataE4swapERS1_,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataE4swapERS1_,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataE4swapERS1_
	.type	_ZN8ImVectorI19ImGuiKeyRoutingDataE4swapERS1_, %function
_ZN8ImVectorI19ImGuiKeyRoutingDataE4swapERS1_:
.LFB2560:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp]
	ldr	w0, [x0]
	str	w0, [sp, 16]
	ldr	x0, [sp, 8]
	ldr	w1, [x0]
	ldr	x0, [sp]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	ldr	w1, [sp, 16]
	str	w1, [x0]
	ldr	x0, [sp]
	ldr	w0, [x0, 4]
	str	w0, [sp, 20]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp]
	str	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	ldr	x0, [sp]
	ldr	x0, [x0, 8]
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp]
	str	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	x1, [sp, 24]
	str	x1, [x0, 8]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2560:
	.size	_ZN8ImVectorI19ImGuiKeyRoutingDataE4swapERS1_, .-_ZN8ImVectorI19ImGuiKeyRoutingDataE4swapERS1_
	.text
	.align	2
	.type	_Z7ImClampIfET_S0_S0_S0_, %function
_Z7ImClampIfET_S0_S0_S0_:
.LFB2561:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	str	s1, [sp, 8]
	str	s2, [sp, 4]
	ldr	s1, [sp, 12]
	ldr	s0, [sp, 8]
	fcmpe	s1, s0
	bmi	.L5901
	b	.L5903
.L5901:
	ldr	s0, [sp, 8]
	b	.L5900
.L5903:
	ldr	s1, [sp, 12]
	ldr	s0, [sp, 4]
	fcmpe	s1, s0
	bgt	.L5902
	b	.L5904
.L5902:
	ldr	s0, [sp, 4]
	b	.L5900
.L5904:
	ldr	s0, [sp, 12]
.L5900:
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2561:
	.size	_Z7ImClampIfET_S0_S0_S0_, .-_Z7ImClampIfET_S0_S0_S0_
	.section	.rodata
	.align	3
.LC947:
	.string	"T* ImVector<T>::erase(const T*) [with T = ImGuiContextHook]"
	.section	.text._ZN8ImVectorI16ImGuiContextHookE5eraseEPKS0_,"axG",@progbits,_ZN8ImVectorI16ImGuiContextHookE5eraseEPKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI16ImGuiContextHookE5eraseEPKS0_
	.type	_ZN8ImVectorI16ImGuiContextHookE5eraseEPKS0_, %function
_ZN8ImVectorI16ImGuiContextHookE5eraseEPKS0_:
.LFB2562:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L5906
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 5
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L5909
.L5906:
	adrp	x0, .LC947
	add	x3, x0, :lo12:.LC947
	mov	w2, 1812
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC936
	add	x0, x0, :lo12:.LC936
	bl	__assert_fail
.L5909:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	sub	x0, x1, x0
	asr	x0, x0, 5
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 40]
	lsl	x0, x0, 5
	add	x3, x1, x0
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 40]
	add	x0, x0, 1
	lsl	x0, x0, 5
	add	x4, x1, x0
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 40]
	sub	x0, x1, x0
	sub	x0, x0, #1
	lsl	x0, x0, 5
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 40]
	lsl	x0, x0, 5
	add	x0, x1, x0
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2562:
	.size	_ZN8ImVectorI16ImGuiContextHookE5eraseEPKS0_, .-_ZN8ImVectorI16ImGuiContextHookE5eraseEPKS0_
	.section	.text._ZN8ImVectorI15ImGuiInputEventE6resizeEi,"axG",@progbits,_ZN8ImVectorI15ImGuiInputEventE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiInputEventE6resizeEi
	.type	_ZN8ImVectorI15ImGuiInputEventE6resizeEi, %function
_ZN8ImVectorI15ImGuiInputEventE6resizeEi:
.LFB2563:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5911
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI15ImGuiInputEventE7reserveEi
.L5911:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2563:
	.size	_ZN8ImVectorI15ImGuiInputEventE6resizeEi, .-_ZN8ImVectorI15ImGuiInputEventE6resizeEi
	.section	.rodata
	.align	3
.LC948:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiWindow*]"
	.section	.text._ZN8ImVectorIP11ImGuiWindowEixEi,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowEixEi
	.type	_ZN8ImVectorIP11ImGuiWindowEixEi, %function
_ZN8ImVectorIP11ImGuiWindowEixEi:
.LFB2564:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5913
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5916
.L5913:
	adrp	x0, .LC948
	add	x3, x0, :lo12:.LC948
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5916:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2564:
	.size	_ZN8ImVectorIP11ImGuiWindowEixEi, .-_ZN8ImVectorIP11ImGuiWindowEixEi
	.section	.rodata
	.align	3
.LC949:
	.string	"T& ImVector<T>::operator[](int) [with T = float]"
	.section	.text._ZN8ImVectorIfEixEi,"axG",@progbits,_ZN8ImVectorIfEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIfEixEi
	.type	_ZN8ImVectorIfEixEi, %function
_ZN8ImVectorIfEixEi:
.LFB2565:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5918
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5921
.L5918:
	adrp	x0, .LC949
	add	x3, x0, :lo12:.LC949
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5921:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2565:
	.size	_ZN8ImVectorIfEixEi, .-_ZN8ImVectorIfEixEi
	.section	.rodata
	.align	3
.LC950:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiTableTempData]"
	.section	.text._ZN8ImVectorI18ImGuiTableTempDataEixEi,"axG",@progbits,_ZN8ImVectorI18ImGuiTableTempDataEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI18ImGuiTableTempDataEixEi
	.type	_ZN8ImVectorI18ImGuiTableTempDataEixEi, %function
_ZN8ImVectorI18ImGuiTableTempDataEixEi:
.LFB2566:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L5923
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L5926
.L5923:
	adrp	x0, .LC950
	add	x3, x0, :lo12:.LC950
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L5926:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 4
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2566:
	.size	_ZN8ImVectorI18ImGuiTableTempDataEixEi, .-_ZN8ImVectorI18ImGuiTableTempDataEixEi
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataE6resizeEi,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataE6resizeEi
	.type	_ZN8ImVectorI20ImGuiWindowStackDataE6resizeEi, %function
_ZN8ImVectorI20ImGuiWindowStackDataE6resizeEi:
.LFB2567:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5928
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi
.L5928:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2567:
	.size	_ZN8ImVectorI20ImGuiWindowStackDataE6resizeEi, .-_ZN8ImVectorI20ImGuiWindowStackDataE6resizeEi
	.section	.text._ZN8ImVectorI14ImGuiPopupDataE6resizeEi,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataE6resizeEi
	.type	_ZN8ImVectorI14ImGuiPopupDataE6resizeEi, %function
_ZN8ImVectorI14ImGuiPopupDataE6resizeEi:
.LFB2568:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5930
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI14ImGuiPopupDataE7reserveEi
.L5930:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2568:
	.size	_ZN8ImVectorI14ImGuiPopupDataE6resizeEi, .-_ZN8ImVectorI14ImGuiPopupDataE6resizeEi
	.section	.text._ZN8ImVectorIiE6resizeEi,"axG",@progbits,_ZN8ImVectorIiE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorIiE6resizeEi
	.type	_ZN8ImVectorIiE6resizeEi, %function
_ZN8ImVectorIiE6resizeEi:
.LFB2569:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5932
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIiE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIiE7reserveEi
.L5932:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2569:
	.size	_ZN8ImVectorIiE6resizeEi, .-_ZN8ImVectorIiE6resizeEi
	.section	.text._ZN8ImVectorI14ImGuiGroupDataE6resizeEi,"axG",@progbits,_ZN8ImVectorI14ImGuiGroupDataE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiGroupDataE6resizeEi
	.type	_ZN8ImVectorI14ImGuiGroupDataE6resizeEi, %function
_ZN8ImVectorI14ImGuiGroupDataE6resizeEi:
.LFB2570:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L5934
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI14ImGuiGroupDataE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI14ImGuiGroupDataE7reserveEi
.L5934:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2570:
	.size	_ZN8ImVectorI14ImGuiGroupDataE6resizeEi, .-_ZN8ImVectorI14ImGuiGroupDataE6resizeEi
	.section	.text._ZN8ImVectorIP14ImGuiViewportPE9push_backERKS1_,"axG",@progbits,_ZN8ImVectorIP14ImGuiViewportPE9push_backERKS1_,comdat
	.align	2
	.weak	_ZN8ImVectorIP14ImGuiViewportPE9push_backERKS1_
	.type	_ZN8ImVectorIP14ImGuiViewportPE9push_backERKS1_, %function
_ZN8ImVectorIP14ImGuiViewportPE9push_backERKS1_:
.LFB2571:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5936
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIP14ImGuiViewportPE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP14ImGuiViewportPE7reserveEi
.L5936:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldr	x1, [x1]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2571:
	.size	_ZN8ImVectorIP14ImGuiViewportPE9push_backERKS1_, .-_ZN8ImVectorIP14ImGuiViewportPE9push_backERKS1_
	.section	.text._ZN8ImVectorIcE6resizeEiRKc,"axG",@progbits,_ZN8ImVectorIcE6resizeEiRKc,comdat
	.align	2
	.weak	_ZN8ImVectorIcE6resizeEiRKc
	.type	_ZN8ImVectorIcE6resizeEiRKc, %function
_ZN8ImVectorIcE6resizeEiRKc:
.LFB2572:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	ble	.L5938
	ldr	w1, [sp, 36]
	ldr	x0, [sp, 40]
	bl	_ZNK8ImVectorIcE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorIcE7reserveEi
.L5938:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	ble	.L5939
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	str	w0, [sp, 60]
	b	.L5940
.L5941:
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 60]
	add	x0, x1, x0
	ldr	x1, [sp, 24]
	ldrb	w1, [x1]
	strb	w1, [x0]
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L5940:
	ldr	w1, [sp, 60]
	ldr	w0, [sp, 36]
	cmp	w1, w0
	blt	.L5941
.L5939:
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 36]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2572:
	.size	_ZN8ImVectorIcE6resizeEiRKc, .-_ZN8ImVectorIcE6resizeEiRKc
	.section	.text._Z9IM_DELETEI11ImFontAtlasEvPT_,"axG",@progbits,_Z9IM_DELETEI11ImFontAtlasEvPT_,comdat
	.align	2
	.weak	_Z9IM_DELETEI11ImFontAtlasEvPT_
	.type	_Z9IM_DELETEI11ImFontAtlasEvPT_, %function
_Z9IM_DELETEI11ImFontAtlasEvPT_:
.LFB2573:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L5944
	ldr	x0, [sp, 24]
	bl	_ZN11ImFontAtlasD1Ev
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui7MemFreeEPv
.L5944:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2573:
	.size	_Z9IM_DELETEI11ImFontAtlasEvPT_, .-_Z9IM_DELETEI11ImFontAtlasEvPT_
	.section	.text._ZN8ImVectorI6ImVec2E5clearEv,"axG",@progbits,_ZN8ImVectorI6ImVec2E5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI6ImVec2E5clearEv
	.type	_ZN8ImVectorI6ImVec2E5clearEv, %function
_ZN8ImVectorI6ImVec2E5clearEv:
.LFB2574:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5947
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5947:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2574:
	.size	_ZN8ImVectorI6ImVec2E5clearEv, .-_ZN8ImVectorI6ImVec2E5clearEv
	.section	.text._ZN8ImVectorIP11ImGuiWindowE12clear_deleteEv,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE12clear_deleteEv,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE12clear_deleteEv
	.type	_ZN8ImVectorIP11ImGuiWindowE12clear_deleteEv, %function
_ZN8ImVectorIP11ImGuiWindowE12clear_deleteEv:
.LFB2575:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 44]
	b	.L5949
.L5950:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 44]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x0, [x0]
	bl	_Z9IM_DELETEI11ImGuiWindowEvPT_
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L5949:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	blt	.L5950
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP11ImGuiWindowE5clearEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2575:
	.size	_ZN8ImVectorIP11ImGuiWindowE12clear_deleteEv, .-_ZN8ImVectorIP11ImGuiWindowE12clear_deleteEv
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataE5clearEv,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataE5clearEv
	.type	_ZN8ImVectorI20ImGuiWindowStackDataE5clearEv, %function
_ZN8ImVectorI20ImGuiWindowStackDataE5clearEv:
.LFB2576:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5953
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5953:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2576:
	.size	_ZN8ImVectorI20ImGuiWindowStackDataE5clearEv, .-_ZN8ImVectorI20ImGuiWindowStackDataE5clearEv
	.section	.text._ZN8ImVectorI13ImGuiColorModE5clearEv,"axG",@progbits,_ZN8ImVectorI13ImGuiColorModE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiColorModE5clearEv
	.type	_ZN8ImVectorI13ImGuiColorModE5clearEv, %function
_ZN8ImVectorI13ImGuiColorModE5clearEv:
.LFB2577:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5956
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5956:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2577:
	.size	_ZN8ImVectorI13ImGuiColorModE5clearEv, .-_ZN8ImVectorI13ImGuiColorModE5clearEv
	.section	.text._ZN8ImVectorI13ImGuiStyleModE5clearEv,"axG",@progbits,_ZN8ImVectorI13ImGuiStyleModE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiStyleModE5clearEv
	.type	_ZN8ImVectorI13ImGuiStyleModE5clearEv, %function
_ZN8ImVectorI13ImGuiStyleModE5clearEv:
.LFB2578:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5959
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5959:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2578:
	.size	_ZN8ImVectorI13ImGuiStyleModE5clearEv, .-_ZN8ImVectorI13ImGuiStyleModE5clearEv
	.section	.text._ZN8ImVectorIP6ImFontE5clearEv,"axG",@progbits,_ZN8ImVectorIP6ImFontE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIP6ImFontE5clearEv
	.type	_ZN8ImVectorIP6ImFontE5clearEv, %function
_ZN8ImVectorIP6ImFontE5clearEv:
.LFB2579:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5962
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5962:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2579:
	.size	_ZN8ImVectorIP6ImFontE5clearEv, .-_ZN8ImVectorIP6ImFontE5clearEv
	.section	.text._ZN8ImVectorI14ImGuiPopupDataE5clearEv,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataE5clearEv
	.type	_ZN8ImVectorI14ImGuiPopupDataE5clearEv, %function
_ZN8ImVectorI14ImGuiPopupDataE5clearEv:
.LFB2580:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5965
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5965:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2580:
	.size	_ZN8ImVectorI14ImGuiPopupDataE5clearEv, .-_ZN8ImVectorI14ImGuiPopupDataE5clearEv
	.section	.text._ZN8ImVectorIP14ImGuiViewportPE12clear_deleteEv,"axG",@progbits,_ZN8ImVectorIP14ImGuiViewportPE12clear_deleteEv,comdat
	.align	2
	.weak	_ZN8ImVectorIP14ImGuiViewportPE12clear_deleteEv
	.type	_ZN8ImVectorIP14ImGuiViewportPE12clear_deleteEv, %function
_ZN8ImVectorIP14ImGuiViewportPE12clear_deleteEv:
.LFB2581:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 44]
	b	.L5967
.L5968:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 44]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x0, [x0]
	bl	_Z9IM_DELETEI14ImGuiViewportPEvPT_
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L5967:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	blt	.L5968
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP14ImGuiViewportPE5clearEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2581:
	.size	_ZN8ImVectorIP14ImGuiViewportPE12clear_deleteEv, .-_ZN8ImVectorIP14ImGuiViewportPE12clear_deleteEv
	.section	.text._ZN11ImGuiTabBarD2Ev,"axG",@progbits,_ZN11ImGuiTabBarD5Ev,comdat
	.align	2
	.weak	_ZN11ImGuiTabBarD2Ev
	.type	_ZN11ImGuiTabBarD2Ev, %function
_ZN11ImGuiTabBarD2Ev:
.LFB2584:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 136
	bl	_ZN15ImGuiTextBufferD1Ev
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI12ImGuiTabItemED1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2584:
	.size	_ZN11ImGuiTabBarD2Ev, .-_ZN11ImGuiTabBarD2Ev
	.weak	_ZN11ImGuiTabBarD1Ev
	.set	_ZN11ImGuiTabBarD1Ev,_ZN11ImGuiTabBarD2Ev
	.section	.text._ZN6ImPoolI11ImGuiTabBarE5ClearEv,"axG",@progbits,_ZN6ImPoolI11ImGuiTabBarE5ClearEv,comdat
	.align	2
	.weak	_ZN6ImPoolI11ImGuiTabBarE5ClearEv
	.type	_ZN6ImPoolI11ImGuiTabBarE5ClearEv, %function
_ZN6ImPoolI11ImGuiTabBarE5ClearEv:
.LFB2582:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 40]
	b	.L5971
.L5973:
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	ldr	w1, [sp, 40]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi
	ldr	w0, [x0, 8]
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	cmn	w0, #1
	beq	.L5972
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorI11ImGuiTabBarEixEi
	bl	_ZN11ImGuiTabBarD1Ev
.L5972:
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
.L5971:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 40]
	cmp	w1, w0
	blt	.L5973
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN12ImGuiStorage5ClearEv
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI11ImGuiTabBarE5clearEv
	ldr	x0, [sp, 24]
	str	wzr, [x0, 36]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 36]
	ldr	x0, [sp, 24]
	str	w1, [x0, 32]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2582:
	.size	_ZN6ImPoolI11ImGuiTabBarE5ClearEv, .-_ZN6ImPoolI11ImGuiTabBarE5ClearEv
	.section	.text._ZN8ImVectorI15ImGuiPtrOrIndexE5clearEv,"axG",@progbits,_ZN8ImVectorI15ImGuiPtrOrIndexE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiPtrOrIndexE5clearEv
	.type	_ZN8ImVectorI15ImGuiPtrOrIndexE5clearEv, %function
_ZN8ImVectorI15ImGuiPtrOrIndexE5clearEv:
.LFB2586:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5976
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5976:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2586:
	.size	_ZN8ImVectorI15ImGuiPtrOrIndexE5clearEv, .-_ZN8ImVectorI15ImGuiPtrOrIndexE5clearEv
	.section	.text._ZN8ImVectorI20ImGuiShrinkWidthItemE5clearEv,"axG",@progbits,_ZN8ImVectorI20ImGuiShrinkWidthItemE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiShrinkWidthItemE5clearEv
	.type	_ZN8ImVectorI20ImGuiShrinkWidthItemE5clearEv, %function
_ZN8ImVectorI20ImGuiShrinkWidthItemE5clearEv:
.LFB2587:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5979
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5979:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2587:
	.size	_ZN8ImVectorI20ImGuiShrinkWidthItemE5clearEv, .-_ZN8ImVectorI20ImGuiShrinkWidthItemE5clearEv
	.section	.text._ZN8ImVectorI20ImGuiListClipperDataE14clear_destructEv,"axG",@progbits,_ZN8ImVectorI20ImGuiListClipperDataE14clear_destructEv,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiListClipperDataE14clear_destructEv
	.type	_ZN8ImVectorI20ImGuiListClipperDataE14clear_destructEv, %function
_ZN8ImVectorI20ImGuiListClipperDataE14clear_destructEv:
.LFB2588:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 44]
	b	.L5981
.L5982:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 44]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	bl	_ZN20ImGuiListClipperDataD1Ev
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L5981:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	blt	.L5982
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI20ImGuiListClipperDataE5clearEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2588:
	.size	_ZN8ImVectorI20ImGuiListClipperDataE14clear_destructEv, .-_ZN8ImVectorI20ImGuiListClipperDataE14clear_destructEv
	.section	.text._ZN6ImPoolI10ImGuiTableE5ClearEv,"axG",@progbits,_ZN6ImPoolI10ImGuiTableE5ClearEv,comdat
	.align	2
	.weak	_ZN6ImPoolI10ImGuiTableE5ClearEv
	.type	_ZN6ImPoolI10ImGuiTableE5ClearEv, %function
_ZN6ImPoolI10ImGuiTableE5ClearEv:
.LFB2589:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 40]
	b	.L5984
.L5986:
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	ldr	w1, [sp, 40]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi
	ldr	w0, [x0, 8]
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	cmn	w0, #1
	beq	.L5985
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 44]
	bl	_ZN8ImVectorI10ImGuiTableEixEi
	bl	_ZN10ImGuiTableD1Ev
.L5985:
	ldr	w0, [sp, 40]
	add	w0, w0, 1
	str	w0, [sp, 40]
.L5984:
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 16]
	ldr	w1, [sp, 40]
	cmp	w1, w0
	blt	.L5986
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN12ImGuiStorage5ClearEv
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI10ImGuiTableE5clearEv
	ldr	x0, [sp, 24]
	str	wzr, [x0, 36]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 36]
	ldr	x0, [sp, 24]
	str	w1, [x0, 32]
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2589:
	.size	_ZN6ImPoolI10ImGuiTableE5ClearEv, .-_ZN6ImPoolI10ImGuiTableE5ClearEv
	.section	.text._ZN18ImGuiTableTempDataD2Ev,"axG",@progbits,_ZN18ImGuiTableTempDataD5Ev,comdat
	.align	2
	.weak	_ZN18ImGuiTableTempDataD2Ev
	.type	_ZN18ImGuiTableTempDataD2Ev, %function
_ZN18ImGuiTableTempDataD2Ev:
.LFB2592:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	bl	_ZN18ImDrawListSplitterD1Ev
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2592:
	.size	_ZN18ImGuiTableTempDataD2Ev, .-_ZN18ImGuiTableTempDataD2Ev
	.weak	_ZN18ImGuiTableTempDataD1Ev
	.set	_ZN18ImGuiTableTempDataD1Ev,_ZN18ImGuiTableTempDataD2Ev
	.section	.text._ZN8ImVectorI18ImGuiTableTempDataE14clear_destructEv,"axG",@progbits,_ZN8ImVectorI18ImGuiTableTempDataE14clear_destructEv,comdat
	.align	2
	.weak	_ZN8ImVectorI18ImGuiTableTempDataE14clear_destructEv
	.type	_ZN8ImVectorI18ImGuiTableTempDataE14clear_destructEv, %function
_ZN8ImVectorI18ImGuiTableTempDataE14clear_destructEv:
.LFB2590:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	wzr, [sp, 44]
	b	.L5989
.L5990:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 44]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 4
	add	x0, x2, x0
	bl	_ZN18ImGuiTableTempDataD1Ev
	ldr	w0, [sp, 44]
	add	w0, w0, 1
	str	w0, [sp, 44]
.L5989:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 44]
	cmp	w1, w0
	blt	.L5990
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI18ImGuiTableTempDataE5clearEv
	nop
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2590:
	.size	_ZN8ImVectorI18ImGuiTableTempDataE14clear_destructEv, .-_ZN8ImVectorI18ImGuiTableTempDataE14clear_destructEv
	.section	.text._ZN8ImVectorI13ImDrawChannelE5clearEv,"axG",@progbits,_ZN8ImVectorI13ImDrawChannelE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImDrawChannelE5clearEv
	.type	_ZN8ImVectorI13ImDrawChannelE5clearEv, %function
_ZN8ImVectorI13ImDrawChannelE5clearEv:
.LFB2594:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5993
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5993:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2594:
	.size	_ZN8ImVectorI13ImDrawChannelE5clearEv, .-_ZN8ImVectorI13ImDrawChannelE5clearEv
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv:
.LFB2595:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcE5clearEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2595:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsE5clearEv
	.section	.text._ZN8ImVectorI20ImGuiSettingsHandlerE5clearEv,"axG",@progbits,_ZN8ImVectorI20ImGuiSettingsHandlerE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerE5clearEv
	.type	_ZN8ImVectorI20ImGuiSettingsHandlerE5clearEv, %function
_ZN8ImVectorI20ImGuiSettingsHandlerE5clearEv:
.LFB2596:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L5997
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L5997:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2596:
	.size	_ZN8ImVectorI20ImGuiSettingsHandlerE5clearEv, .-_ZN8ImVectorI20ImGuiSettingsHandlerE5clearEv
	.section	.text._ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_
	.type	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_, %function
_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_:
.LFB2597:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L5999
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP11ImGuiWindowE7reserveEi
.L5999:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldr	x1, [x1]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2597:
	.size	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_, .-_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_
	.section	.rodata
	.align	3
.LC951:
	.string	"T& ImVector<T>::operator[](int) [with T = ImDrawCmd]"
	.section	.text._ZN8ImVectorI9ImDrawCmdEixEi,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdEixEi
	.type	_ZN8ImVectorI9ImDrawCmdEixEi, %function
_ZN8ImVectorI9ImDrawCmdEixEi:
.LFB2598:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6001
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6004
.L6001:
	adrp	x0, .LC951
	add	x3, x0, :lo12:.LC951
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6004:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2598:
	.size	_ZN8ImVectorI9ImDrawCmdEixEi, .-_ZN8ImVectorI9ImDrawCmdEixEi
	.section	.text._ZN8ImVectorIP10ImDrawListE9push_backERKS1_,"axG",@progbits,_ZN8ImVectorIP10ImDrawListE9push_backERKS1_,comdat
	.align	2
	.weak	_ZN8ImVectorIP10ImDrawListE9push_backERKS1_
	.type	_ZN8ImVectorIP10ImDrawListE9push_backERKS1_, %function
_ZN8ImVectorIP10ImDrawListE9push_backERKS1_:
.LFB2599:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6006
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP10ImDrawListE7reserveEi
.L6006:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldr	x1, [x1]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2599:
	.size	_ZN8ImVectorIP10ImDrawListE9push_backERKS1_, .-_ZN8ImVectorIP10ImDrawListE9push_backERKS1_
	.section	.text._ZNK8ImVectorIP10ImDrawListE5emptyEv,"axG",@progbits,_ZNK8ImVectorIP10ImDrawListE5emptyEv,comdat
	.align	2
	.weak	_ZNK8ImVectorIP10ImDrawListE5emptyEv
	.type	_ZNK8ImVectorIP10ImDrawListE5emptyEv, %function
_ZNK8ImVectorIP10ImDrawListE5emptyEv:
.LFB2600:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2600:
	.size	_ZNK8ImVectorIP10ImDrawListE5emptyEv, .-_ZNK8ImVectorIP10ImDrawListE5emptyEv
	.section	.rodata
	.align	3
.LC952:
	.string	"T& ImVector<T>::operator[](int) [with T = ImDrawList*]"
	.section	.text._ZN8ImVectorIP10ImDrawListEixEi,"axG",@progbits,_ZN8ImVectorIP10ImDrawListEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP10ImDrawListEixEi
	.type	_ZN8ImVectorIP10ImDrawListEixEi, %function
_ZN8ImVectorIP10ImDrawListEixEi:
.LFB2601:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6010
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6013
.L6010:
	adrp	x0, .LC952
	add	x3, x0, :lo12:.LC952
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6013:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2601:
	.size	_ZN8ImVectorIP10ImDrawListEixEi, .-_ZN8ImVectorIP10ImDrawListEixEi
	.section	.rodata
	.align	3
.LC953:
	.string	"T& ImVector<T>::back() [with T = ImVec4]"
	.section	.text._ZN8ImVectorI6ImVec4E4backEv,"axG",@progbits,_ZN8ImVectorI6ImVec4E4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI6ImVec4E4backEv
	.type	_ZN8ImVectorI6ImVec4E4backEv, %function
_ZN8ImVectorI6ImVec4E4backEv:
.LFB2602:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6015
	adrp	x0, .LC953
	add	x3, x0, :lo12:.LC953
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6015:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	sub	x0, x0, #16
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2602:
	.size	_ZN8ImVectorI6ImVec4E4backEv, .-_ZN8ImVectorI6ImVec4E4backEv
	.section	.rodata
	.align	3
.LC954:
	.string	"T& ImVector<T>::back() [with T = ImDrawCmd]"
	.section	.text._ZN8ImVectorI9ImDrawCmdE4backEv,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdE4backEv
	.type	_ZN8ImVectorI9ImDrawCmdE4backEv, %function
_ZN8ImVectorI9ImDrawCmdE4backEv:
.LFB2603:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6018
	adrp	x0, .LC954
	add	x3, x0, :lo12:.LC954
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6018:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, #56
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2603:
	.size	_ZN8ImVectorI9ImDrawCmdE4backEv, .-_ZN8ImVectorI9ImDrawCmdE4backEv
	.section	.rodata
	.align	3
.LC955:
	.string	"void ImVector<T>::pop_back() [with T = ImDrawCmd]"
	.section	.text._ZN8ImVectorI9ImDrawCmdE8pop_backEv,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdE8pop_backEv
	.type	_ZN8ImVectorI9ImDrawCmdE8pop_backEv, %function
_ZN8ImVectorI9ImDrawCmdE8pop_backEv:
.LFB2604:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6021
	adrp	x0, .LC955
	add	x3, x0, :lo12:.LC955
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6021:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2604:
	.size	_ZN8ImVectorI9ImDrawCmdE8pop_backEv, .-_ZN8ImVectorI9ImDrawCmdE8pop_backEv
	.section	.text._ZN8ImVectorI9ImDrawCmdE10push_frontERKS0_,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdE10push_frontERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdE10push_frontERKS0_
	.type	_ZN8ImVectorI9ImDrawCmdE10push_frontERKS0_, %function
_ZN8ImVectorI9ImDrawCmdE10push_frontERKS0_:
.LFB2605:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bne	.L6023
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI9ImDrawCmdE9push_backERKS0_
	b	.L6025
.L6023:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x2, [sp, 16]
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI9ImDrawCmdE6insertEPKS0_RS2_
.L6025:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2605:
	.size	_ZN8ImVectorI9ImDrawCmdE10push_frontERKS0_, .-_ZN8ImVectorI9ImDrawCmdE10push_frontERKS0_
	.section	.text._ZN8ImVectorIP11ImGuiWindowE6resizeEi,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE6resizeEi
	.type	_ZN8ImVectorIP11ImGuiWindowE6resizeEi, %function
_ZN8ImVectorIP11ImGuiWindowE6resizeEi:
.LFB2606:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6027
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP11ImGuiWindowE7reserveEi
.L6027:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2606:
	.size	_ZN8ImVectorIP11ImGuiWindowE6resizeEi, .-_ZN8ImVectorIP11ImGuiWindowE6resizeEi
	.section	.text._ZN8ImVectorIP11ImGuiWindowE7reserveEi,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE7reserveEi
	.type	_ZN8ImVectorIP11ImGuiWindowE7reserveEi, %function
_ZN8ImVectorIP11ImGuiWindowE7reserveEi:
.LFB2607:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6032
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6031
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6031:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6028
.L6032:
	nop
.L6028:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2607:
	.size	_ZN8ImVectorIP11ImGuiWindowE7reserveEi, .-_ZN8ImVectorIP11ImGuiWindowE7reserveEi
	.section	.text._ZN8ImVectorIP11ImGuiWindowE4swapERS2_,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE4swapERS2_,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE4swapERS2_
	.type	_ZN8ImVectorIP11ImGuiWindowE4swapERS2_, %function
_ZN8ImVectorIP11ImGuiWindowE4swapERS2_:
.LFB2608:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp]
	ldr	w0, [x0]
	str	w0, [sp, 16]
	ldr	x0, [sp, 8]
	ldr	w1, [x0]
	ldr	x0, [sp]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	ldr	w1, [sp, 16]
	str	w1, [x0]
	ldr	x0, [sp]
	ldr	w0, [x0, 4]
	str	w0, [sp, 20]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp]
	str	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	ldr	x0, [sp]
	ldr	x0, [x0, 8]
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp]
	str	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	x1, [sp, 24]
	str	x1, [x0, 8]
	nop
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2608:
	.size	_ZN8ImVectorIP11ImGuiWindowE4swapERS2_, .-_ZN8ImVectorIP11ImGuiWindowE4swapERS2_
	.section	.text._ZNK8ImVectorIP11ImGuiWindowE8containsERKS1_,"axG",@progbits,_ZNK8ImVectorIP11ImGuiWindowE8containsERKS1_,comdat
	.align	2
	.weak	_ZNK8ImVectorIP11ImGuiWindowE8containsERKS1_
	.type	_ZNK8ImVectorIP11ImGuiWindowE8containsERKS1_, %function
_ZNK8ImVectorIP11ImGuiWindowE8containsERKS1_:
.LFB2609:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	str	x0, [sp, 16]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	str	x0, [sp, 24]
	b	.L6035
.L6037:
	ldr	x0, [sp, 16]
	add	x1, x0, 8
	str	x1, [sp, 16]
	ldr	x1, [x0]
	ldr	x0, [sp]
	ldr	x0, [x0]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L6035
	mov	w0, 1
	b	.L6036
.L6035:
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	cmp	x1, x0
	bcc	.L6037
	mov	w0, 0
.L6036:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2609:
	.size	_ZNK8ImVectorIP11ImGuiWindowE8containsERKS1_, .-_ZNK8ImVectorIP11ImGuiWindowE8containsERKS1_
	.section	.rodata
	.align	3
.LC956:
	.string	"T* ImVector<T>::erase(const T*) [with T = ImGuiWindow*]"
	.section	.text._ZN8ImVectorIP11ImGuiWindowE5eraseEPKS1_,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE5eraseEPKS1_,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE5eraseEPKS1_
	.type	_ZN8ImVectorIP11ImGuiWindowE5eraseEPKS1_, %function
_ZN8ImVectorIP11ImGuiWindowE5eraseEPKS1_:
.LFB2610:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L6039
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L6042
.L6039:
	adrp	x0, .LC956
	add	x3, x0, :lo12:.LC956
	mov	w2, 1812
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC936
	add	x0, x0, :lo12:.LC936
	bl	__assert_fail
.L6042:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	sub	x0, x1, x0
	asr	x0, x0, 3
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 40]
	lsl	x0, x0, 3
	add	x3, x1, x0
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 40]
	add	x0, x0, 1
	lsl	x0, x0, 3
	add	x4, x1, x0
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 40]
	sub	x0, x1, x0
	sub	x0, x0, #1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 40]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2610:
	.size	_ZN8ImVectorIP11ImGuiWindowE5eraseEPKS1_, .-_ZN8ImVectorIP11ImGuiWindowE5eraseEPKS1_
	.section	.rodata
	.align	3
.LC957:
	.string	"int ImChunkStream<T>::offset_from_ptr(const T*) [with T = ImGuiWindowSettings]"
	.align	3
.LC958:
	.string	"p >= begin() && p < end()"
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_:
.LFB2611:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv
	mov	x1, x0
	ldr	x0, [sp, 16]
	cmp	x0, x1
	bcc	.L6044
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv
	mov	x1, x0
	ldr	x0, [sp, 16]
	cmp	x0, x1
	bcc	.L6047
.L6044:
	adrp	x0, .LC957
	add	x3, x0, :lo12:.LC957
	mov	w2, 698
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC958
	add	x0, x0, :lo12:.LC958
	bl	__assert_fail
.L6047:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	sub	x0, x1, x0
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2611:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsE15offset_from_ptrEPKS0_
	.section	.text._ZN8ImVectorIP11ImGuiWindowE10push_frontERKS1_,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE10push_frontERKS1_,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE10push_frontERKS1_
	.type	_ZN8ImVectorIP11ImGuiWindowE10push_frontERKS1_, %function
_ZN8ImVectorIP11ImGuiWindowE10push_frontERKS1_:
.LFB2612:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bne	.L6049
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP11ImGuiWindowE9push_backERKS1_
	b	.L6051
.L6049:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x2, [sp, 16]
	mov	x1, x0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_
.L6051:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2612:
	.size	_ZN8ImVectorIP11ImGuiWindowE10push_frontERKS1_, .-_ZN8ImVectorIP11ImGuiWindowE10push_frontERKS1_
	.section	.rodata
	.align	3
.LC959:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiPopupData]"
	.section	.text._ZN8ImVectorI14ImGuiPopupDataEixEi,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataEixEi
	.type	_ZN8ImVectorI14ImGuiPopupDataEixEi, %function
_ZN8ImVectorI14ImGuiPopupDataEixEi:
.LFB2613:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6053
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6056
.L6053:
	adrp	x0, .LC959
	add	x3, x0, :lo12:.LC959
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6056:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2613:
	.size	_ZN8ImVectorI14ImGuiPopupDataEixEi, .-_ZN8ImVectorI14ImGuiPopupDataEixEi
	.section	.text._ZNK8ImVectorI20ImGuiWindowStackDataE5emptyEv,"axG",@progbits,_ZNK8ImVectorI20ImGuiWindowStackDataE5emptyEv,comdat
	.align	2
	.weak	_ZNK8ImVectorI20ImGuiWindowStackDataE5emptyEv
	.type	_ZNK8ImVectorI20ImGuiWindowStackDataE5emptyEv, %function
_ZNK8ImVectorI20ImGuiWindowStackDataE5emptyEv:
.LFB2614:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2614:
	.size	_ZNK8ImVectorI20ImGuiWindowStackDataE5emptyEv, .-_ZNK8ImVectorI20ImGuiWindowStackDataE5emptyEv
	.section	.rodata
	.align	3
.LC960:
	.string	"T& ImVector<T>::back() [with T = ImGuiWindowStackData]"
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataE4backEv,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataE4backEv
	.type	_ZN8ImVectorI20ImGuiWindowStackDataE4backEv, %function
_ZN8ImVectorI20ImGuiWindowStackDataE4backEv:
.LFB2615:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6060
	adrp	x0, .LC960
	add	x3, x0, :lo12:.LC960
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6060:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, #88
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2615:
	.size	_ZN8ImVectorI20ImGuiWindowStackDataE4backEv, .-_ZN8ImVectorI20ImGuiWindowStackDataE4backEv
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataE9push_backERKS0_
	.type	_ZN8ImVectorI20ImGuiWindowStackDataE9push_backERKS0_, %function
_ZN8ImVectorI20ImGuiWindowStackDataE9push_backERKS0_:
.LFB2616:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6063
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi
.L6063:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	mov	x2, 88
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2616:
	.size	_ZN8ImVectorI20ImGuiWindowStackDataE9push_backERKS0_, .-_ZN8ImVectorI20ImGuiWindowStackDataE9push_backERKS0_
	.section	.text._ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_
	.type	_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_, %function
_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_:
.LFB2617:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6065
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI14ImGuiPopupDataE7reserveEi
.L6065:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	mov	x2, 56
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2617:
	.size	_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_, .-_ZN8ImVectorI14ImGuiPopupDataE9push_backERKS0_
	.section	.rodata
	.align	3
.LC961:
	.string	"T& ImVector<T>::back() [with T = ImGuiPopupData]"
	.section	.text._ZN8ImVectorI14ImGuiPopupDataE4backEv,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataE4backEv
	.type	_ZN8ImVectorI14ImGuiPopupDataE4backEv, %function
_ZN8ImVectorI14ImGuiPopupDataE4backEv:
.LFB2618:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6067
	adrp	x0, .LC961
	add	x3, x0, :lo12:.LC961
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6067:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, #56
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2618:
	.size	_ZN8ImVectorI14ImGuiPopupDataE4backEv, .-_ZN8ImVectorI14ImGuiPopupDataE4backEv
	.section	.text._ZN8ImVectorIfE6resizeEi,"axG",@progbits,_ZN8ImVectorIfE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorIfE6resizeEi
	.type	_ZN8ImVectorIfE6resizeEi, %function
_ZN8ImVectorIfE6resizeEi:
.LFB2619:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6070
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIfE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIfE7reserveEi
.L6070:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2619:
	.size	_ZN8ImVectorIfE6resizeEi, .-_ZN8ImVectorIfE6resizeEi
	.section	.rodata
	.align	3
.LC962:
	.string	"void ImVector<T>::pop_back() [with T = ImGuiPopupData]"
	.section	.text._ZN8ImVectorI14ImGuiPopupDataE8pop_backEv,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataE8pop_backEv
	.type	_ZN8ImVectorI14ImGuiPopupDataE8pop_backEv, %function
_ZN8ImVectorI14ImGuiPopupDataE8pop_backEv:
.LFB2620:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6072
	adrp	x0, .LC962
	add	x3, x0, :lo12:.LC962
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6072:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2620:
	.size	_ZN8ImVectorI14ImGuiPopupDataE8pop_backEv, .-_ZN8ImVectorI14ImGuiPopupDataE8pop_backEv
	.section	.rodata
	.align	3
.LC963:
	.string	"void ImVector<T>::pop_back() [with T = ImGuiWindowStackData]"
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataE8pop_backEv,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataE8pop_backEv
	.type	_ZN8ImVectorI20ImGuiWindowStackDataE8pop_backEv, %function
_ZN8ImVectorI20ImGuiWindowStackDataE8pop_backEv:
.LFB2621:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6074
	adrp	x0, .LC963
	add	x3, x0, :lo12:.LC963
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6074:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2621:
	.size	_ZN8ImVectorI20ImGuiWindowStackDataE8pop_backEv, .-_ZN8ImVectorI20ImGuiWindowStackDataE8pop_backEv
	.section	.rodata
	.align	3
.LC964:
	.string	"T& ImVector<T>::back() [with T = ImGuiWindow*]"
	.section	.text._ZN8ImVectorIP11ImGuiWindowE4backEv,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE4backEv
	.type	_ZN8ImVectorIP11ImGuiWindowE4backEv, %function
_ZN8ImVectorIP11ImGuiWindowE4backEv:
.LFB2622:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6076
	adrp	x0, .LC964
	add	x3, x0, :lo12:.LC964
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6076:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	sub	x0, x0, #8
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2622:
	.size	_ZN8ImVectorIP11ImGuiWindowE4backEv, .-_ZN8ImVectorIP11ImGuiWindowE4backEv
	.section	.text._ZN8ImVectorIP11ImGuiWindowE4findERKS1_,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE4findERKS1_,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE4findERKS1_
	.type	_ZN8ImVectorIP11ImGuiWindowE4findERKS1_, %function
_ZN8ImVectorIP11ImGuiWindowE4findERKS1_:
.LFB2623:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	str	x0, [sp, 16]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	str	x0, [sp, 24]
	b	.L6079
.L6082:
	ldr	x0, [sp, 16]
	ldr	x1, [x0]
	ldr	x0, [sp]
	ldr	x0, [x0]
	cmp	x1, x0
	beq	.L6084
	ldr	x0, [sp, 16]
	add	x0, x0, 8
	str	x0, [sp, 16]
.L6079:
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	cmp	x1, x0
	bcc	.L6082
	b	.L6081
.L6084:
	nop
.L6081:
	ldr	x0, [sp, 16]
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2623:
	.size	_ZN8ImVectorIP11ImGuiWindowE4findERKS1_, .-_ZN8ImVectorIP11ImGuiWindowE4findERKS1_
	.section	.rodata
	.align	3
.LC965:
	.string	"int ImVector<T>::index_from_ptr(const T*) const [with T = ImGuiWindow*]"
	.section	.text._ZNK8ImVectorIP11ImGuiWindowE14index_from_ptrEPKS1_,"axG",@progbits,_ZNK8ImVectorIP11ImGuiWindowE14index_from_ptrEPKS1_,comdat
	.align	2
	.weak	_ZNK8ImVectorIP11ImGuiWindowE14index_from_ptrEPKS1_
	.type	_ZNK8ImVectorIP11ImGuiWindowE14index_from_ptrEPKS1_, %function
_ZNK8ImVectorIP11ImGuiWindowE14index_from_ptrEPKS1_:
.LFB2624:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L6086
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L6089
.L6086:
	adrp	x0, .LC965
	add	x3, x0, :lo12:.LC965
	mov	w2, 1821
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC936
	add	x0, x0, :lo12:.LC936
	bl	__assert_fail
.L6089:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	sub	x0, x1, x0
	asr	x0, x0, 3
	str	x0, [sp, 40]
	ldr	x0, [sp, 40]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2624:
	.size	_ZNK8ImVectorIP11ImGuiWindowE14index_from_ptrEPKS1_, .-_ZNK8ImVectorIP11ImGuiWindowE14index_from_ptrEPKS1_
	.section	.text._ZN8ImVectorIP6ImFontE9push_backERKS1_,"axG",@progbits,_ZN8ImVectorIP6ImFontE9push_backERKS1_,comdat
	.align	2
	.weak	_ZN8ImVectorIP6ImFontE9push_backERKS1_
	.type	_ZN8ImVectorIP6ImFontE9push_backERKS1_, %function
_ZN8ImVectorIP6ImFontE9push_backERKS1_:
.LFB2625:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6091
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIP6ImFontE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIP6ImFontE7reserveEi
.L6091:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldr	x1, [x1]
	str	x1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2625:
	.size	_ZN8ImVectorIP6ImFontE9push_backERKS1_, .-_ZN8ImVectorIP6ImFontE9push_backERKS1_
	.section	.rodata
	.align	3
.LC966:
	.string	"void ImVector<T>::pop_back() [with T = ImFont*]"
	.section	.text._ZN8ImVectorIP6ImFontE8pop_backEv,"axG",@progbits,_ZN8ImVectorIP6ImFontE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIP6ImFontE8pop_backEv
	.type	_ZN8ImVectorIP6ImFontE8pop_backEv, %function
_ZN8ImVectorIP6ImFontE8pop_backEv:
.LFB2626:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6093
	adrp	x0, .LC966
	add	x3, x0, :lo12:.LC966
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6093:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2626:
	.size	_ZN8ImVectorIP6ImFontE8pop_backEv, .-_ZN8ImVectorIP6ImFontE8pop_backEv
	.section	.text._ZNK8ImVectorIP6ImFontE5emptyEv,"axG",@progbits,_ZNK8ImVectorIP6ImFontE5emptyEv,comdat
	.align	2
	.weak	_ZNK8ImVectorIP6ImFontE5emptyEv
	.type	_ZNK8ImVectorIP6ImFontE5emptyEv, %function
_ZNK8ImVectorIP6ImFontE5emptyEv:
.LFB2627:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2627:
	.size	_ZNK8ImVectorIP6ImFontE5emptyEv, .-_ZNK8ImVectorIP6ImFontE5emptyEv
	.section	.rodata
	.align	3
.LC967:
	.string	"T& ImVector<T>::back() [with T = ImFont*]"
	.section	.text._ZN8ImVectorIP6ImFontE4backEv,"axG",@progbits,_ZN8ImVectorIP6ImFontE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIP6ImFontE4backEv
	.type	_ZN8ImVectorIP6ImFontE4backEv, %function
_ZN8ImVectorIP6ImFontE4backEv:
.LFB2628:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6097
	adrp	x0, .LC967
	add	x3, x0, :lo12:.LC967
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6097:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	sub	x0, x0, #8
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2628:
	.size	_ZN8ImVectorIP6ImFontE4backEv, .-_ZN8ImVectorIP6ImFontE4backEv
	.section	.rodata
	.align	3
.LC968:
	.string	"T& ImVector<T>::back() [with T = int]"
	.section	.text._ZN8ImVectorIiE4backEv,"axG",@progbits,_ZN8ImVectorIiE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIiE4backEv
	.type	_ZN8ImVectorIiE4backEv, %function
_ZN8ImVectorIiE4backEv:
.LFB2629:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6100
	adrp	x0, .LC968
	add	x3, x0, :lo12:.LC968
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6100:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	sub	x0, x0, #4
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2629:
	.size	_ZN8ImVectorIiE4backEv, .-_ZN8ImVectorIiE4backEv
	.section	.rodata
	.align	3
.LC969:
	.string	"void ImVector<T>::pop_back() [with T = int]"
	.section	.text._ZN8ImVectorIiE8pop_backEv,"axG",@progbits,_ZN8ImVectorIiE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIiE8pop_backEv
	.type	_ZN8ImVectorIiE8pop_backEv, %function
_ZN8ImVectorIiE8pop_backEv:
.LFB2630:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6103
	adrp	x0, .LC969
	add	x3, x0, :lo12:.LC969
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6103:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2630:
	.size	_ZN8ImVectorIiE8pop_backEv, .-_ZN8ImVectorIiE8pop_backEv
	.section	.text._ZN8ImVectorIfE9push_backERKf,"axG",@progbits,_ZN8ImVectorIfE9push_backERKf,comdat
	.align	2
	.weak	_ZN8ImVectorIfE9push_backERKf
	.type	_ZN8ImVectorIfE9push_backERKf, %function
_ZN8ImVectorIfE9push_backERKf:
.LFB2631:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6105
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIfE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIfE7reserveEi
.L6105:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldr	w1, [x1]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2631:
	.size	_ZN8ImVectorIfE9push_backERKf, .-_ZN8ImVectorIfE9push_backERKf
	.section	.rodata
	.align	3
.LC970:
	.string	"T& ImVector<T>::back() [with T = float]"
	.section	.text._ZN8ImVectorIfE4backEv,"axG",@progbits,_ZN8ImVectorIfE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIfE4backEv
	.type	_ZN8ImVectorIfE4backEv, %function
_ZN8ImVectorIfE4backEv:
.LFB2632:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6107
	adrp	x0, .LC970
	add	x3, x0, :lo12:.LC970
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6107:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	sub	x0, x0, #4
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2632:
	.size	_ZN8ImVectorIfE4backEv, .-_ZN8ImVectorIfE4backEv
	.section	.rodata
	.align	3
.LC971:
	.string	"void ImVector<T>::pop_back() [with T = float]"
	.section	.text._ZN8ImVectorIfE8pop_backEv,"axG",@progbits,_ZN8ImVectorIfE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIfE8pop_backEv
	.type	_ZN8ImVectorIfE8pop_backEv, %function
_ZN8ImVectorIfE8pop_backEv:
.LFB2633:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6110
	adrp	x0, .LC971
	add	x3, x0, :lo12:.LC971
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6110:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2633:
	.size	_ZN8ImVectorIfE8pop_backEv, .-_ZN8ImVectorIfE8pop_backEv
	.section	.rodata
	.align	3
.LC972:
	.string	"void ImVector<T>::pop_back() [with T = unsigned int]"
	.section	.text._ZN8ImVectorIjE8pop_backEv,"axG",@progbits,_ZN8ImVectorIjE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorIjE8pop_backEv
	.type	_ZN8ImVectorIjE8pop_backEv, %function
_ZN8ImVectorIjE8pop_backEv:
.LFB2634:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6112
	adrp	x0, .LC972
	add	x3, x0, :lo12:.LC972
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6112:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2634:
	.size	_ZN8ImVectorIjE8pop_backEv, .-_ZN8ImVectorIjE8pop_backEv
	.section	.text._ZN10ImBitArrayILi652ELi0EEC2Ev,"axG",@progbits,_ZN10ImBitArrayILi652ELi0EEC5Ev,comdat
	.align	2
	.weak	_ZN10ImBitArrayILi652ELi0EEC2Ev
	.type	_ZN10ImBitArrayILi652ELi0EEC2Ev, %function
_ZN10ImBitArrayILi652ELi0EEC2Ev:
.LFB2636:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	bl	_ZN10ImBitArrayILi652ELi0EE12ClearAllBitsEv
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2636:
	.size	_ZN10ImBitArrayILi652ELi0EEC2Ev, .-_ZN10ImBitArrayILi652ELi0EEC2Ev
	.weak	_ZN10ImBitArrayILi652ELi0EEC1Ev
	.set	_ZN10ImBitArrayILi652ELi0EEC1Ev,_ZN10ImBitArrayILi652ELi0EEC2Ev
	.section	.rodata
	.align	3
.LC973:
	.string	"bool ImBitArray<BITCOUNT, OFFSET>::TestBit(int) const [with int BITCOUNT = 652; int OFFSET = 0]"
	.align	3
.LC974:
	.string	"n >= 0 && n < BITCOUNT"
	.section	.text._ZNK10ImBitArrayILi652ELi0EE7TestBitEi,"axG",@progbits,_ZNK10ImBitArrayILi652ELi0EE7TestBitEi,comdat
	.align	2
	.weak	_ZNK10ImBitArrayILi652ELi0EE7TestBitEi
	.type	_ZNK10ImBitArrayILi652ELi0EE7TestBitEi, %function
_ZNK10ImBitArrayILi652ELi0EE7TestBitEi:
.LFB2638:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6115
	ldr	w0, [sp, 20]
	cmp	w0, 651
	ble	.L6118
.L6115:
	adrp	x0, .LC973
	add	x3, x0, :lo12:.LC973
	mov	w2, 574
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC974
	add	x0, x0, :lo12:.LC974
	bl	__assert_fail
.L6118:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	bl	_Z17ImBitArrayTestBitPKji
	and	w0, w0, 255
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2638:
	.size	_ZNK10ImBitArrayILi652ELi0EE7TestBitEi, .-_ZNK10ImBitArrayILi652ELi0EE7TestBitEi
	.section	.rodata
	.align	3
.LC975:
	.string	"void ImBitArray<BITCOUNT, OFFSET>::SetBit(int) [with int BITCOUNT = 652; int OFFSET = 0]"
	.section	.text._ZN10ImBitArrayILi652ELi0EE6SetBitEi,"axG",@progbits,_ZN10ImBitArrayILi652ELi0EE6SetBitEi,comdat
	.align	2
	.weak	_ZN10ImBitArrayILi652ELi0EE6SetBitEi
	.type	_ZN10ImBitArrayILi652ELi0EE6SetBitEi, %function
_ZN10ImBitArrayILi652ELi0EE6SetBitEi:
.LFB2639:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6120
	ldr	w0, [sp, 20]
	cmp	w0, 651
	ble	.L6122
.L6120:
	adrp	x0, .LC975
	add	x3, x0, :lo12:.LC975
	mov	w2, 575
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC974
	add	x0, x0, :lo12:.LC974
	bl	__assert_fail
.L6122:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	bl	_Z16ImBitArraySetBitPji
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2639:
	.size	_ZN10ImBitArrayILi652ELi0EE6SetBitEi, .-_ZN10ImBitArrayILi652ELi0EE6SetBitEi
	.section	.text._ZN8ImVectorItE9push_backERKt,"axG",@progbits,_ZN8ImVectorItE9push_backERKt,comdat
	.align	2
	.weak	_ZN8ImVectorItE9push_backERKt
	.type	_ZN8ImVectorItE9push_backERKt, %function
_ZN8ImVectorItE9push_backERKt:
.LFB2640:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6124
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorItE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorItE7reserveEi
.L6124:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 1
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldrh	w1, [x1]
	strh	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2640:
	.size	_ZN8ImVectorItE9push_backERKt, .-_ZN8ImVectorItE9push_backERKt
	.section	.rodata
	.align	3
.LC976:
	.string	"T* ImVector<T>::erase(const T*, const T*) [with T = ImGuiInputEvent]"
	.align	3
.LC977:
	.string	"it >= Data && it < Data + Size && it_last >= it && it_last <= Data + Size"
	.section	.text._ZN8ImVectorI15ImGuiInputEventE5eraseEPKS0_S3_,"axG",@progbits,_ZN8ImVectorI15ImGuiInputEventE5eraseEPKS0_S3_,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiInputEventE5eraseEPKS0_S3_
	.type	_ZN8ImVectorI15ImGuiInputEventE5eraseEPKS0_S3_, %function
_ZN8ImVectorI15ImGuiInputEventE5eraseEPKS0_S3_:
.LFB2641:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bcc	.L6126
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bcs	.L6126
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 32]
	cmp	x1, x0
	bcc	.L6126
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldr	x1, [sp, 24]
	cmp	x1, x0
	bls	.L6129
.L6126:
	adrp	x0, .LC976
	add	x3, x0, :lo12:.LC976
	mov	w2, 1813
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC977
	add	x0, x0, :lo12:.LC977
	bl	__assert_fail
.L6129:
	ldr	x1, [sp, 24]
	ldr	x0, [sp, 32]
	sub	x0, x1, x0
	asr	x1, x0, 3
	mov	x0, -6148914691236517206
	movk	x0, 0xaaab, lsl 0
	mul	x0, x1, x0
	str	x0, [sp, 48]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	sub	x0, x1, x0
	asr	x1, x0, 3
	mov	x0, -6148914691236517206
	movk	x0, 0xaaab, lsl 0
	mul	x0, x1, x0
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x3, x2, x0
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	ldr	x0, [sp, 48]
	add	x1, x1, x0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x4, x2, x0
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 56]
	sub	x1, x1, x0
	ldr	x0, [sp, 48]
	sub	x1, x1, x0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	x1, [sp, 48]
	sub	w1, w0, w1
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2641:
	.size	_ZN8ImVectorI15ImGuiInputEventE5eraseEPKS0_S3_, .-_ZN8ImVectorI15ImGuiInputEventE5eraseEPKS0_S3_
	.section	.rodata
	.align	3
.LC978:
	.string	"T& ImVector<T>::back() [with T = ImGuiGroupData]"
	.section	.text._ZN8ImVectorI14ImGuiGroupDataE4backEv,"axG",@progbits,_ZN8ImVectorI14ImGuiGroupDataE4backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiGroupDataE4backEv
	.type	_ZN8ImVectorI14ImGuiGroupDataE4backEv, %function
_ZN8ImVectorI14ImGuiGroupDataE4backEv:
.LFB2642:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6131
	adrp	x0, .LC978
	add	x3, x0, :lo12:.LC978
	mov	w2, 1797
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6131:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 4
	sub	x0, x0, #48
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2642:
	.size	_ZN8ImVectorI14ImGuiGroupDataE4backEv, .-_ZN8ImVectorI14ImGuiGroupDataE4backEv
	.section	.rodata
	.align	3
.LC979:
	.string	"void ImVector<T>::pop_back() [with T = ImGuiGroupData]"
	.section	.text._ZN8ImVectorI14ImGuiGroupDataE8pop_backEv,"axG",@progbits,_ZN8ImVectorI14ImGuiGroupDataE8pop_backEv,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiGroupDataE8pop_backEv
	.type	_ZN8ImVectorI14ImGuiGroupDataE8pop_backEv, %function
_ZN8ImVectorI14ImGuiGroupDataE8pop_backEv:
.LFB2643:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6134
	adrp	x0, .LC979
	add	x3, x0, :lo12:.LC979
	mov	w2, 1810
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6134:
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2643:
	.size	_ZN8ImVectorI14ImGuiGroupDataE8pop_backEv, .-_ZN8ImVectorI14ImGuiGroupDataE8pop_backEv
	.text
	.align	2
	.type	_Z6ImLerpIfET_S0_S0_f, %function
_Z6ImLerpIfET_S0_S0_f:
.LFB2644:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	s0, [sp, 12]
	str	s1, [sp, 8]
	str	s2, [sp, 4]
	ldr	s1, [sp, 8]
	ldr	s0, [sp, 12]
	fsub	s1, s1, s0
	ldr	s0, [sp, 4]
	fmul	s1, s1, s0
	ldr	s0, [sp, 12]
	fadd	s0, s1, s0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2644:
	.size	_Z6ImLerpIfET_S0_S0_f, .-_Z6ImLerpIfET_S0_S0_f
	.section	.rodata
	.align	3
.LC980:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiWindowStackData]"
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataEixEi,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataEixEi
	.type	_ZN8ImVectorI20ImGuiWindowStackDataEixEi, %function
_ZN8ImVectorI20ImGuiWindowStackDataEixEi:
.LFB2645:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6138
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6141
.L6138:
	adrp	x0, .LC980
	add	x3, x0, :lo12:.LC980
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6141:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2645:
	.size	_ZN8ImVectorI20ImGuiWindowStackDataEixEi, .-_ZN8ImVectorI20ImGuiWindowStackDataEixEi
	.section	.text._ZN8ImVectorIhE5clearEv,"axG",@progbits,_ZN8ImVectorIhE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIhE5clearEv
	.type	_ZN8ImVectorIhE5clearEv, %function
_ZN8ImVectorIhE5clearEv:
.LFB2646:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6144
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L6144:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2646:
	.size	_ZN8ImVectorIhE5clearEv, .-_ZN8ImVectorIhE5clearEv
	.section	.text._ZN8ImVectorIhE6resizeEi,"axG",@progbits,_ZN8ImVectorIhE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorIhE6resizeEi
	.type	_ZN8ImVectorIhE6resizeEi, %function
_ZN8ImVectorIhE6resizeEi:
.LFB2647:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6146
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIhE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIhE7reserveEi
.L6146:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2647:
	.size	_ZN8ImVectorIhE6resizeEi, .-_ZN8ImVectorIhE6resizeEi
	.section	.text._ZNK13ImChunkStreamI19ImGuiWindowSettingsE5emptyEv,"axG",@progbits,_ZNK13ImChunkStreamI19ImGuiWindowSettingsE5emptyEv,comdat
	.align	2
	.weak	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE5emptyEv
	.type	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE5emptyEv, %function
_ZNK13ImChunkStreamI19ImGuiWindowSettingsE5emptyEv:
.LFB2648:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2648:
	.size	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE5emptyEv, .-_ZNK13ImChunkStreamI19ImGuiWindowSettingsE5emptyEv
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsE11alloc_chunkEm,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsE11alloc_chunkEm,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsE11alloc_chunkEm
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsE11alloc_chunkEm, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsE11alloc_chunkEm:
.LFB2649:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	mov	x0, 4
	str	x0, [sp, 40]
	ldr	x1, [sp, 40]
	ldr	x0, [sp, 16]
	add	x0, x1, x0
	add	x0, x0, 3
	and	x0, x0, 4294967292
	str	x0, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	str	w0, [sp, 36]
	ldr	x2, [sp, 24]
	ldr	x0, [sp, 16]
	mov	w1, w0
	ldr	w0, [sp, 36]
	add	w0, w1, w0
	mov	w1, w0
	mov	x0, x2
	bl	_ZN8ImVectorIcE6resizeEi
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 36]
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x2, [sp, 36]
	ldr	x0, [sp, 40]
	sxtw	x0, w0
	add	x0, x2, x0
	add	x0, x1, x0
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2649:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsE11alloc_chunkEm, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsE11alloc_chunkEm
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv:
.LFB2650:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	mov	x0, 4
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	bne	.L6152
	mov	x0, 0
	b	.L6153
.L6152:
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	add	x0, x1, x0
.L6153:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2650:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv
	.section	.rodata
	.align	3
.LC981:
	.string	"T* ImChunkStream<T>::next_chunk(T*) [with T = ImGuiWindowSettings]"
	.align	3
.LC982:
	.string	"p < end()"
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_:
.LFB2651:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	mov	x0, 4
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE5beginEv
	mov	x1, x0
	ldr	x0, [sp, 16]
	cmp	x0, x1
	bcc	.L6155
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv
	mov	x1, x0
	ldr	x0, [sp, 16]
	cmp	x0, x1
	bcc	.L6160
.L6155:
	adrp	x0, .LC981
	add	x3, x0, :lo12:.LC981
	mov	w2, 695
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC958
	add	x0, x0, :lo12:.LC958
	bl	__assert_fail
.L6160:
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10chunk_sizeEPKS0_
	sxtw	x0, w0
	ldr	x1, [sp, 16]
	add	x0, x1, x0
	str	x0, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv
	mov	x1, x0
	ldr	x0, [sp, 40]
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L6157
	mov	x0, 0
	b	.L6158
.L6157:
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv
	mov	x1, x0
	ldr	x0, [sp, 16]
	cmp	x0, x1
	bcc	.L6159
	adrp	x0, .LC981
	add	x3, x0, :lo12:.LC981
	mov	w2, 695
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC982
	add	x0, x0, :lo12:.LC982
	bl	__assert_fail
.L6159:
	ldr	x0, [sp, 16]
.L6158:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2651:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsE10next_chunkEPS0_
	.section	.text._ZN8ImVectorI20ImGuiSettingsHandlerE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI20ImGuiSettingsHandlerE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerE9push_backERKS0_
	.type	_ZN8ImVectorI20ImGuiSettingsHandlerE9push_backERKS0_, %function
_ZN8ImVectorI20ImGuiSettingsHandlerE9push_backERKS0_:
.LFB2652:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6162
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI20ImGuiSettingsHandlerE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI20ImGuiSettingsHandlerE7reserveEi
.L6162:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	mov	x2, 72
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2652:
	.size	_ZN8ImVectorI20ImGuiSettingsHandlerE9push_backERKS0_, .-_ZN8ImVectorI20ImGuiSettingsHandlerE9push_backERKS0_
	.section	.rodata
	.align	3
.LC983:
	.string	"T* ImVector<T>::erase(const T*) [with T = ImGuiSettingsHandler]"
	.section	.text._ZN8ImVectorI20ImGuiSettingsHandlerE5eraseEPKS0_,"axG",@progbits,_ZN8ImVectorI20ImGuiSettingsHandlerE5eraseEPKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerE5eraseEPKS0_
	.type	_ZN8ImVectorI20ImGuiSettingsHandlerE5eraseEPKS0_, %function
_ZN8ImVectorI20ImGuiSettingsHandlerE5eraseEPKS0_:
.LFB2653:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L6164
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldr	x1, [sp, 16]
	cmp	x1, x0
	bcc	.L6167
.L6164:
	adrp	x0, .LC983
	add	x3, x0, :lo12:.LC983
	mov	w2, 1812
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC936
	add	x0, x0, :lo12:.LC936
	bl	__assert_fail
.L6167:
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 16]
	sub	x0, x1, x0
	asr	x1, x0, 3
	mov	x0, 36409
	movk	x0, 0x38e3, lsl 16
	movk	x0, 0xe38e, lsl 32
	movk	x0, 0x8e38, lsl 48
	mul	x0, x1, x0
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 40]
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x3, x2, x0
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 40]
	add	x1, x0, 1
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x4, x2, x0
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 40]
	sub	x1, x1, x0
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, #72
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sub	w1, w0, #1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 40]
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2653:
	.size	_ZN8ImVectorI20ImGuiSettingsHandlerE5eraseEPKS0_, .-_ZN8ImVectorI20ImGuiSettingsHandlerE5eraseEPKS0_
	.section	.rodata
	.align	3
.LC984:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiSettingsHandler]"
	.section	.text._ZN8ImVectorI20ImGuiSettingsHandlerEixEi,"axG",@progbits,_ZN8ImVectorI20ImGuiSettingsHandlerEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	.type	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi, %function
_ZN8ImVectorI20ImGuiSettingsHandlerEixEi:
.LFB2654:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6169
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6172
.L6169:
	adrp	x0, .LC984
	add	x3, x0, :lo12:.LC984
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6172:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2654:
	.size	_ZN8ImVectorI20ImGuiSettingsHandlerEixEi, .-_ZN8ImVectorI20ImGuiSettingsHandlerEixEi
	.section	.text._ZN8ImVectorIcE9push_backERKc,"axG",@progbits,_ZN8ImVectorIcE9push_backERKc,comdat
	.align	2
	.weak	_ZN8ImVectorIcE9push_backERKc
	.type	_ZN8ImVectorIcE9push_backERKc, %function
_ZN8ImVectorIcE9push_backERKc:
.LFB2655:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6174
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorIcE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorIcE7reserveEi
.L6174:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	ldrb	w1, [x1]
	strb	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2655:
	.size	_ZN8ImVectorIcE9push_backERKc, .-_ZN8ImVectorIcE9push_backERKc
	.section	.rodata
	.align	3
.LC985:
	.string	"T* ImChunkStream<T>::ptr_from_offset(int) [with T = ImGuiWindowSettings]"
	.align	3
.LC986:
	.string	"off >= 4 && off < Buf.Size"
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsE15ptr_from_offsetEi,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsE15ptr_from_offsetEi,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15ptr_from_offsetEi
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15ptr_from_offsetEi, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsE15ptr_from_offsetEi:
.LFB2656:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 3
	ble	.L6176
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6179
.L6176:
	adrp	x0, .LC985
	add	x3, x0, :lo12:.LC985
	mov	w2, 699
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC986
	add	x0, x0, :lo12:.LC986
	bl	__assert_fail
.L6179:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2656:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsE15ptr_from_offsetEi, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsE15ptr_from_offsetEi
	.section	.text._ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv,"axG",@progbits,_ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv,comdat
	.align	2
	.weak	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv
	.type	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv, %function
_ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv:
.LFB2657:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2657:
	.size	_ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv, .-_ZNK13ImChunkStreamI19ImGuiWindowSettingsE4sizeEv
	.section	.text._ZNK8ImVectorIcE5emptyEv,"axG",@progbits,_ZNK8ImVectorIcE5emptyEv,comdat
	.align	2
	.weak	_ZNK8ImVectorIcE5emptyEv
	.type	_ZNK8ImVectorIcE5emptyEv, %function
_ZNK8ImVectorIcE5emptyEv:
.LFB2658:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	cmp	w0, 0
	cset	w0, eq
	and	w0, w0, 255
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2658:
	.size	_ZNK8ImVectorIcE5emptyEv, .-_ZNK8ImVectorIcE5emptyEv
	.section	.text._ZN8ImVectorIcE5beginEv,"axG",@progbits,_ZN8ImVectorIcE5beginEv,comdat
	.align	2
	.weak	_ZN8ImVectorIcE5beginEv
	.type	_ZN8ImVectorIcE5beginEv, %function
_ZN8ImVectorIcE5beginEv:
.LFB2659:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2659:
	.size	_ZN8ImVectorIcE5beginEv, .-_ZN8ImVectorIcE5beginEv
	.section	.rodata
	.align	3
.LC987:
	.string	"T& ImSpan<T>::operator[](int) [with T = ImGuiTableColumn]"
	.align	3
.LC988:
	.string	"p >= Data && p < DataEnd"
	.section	.text._ZN6ImSpanI16ImGuiTableColumnEixEi,"axG",@progbits,_ZN6ImSpanI16ImGuiTableColumnEixEi,comdat
	.align	2
	.weak	_ZN6ImSpanI16ImGuiTableColumnEixEi
	.type	_ZN6ImSpanI16ImGuiTableColumnEixEi, %function
_ZN6ImSpanI16ImGuiTableColumnEixEi:
.LFB2660:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	x2, [x0]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	bcc	.L6187
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 40]
	cmp	x1, x0
	bcc	.L6190
.L6187:
	adrp	x0, .LC987
	add	x3, x0, :lo12:.LC987
	mov	w2, 610
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC988
	add	x0, x0, :lo12:.LC988
	bl	__assert_fail
.L6190:
	ldr	x0, [sp, 40]
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2660:
	.size	_ZN6ImSpanI16ImGuiTableColumnEixEi, .-_ZN6ImSpanI16ImGuiTableColumnEixEi
	.section	.text._ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv,"axG",@progbits,_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv,comdat
	.align	2
	.weak	_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv
	.type	_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv, %function
_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv:
.LFB2661:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2661:
	.size	_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv, .-_ZNK6ImPoolI10ImGuiTableE10GetMapSizeEv
	.section	.text._ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi,"axG",@progbits,_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi,comdat
	.align	2
	.weak	_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi
	.type	_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi, %function
_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi:
.LFB2662:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	ldr	w1, [sp, 20]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi
	ldr	w0, [x0, 8]
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	cmn	w0, #1
	bne	.L6194
	mov	x0, 0
	b	.L6195
.L6194:
	ldr	w1, [sp, 44]
	ldr	x0, [sp, 24]
	bl	_ZN6ImPoolI10ImGuiTableE10GetByIndexEi
	nop
.L6195:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2662:
	.size	_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi, .-_ZN6ImPoolI10ImGuiTableE13TryGetMapDataEi
	.section	.text._ZNK6ImPoolI11ImGuiTabBarE13GetAliveCountEv,"axG",@progbits,_ZNK6ImPoolI11ImGuiTabBarE13GetAliveCountEv,comdat
	.align	2
	.weak	_ZNK6ImPoolI11ImGuiTabBarE13GetAliveCountEv
	.type	_ZNK6ImPoolI11ImGuiTabBarE13GetAliveCountEv, %function
_ZNK6ImPoolI11ImGuiTabBarE13GetAliveCountEv:
.LFB2663:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 36]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2663:
	.size	_ZNK6ImPoolI11ImGuiTabBarE13GetAliveCountEv, .-_ZNK6ImPoolI11ImGuiTabBarE13GetAliveCountEv
	.section	.text._ZNK6ImPoolI11ImGuiTabBarE10GetMapSizeEv,"axG",@progbits,_ZNK6ImPoolI11ImGuiTabBarE10GetMapSizeEv,comdat
	.align	2
	.weak	_ZNK6ImPoolI11ImGuiTabBarE10GetMapSizeEv
	.type	_ZNK6ImPoolI11ImGuiTabBarE10GetMapSizeEv, %function
_ZNK6ImPoolI11ImGuiTabBarE10GetMapSizeEv:
.LFB2664:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 16]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2664:
	.size	_ZNK6ImPoolI11ImGuiTabBarE10GetMapSizeEv, .-_ZNK6ImPoolI11ImGuiTabBarE10GetMapSizeEv
	.section	.text._ZN6ImPoolI11ImGuiTabBarE13TryGetMapDataEi,"axG",@progbits,_ZN6ImPoolI11ImGuiTabBarE13TryGetMapDataEi,comdat
	.align	2
	.weak	_ZN6ImPoolI11ImGuiTabBarE13TryGetMapDataEi
	.type	_ZN6ImPoolI11ImGuiTabBarE13TryGetMapDataEi, %function
_ZN6ImPoolI11ImGuiTabBarE13TryGetMapDataEi:
.LFB2665:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	add	x0, x0, 16
	ldr	w1, [sp, 20]
	bl	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEEixEi
	ldr	w0, [x0, 8]
	str	w0, [sp, 44]
	ldr	w0, [sp, 44]
	cmn	w0, #1
	bne	.L6201
	mov	x0, 0
	b	.L6202
.L6201:
	ldr	w1, [sp, 44]
	ldr	x0, [sp, 24]
	bl	_ZN6ImPoolI11ImGuiTabBarE10GetByIndexEi
	nop
.L6202:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2665:
	.size	_ZN6ImPoolI11ImGuiTabBarE13TryGetMapDataEi, .-_ZN6ImPoolI11ImGuiTabBarE13TryGetMapDataEi
	.section	.text._ZNK6ImPoolI10ImGuiTableE13GetAliveCountEv,"axG",@progbits,_ZNK6ImPoolI10ImGuiTableE13GetAliveCountEv,comdat
	.align	2
	.weak	_ZNK6ImPoolI10ImGuiTableE13GetAliveCountEv
	.type	_ZNK6ImPoolI10ImGuiTableE13GetAliveCountEv, %function
_ZNK6ImPoolI10ImGuiTableE13GetAliveCountEv:
.LFB2666:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 36]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2666:
	.size	_ZNK6ImPoolI10ImGuiTableE13GetAliveCountEv, .-_ZNK6ImPoolI10ImGuiTableE13GetAliveCountEv
	.section	.text._ZNK13ImChunkStreamI18ImGuiTableSettingsE4sizeEv,"axG",@progbits,_ZNK13ImChunkStreamI18ImGuiTableSettingsE4sizeEv,comdat
	.align	2
	.weak	_ZNK13ImChunkStreamI18ImGuiTableSettingsE4sizeEv
	.type	_ZNK13ImChunkStreamI18ImGuiTableSettingsE4sizeEv, %function
_ZNK13ImChunkStreamI18ImGuiTableSettingsE4sizeEv:
.LFB2667:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2667:
	.size	_ZNK13ImChunkStreamI18ImGuiTableSettingsE4sizeEv, .-_ZNK13ImChunkStreamI18ImGuiTableSettingsE4sizeEv
	.section	.text._ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv,"axG",@progbits,_ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv
	.type	_ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv, %function
_ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv:
.LFB2668:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	mov	x0, 4
	str	x0, [sp, 24]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	bne	.L6208
	mov	x0, 0
	b	.L6209
.L6208:
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	add	x0, x1, x0
.L6209:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2668:
	.size	_ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv, .-_ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv
	.section	.rodata
	.align	3
.LC989:
	.string	"T* ImChunkStream<T>::next_chunk(T*) [with T = ImGuiTableSettings]"
	.section	.text._ZN13ImChunkStreamI18ImGuiTableSettingsE10next_chunkEPS0_,"axG",@progbits,_ZN13ImChunkStreamI18ImGuiTableSettingsE10next_chunkEPS0_,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI18ImGuiTableSettingsE10next_chunkEPS0_
	.type	_ZN13ImChunkStreamI18ImGuiTableSettingsE10next_chunkEPS0_, %function
_ZN13ImChunkStreamI18ImGuiTableSettingsE10next_chunkEPS0_:
.LFB2669:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	mov	x0, 4
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsE5beginEv
	mov	x1, x0
	ldr	x0, [sp, 16]
	cmp	x0, x1
	bcc	.L6211
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv
	mov	x1, x0
	ldr	x0, [sp, 16]
	cmp	x0, x1
	bcc	.L6216
.L6211:
	adrp	x0, .LC989
	add	x3, x0, :lo12:.LC989
	mov	w2, 695
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC958
	add	x0, x0, :lo12:.LC958
	bl	__assert_fail
.L6216:
	ldr	x1, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsE10chunk_sizeEPKS0_
	sxtw	x0, w0
	ldr	x1, [sp, 16]
	add	x0, x1, x0
	str	x0, [sp, 16]
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv
	mov	x1, x0
	ldr	x0, [sp, 40]
	add	x0, x1, x0
	ldr	x1, [sp, 16]
	cmp	x1, x0
	cset	w0, eq
	and	w0, w0, 255
	cmp	w0, 0
	beq	.L6213
	mov	x0, 0
	b	.L6214
.L6213:
	ldr	x0, [sp, 24]
	bl	_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv
	mov	x1, x0
	ldr	x0, [sp, 16]
	cmp	x0, x1
	bcc	.L6215
	adrp	x0, .LC989
	add	x3, x0, :lo12:.LC989
	mov	w2, 695
	adrp	x0, .LC36
	add	x1, x0, :lo12:.LC36
	adrp	x0, .LC982
	add	x0, x0, :lo12:.LC982
	bl	__assert_fail
.L6215:
	ldr	x0, [sp, 16]
.L6214:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2669:
	.size	_ZN13ImChunkStreamI18ImGuiTableSettingsE10next_chunkEPS0_, .-_ZN13ImChunkStreamI18ImGuiTableSettingsE10next_chunkEPS0_
	.section	.rodata
	.align	3
.LC990:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiOldColumnData]"
	.section	.text._ZN8ImVectorI18ImGuiOldColumnDataEixEi,"axG",@progbits,_ZN8ImVectorI18ImGuiOldColumnDataEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI18ImGuiOldColumnDataEixEi
	.type	_ZN8ImVectorI18ImGuiOldColumnDataEixEi, %function
_ZN8ImVectorI18ImGuiOldColumnDataEixEi:
.LFB2670:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6218
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6221
.L6218:
	adrp	x0, .LC990
	add	x3, x0, :lo12:.LC990
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6221:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2670:
	.size	_ZN8ImVectorI18ImGuiOldColumnDataEixEi, .-_ZN8ImVectorI18ImGuiOldColumnDataEixEi
	.section	.rodata
	.align	3
.LC991:
	.string	"const T& ImVector<T>::back() const [with T = ImDrawCmd]"
	.section	.text._ZNK8ImVectorI9ImDrawCmdE4backEv,"axG",@progbits,_ZNK8ImVectorI9ImDrawCmdE4backEv,comdat
	.align	2
	.weak	_ZNK8ImVectorI9ImDrawCmdE4backEv
	.type	_ZNK8ImVectorI9ImDrawCmdE4backEv, %function
_ZNK8ImVectorI9ImDrawCmdE4backEv:
.LFB2671:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	cmp	w0, 0
	bgt	.L6223
	adrp	x0, .LC991
	add	x3, x0, :lo12:.LC991
	mov	w2, 1798
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC921
	add	x0, x0, :lo12:.LC921
	bl	__assert_fail
.L6223:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, #56
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2671:
	.size	_ZNK8ImVectorI9ImDrawCmdE4backEv, .-_ZNK8ImVectorI9ImDrawCmdE4backEv
	.section	.text._ZNK8ImVectorI9ImDrawCmdE5beginEv,"axG",@progbits,_ZNK8ImVectorI9ImDrawCmdE5beginEv,comdat
	.align	2
	.weak	_ZNK8ImVectorI9ImDrawCmdE5beginEv
	.type	_ZNK8ImVectorI9ImDrawCmdE5beginEv, %function
_ZNK8ImVectorI9ImDrawCmdE5beginEv:
.LFB2672:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x0, [x0, 8]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2672:
	.size	_ZNK8ImVectorI9ImDrawCmdE5beginEv, .-_ZNK8ImVectorI9ImDrawCmdE5beginEv
	.section	.text._ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE13size_in_bytesEv,"axG",@progbits,_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE13size_in_bytesEv,comdat
	.align	2
	.weak	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE13size_in_bytesEv
	.type	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE13size_in_bytesEv, %function
_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE13size_in_bytesEv:
.LFB2673:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	lsl	w0, w0, 4
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2673:
	.size	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE13size_in_bytesEv, .-_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE13size_in_bytesEv
	.section	.rodata
	.align	3
.LC992:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiTabItem]"
	.section	.text._ZN8ImVectorI12ImGuiTabItemEixEi,"axG",@progbits,_ZN8ImVectorI12ImGuiTabItemEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI12ImGuiTabItemEixEi
	.type	_ZN8ImVectorI12ImGuiTabItemEixEi, %function
_ZN8ImVectorI12ImGuiTabItemEixEi:
.LFB2674:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6230
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6233
.L6230:
	adrp	x0, .LC992
	add	x3, x0, :lo12:.LC992
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6233:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2674:
	.size	_ZN8ImVectorI12ImGuiTabItemEixEi, .-_ZN8ImVectorI12ImGuiTabItemEixEi
	.section	.rodata
	.align	3
.LC993:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiOldColumns]"
	.section	.text._ZN8ImVectorI15ImGuiOldColumnsEixEi,"axG",@progbits,_ZN8ImVectorI15ImGuiOldColumnsEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiOldColumnsEixEi
	.type	_ZN8ImVectorI15ImGuiOldColumnsEixEi, %function
_ZN8ImVectorI15ImGuiOldColumnsEixEi:
.LFB2675:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6235
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6238
.L6235:
	adrp	x0, .LC993
	add	x3, x0, :lo12:.LC993
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6238:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 4
	add	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2675:
	.size	_ZN8ImVectorI15ImGuiOldColumnsEixEi, .-_ZN8ImVectorI15ImGuiOldColumnsEixEi
	.section	.text._ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEi,"axG",@progbits,_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEi,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEi
	.type	_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEi, %function
_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEi:
.LFB2676:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6240
	ldr	w1, [sp, 20]
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi
.L6240:
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2676:
	.size	_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEi, .-_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEi
	.section	.rodata
	.align	3
.LC994:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiStackLevelInfo]"
	.section	.text._ZN8ImVectorI19ImGuiStackLevelInfoEixEi,"axG",@progbits,_ZN8ImVectorI19ImGuiStackLevelInfoEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	.type	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi, %function
_ZN8ImVectorI19ImGuiStackLevelInfoEixEi:
.LFB2677:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6242
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6245
.L6242:
	adrp	x0, .LC994
	add	x3, x0, :lo12:.LC994
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6245:
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 6
	add	x0, x1, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2677:
	.size	_ZN8ImVectorI19ImGuiStackLevelInfoEixEi, .-_ZN8ImVectorI19ImGuiStackLevelInfoEixEi
	.section	.text._ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEiRKS0_,"axG",@progbits,_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEiRKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEiRKS0_
	.type	_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEiRKS0_, %function
_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEiRKS0_:
.LFB2678:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	w1, [sp, 36]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	ble	.L6247
	ldr	w1, [sp, 36]
	ldr	x0, [sp, 40]
	bl	_ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi
.L6247:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	ldr	w1, [sp, 36]
	cmp	w1, w0
	ble	.L6248
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	str	w0, [sp, 60]
	b	.L6249
.L6250:
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldrsw	x0, [sp, 60]
	lsl	x0, x0, 6
	add	x0, x1, x0
	mov	x2, 64
	ldr	x1, [sp, 24]
	bl	memcpy
	ldr	w0, [sp, 60]
	add	w0, w0, 1
	str	w0, [sp, 60]
.L6249:
	ldr	w1, [sp, 60]
	ldr	w0, [sp, 36]
	cmp	w1, w0
	blt	.L6250
.L6248:
	ldr	x0, [sp, 40]
	ldr	w1, [sp, 36]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2678:
	.size	_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEiRKS0_, .-_ZN8ImVectorI19ImGuiStackLevelInfoE6resizeEiRKS0_
	.section	.text._ZN8ImVectorI6ImVec2E7reserveEi,"axG",@progbits,_ZN8ImVectorI6ImVec2E7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI6ImVec2E7reserveEi
	.type	_ZN8ImVectorI6ImVec2E7reserveEi, %function
_ZN8ImVectorI6ImVec2E7reserveEi:
.LFB2679:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6255
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6254
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6254:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6251
.L6255:
	nop
.L6251:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2679:
	.size	_ZN8ImVectorI6ImVec2E7reserveEi, .-_ZN8ImVectorI6ImVec2E7reserveEi
	.section	.text._ZNK8ImVectorI6ImVec2E14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI6ImVec2E14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI6ImVec2E14_grow_capacityEi
	.type	_ZNK8ImVectorI6ImVec2E14_grow_capacityEi, %function
_ZNK8ImVectorI6ImVec2E14_grow_capacityEi:
.LFB2680:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6257
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6258
.L6257:
	mov	w0, 8
.L6258:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6259
	ldr	w0, [sp, 28]
	b	.L6261
.L6259:
	ldr	w0, [sp, 4]
.L6261:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2680:
	.size	_ZNK8ImVectorI6ImVec2E14_grow_capacityEi, .-_ZNK8ImVectorI6ImVec2E14_grow_capacityEi
	.section	.text._ZN8ImVectorIjE7reserveEi,"axG",@progbits,_ZN8ImVectorIjE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIjE7reserveEi
	.type	_ZN8ImVectorIjE7reserveEi, %function
_ZN8ImVectorIjE7reserveEi:
.LFB2681:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6266
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 2
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6265
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6265:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6262
.L6266:
	nop
.L6262:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2681:
	.size	_ZN8ImVectorIjE7reserveEi, .-_ZN8ImVectorIjE7reserveEi
	.section	.text._ZNK8ImVectorIjE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIjE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIjE14_grow_capacityEi
	.type	_ZNK8ImVectorIjE14_grow_capacityEi, %function
_ZNK8ImVectorIjE14_grow_capacityEi:
.LFB2682:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6268
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6269
.L6268:
	mov	w0, 8
.L6269:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6270
	ldr	w0, [sp, 28]
	b	.L6272
.L6270:
	ldr	w0, [sp, 4]
.L6272:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2682:
	.size	_ZNK8ImVectorIjE14_grow_capacityEi, .-_ZNK8ImVectorIjE14_grow_capacityEi
	.section	.text._ZN8ImVectorIP10ImDrawListE7reserveEi,"axG",@progbits,_ZN8ImVectorIP10ImDrawListE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP10ImDrawListE7reserveEi
	.type	_ZN8ImVectorIP10ImDrawListE7reserveEi, %function
_ZN8ImVectorIP10ImDrawListE7reserveEi:
.LFB2733:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6277
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6276
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6276:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6273
.L6277:
	nop
.L6273:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2733:
	.size	_ZN8ImVectorIP10ImDrawListE7reserveEi, .-_ZN8ImVectorIP10ImDrawListE7reserveEi
	.section	.text._ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi
	.type	_ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi, %function
_ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi:
.LFB2734:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6279
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6280
.L6279:
	mov	w0, 8
.L6280:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6281
	ldr	w0, [sp, 28]
	b	.L6283
.L6281:
	ldr	w0, [sp, 4]
.L6283:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2734:
	.size	_ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi, .-_ZNK8ImVectorIP10ImDrawListE14_grow_capacityEi
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi
	.type	_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi, %function
_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi:
.LFB2735:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6288
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6287
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6287:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6284
.L6288:
	nop
.L6284:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2735:
	.size	_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi, .-_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi
	.section	.text._ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi
	.type	_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi, %function
_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi:
.LFB2736:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6290
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6291
.L6290:
	mov	w0, 8
.L6291:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6292
	ldr	w0, [sp, 28]
	b	.L6294
.L6292:
	ldr	w0, [sp, 4]
.L6294:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2736:
	.size	_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi, .-_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi
	.section	.text._ZN8ImVectorI10ImGuiTableEC2Ev,"axG",@progbits,_ZN8ImVectorI10ImGuiTableEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI10ImGuiTableEC2Ev
	.type	_ZN8ImVectorI10ImGuiTableEC2Ev, %function
_ZN8ImVectorI10ImGuiTableEC2Ev:
.LFB2738:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2738:
	.size	_ZN8ImVectorI10ImGuiTableEC2Ev, .-_ZN8ImVectorI10ImGuiTableEC2Ev
	.weak	_ZN8ImVectorI10ImGuiTableEC1Ev
	.set	_ZN8ImVectorI10ImGuiTableEC1Ev,_ZN8ImVectorI10ImGuiTableEC2Ev
	.section	.text._ZN8ImVectorI10ImGuiTableED2Ev,"axG",@progbits,_ZN8ImVectorI10ImGuiTableED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI10ImGuiTableED2Ev
	.type	_ZN8ImVectorI10ImGuiTableED2Ev, %function
_ZN8ImVectorI10ImGuiTableED2Ev:
.LFB2741:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2741
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6298
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6298:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2741:
	.section	.gcc_except_table
.LLSDA2741:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2741-.LLSDACSB2741
.LLSDACSB2741:
.LLSDACSE2741:
	.section	.text._ZN8ImVectorI10ImGuiTableED2Ev,"axG",@progbits,_ZN8ImVectorI10ImGuiTableED5Ev,comdat
	.size	_ZN8ImVectorI10ImGuiTableED2Ev, .-_ZN8ImVectorI10ImGuiTableED2Ev
	.weak	_ZN8ImVectorI10ImGuiTableED1Ev
	.set	_ZN8ImVectorI10ImGuiTableED1Ev,_ZN8ImVectorI10ImGuiTableED2Ev
	.section	.text._ZN8ImVectorI11ImGuiTabBarEC2Ev,"axG",@progbits,_ZN8ImVectorI11ImGuiTabBarEC5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI11ImGuiTabBarEC2Ev
	.type	_ZN8ImVectorI11ImGuiTabBarEC2Ev, %function
_ZN8ImVectorI11ImGuiTabBarEC2Ev:
.LFB2744:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	str	w1, [x0]
	ldr	x0, [sp, 8]
	str	xzr, [x0, 8]
	nop
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2744:
	.size	_ZN8ImVectorI11ImGuiTabBarEC2Ev, .-_ZN8ImVectorI11ImGuiTabBarEC2Ev
	.weak	_ZN8ImVectorI11ImGuiTabBarEC1Ev
	.set	_ZN8ImVectorI11ImGuiTabBarEC1Ev,_ZN8ImVectorI11ImGuiTabBarEC2Ev
	.section	.text._ZN8ImVectorI11ImGuiTabBarED2Ev,"axG",@progbits,_ZN8ImVectorI11ImGuiTabBarED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI11ImGuiTabBarED2Ev
	.type	_ZN8ImVectorI11ImGuiTabBarED2Ev, %function
_ZN8ImVectorI11ImGuiTabBarED2Ev:
.LFB2747:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2747
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6302
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6302:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2747:
	.section	.gcc_except_table
.LLSDA2747:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2747-.LLSDACSB2747
.LLSDACSB2747:
.LLSDACSE2747:
	.section	.text._ZN8ImVectorI11ImGuiTabBarED2Ev,"axG",@progbits,_ZN8ImVectorI11ImGuiTabBarED5Ev,comdat
	.size	_ZN8ImVectorI11ImGuiTabBarED2Ev, .-_ZN8ImVectorI11ImGuiTabBarED2Ev
	.weak	_ZN8ImVectorI11ImGuiTabBarED1Ev
	.set	_ZN8ImVectorI11ImGuiTabBarED1Ev,_ZN8ImVectorI11ImGuiTabBarED2Ev
	.section	.text._ZN8ImVectorI15ImGuiInputEventE7reserveEi,"axG",@progbits,_ZN8ImVectorI15ImGuiInputEventE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiInputEventE7reserveEi
	.type	_ZN8ImVectorI15ImGuiInputEventE7reserveEi, %function
_ZN8ImVectorI15ImGuiInputEventE7reserveEi:
.LFB2749:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6307
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6306
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6306:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6303
.L6307:
	nop
.L6303:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2749:
	.size	_ZN8ImVectorI15ImGuiInputEventE7reserveEi, .-_ZN8ImVectorI15ImGuiInputEventE7reserveEi
	.section	.text._ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi
	.type	_ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi, %function
_ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi:
.LFB2750:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6309
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6310
.L6309:
	mov	w0, 8
.L6310:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6311
	ldr	w0, [sp, 28]
	b	.L6313
.L6311:
	ldr	w0, [sp, 4]
.L6313:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2750:
	.size	_ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi, .-_ZNK8ImVectorI15ImGuiInputEventE14_grow_capacityEi
	.section	.text._ZNK8ImVectorItE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorItE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorItE14_grow_capacityEi
	.type	_ZNK8ImVectorItE14_grow_capacityEi, %function
_ZNK8ImVectorItE14_grow_capacityEi:
.LFB2751:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6315
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6316
.L6315:
	mov	w0, 8
.L6316:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6317
	ldr	w0, [sp, 28]
	b	.L6319
.L6317:
	ldr	w0, [sp, 4]
.L6319:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2751:
	.size	_ZNK8ImVectorItE14_grow_capacityEi, .-_ZNK8ImVectorItE14_grow_capacityEi
	.section	.text._ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE7reserveEi,"axG",@progbits,_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE7reserveEi
	.type	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE7reserveEi, %function
_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE7reserveEi:
.LFB2752:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6324
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 4
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6323
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6323:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6320
.L6324:
	nop
.L6320:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2752:
	.size	_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE7reserveEi, .-_ZN8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE7reserveEi
	.section	.text._ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE14_grow_capacityEi
	.type	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE14_grow_capacityEi, %function
_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE14_grow_capacityEi:
.LFB2753:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6326
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6327
.L6326:
	mov	w0, 8
.L6327:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6328
	ldr	w0, [sp, 28]
	b	.L6330
.L6328:
	ldr	w0, [sp, 4]
.L6330:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2753:
	.size	_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE14_grow_capacityEi, .-_ZNK8ImVectorIN12ImGuiStorage16ImGuiStoragePairEE14_grow_capacityEi
	.section	.text._ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi,"axG",@progbits,_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi
	.type	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi, %function
_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi:
.LFB2754:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6335
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 4
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6334
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6334:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6331
.L6335:
	nop
.L6331:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2754:
	.size	_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi, .-_ZN8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE7reserveEi
	.section	.text._ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi
	.type	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi, %function
_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi:
.LFB2755:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6337
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6338
.L6337:
	mov	w0, 8
.L6338:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6339
	ldr	w0, [sp, 28]
	b	.L6341
.L6339:
	ldr	w0, [sp, 4]
.L6341:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2755:
	.size	_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi, .-_ZNK8ImVectorIN15ImGuiTextFilter14ImGuiTextRangeEE14_grow_capacityEi
	.section	.text._ZNK8ImVectorIcE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIcE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIcE14_grow_capacityEi
	.type	_ZNK8ImVectorIcE14_grow_capacityEi, %function
_ZNK8ImVectorIcE14_grow_capacityEi:
.LFB2756:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6343
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6344
.L6343:
	mov	w0, 8
.L6344:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6345
	ldr	w0, [sp, 28]
	b	.L6347
.L6345:
	ldr	w0, [sp, 4]
.L6347:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2756:
	.size	_ZNK8ImVectorIcE14_grow_capacityEi, .-_ZNK8ImVectorIcE14_grow_capacityEi
	.section	.text._ZN8ImVectorIiE7reserveEi,"axG",@progbits,_ZN8ImVectorIiE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIiE7reserveEi
	.type	_ZN8ImVectorIiE7reserveEi, %function
_ZN8ImVectorIiE7reserveEi:
.LFB2757:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6352
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 2
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6351
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6351:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6348
.L6352:
	nop
.L6348:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2757:
	.size	_ZN8ImVectorIiE7reserveEi, .-_ZN8ImVectorIiE7reserveEi
	.section	.text._ZNK8ImVectorIiE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIiE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIiE14_grow_capacityEi
	.type	_ZNK8ImVectorIiE14_grow_capacityEi, %function
_ZNK8ImVectorIiE14_grow_capacityEi:
.LFB2758:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6354
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6355
.L6354:
	mov	w0, 8
.L6355:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6356
	ldr	w0, [sp, 28]
	b	.L6358
.L6356:
	ldr	w0, [sp, 4]
.L6358:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2758:
	.size	_ZNK8ImVectorIiE14_grow_capacityEi, .-_ZNK8ImVectorIiE14_grow_capacityEi
	.section	.text._ZN8ImVectorI20ImGuiListClipperDataE7reserveEi,"axG",@progbits,_ZN8ImVectorI20ImGuiListClipperDataE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiListClipperDataE7reserveEi
	.type	_ZN8ImVectorI20ImGuiListClipperDataE7reserveEi, %function
_ZN8ImVectorI20ImGuiListClipperDataE7reserveEi:
.LFB2759:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6363
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6362
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6362:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6359
.L6363:
	nop
.L6359:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2759:
	.size	_ZN8ImVectorI20ImGuiListClipperDataE7reserveEi, .-_ZN8ImVectorI20ImGuiListClipperDataE7reserveEi
	.section	.text._ZNK8ImVectorI20ImGuiListClipperDataE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI20ImGuiListClipperDataE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI20ImGuiListClipperDataE14_grow_capacityEi
	.type	_ZNK8ImVectorI20ImGuiListClipperDataE14_grow_capacityEi, %function
_ZNK8ImVectorI20ImGuiListClipperDataE14_grow_capacityEi:
.LFB2760:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6365
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6366
.L6365:
	mov	w0, 8
.L6366:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6367
	ldr	w0, [sp, 28]
	b	.L6369
.L6367:
	ldr	w0, [sp, 4]
.L6369:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2760:
	.size	_ZNK8ImVectorI20ImGuiListClipperDataE14_grow_capacityEi, .-_ZNK8ImVectorI20ImGuiListClipperDataE14_grow_capacityEi
	.section	.rodata
	.align	3
.LC995:
	.string	"T* ImVector<T>::insert(const T*, const T&) [with T = ImGuiListClipperRange]"
	.section	.text._ZN8ImVectorI21ImGuiListClipperRangeE6insertEPKS0_RS2_,"axG",@progbits,_ZN8ImVectorI21ImGuiListClipperRangeE6insertEPKS0_RS2_,comdat
	.align	2
	.weak	_ZN8ImVectorI21ImGuiListClipperRangeE6insertEPKS0_RS2_
	.type	_ZN8ImVectorI21ImGuiListClipperRangeE6insertEPKS0_RS2_, %function
_ZN8ImVectorI21ImGuiListClipperRangeE6insertEPKS0_RS2_:
.LFB2761:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bcc	.L6371
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bls	.L6376
.L6371:
	adrp	x0, .LC995
	add	x3, x0, :lo12:.LC995
	mov	w2, 1815
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC930
	add	x0, x0, :lo12:.LC930
	bl	__assert_fail
.L6376:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	sub	x0, x1, x0
	asr	x1, x0, 2
	mov	x0, -6148914691236517206
	movk	x0, 0xaaab, lsl 0
	mul	x0, x1, x0
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6373
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZNK8ImVectorI21ImGuiListClipperRangeE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI21ImGuiListClipperRangeE7reserveEi
.L6373:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x0, w0
	ldr	x1, [sp, 56]
	cmp	x1, x0
	bge	.L6374
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 56]
	add	x1, x0, 1
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x3, x2, x0
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x4, x2, x0
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 56]
	sub	x1, x1, x0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
.L6374:
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	mov	x2, 12
	ldr	x1, [sp, 24]
	bl	memcpy
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	add	x0, x2, x0
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2761:
	.size	_ZN8ImVectorI21ImGuiListClipperRangeE6insertEPKS0_RS2_, .-_ZN8ImVectorI21ImGuiListClipperRangeE6insertEPKS0_RS2_
	.section	.text._ZN8ImVectorI13ImGuiColorModE7reserveEi,"axG",@progbits,_ZN8ImVectorI13ImGuiColorModE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiColorModE7reserveEi
	.type	_ZN8ImVectorI13ImGuiColorModE7reserveEi, %function
_ZN8ImVectorI13ImGuiColorModE7reserveEi:
.LFB2762:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6381
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6380
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6380:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6377
.L6381:
	nop
.L6377:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2762:
	.size	_ZN8ImVectorI13ImGuiColorModE7reserveEi, .-_ZN8ImVectorI13ImGuiColorModE7reserveEi
	.section	.text._ZNK8ImVectorI13ImGuiColorModE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI13ImGuiColorModE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI13ImGuiColorModE14_grow_capacityEi
	.type	_ZNK8ImVectorI13ImGuiColorModE14_grow_capacityEi, %function
_ZNK8ImVectorI13ImGuiColorModE14_grow_capacityEi:
.LFB2763:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6383
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6384
.L6383:
	mov	w0, 8
.L6384:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6385
	ldr	w0, [sp, 28]
	b	.L6387
.L6385:
	ldr	w0, [sp, 4]
.L6387:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2763:
	.size	_ZNK8ImVectorI13ImGuiColorModE14_grow_capacityEi, .-_ZNK8ImVectorI13ImGuiColorModE14_grow_capacityEi
	.section	.text._ZN8ImVectorI13ImGuiStyleModE7reserveEi,"axG",@progbits,_ZN8ImVectorI13ImGuiStyleModE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI13ImGuiStyleModE7reserveEi
	.type	_ZN8ImVectorI13ImGuiStyleModE7reserveEi, %function
_ZN8ImVectorI13ImGuiStyleModE7reserveEi:
.LFB2764:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6392
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6391
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6391:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6388
.L6392:
	nop
.L6388:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2764:
	.size	_ZN8ImVectorI13ImGuiStyleModE7reserveEi, .-_ZN8ImVectorI13ImGuiStyleModE7reserveEi
	.section	.text._ZNK8ImVectorI13ImGuiStyleModE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI13ImGuiStyleModE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI13ImGuiStyleModE14_grow_capacityEi
	.type	_ZNK8ImVectorI13ImGuiStyleModE14_grow_capacityEi, %function
_ZNK8ImVectorI13ImGuiStyleModE14_grow_capacityEi:
.LFB2765:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6394
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6395
.L6394:
	mov	w0, 8
.L6395:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6396
	ldr	w0, [sp, 28]
	b	.L6398
.L6396:
	ldr	w0, [sp, 4]
.L6398:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2765:
	.size	_ZNK8ImVectorI13ImGuiStyleModE14_grow_capacityEi, .-_ZNK8ImVectorI13ImGuiStyleModE14_grow_capacityEi
	.section	.text._ZN8ImVectorI15ImGuiOldColumnsE5clearEv,"axG",@progbits,_ZN8ImVectorI15ImGuiOldColumnsE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI15ImGuiOldColumnsE5clearEv
	.type	_ZN8ImVectorI15ImGuiOldColumnsE5clearEv, %function
_ZN8ImVectorI15ImGuiOldColumnsE5clearEv:
.LFB2766:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6401
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L6401:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2766:
	.size	_ZN8ImVectorI15ImGuiOldColumnsE5clearEv, .-_ZN8ImVectorI15ImGuiOldColumnsE5clearEv
	.section	.rodata
	.align	3
.LC996:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiTable]"
	.section	.text._ZN8ImVectorI10ImGuiTableEixEi,"axG",@progbits,_ZN8ImVectorI10ImGuiTableEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI10ImGuiTableEixEi
	.type	_ZN8ImVectorI10ImGuiTableEixEi, %function
_ZN8ImVectorI10ImGuiTableEixEi:
.LFB2767:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6403
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6406
.L6403:
	adrp	x0, .LC996
	add	x3, x0, :lo12:.LC996
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6406:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 4
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2767:
	.size	_ZN8ImVectorI10ImGuiTableEixEi, .-_ZN8ImVectorI10ImGuiTableEixEi
	.section	.text._ZN8ImVectorI16ImGuiContextHookE7reserveEi,"axG",@progbits,_ZN8ImVectorI16ImGuiContextHookE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI16ImGuiContextHookE7reserveEi
	.type	_ZN8ImVectorI16ImGuiContextHookE7reserveEi, %function
_ZN8ImVectorI16ImGuiContextHookE7reserveEi:
.LFB2768:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6411
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 5
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6410
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 5
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6410:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6407
.L6411:
	nop
.L6407:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2768:
	.size	_ZN8ImVectorI16ImGuiContextHookE7reserveEi, .-_ZN8ImVectorI16ImGuiContextHookE7reserveEi
	.section	.text._ZNK8ImVectorI16ImGuiContextHookE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI16ImGuiContextHookE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI16ImGuiContextHookE14_grow_capacityEi
	.type	_ZNK8ImVectorI16ImGuiContextHookE14_grow_capacityEi, %function
_ZNK8ImVectorI16ImGuiContextHookE14_grow_capacityEi:
.LFB2769:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6413
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6414
.L6413:
	mov	w0, 8
.L6414:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6415
	ldr	w0, [sp, 28]
	b	.L6417
.L6415:
	ldr	w0, [sp, 4]
.L6417:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2769:
	.size	_ZNK8ImVectorI16ImGuiContextHookE14_grow_capacityEi, .-_ZNK8ImVectorI16ImGuiContextHookE14_grow_capacityEi
	.section	.text._ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi,"axG",@progbits,_ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi
	.type	_ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi, %function
_ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi:
.LFB2770:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6422
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 4
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6421
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 4
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6421:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6418
.L6422:
	nop
.L6418:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2770:
	.size	_ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi, .-_ZN8ImVectorI19ImGuiKeyRoutingDataE7reserveEi
	.section	.text._ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi
	.type	_ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi, %function
_ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi:
.LFB2771:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6424
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6425
.L6424:
	mov	w0, 8
.L6425:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6426
	ldr	w0, [sp, 28]
	b	.L6428
.L6426:
	ldr	w0, [sp, 4]
.L6428:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2771:
	.size	_ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi, .-_ZNK8ImVectorI19ImGuiKeyRoutingDataE14_grow_capacityEi
	.section	.text._ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi,"axG",@progbits,_ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi
	.type	_ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi, %function
_ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi:
.LFB2772:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6433
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, x1
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6432
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, x1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6432:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6429
.L6433:
	nop
.L6429:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2772:
	.size	_ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi, .-_ZN8ImVectorI20ImGuiWindowStackDataE7reserveEi
	.section	.text._ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi
	.type	_ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi, %function
_ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi:
.LFB2773:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6435
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6436
.L6435:
	mov	w0, 8
.L6436:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6437
	ldr	w0, [sp, 28]
	b	.L6439
.L6437:
	ldr	w0, [sp, 4]
.L6439:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2773:
	.size	_ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi, .-_ZNK8ImVectorI20ImGuiWindowStackDataE14_grow_capacityEi
	.section	.text._ZN8ImVectorI14ImGuiPopupDataE7reserveEi,"axG",@progbits,_ZN8ImVectorI14ImGuiPopupDataE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiPopupDataE7reserveEi
	.type	_ZN8ImVectorI14ImGuiPopupDataE7reserveEi, %function
_ZN8ImVectorI14ImGuiPopupDataE7reserveEi:
.LFB2774:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6444
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6443
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6443:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6440
.L6444:
	nop
.L6440:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2774:
	.size	_ZN8ImVectorI14ImGuiPopupDataE7reserveEi, .-_ZN8ImVectorI14ImGuiPopupDataE7reserveEi
	.section	.text._ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi
	.type	_ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi, %function
_ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi:
.LFB2775:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6446
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6447
.L6446:
	mov	w0, 8
.L6447:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6448
	ldr	w0, [sp, 28]
	b	.L6450
.L6448:
	ldr	w0, [sp, 4]
.L6450:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2775:
	.size	_ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi, .-_ZNK8ImVectorI14ImGuiPopupDataE14_grow_capacityEi
	.section	.text._ZN8ImVectorI14ImGuiGroupDataE7reserveEi,"axG",@progbits,_ZN8ImVectorI14ImGuiGroupDataE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI14ImGuiGroupDataE7reserveEi
	.type	_ZN8ImVectorI14ImGuiGroupDataE7reserveEi, %function
_ZN8ImVectorI14ImGuiGroupDataE7reserveEi:
.LFB2776:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6455
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 4
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6454
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 1
	add	x0, x0, x1
	lsl	x0, x0, 4
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6454:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6451
.L6455:
	nop
.L6451:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2776:
	.size	_ZN8ImVectorI14ImGuiGroupDataE7reserveEi, .-_ZN8ImVectorI14ImGuiGroupDataE7reserveEi
	.section	.text._ZNK8ImVectorI14ImGuiGroupDataE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI14ImGuiGroupDataE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI14ImGuiGroupDataE14_grow_capacityEi
	.type	_ZNK8ImVectorI14ImGuiGroupDataE14_grow_capacityEi, %function
_ZNK8ImVectorI14ImGuiGroupDataE14_grow_capacityEi:
.LFB2777:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6457
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6458
.L6457:
	mov	w0, 8
.L6458:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6459
	ldr	w0, [sp, 28]
	b	.L6461
.L6459:
	ldr	w0, [sp, 4]
.L6461:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2777:
	.size	_ZNK8ImVectorI14ImGuiGroupDataE14_grow_capacityEi, .-_ZNK8ImVectorI14ImGuiGroupDataE14_grow_capacityEi
	.section	.text._ZN8ImVectorIP14ImGuiViewportPE7reserveEi,"axG",@progbits,_ZN8ImVectorIP14ImGuiViewportPE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP14ImGuiViewportPE7reserveEi
	.type	_ZN8ImVectorIP14ImGuiViewportPE7reserveEi, %function
_ZN8ImVectorIP14ImGuiViewportPE7reserveEi:
.LFB2778:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6466
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6465
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6465:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6462
.L6466:
	nop
.L6462:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2778:
	.size	_ZN8ImVectorIP14ImGuiViewportPE7reserveEi, .-_ZN8ImVectorIP14ImGuiViewportPE7reserveEi
	.section	.text._ZNK8ImVectorIP14ImGuiViewportPE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIP14ImGuiViewportPE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIP14ImGuiViewportPE14_grow_capacityEi
	.type	_ZNK8ImVectorIP14ImGuiViewportPE14_grow_capacityEi, %function
_ZNK8ImVectorIP14ImGuiViewportPE14_grow_capacityEi:
.LFB2779:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6468
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6469
.L6468:
	mov	w0, 8
.L6469:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6470
	ldr	w0, [sp, 28]
	b	.L6472
.L6470:
	ldr	w0, [sp, 4]
.L6472:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2779:
	.size	_ZNK8ImVectorIP14ImGuiViewportPE14_grow_capacityEi, .-_ZNK8ImVectorIP14ImGuiViewportPE14_grow_capacityEi
	.section	.text._Z9IM_DELETEI11ImGuiWindowEvPT_,"axG",@progbits,_Z9IM_DELETEI11ImGuiWindowEvPT_,comdat
	.align	2
	.weak	_Z9IM_DELETEI11ImGuiWindowEvPT_
	.type	_Z9IM_DELETEI11ImGuiWindowEvPT_, %function
_Z9IM_DELETEI11ImGuiWindowEvPT_:
.LFB2780:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L6475
	ldr	x0, [sp, 24]
	bl	_ZN11ImGuiWindowD1Ev
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui7MemFreeEPv
.L6475:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2780:
	.size	_Z9IM_DELETEI11ImGuiWindowEvPT_, .-_Z9IM_DELETEI11ImGuiWindowEvPT_
	.section	.text._Z9IM_DELETEI14ImGuiViewportPEvPT_,"axG",@progbits,_Z9IM_DELETEI14ImGuiViewportPEvPT_,comdat
	.align	2
	.weak	_Z9IM_DELETEI14ImGuiViewportPEvPT_
	.type	_Z9IM_DELETEI14ImGuiViewportPEvPT_, %function
_Z9IM_DELETEI14ImGuiViewportPEvPT_:
.LFB2781:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	cmp	x0, 0
	beq	.L6478
	ldr	x0, [sp, 24]
	bl	_ZN14ImGuiViewportPD1Ev
	ldr	x0, [sp, 24]
	bl	_ZN5ImGui7MemFreeEPv
.L6478:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2781:
	.size	_Z9IM_DELETEI14ImGuiViewportPEvPT_, .-_Z9IM_DELETEI14ImGuiViewportPEvPT_
	.section	.text._ZN8ImVectorIP14ImGuiViewportPE5clearEv,"axG",@progbits,_ZN8ImVectorIP14ImGuiViewportPE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorIP14ImGuiViewportPE5clearEv
	.type	_ZN8ImVectorIP14ImGuiViewportPE5clearEv, %function
_ZN8ImVectorIP14ImGuiViewportPE5clearEv:
.LFB2782:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6481
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L6481:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2782:
	.size	_ZN8ImVectorIP14ImGuiViewportPE5clearEv, .-_ZN8ImVectorIP14ImGuiViewportPE5clearEv
	.section	.rodata
	.align	3
.LC997:
	.string	"T& ImVector<T>::operator[](int) [with T = ImGuiTabBar]"
	.section	.text._ZN8ImVectorI11ImGuiTabBarEixEi,"axG",@progbits,_ZN8ImVectorI11ImGuiTabBarEixEi,comdat
	.align	2
	.weak	_ZN8ImVectorI11ImGuiTabBarEixEi
	.type	_ZN8ImVectorI11ImGuiTabBarEixEi, %function
_ZN8ImVectorI11ImGuiTabBarEixEi:
.LFB2783:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	w0, [sp, 20]
	cmp	w0, 0
	blt	.L6483
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	blt	.L6486
.L6483:
	adrp	x0, .LC997
	add	x3, x0, :lo12:.LC997
	mov	w2, 1788
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC923
	add	x0, x0, :lo12:.LC923
	bl	__assert_fail
.L6486:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 2
	add	x0, x0, x1
	lsl	x0, x0, 2
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2783:
	.size	_ZN8ImVectorI11ImGuiTabBarEixEi, .-_ZN8ImVectorI11ImGuiTabBarEixEi
	.section	.text._ZN8ImVectorI12ImGuiTabItemED2Ev,"axG",@progbits,_ZN8ImVectorI12ImGuiTabItemED5Ev,comdat
	.align	2
	.weak	_ZN8ImVectorI12ImGuiTabItemED2Ev
	.type	_ZN8ImVectorI12ImGuiTabItemED2Ev, %function
_ZN8ImVectorI12ImGuiTabItemED2Ev:
.LFB2785:
	.cfi_startproc
	.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
	.cfi_lsda 0x1b,.LLSDA2785
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6489
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6489:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2785:
	.section	.gcc_except_table
.LLSDA2785:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE2785-.LLSDACSB2785
.LLSDACSB2785:
.LLSDACSE2785:
	.section	.text._ZN8ImVectorI12ImGuiTabItemED2Ev,"axG",@progbits,_ZN8ImVectorI12ImGuiTabItemED5Ev,comdat
	.size	_ZN8ImVectorI12ImGuiTabItemED2Ev, .-_ZN8ImVectorI12ImGuiTabItemED2Ev
	.weak	_ZN8ImVectorI12ImGuiTabItemED1Ev
	.set	_ZN8ImVectorI12ImGuiTabItemED1Ev,_ZN8ImVectorI12ImGuiTabItemED2Ev
	.section	.text._ZN8ImVectorI11ImGuiTabBarE5clearEv,"axG",@progbits,_ZN8ImVectorI11ImGuiTabBarE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI11ImGuiTabBarE5clearEv
	.type	_ZN8ImVectorI11ImGuiTabBarE5clearEv, %function
_ZN8ImVectorI11ImGuiTabBarE5clearEv:
.LFB2787:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6492
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L6492:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2787:
	.size	_ZN8ImVectorI11ImGuiTabBarE5clearEv, .-_ZN8ImVectorI11ImGuiTabBarE5clearEv
	.section	.text._ZN8ImVectorI20ImGuiListClipperDataE5clearEv,"axG",@progbits,_ZN8ImVectorI20ImGuiListClipperDataE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiListClipperDataE5clearEv
	.type	_ZN8ImVectorI20ImGuiListClipperDataE5clearEv, %function
_ZN8ImVectorI20ImGuiListClipperDataE5clearEv:
.LFB2788:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6495
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L6495:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2788:
	.size	_ZN8ImVectorI20ImGuiListClipperDataE5clearEv, .-_ZN8ImVectorI20ImGuiListClipperDataE5clearEv
	.section	.text._ZN8ImVectorI10ImGuiTableE5clearEv,"axG",@progbits,_ZN8ImVectorI10ImGuiTableE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI10ImGuiTableE5clearEv
	.type	_ZN8ImVectorI10ImGuiTableE5clearEv, %function
_ZN8ImVectorI10ImGuiTableE5clearEv:
.LFB2789:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6498
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L6498:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2789:
	.size	_ZN8ImVectorI10ImGuiTableE5clearEv, .-_ZN8ImVectorI10ImGuiTableE5clearEv
	.section	.text._ZN8ImVectorI18ImGuiTableTempDataE5clearEv,"axG",@progbits,_ZN8ImVectorI18ImGuiTableTempDataE5clearEv,comdat
	.align	2
	.weak	_ZN8ImVectorI18ImGuiTableTempDataE5clearEv
	.type	_ZN8ImVectorI18ImGuiTableTempDataE5clearEv, %function
_ZN8ImVectorI18ImGuiTableTempDataE5clearEv:
.LFB2790:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6501
	ldr	x0, [sp, 24]
	str	wzr, [x0, 4]
	ldr	x0, [sp, 24]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 24]
	str	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
	ldr	x0, [sp, 24]
	str	xzr, [x0, 8]
.L6501:
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2790:
	.size	_ZN8ImVectorI18ImGuiTableTempDataE5clearEv, .-_ZN8ImVectorI18ImGuiTableTempDataE5clearEv
	.section	.text._ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi
	.type	_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi, %function
_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi:
.LFB2791:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6503
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6504
.L6503:
	mov	w0, 8
.L6504:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6505
	ldr	w0, [sp, 28]
	b	.L6507
.L6505:
	ldr	w0, [sp, 4]
.L6507:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2791:
	.size	_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi, .-_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi
	.section	.text._ZN8ImVectorI9ImDrawCmdE9push_backERKS0_,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdE9push_backERKS0_,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdE9push_backERKS0_
	.type	_ZN8ImVectorI9ImDrawCmdE9push_backERKS0_, %function
_ZN8ImVectorI9ImDrawCmdE9push_backERKS0_:
.LFB2792:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	x1, [sp, 16]
	ldr	x0, [sp, 24]
	ldr	w1, [x0]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6509
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 24]
	bl	_ZN8ImVectorI9ImDrawCmdE7reserveEi
.L6509:
	ldr	x0, [sp, 24]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	mov	x2, 56
	ldr	x1, [sp, 16]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 24]
	str	w1, [x0]
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2792:
	.size	_ZN8ImVectorI9ImDrawCmdE9push_backERKS0_, .-_ZN8ImVectorI9ImDrawCmdE9push_backERKS0_
	.section	.rodata
	.align	3
.LC998:
	.string	"T* ImVector<T>::insert(const T*, const T&) [with T = ImDrawCmd]"
	.section	.text._ZN8ImVectorI9ImDrawCmdE6insertEPKS0_RS2_,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdE6insertEPKS0_RS2_,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdE6insertEPKS0_RS2_
	.type	_ZN8ImVectorI9ImDrawCmdE6insertEPKS0_RS2_, %function
_ZN8ImVectorI9ImDrawCmdE6insertEPKS0_RS2_:
.LFB2793:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bcc	.L6511
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bls	.L6516
.L6511:
	adrp	x0, .LC998
	add	x3, x0, :lo12:.LC998
	mov	w2, 1815
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC930
	add	x0, x0, :lo12:.LC930
	bl	__assert_fail
.L6516:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	sub	x0, x1, x0
	asr	x1, x0, 3
	mov	x0, 28087
	movk	x0, 0xb6db, lsl 16
	movk	x0, 0xdb6d, lsl 32
	movk	x0, 0x6db6, lsl 48
	mul	x0, x1, x0
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6513
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorI9ImDrawCmdE7reserveEi
.L6513:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x0, w0
	ldr	x1, [sp, 56]
	cmp	x1, x0
	bge	.L6514
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x0, [sp, 56]
	add	x1, x0, 1
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x3, x2, x0
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x4, x2, x0
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 56]
	sub	x1, x1, x0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
.L6514:
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	mov	x2, 56
	ldr	x1, [sp, 24]
	bl	memcpy
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	x2, [x0, 8]
	ldr	x1, [sp, 56]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	add	x0, x2, x0
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2793:
	.size	_ZN8ImVectorI9ImDrawCmdE6insertEPKS0_RS2_, .-_ZN8ImVectorI9ImDrawCmdE6insertEPKS0_RS2_
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv:
.LFB2794:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	sxtw	x0, w0
	add	x0, x1, x0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2794:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsE3endEv
	.section	.rodata
	.align	3
.LC999:
	.string	"T* ImVector<T>::insert(const T*, const T&) [with T = ImGuiWindow*]"
	.section	.text._ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_,"axG",@progbits,_ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_,comdat
	.align	2
	.weak	_ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_
	.type	_ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_, %function
_ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_:
.LFB2795:
	.cfi_startproc
	stp	x29, x30, [sp, -64]!
	.cfi_def_cfa_offset 64
	.cfi_offset 29, -64
	.cfi_offset 30, -56
	mov	x29, sp
	str	x0, [sp, 40]
	str	x1, [sp, 32]
	str	x2, [sp, 24]
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bcc	.L6520
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 32]
	cmp	x1, x0
	bls	.L6525
.L6520:
	adrp	x0, .LC999
	add	x3, x0, :lo12:.LC999
	mov	w2, 1815
	adrp	x0, .LC33
	add	x1, x0, :lo12:.LC33
	adrp	x0, .LC930
	add	x0, x0, :lo12:.LC930
	bl	__assert_fail
.L6525:
	ldr	x0, [sp, 40]
	ldr	x0, [x0, 8]
	ldr	x1, [sp, 32]
	sub	x0, x1, x0
	asr	x0, x0, 3
	str	x0, [sp, 56]
	ldr	x0, [sp, 40]
	ldr	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	w0, [x0, 4]
	cmp	w1, w0
	bne	.L6522
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w0, w0, 1
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZNK8ImVectorIP11ImGuiWindowE14_grow_capacityEi
	mov	w1, w0
	ldr	x0, [sp, 40]
	bl	_ZN8ImVectorIP11ImGuiWindowE7reserveEi
.L6522:
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x0, w0
	ldr	x1, [sp, 56]
	cmp	x1, x0
	bge	.L6523
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 56]
	add	x0, x0, 1
	lsl	x0, x0, 3
	add	x3, x1, x0
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 56]
	lsl	x0, x0, 3
	add	x4, x1, x0
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	sxtw	x1, w0
	ldr	x0, [sp, 56]
	sub	x0, x1, x0
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x4
	mov	x0, x3
	bl	memmove
.L6523:
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 56]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldr	x1, [sp, 24]
	ldr	x1, [x1]
	str	x1, [x0]
	ldr	x0, [sp, 40]
	ldr	w0, [x0]
	add	w1, w0, 1
	ldr	x0, [sp, 40]
	str	w1, [x0]
	ldr	x0, [sp, 40]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 56]
	lsl	x0, x0, 3
	add	x0, x1, x0
	ldp	x29, x30, [sp], 64
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2795:
	.size	_ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_, .-_ZN8ImVectorIP11ImGuiWindowE6insertEPKS1_RS3_
	.section	.text._ZN8ImVectorIfE7reserveEi,"axG",@progbits,_ZN8ImVectorIfE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIfE7reserveEi
	.type	_ZN8ImVectorIfE7reserveEi, %function
_ZN8ImVectorIfE7reserveEi:
.LFB2796:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6530
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 2
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6529
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 2
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6529:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6526
.L6530:
	nop
.L6526:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2796:
	.size	_ZN8ImVectorIfE7reserveEi, .-_ZN8ImVectorIfE7reserveEi
	.section	.text._ZNK8ImVectorIfE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIfE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIfE14_grow_capacityEi
	.type	_ZNK8ImVectorIfE14_grow_capacityEi, %function
_ZNK8ImVectorIfE14_grow_capacityEi:
.LFB2797:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6532
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6533
.L6532:
	mov	w0, 8
.L6533:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6534
	ldr	w0, [sp, 28]
	b	.L6536
.L6534:
	ldr	w0, [sp, 4]
.L6536:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2797:
	.size	_ZNK8ImVectorIfE14_grow_capacityEi, .-_ZNK8ImVectorIfE14_grow_capacityEi
	.section	.text._ZN8ImVectorIP6ImFontE7reserveEi,"axG",@progbits,_ZN8ImVectorIP6ImFontE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIP6ImFontE7reserveEi
	.type	_ZN8ImVectorIP6ImFontE7reserveEi, %function
_ZN8ImVectorIP6ImFontE7reserveEi:
.LFB2798:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6541
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6540
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 3
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6540:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6537
.L6541:
	nop
.L6537:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2798:
	.size	_ZN8ImVectorIP6ImFontE7reserveEi, .-_ZN8ImVectorIP6ImFontE7reserveEi
	.section	.text._ZNK8ImVectorIP6ImFontE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIP6ImFontE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIP6ImFontE14_grow_capacityEi
	.type	_ZNK8ImVectorIP6ImFontE14_grow_capacityEi, %function
_ZNK8ImVectorIP6ImFontE14_grow_capacityEi:
.LFB2799:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6543
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6544
.L6543:
	mov	w0, 8
.L6544:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6545
	ldr	w0, [sp, 28]
	b	.L6547
.L6545:
	ldr	w0, [sp, 4]
.L6547:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2799:
	.size	_ZNK8ImVectorIP6ImFontE14_grow_capacityEi, .-_ZNK8ImVectorIP6ImFontE14_grow_capacityEi
	.section	.text._ZN10ImBitArrayILi652ELi0EE12ClearAllBitsEv,"axG",@progbits,_ZN10ImBitArrayILi652ELi0EE12ClearAllBitsEv,comdat
	.align	2
	.weak	_ZN10ImBitArrayILi652ELi0EE12ClearAllBitsEv
	.type	_ZN10ImBitArrayILi652ELi0EE12ClearAllBitsEv, %function
_ZN10ImBitArrayILi652ELi0EE12ClearAllBitsEv:
.LFB2800:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	ldr	x0, [sp, 24]
	mov	x2, 84
	mov	w1, 0
	bl	memset
	nop
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2800:
	.size	_ZN10ImBitArrayILi652ELi0EE12ClearAllBitsEv, .-_ZN10ImBitArrayILi652ELi0EE12ClearAllBitsEv
	.section	.text._ZN8ImVectorIhE7reserveEi,"axG",@progbits,_ZN8ImVectorIhE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorIhE7reserveEi
	.type	_ZN8ImVectorIhE7reserveEi, %function
_ZN8ImVectorIhE7reserveEi:
.LFB2801:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6553
	ldrsw	x0, [sp, 20]
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6552
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6552:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6549
.L6553:
	nop
.L6549:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2801:
	.size	_ZN8ImVectorIhE7reserveEi, .-_ZN8ImVectorIhE7reserveEi
	.section	.text._ZNK8ImVectorIhE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorIhE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorIhE14_grow_capacityEi
	.type	_ZNK8ImVectorIhE14_grow_capacityEi, %function
_ZNK8ImVectorIhE14_grow_capacityEi:
.LFB2802:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6555
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6556
.L6555:
	mov	w0, 8
.L6556:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6557
	ldr	w0, [sp, 28]
	b	.L6559
.L6557:
	ldr	w0, [sp, 4]
.L6559:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2802:
	.size	_ZNK8ImVectorIhE14_grow_capacityEi, .-_ZNK8ImVectorIhE14_grow_capacityEi
	.section	.text._ZN13ImChunkStreamI19ImGuiWindowSettingsE10chunk_sizeEPKS0_,"axG",@progbits,_ZN13ImChunkStreamI19ImGuiWindowSettingsE10chunk_sizeEPKS0_,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10chunk_sizeEPKS0_
	.type	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10chunk_sizeEPKS0_, %function
_ZN13ImChunkStreamI19ImGuiWindowSettingsE10chunk_sizeEPKS0_:
.LFB2803:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp]
	sub	x0, x0, #4
	ldr	w0, [x0]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2803:
	.size	_ZN13ImChunkStreamI19ImGuiWindowSettingsE10chunk_sizeEPKS0_, .-_ZN13ImChunkStreamI19ImGuiWindowSettingsE10chunk_sizeEPKS0_
	.section	.text._ZN8ImVectorI20ImGuiSettingsHandlerE7reserveEi,"axG",@progbits,_ZN8ImVectorI20ImGuiSettingsHandlerE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI20ImGuiSettingsHandlerE7reserveEi
	.type	_ZN8ImVectorI20ImGuiSettingsHandlerE7reserveEi, %function
_ZN8ImVectorI20ImGuiSettingsHandlerE7reserveEi:
.LFB2804:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6566
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6565
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	add	x0, x0, x1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6565:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6562
.L6566:
	nop
.L6562:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2804:
	.size	_ZN8ImVectorI20ImGuiSettingsHandlerE7reserveEi, .-_ZN8ImVectorI20ImGuiSettingsHandlerE7reserveEi
	.section	.text._ZNK8ImVectorI20ImGuiSettingsHandlerE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI20ImGuiSettingsHandlerE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI20ImGuiSettingsHandlerE14_grow_capacityEi
	.type	_ZNK8ImVectorI20ImGuiSettingsHandlerE14_grow_capacityEi, %function
_ZNK8ImVectorI20ImGuiSettingsHandlerE14_grow_capacityEi:
.LFB2805:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6568
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6569
.L6568:
	mov	w0, 8
.L6569:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6570
	ldr	w0, [sp, 28]
	b	.L6572
.L6570:
	ldr	w0, [sp, 4]
.L6572:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2805:
	.size	_ZNK8ImVectorI20ImGuiSettingsHandlerE14_grow_capacityEi, .-_ZNK8ImVectorI20ImGuiSettingsHandlerE14_grow_capacityEi
	.section	.text._ZN6ImPoolI11ImGuiTabBarE10GetByIndexEi,"axG",@progbits,_ZN6ImPoolI11ImGuiTabBarE10GetByIndexEi,comdat
	.align	2
	.weak	_ZN6ImPoolI11ImGuiTabBarE10GetByIndexEi
	.type	_ZN6ImPoolI11ImGuiTabBarE10GetByIndexEi, %function
_ZN6ImPoolI11ImGuiTabBarE10GetByIndexEi:
.LFB2806:
	.cfi_startproc
	stp	x29, x30, [sp, -32]!
	.cfi_def_cfa_offset 32
	.cfi_offset 29, -32
	.cfi_offset 30, -24
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	bl	_ZN8ImVectorI11ImGuiTabBarEixEi
	ldp	x29, x30, [sp], 32
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2806:
	.size	_ZN6ImPoolI11ImGuiTabBarE10GetByIndexEi, .-_ZN6ImPoolI11ImGuiTabBarE10GetByIndexEi
	.section	.text._ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv,"axG",@progbits,_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv
	.type	_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv, %function
_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv:
.LFB2807:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	ldr	x0, [sp, 8]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 8]
	ldr	w0, [x0]
	sxtw	x0, w0
	add	x0, x1, x0
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2807:
	.size	_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv, .-_ZN13ImChunkStreamI18ImGuiTableSettingsE3endEv
	.section	.text._ZN13ImChunkStreamI18ImGuiTableSettingsE10chunk_sizeEPKS0_,"axG",@progbits,_ZN13ImChunkStreamI18ImGuiTableSettingsE10chunk_sizeEPKS0_,comdat
	.align	2
	.weak	_ZN13ImChunkStreamI18ImGuiTableSettingsE10chunk_sizeEPKS0_
	.type	_ZN13ImChunkStreamI18ImGuiTableSettingsE10chunk_sizeEPKS0_, %function
_ZN13ImChunkStreamI18ImGuiTableSettingsE10chunk_sizeEPKS0_:
.LFB2808:
	.cfi_startproc
	sub	sp, sp, #16
	.cfi_def_cfa_offset 16
	str	x0, [sp, 8]
	str	x1, [sp]
	ldr	x0, [sp]
	sub	x0, x0, #4
	ldr	w0, [x0]
	add	sp, sp, 16
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2808:
	.size	_ZN13ImChunkStreamI18ImGuiTableSettingsE10chunk_sizeEPKS0_, .-_ZN13ImChunkStreamI18ImGuiTableSettingsE10chunk_sizeEPKS0_
	.section	.text._ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi,"axG",@progbits,_ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi
	.type	_ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi, %function
_ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi:
.LFB2809:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6583
	ldrsw	x0, [sp, 20]
	lsl	x0, x0, 6
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6582
	ldr	x0, [sp, 24]
	ldr	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x0, w0
	lsl	x0, x0, 6
	mov	x2, x0
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6582:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6579
.L6583:
	nop
.L6579:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2809:
	.size	_ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi, .-_ZN8ImVectorI19ImGuiStackLevelInfoE7reserveEi
	.section	.text._ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi
	.type	_ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi, %function
_ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi:
.LFB2810:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6585
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6586
.L6585:
	mov	w0, 8
.L6586:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6587
	ldr	w0, [sp, 28]
	b	.L6589
.L6587:
	ldr	w0, [sp, 4]
.L6589:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2810:
	.size	_ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi, .-_ZNK8ImVectorI19ImGuiStackLevelInfoE14_grow_capacityEi
	.section	.text._ZN8ImVectorI9ImDrawCmdE7reserveEi,"axG",@progbits,_ZN8ImVectorI9ImDrawCmdE7reserveEi,comdat
	.align	2
	.weak	_ZN8ImVectorI9ImDrawCmdE7reserveEi
	.type	_ZN8ImVectorI9ImDrawCmdE7reserveEi, %function
_ZN8ImVectorI9ImDrawCmdE7reserveEi:
.LFB2840:
	.cfi_startproc
	stp	x29, x30, [sp, -48]!
	.cfi_def_cfa_offset 48
	.cfi_offset 29, -48
	.cfi_offset 30, -40
	mov	x29, sp
	str	x0, [sp, 24]
	str	w1, [sp, 20]
	ldr	x0, [sp, 24]
	ldr	w0, [x0, 4]
	ldr	w1, [sp, 20]
	cmp	w1, w0
	ble	.L6594
	ldrsw	x1, [sp, 20]
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	bl	_ZN5ImGui8MemAllocEm
	str	x0, [sp, 40]
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	cmp	x0, 0
	beq	.L6593
	ldr	x0, [sp, 24]
	ldr	x3, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w0, [x0]
	sxtw	x1, w0
	mov	x0, x1
	lsl	x0, x0, 3
	sub	x0, x0, x1
	lsl	x0, x0, 3
	mov	x2, x0
	mov	x1, x3
	ldr	x0, [sp, 40]
	bl	memcpy
	ldr	x0, [sp, 24]
	ldr	x0, [x0, 8]
	bl	_ZN5ImGui7MemFreeEPv
.L6593:
	ldr	x0, [sp, 24]
	ldr	x1, [sp, 40]
	str	x1, [x0, 8]
	ldr	x0, [sp, 24]
	ldr	w1, [sp, 20]
	str	w1, [x0, 4]
	b	.L6590
.L6594:
	nop
.L6590:
	ldp	x29, x30, [sp], 48
	.cfi_restore 30
	.cfi_restore 29
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2840:
	.size	_ZN8ImVectorI9ImDrawCmdE7reserveEi, .-_ZN8ImVectorI9ImDrawCmdE7reserveEi
	.section	.text._ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi,"axG",@progbits,_ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi,comdat
	.align	2
	.weak	_ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi
	.type	_ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi, %function
_ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi:
.LFB2841:
	.cfi_startproc
	sub	sp, sp, #32
	.cfi_def_cfa_offset 32
	str	x0, [sp, 8]
	str	w1, [sp, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	cmp	w0, 0
	beq	.L6596
	ldr	x0, [sp, 8]
	ldr	w1, [x0, 4]
	ldr	x0, [sp, 8]
	ldr	w0, [x0, 4]
	lsr	w2, w0, 31
	add	w0, w2, w0
	asr	w0, w0, 1
	add	w0, w1, w0
	b	.L6597
.L6596:
	mov	w0, 8
.L6597:
	str	w0, [sp, 28]
	ldr	w1, [sp, 28]
	ldr	w0, [sp, 4]
	cmp	w1, w0
	ble	.L6598
	ldr	w0, [sp, 28]
	b	.L6600
.L6598:
	ldr	w0, [sp, 4]
.L6600:
	add	sp, sp, 32
	.cfi_def_cfa_offset 0
	ret
	.cfi_endproc
.LFE2841:
	.size	_ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi, .-_ZNK8ImVectorI9ImDrawCmdE14_grow_capacityEi
	.section	.rodata
	.align	3
.LC84:
	.word	-536870912
	.word	1072693245
	.align	4
.LC158:
	.xword	0
	.xword	0
	.xword	0
	.xword	0
	.hidden	DW.ref.__gxx_personality_v0
	.weak	DW.ref.__gxx_personality_v0
	.section	.data.rel.local.DW.ref.__gxx_personality_v0,"awG",@progbits,DW.ref.__gxx_personality_v0,comdat
	.align	3
	.type	DW.ref.__gxx_personality_v0, %object
	.size	DW.ref.__gxx_personality_v0, 8
DW.ref.__gxx_personality_v0:
	.xword	__gxx_personality_v0
	.ident	"GCC: (Ubuntu 11.3.0-1ubuntu1~22.04) 11.3.0"
	.section	.note.GNU-stack,"",@progbits
